(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./libs/integration-ai/src/index.ts":
/*!******************************************!*\
  !*** ./libs/integration-ai/src/index.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./lib/sdk/gauzy-ai-sdk */ "./libs/integration-ai/src/lib/sdk/gauzy-ai-sdk.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/gauzy-ai.service */ "./libs/integration-ai/src/lib/gauzy-ai.service.ts"), exports);


/***/ }),

/***/ "./libs/integration-ai/src/lib/gauzy-ai.service.ts":
/*!*********************************************************!*\
  !*** ./libs/integration-ai/src/lib/gauzy-ai.service.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var GauzyAIService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GauzyAIService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const gauzy_ai_sdk_1 = __webpack_require__(/*! ./sdk/gauzy-ai-sdk */ "./libs/integration-ai/src/lib/sdk/gauzy-ai-sdk.ts");
const cross_fetch_1 = __webpack_require__(/*! cross-fetch */ "cross-fetch");
const core_1 = __webpack_require__(/*! @apollo/client/core */ "@apollo/client/core");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
let GauzyAIService = GauzyAIService_1 = class GauzyAIService {
    constructor() {
        this._logger = new common_1.Logger(GauzyAIService_1.name);
        this.defaultOptions = {
            watchQuery: {
                fetchPolicy: 'no-cache',
                errorPolicy: 'ignore'
            },
            query: {
                fetchPolicy: 'no-cache',
                errorPolicy: 'all'
            },
            mutate: {
                fetchPolicy: 'no-cache',
                errorPolicy: 'all'
            }
        };
        try {
            this.gauzyAIGraphQLEndpoint = process.env.GAUZY_AI_GRAPHQL_ENDPOINT;
            if (this.gauzyAIGraphQLEndpoint) {
                this._logger.log('Gauzy AI Endpoint configured in the environment');
                this.initClient();
                const testConnectionQuery = async () => {
                    try {
                        const employeesQuery = core_1.gql `
							query employee {
								employees {
									edges {
										node {
											id
										}
									}
									totalCount
								}
							}
						`;
                        const employeesQueryResult = await this._client.query({
                            query: employeesQuery
                        });
                        if (employeesQueryResult.networkStatus ===
                            core_1.NetworkStatus.error) {
                            this._client = null;
                        }
                    }
                    catch (err) {
                        this._logger.error(err);
                        this._client = null;
                    }
                };
                testConnectionQuery();
            }
            else {
                this._logger.warn('Gauzy AI Endpoint not configured in the environment');
                this._client = null;
            }
        }
        catch (err) {
            this._logger.error(err);
            this._client = null;
        }
    }
    initClient() {
        this._client = new core_1.ApolloClient({
            typeDefs: gauzy_ai_sdk_1.EmployeeJobPostsDocument,
            link: new core_1.HttpLink({
                uri: this.gauzyAIGraphQLEndpoint,
                fetch: cross_fetch_1.default
            }),
            cache: new core_1.InMemoryCache(),
            defaultOptions: this.defaultOptions
        });
    }
    async getEmployeesStatistics() {
        return [];
    }
    async updateEmployeeStatus(employeeId, isJobSearchActive) {
        if (this._client == null) {
            return false;
        }
        const gauzyAIEmployeeId = await this.getEmployeeGauzyAIId(employeeId);
        console.log(`updateVisibility called. EmployeeId: ${employeeId}. Gauzy AI EmployeeId: ${gauzyAIEmployeeId}`);
        return true;
    }
    async updateVisibility(input) {
        if (this._client == null) {
            return false;
        }
        if (input.employeeId && input.providerCode && input.providerJobId) {
            const employeeId = await this.getEmployeeGauzyAIId(input.employeeId);
            console.log(`updateVisibility called. EmployeeId: ${employeeId}`);
            const jobPostId = await this.getJobPostId(input.providerCode, input.providerJobId);
            console.log(`updateVisibility called. jobPostId: ${jobPostId}`);
            const employeeJobPostId = await this.getEmployeeJobPostId(employeeId, jobPostId);
            console.log(`updateVisibility called. employeeJobPostId: ${employeeJobPostId}`);
            if (employeeId && jobPostId && employeeJobPostId) {
                const update = {
                    employeeId: employeeId,
                    jobPostId: jobPostId,
                    isActive: !input.hide,
                    isArchived: input.hide
                };
                const updateEmployeeJobPostMutation = core_1.gql `
					mutation updateOneEmployeeJobPost(
						$input: UpdateOneEmployeeJobPostInput!
					) {
						updateOneEmployeeJobPost(input: $input) {
							employeeId
							jobPostId
							isActive
							isArchived
							isApplied
							appliedDate
						}
					}
				`;
                await this._client.mutate({
                    mutation: updateEmployeeJobPostMutation,
                    variables: {
                        input: {
                            id: employeeJobPostId,
                            update: update
                        }
                    }
                });
                return true;
            }
        }
        else {
        }
        return false;
    }
    async updateApplied(input) {
        if (this._client == null) {
            return { isRedirectRequired: true };
        }
        const employeeId = await this.getEmployeeGauzyAIId(input.employeeId);
        console.log(`updateApplied called. EmployeeId: ${employeeId}`);
        const jobPostId = await this.getJobPostId(input.providerCode, input.providerJobId);
        console.log(`updateApplied called. jobPostId: ${jobPostId}`);
        const employeeJobPostId = await this.getEmployeeJobPostId(employeeId, jobPostId);
        console.log(`updateApplied called. employeeJobPostId: ${employeeJobPostId}`);
        if (employeeId && jobPostId && employeeJobPostId) {
            const update = {
                employeeId: employeeId,
                jobPostId: jobPostId,
                isApplied: input.applied
            };
            const updateEmployeeJobPostMutation = core_1.gql `
				mutation updateOneEmployeeJobPost(
					$input: UpdateOneEmployeeJobPostInput!
				) {
					updateOneEmployeeJobPost(input: $input) {
						employeeId
						jobPostId
						isActive
						isArchived
						isApplied
						appliedDate
					}
				}
			`;
            await this._client.mutate({
                mutation: updateEmployeeJobPostMutation,
                variables: {
                    input: {
                        id: employeeJobPostId,
                        update: update
                    }
                }
            });
        }
        return { isRedirectRequired: true };
    }
    async syncGauzyEmployeeJobSearchCriteria(employee, criteria) {
        if (this._client == null) {
            return false;
        }
        console.log(`syncGauzyEmployeeJobSearchCriteria called. Criteria: ${JSON.stringify(criteria)}. Employee: ${JSON.stringify(employee)}`);
        try {
            const gauzyAIEmployee = await this.syncEmployee({
                externalEmployeeId: employee.id,
                isActive: employee.isActive,
                isArchived: false,
                upworkJobSearchCriteria: undefined,
                upworkJobSearchCriteriaAggregate: undefined,
                firstName: employee.user.firstName,
                lastName: employee.user.lastName
            });
            console.log(`Synced Employee ${JSON.stringify(gauzyAIEmployee)}`);
            const deleteAllCriteriaMutation = core_1.gql `
				mutation deleteManyUpworkJobsSearchCriteria(
					$input: DeleteManyUpworkJobsSearchCriteriaInput!
				) {
					deleteManyUpworkJobsSearchCriteria(input: $input) {
						deletedCount
					}
				}
			`;
            const deleteMutationResult = await this._client.mutate({
                mutation: deleteAllCriteriaMutation,
                variables: {
                    input: {
                        filter: {
                            isActive: {
                                is: true
                            },
                            employeeId: {
                                eq: gauzyAIEmployee.id
                            }
                        }
                    }
                }
            });
            console.log(`Delete Existed Criterions count: ${JSON.stringify(deleteMutationResult.data.deleteManyUpworkJobsSearchCriteria
                .deletedCount)}`);
            if (criteria && criteria.length > 0) {
                const gauzyAICriteria = [];
                criteria.forEach((criterion) => {
                    var _a, _b;
                    gauzyAICriteria.push({
                        employee: undefined,
                        employeeId: gauzyAIEmployee.id,
                        isActive: true,
                        isArchived: false,
                        jobType: 'hourly',
                        keyword: criterion.keyword,
                        category: (_a = criterion.category) === null || _a === void 0 ? void 0 : _a.name,
                        categoryId: criterion.categoryId,
                        occupation: (_b = criterion.occupation) === null || _b === void 0 ? void 0 : _b.name,
                        occupationId: criterion.occupationId
                    });
                });
                const createCriteriaMutation = core_1.gql `
					mutation createManyUpworkJobsSearchCriteria(
						$input: CreateManyUpworkJobsSearchCriteriaInput!
					) {
						createManyUpworkJobsSearchCriteria(input: $input) {
							id
						}
					}
				`;
                const createNewCriteriaResult = await this._client.mutate({
                    mutation: createCriteriaMutation,
                    variables: {
                        input: {
                            upworkJobsSearchCriteria: gauzyAICriteria
                        }
                    }
                });
                console.log(`Create New Criteria result: ${JSON.stringify(createNewCriteriaResult.data
                    .createManyUpworkJobsSearchCriteria)}`);
            }
            return true;
        }
        catch (err) {
            this._logger.error(err);
            return false;
        }
    }
    async syncEmployees(employees) {
        if (this._client == null) {
            return false;
        }
        await Promise.all(employees.map(async (employee) => {
            try {
                const gauzyAIEmployee = await this.syncEmployee({
                    externalEmployeeId: employee.id,
                    isActive: employee.isActive,
                    isArchived: false,
                    upworkJobSearchCriteria: undefined,
                    upworkJobSearchCriteriaAggregate: undefined,
                    firstName: employee.user.firstName,
                    lastName: employee.user.lastName
                });
                console.log(`Synced Employee ${JSON.stringify(gauzyAIEmployee)}`);
            }
            catch (err) {
                this._logger.error(err);
            }
        }));
        return true;
    }
    async getEmployeeJobPostId(employeeId, jobPostId) {
        const employeeJobPostsQuery = core_1.gql `
			query employeeJobPostsByEmployeeIdJobPostId(
				$employeeIdFilter: String!
				$jobPostIdFilter: String!
			) {
				employeeJobPosts(
					filter: {
						employeeId: { eq: $employeeIdFilter }
						jobPostId: { eq: $jobPostIdFilter }
					}
				) {
					edges {
						node {
							id
							isActive
							isArchived
						}
					}
				}
			}
		`;
        const employeeJobPostsQueryResult = await this._client.query({
            query: employeeJobPostsQuery,
            variables: {
                employeeIdFilter: employeeId,
                jobPostIdFilter: jobPostId
            }
        });
        const employeeJobPostsResponse = employeeJobPostsQueryResult.data.employeeJobPosts.edges;
        if (employeeJobPostsResponse && employeeJobPostsResponse.length > 0) {
            return employeeJobPostsResponse[0].node.id;
        }
        return null;
    }
    async getJobPostId(providerCode, providerJobId) {
        const jobPostsQuery = core_1.gql `
			query jobPosts(
				$providerCodeFilter: String!
				$providerJobIdFilter: String!
			) {
				jobPosts(
					filter: {
						providerCode: { eq: $providerCodeFilter }
						providerJobId: { eq: $providerJobIdFilter }
					}
				) {
					edges {
						node {
							id
							isActive
							isArchived
						}
					}
				}
			}
		`;
        const jobPostsQueryResult = await this._client.query({
            query: jobPostsQuery,
            variables: {
                providerCodeFilter: providerCode,
                providerJobIdFilter: providerJobId
            }
        });
        const jobPostsResponse = jobPostsQueryResult.data.jobPosts.edges;
        if (jobPostsResponse && jobPostsResponse.length > 0) {
            return jobPostsResponse[0].node.id;
        }
        return null;
    }
    async getEmployeeGauzyAIId(externalEmployeeId) {
        const employeesQuery = core_1.gql `
			query employeeByExternalEmployeeId(
				$externalEmployeeIdFilter: String!
			) {
				employees(
					filter: {
						externalEmployeeId: { eq: $externalEmployeeIdFilter }
					}
				) {
					edges {
						node {
							id
							externalEmployeeId
						}
					}
					totalCount
				}
			}
		`;
        const employeesQueryResult = await this._client.query({
            query: employeesQuery,
            variables: {
                externalEmployeeIdFilter: externalEmployeeId
            }
        });
        const employeesResponse = employeesQueryResult.data.employees.edges;
        if (employeesResponse.length > 0) {
            return employeesResponse[0].node.id;
        }
        return null;
    }
    async syncEmployee(employee) {
        let employeesQuery = core_1.gql `
			query employeeByExternalEmployeeId(
				$externalEmployeeIdFilter: String!
			) {
				employees(
					filter: {
						externalEmployeeId: { eq: $externalEmployeeIdFilter }
					}
				) {
					edges {
						node {
							id
							externalEmployeeId
						}
					}
					totalCount
				}
			}
		`;
        let employeesQueryResult = await this._client.query({
            query: employeesQuery,
            variables: {
                externalEmployeeIdFilter: employee.externalEmployeeId
            }
        });
        let employeesResponse = employeesQueryResult.data.employees.edges;
        let isAlreadyCreated = employeesResponse.length > 0;
        console.log(`Is Employee ${employee.externalEmployeeId} already exists in Gauzy AI: ${isAlreadyCreated} by externalEmployeeId field`);
        if (!isAlreadyCreated) {
            employeesQuery = core_1.gql `
				query employeeByName(
					$firstNameFilter: String!
					$lastNameFilter: String!
				) {
					employees(
						filter: {
							firstName: { eq: $firstNameFilter }
							lastName: { eq: $lastNameFilter }
						}
					) {
						edges {
							node {
								id
								firstName
								lastName
								externalEmployeeId
							}
						}
						totalCount
					}
				}
			`;
            employeesQueryResult = await this._client.query({
                query: employeesQuery,
                variables: {
                    firstNameFilter: employee.firstName,
                    lastNameFilter: employee.lastName
                }
            });
            employeesResponse = employeesQueryResult.data.employees.edges;
            isAlreadyCreated = employeesResponse.length > 0;
            console.log(`Is Employee ${employee.externalEmployeeId} already exists in Gauzy AI: ${isAlreadyCreated} by name fields`);
            if (!isAlreadyCreated) {
                const createEmployeeMutation = core_1.gql `
					mutation createOneEmployee(
						$input: CreateOneEmployeeInput!
					) {
						createOneEmployee(input: $input) {
							id
							externalEmployeeId
							firstName
							lastName
						}
					}
				`;
                const newEmployee = await this._client.mutate({
                    mutation: createEmployeeMutation,
                    variables: {
                        input: {
                            employee
                        }
                    }
                });
                return newEmployee.data.createOneEmployee;
            }
        }
        const id = employeesResponse[0].node.id;
        const updateEmployeeMutation = core_1.gql `
			mutation updateOneEmployee($input: UpdateOneEmployeeInput!) {
				updateOneEmployee(input: $input) {
					externalEmployeeId
					isActive
					isArchived
					firstName
					lastName
				}
			}
		`;
        await this._client.mutate({
            mutation: updateEmployeeMutation,
            variables: {
                input: {
                    id: id,
                    update: employee
                }
            }
        });
        return employeesResponse[0].node;
    }
    async getEmployeesJobPosts(data) {
        if (this._client == null) {
            return null;
        }
        console.log(`getEmployeesJobPosts. Data ${JSON.stringify(data)}`);
        const filters = data.filters
            ? JSON.parse(data.filters)
            : undefined;
        console.log(`getEmployeesJobPosts. Filters ${JSON.stringify(filters)}`);
        const employeeIdFilter = filters && filters.employeeIds && filters.employeeIds.length > 0
            ? filters.employeeIds[0]
            : undefined;
        try {
            const employeesQuery = core_1.gql `
				query employeeJobPosts(
					$after: ConnectionCursor!
					$first: Int!
					$filter: EmployeeJobPostFilter!
					$sorting: [EmployeeJobPostSort!]
				) {
					employeeJobPosts(
						paging: { after: $after, first: $first }
						filter: $filter
						sorting: $sorting
					) {
						totalCount
						pageInfo {
							hasNextPage
							hasPreviousPage
							startCursor
							endCursor
						}
						edges {
							node {
								id
								isApplied
								appliedDate
								createdAt
								updatedAt
								isActive
								isArchived
								employee {
									id
									externalEmployeeId
								}
								providerCode
								providerJobId
								jobDateCreated
								jobStatus
								jobType
								jobPost {
									id
									providerCode
									providerJobId
									title
									description
									jobDateCreated
									jobStatus
									jobType
									url
									budget
									duration
									workload
									skills
									category
									subcategory
									country
									clientFeedback
									clientReviewsCount
									clientJobsPosted
									clientPastHires
									clientPaymentVerificationStatus
								}
							}
						}
					}
				}
			`;
            const jobResponses = [];
            let isContinue;
            let after = '';
            const filter = {
                isActive: {
                    is: true
                },
                isArchived: {
                    is: false
                },
                employeeId: undefined
            };
            if (employeeIdFilter) {
                const employeeId = await this.getEmployeeGauzyAIId(employeeIdFilter);
                filter.employeeId = {
                    eq: employeeId
                };
            }
            console.log(`Applying filter: ${JSON.stringify(filter)}`);
            const graphQLPageSize = 50;
            const loadCounts = Math.ceil((data.page * data.limit) / graphQLPageSize);
            console.log(`Round trips to Gauzy API: ${loadCounts}`);
            let currentCount = 1;
            let totalCount;
            do {
                const result = await this._client.query({
                    query: employeesQuery,
                    variables: {
                        after: after,
                        first: graphQLPageSize,
                        sorting: [
                            {
                                field: 'jobDateCreated',
                                direction: 'DESC'
                            }
                        ],
                        filter: filter
                    }
                });
                const jobsResponse = result.data.employeeJobPosts.edges.map((it) => {
                    const rec = it.node;
                    const res = {
                        employeeId: rec.employee.externalEmployeeId,
                        employee: undefined,
                        jobPostId: rec.jobPost.id,
                        jobPost: rec.jobPost,
                        jobDateCreated: rec.jobDateCreated,
                        providerCode: rec.providerCode,
                        providerJobId: rec.providerJobId,
                        jobStatus: rec.jobStatus
                            ? models_1.JobPostStatusEnum[rec.jobStatus]
                            : undefined,
                        jobType: rec.jobType
                            ? models_1.JobPostTypeEnum[rec.jobType]
                            : undefined,
                        isApplied: rec.isApplied,
                        appliedDate: rec.appliedDate,
                        isActive: rec.isActive,
                        isArchived: rec.isArchived,
                        createdAt: rec.createdAt,
                        updatedAt: rec.updatedAt
                    };
                    return res;
                });
                isContinue =
                    result.data.employeeJobPosts.pageInfo.hasNextPage &&
                        currentCount < loadCounts;
                after = result.data.employeeJobPosts.pageInfo.endCursor;
                totalCount = result.data.employeeJobPosts.totalCount;
                jobResponses.push(...jobsResponse);
                console.log(`Found ${jobsResponse.length} job records. IsContinue: ${isContinue}. After: ${after}`);
                currentCount++;
            } while (isContinue);
            console.log(`getEmployeesJobPosts. Total Count: ${totalCount}. Page ${data.page}`);
            const response = {
                items: this.paginate(jobResponses, data.limit, data.page),
                total: totalCount
            };
            return response;
        }
        catch (err) {
            this._logger.error(err);
            return null;
        }
    }
    paginate(array, page_size, page_number) {
        return array.slice((page_number - 1) * page_size, page_number * page_size);
    }
};
GauzyAIService = GauzyAIService_1 = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], GauzyAIService);
exports.GauzyAIService = GauzyAIService;


/***/ }),

/***/ "./libs/integration-ai/src/lib/sdk/gauzy-ai-sdk.ts":
/*!*********************************************************!*\
  !*** ./libs/integration-ai/src/lib/sdk/gauzy-ai-sdk.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.JobPostsDocument = exports.CreateManyUpworkJobsSearchCriteriaDocument = exports.DeleteManyUpworkJobsSearchCriteriaDocument = exports.UpdateOneEmployeeJobPostDocument = exports.UpdateOneEmployeeDocument = exports.EmployeeByNameDocument = exports.EmployeeByExternalEmployeeIdDocument = exports.EmployeeDocument = exports.EmployeeJobPostsByEmployeeIdJobPostIdDocument = exports.EmployeeJobPostsDocument = exports.EmployeeJobPostSortFields = exports.EmployeeSortFields = exports.JobPostSortFields = exports.SortNulls = exports.SortDirection = exports.UpworkJobsSearchCriterionSortFields = void 0;
var UpworkJobsSearchCriterionSortFields;
(function (UpworkJobsSearchCriterionSortFields) {
    UpworkJobsSearchCriterionSortFields["Id"] = "id";
    UpworkJobsSearchCriterionSortFields["EmployeeId"] = "employeeId";
    UpworkJobsSearchCriterionSortFields["JobType"] = "jobType";
    UpworkJobsSearchCriterionSortFields["IsActive"] = "isActive";
    UpworkJobsSearchCriterionSortFields["IsArchived"] = "isArchived";
})(UpworkJobsSearchCriterionSortFields = exports.UpworkJobsSearchCriterionSortFields || (exports.UpworkJobsSearchCriterionSortFields = {}));
var SortDirection;
(function (SortDirection) {
    SortDirection["Asc"] = "ASC";
    SortDirection["Desc"] = "DESC";
})(SortDirection = exports.SortDirection || (exports.SortDirection = {}));
var SortNulls;
(function (SortNulls) {
    SortNulls["NullsFirst"] = "NULLS_FIRST";
    SortNulls["NullsLast"] = "NULLS_LAST";
})(SortNulls = exports.SortNulls || (exports.SortNulls = {}));
var JobPostSortFields;
(function (JobPostSortFields) {
    JobPostSortFields["Id"] = "id";
    JobPostSortFields["ProviderCode"] = "providerCode";
    JobPostSortFields["ProviderJobId"] = "providerJobId";
    JobPostSortFields["JobDateCreated"] = "jobDateCreated";
    JobPostSortFields["JobStatus"] = "jobStatus";
    JobPostSortFields["JobType"] = "jobType";
    JobPostSortFields["Country"] = "country";
    JobPostSortFields["CreatedAt"] = "createdAt";
    JobPostSortFields["UpdatedAt"] = "updatedAt";
    JobPostSortFields["IsActive"] = "isActive";
    JobPostSortFields["IsArchived"] = "isArchived";
})(JobPostSortFields = exports.JobPostSortFields || (exports.JobPostSortFields = {}));
var EmployeeSortFields;
(function (EmployeeSortFields) {
    EmployeeSortFields["Id"] = "id";
    EmployeeSortFields["ExternalEmployeeId"] = "externalEmployeeId";
    EmployeeSortFields["FirstName"] = "firstName";
    EmployeeSortFields["LastName"] = "lastName";
    EmployeeSortFields["JobType"] = "jobType";
    EmployeeSortFields["CreatedAt"] = "createdAt";
    EmployeeSortFields["UpdatedAt"] = "updatedAt";
    EmployeeSortFields["IsActive"] = "isActive";
    EmployeeSortFields["IsArchived"] = "isArchived";
})(EmployeeSortFields = exports.EmployeeSortFields || (exports.EmployeeSortFields = {}));
var EmployeeJobPostSortFields;
(function (EmployeeJobPostSortFields) {
    EmployeeJobPostSortFields["Id"] = "id";
    EmployeeJobPostSortFields["EmployeeId"] = "employeeId";
    EmployeeJobPostSortFields["JobPostId"] = "jobPostId";
    EmployeeJobPostSortFields["JobDateCreated"] = "jobDateCreated";
    EmployeeJobPostSortFields["JobStatus"] = "jobStatus";
    EmployeeJobPostSortFields["JobType"] = "jobType";
    EmployeeJobPostSortFields["ProviderCode"] = "providerCode";
    EmployeeJobPostSortFields["ProviderJobId"] = "providerJobId";
    EmployeeJobPostSortFields["IsApplied"] = "isApplied";
    EmployeeJobPostSortFields["AppliedDate"] = "appliedDate";
    EmployeeJobPostSortFields["CreatedAt"] = "createdAt";
    EmployeeJobPostSortFields["UpdatedAt"] = "updatedAt";
    EmployeeJobPostSortFields["IsActive"] = "isActive";
    EmployeeJobPostSortFields["IsArchived"] = "isArchived";
})(EmployeeJobPostSortFields = exports.EmployeeJobPostSortFields || (exports.EmployeeJobPostSortFields = {}));
exports.EmployeeJobPostsDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'query',
            name: { kind: 'Name', value: 'employeeJobPosts' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'after' }
                    },
                    type: {
                        kind: 'NonNullType',
                        type: {
                            kind: 'NamedType',
                            name: { kind: 'Name', value: 'ConnectionCursor' }
                        }
                    },
                    directives: []
                },
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'first' }
                    },
                    type: {
                        kind: 'NonNullType',
                        type: {
                            kind: 'NamedType',
                            name: { kind: 'Name', value: 'Int' }
                        }
                    },
                    directives: []
                },
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'filter' }
                    },
                    type: {
                        kind: 'NonNullType',
                        type: {
                            kind: 'NamedType',
                            name: {
                                kind: 'Name',
                                value: 'EmployeeJobPostFilter'
                            }
                        }
                    },
                    directives: []
                },
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'sorting' }
                    },
                    type: {
                        kind: 'ListType',
                        type: {
                            kind: 'NonNullType',
                            type: {
                                kind: 'NamedType',
                                name: {
                                    kind: 'Name',
                                    value: 'EmployeeJobPostSort'
                                }
                            }
                        }
                    },
                    directives: []
                }
            ],
            directives: [],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'employeeJobPosts' },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'paging' },
                                value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                        {
                                            kind: 'ObjectField',
                                            name: {
                                                kind: 'Name',
                                                value: 'after'
                                            },
                                            value: {
                                                kind: 'Variable',
                                                name: {
                                                    kind: 'Name',
                                                    value: 'after'
                                                }
                                            }
                                        },
                                        {
                                            kind: 'ObjectField',
                                            name: {
                                                kind: 'Name',
                                                value: 'first'
                                            },
                                            value: {
                                                kind: 'Variable',
                                                name: {
                                                    kind: 'Name',
                                                    value: 'first'
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'filter' },
                                value: {
                                    kind: 'Variable',
                                    name: { kind: 'Name', value: 'filter' }
                                }
                            },
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'sorting' },
                                value: {
                                    kind: 'Variable',
                                    name: { kind: 'Name', value: 'sorting' }
                                }
                            }
                        ],
                        directives: [],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'totalCount' },
                                    arguments: [],
                                    directives: []
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'pageInfo' },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            {
                                                kind: 'Field',
                                                name: {
                                                    kind: 'Name',
                                                    value: 'hasNextPage'
                                                },
                                                arguments: [],
                                                directives: []
                                            },
                                            {
                                                kind: 'Field',
                                                name: {
                                                    kind: 'Name',
                                                    value: 'hasPreviousPage'
                                                },
                                                arguments: [],
                                                directives: []
                                            },
                                            {
                                                kind: 'Field',
                                                name: {
                                                    kind: 'Name',
                                                    value: 'startCursor'
                                                },
                                                arguments: [],
                                                directives: []
                                            },
                                            {
                                                kind: 'Field',
                                                name: {
                                                    kind: 'Name',
                                                    value: 'endCursor'
                                                },
                                                arguments: [],
                                                directives: []
                                            }
                                        ]
                                    }
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'edges' },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            {
                                                kind: 'Field',
                                                name: {
                                                    kind: 'Name',
                                                    value: 'node'
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: 'SelectionSet',
                                                    selections: [
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'id'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'isApplied'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'appliedDate'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'createdAt'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'updatedAt'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'isActive'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'isArchived'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'employee'
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: 'SelectionSet',
                                                                selections: [
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'id'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'externalEmployeeId'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'providerCode'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'providerJobId'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'jobDateCreated'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'jobStatus'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'jobType'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'jobPost'
                                                            },
                                                            arguments: [],
                                                            directives: [],
                                                            selectionSet: {
                                                                kind: 'SelectionSet',
                                                                selections: [
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'id'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'providerCode'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'providerJobId'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'title'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'description'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'jobDateCreated'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'jobStatus'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'jobType'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'url'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'budget'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'duration'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'workload'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'skills'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'category'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'subcategory'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'country'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'clientFeedback'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'clientReviewsCount'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'clientJobsPosted'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'clientPastHires'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    },
                                                                    {
                                                                        kind: 'Field',
                                                                        name: {
                                                                            kind: 'Name',
                                                                            value: 'clientPaymentVerificationStatus'
                                                                        },
                                                                        arguments: [],
                                                                        directives: []
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        }
    ]
};
exports.EmployeeJobPostsByEmployeeIdJobPostIdDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'query',
            name: {
                kind: 'Name',
                value: 'employeeJobPostsByEmployeeIdJobPostId'
            },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'employeeIdFilter' }
                    },
                    type: {
                        kind: 'NonNullType',
                        type: {
                            kind: 'NamedType',
                            name: { kind: 'Name', value: 'String' }
                        }
                    },
                    directives: []
                },
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'jobPostIdFilter' }
                    },
                    type: {
                        kind: 'NonNullType',
                        type: {
                            kind: 'NamedType',
                            name: { kind: 'Name', value: 'String' }
                        }
                    },
                    directives: []
                }
            ],
            directives: [],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'employeeJobPosts' },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'filter' },
                                value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                        {
                                            kind: 'ObjectField',
                                            name: {
                                                kind: 'Name',
                                                value: 'employeeId'
                                            },
                                            value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                    {
                                                        kind: 'ObjectField',
                                                        name: {
                                                            kind: 'Name',
                                                            value: 'eq'
                                                        },
                                                        value: {
                                                            kind: 'Variable',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'employeeIdFilter'
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            kind: 'ObjectField',
                                            name: {
                                                kind: 'Name',
                                                value: 'jobPostId'
                                            },
                                            value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                    {
                                                        kind: 'ObjectField',
                                                        name: {
                                                            kind: 'Name',
                                                            value: 'eq'
                                                        },
                                                        value: {
                                                            kind: 'Variable',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'jobPostIdFilter'
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ],
                        directives: [],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'edges' },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            {
                                                kind: 'Field',
                                                name: {
                                                    kind: 'Name',
                                                    value: 'node'
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: 'SelectionSet',
                                                    selections: [
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'id'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'isActive'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'isArchived'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        }
    ]
};
exports.EmployeeDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'query',
            name: { kind: 'Name', value: 'employee' },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'employees' },
                        arguments: [],
                        directives: [],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'pageInfo' },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            {
                                                kind: 'Field',
                                                name: {
                                                    kind: 'Name',
                                                    value: 'hasNextPage'
                                                },
                                                arguments: [],
                                                directives: []
                                            },
                                            {
                                                kind: 'Field',
                                                name: {
                                                    kind: 'Name',
                                                    value: 'hasPreviousPage'
                                                },
                                                arguments: [],
                                                directives: []
                                            },
                                            {
                                                kind: 'Field',
                                                name: {
                                                    kind: 'Name',
                                                    value: 'startCursor'
                                                },
                                                arguments: [],
                                                directives: []
                                            },
                                            {
                                                kind: 'Field',
                                                name: {
                                                    kind: 'Name',
                                                    value: 'endCursor'
                                                },
                                                arguments: [],
                                                directives: []
                                            }
                                        ]
                                    }
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'edges' },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            {
                                                kind: 'Field',
                                                name: {
                                                    kind: 'Name',
                                                    value: 'node'
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: 'SelectionSet',
                                                    selections: [
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'id'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'externalEmployeeId'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'firstName'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'lastName'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        }
    ]
};
exports.EmployeeByExternalEmployeeIdDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'query',
            name: { kind: 'Name', value: 'employeeByExternalEmployeeId' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: {
                            kind: 'Name',
                            value: 'externalEmployeeIdFilter'
                        }
                    },
                    type: {
                        kind: 'NonNullType',
                        type: {
                            kind: 'NamedType',
                            name: { kind: 'Name', value: 'String' }
                        }
                    },
                    directives: []
                }
            ],
            directives: [],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'employees' },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'filter' },
                                value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                        {
                                            kind: 'ObjectField',
                                            name: {
                                                kind: 'Name',
                                                value: 'externalEmployeeId'
                                            },
                                            value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                    {
                                                        kind: 'ObjectField',
                                                        name: {
                                                            kind: 'Name',
                                                            value: 'eq'
                                                        },
                                                        value: {
                                                            kind: 'Variable',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'externalEmployeeIdFilter'
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ],
                        directives: [],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'edges' },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            {
                                                kind: 'Field',
                                                name: {
                                                    kind: 'Name',
                                                    value: 'node'
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: 'SelectionSet',
                                                    selections: [
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'id'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'externalEmployeeId'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'totalCount' },
                                    arguments: [],
                                    directives: []
                                }
                            ]
                        }
                    }
                ]
            }
        }
    ]
};
exports.EmployeeByNameDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'query',
            name: { kind: 'Name', value: 'employeeByName' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'firstNameFilter' }
                    },
                    type: {
                        kind: 'NonNullType',
                        type: {
                            kind: 'NamedType',
                            name: { kind: 'Name', value: 'String' }
                        }
                    },
                    directives: []
                },
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'lastNameFilter' }
                    },
                    type: {
                        kind: 'NonNullType',
                        type: {
                            kind: 'NamedType',
                            name: { kind: 'Name', value: 'String' }
                        }
                    },
                    directives: []
                }
            ],
            directives: [],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'employees' },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'filter' },
                                value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                        {
                                            kind: 'ObjectField',
                                            name: {
                                                kind: 'Name',
                                                value: 'firstName'
                                            },
                                            value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                    {
                                                        kind: 'ObjectField',
                                                        name: {
                                                            kind: 'Name',
                                                            value: 'eq'
                                                        },
                                                        value: {
                                                            kind: 'Variable',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'firstNameFilter'
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            kind: 'ObjectField',
                                            name: {
                                                kind: 'Name',
                                                value: 'lastName'
                                            },
                                            value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                    {
                                                        kind: 'ObjectField',
                                                        name: {
                                                            kind: 'Name',
                                                            value: 'eq'
                                                        },
                                                        value: {
                                                            kind: 'Variable',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'lastNameFilter'
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ],
                        directives: [],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'edges' },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            {
                                                kind: 'Field',
                                                name: {
                                                    kind: 'Name',
                                                    value: 'node'
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: 'SelectionSet',
                                                    selections: [
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'id'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'firstName'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'lastName'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'externalEmployeeId'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'totalCount' },
                                    arguments: [],
                                    directives: []
                                }
                            ]
                        }
                    }
                ]
            }
        }
    ]
};
exports.UpdateOneEmployeeDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: { kind: 'Name', value: 'updateOneEmployee' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'input' }
                    },
                    type: {
                        kind: 'NonNullType',
                        type: {
                            kind: 'NamedType',
                            name: {
                                kind: 'Name',
                                value: 'UpdateOneEmployeeInput'
                            }
                        }
                    },
                    directives: []
                }
            ],
            directives: [],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'updateOneEmployee' },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'input' },
                                value: {
                                    kind: 'Variable',
                                    name: { kind: 'Name', value: 'input' }
                                }
                            }
                        ],
                        directives: [],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: {
                                        kind: 'Name',
                                        value: 'externalEmployeeId'
                                    },
                                    arguments: [],
                                    directives: []
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'isActive' },
                                    arguments: [],
                                    directives: []
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'isArchived' },
                                    arguments: [],
                                    directives: []
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'firstName' },
                                    arguments: [],
                                    directives: []
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'lastName' },
                                    arguments: [],
                                    directives: []
                                }
                            ]
                        }
                    }
                ]
            }
        }
    ]
};
exports.UpdateOneEmployeeJobPostDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: { kind: 'Name', value: 'updateOneEmployeeJobPost' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'input' }
                    },
                    type: {
                        kind: 'NonNullType',
                        type: {
                            kind: 'NamedType',
                            name: {
                                kind: 'Name',
                                value: 'UpdateOneEmployeeJobPostInput'
                            }
                        }
                    },
                    directives: []
                }
            ],
            directives: [],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: {
                            kind: 'Name',
                            value: 'updateOneEmployeeJobPost'
                        },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'input' },
                                value: {
                                    kind: 'Variable',
                                    name: { kind: 'Name', value: 'input' }
                                }
                            }
                        ],
                        directives: [],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'employeeId' },
                                    arguments: [],
                                    directives: []
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'jobPostId' },
                                    arguments: [],
                                    directives: []
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'isActive' },
                                    arguments: [],
                                    directives: []
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'isArchived' },
                                    arguments: [],
                                    directives: []
                                },
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'isApplied' },
                                    arguments: [],
                                    directives: []
                                },
                                {
                                    kind: 'Field',
                                    name: {
                                        kind: 'Name',
                                        value: 'appliedDate'
                                    },
                                    arguments: [],
                                    directives: []
                                }
                            ]
                        }
                    }
                ]
            }
        }
    ]
};
exports.DeleteManyUpworkJobsSearchCriteriaDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: { kind: 'Name', value: 'deleteManyUpworkJobsSearchCriteria' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'input' }
                    },
                    type: {
                        kind: 'NonNullType',
                        type: {
                            kind: 'NamedType',
                            name: {
                                kind: 'Name',
                                value: 'DeleteManyUpworkJobsSearchCriteriaInput'
                            }
                        }
                    },
                    directives: []
                }
            ],
            directives: [],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: {
                            kind: 'Name',
                            value: 'deleteManyUpworkJobsSearchCriteria'
                        },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'input' },
                                value: {
                                    kind: 'Variable',
                                    name: { kind: 'Name', value: 'input' }
                                }
                            }
                        ],
                        directives: [],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: {
                                        kind: 'Name',
                                        value: 'deletedCount'
                                    },
                                    arguments: [],
                                    directives: []
                                }
                            ]
                        }
                    }
                ]
            }
        }
    ]
};
exports.CreateManyUpworkJobsSearchCriteriaDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'mutation',
            name: { kind: 'Name', value: 'createManyUpworkJobsSearchCriteria' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'input' }
                    },
                    type: {
                        kind: 'NonNullType',
                        type: {
                            kind: 'NamedType',
                            name: {
                                kind: 'Name',
                                value: 'CreateManyUpworkJobsSearchCriteriaInput'
                            }
                        }
                    },
                    directives: []
                }
            ],
            directives: [],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: {
                            kind: 'Name',
                            value: 'createManyUpworkJobsSearchCriteria'
                        },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'input' },
                                value: {
                                    kind: 'Variable',
                                    name: { kind: 'Name', value: 'input' }
                                }
                            }
                        ],
                        directives: [],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'id' },
                                    arguments: [],
                                    directives: []
                                }
                            ]
                        }
                    }
                ]
            }
        }
    ]
};
exports.JobPostsDocument = {
    kind: 'Document',
    definitions: [
        {
            kind: 'OperationDefinition',
            operation: 'query',
            name: { kind: 'Name', value: 'jobPosts' },
            variableDefinitions: [
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'providerCodeFilter' }
                    },
                    type: {
                        kind: 'NonNullType',
                        type: {
                            kind: 'NamedType',
                            name: { kind: 'Name', value: 'String' }
                        }
                    },
                    directives: []
                },
                {
                    kind: 'VariableDefinition',
                    variable: {
                        kind: 'Variable',
                        name: { kind: 'Name', value: 'providerJobIdFilter' }
                    },
                    type: {
                        kind: 'NonNullType',
                        type: {
                            kind: 'NamedType',
                            name: { kind: 'Name', value: 'String' }
                        }
                    },
                    directives: []
                }
            ],
            directives: [],
            selectionSet: {
                kind: 'SelectionSet',
                selections: [
                    {
                        kind: 'Field',
                        name: { kind: 'Name', value: 'jobPosts' },
                        arguments: [
                            {
                                kind: 'Argument',
                                name: { kind: 'Name', value: 'filter' },
                                value: {
                                    kind: 'ObjectValue',
                                    fields: [
                                        {
                                            kind: 'ObjectField',
                                            name: {
                                                kind: 'Name',
                                                value: 'providerCode'
                                            },
                                            value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                    {
                                                        kind: 'ObjectField',
                                                        name: {
                                                            kind: 'Name',
                                                            value: 'eq'
                                                        },
                                                        value: {
                                                            kind: 'Variable',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'providerCodeFilter'
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            kind: 'ObjectField',
                                            name: {
                                                kind: 'Name',
                                                value: 'providerJobId'
                                            },
                                            value: {
                                                kind: 'ObjectValue',
                                                fields: [
                                                    {
                                                        kind: 'ObjectField',
                                                        name: {
                                                            kind: 'Name',
                                                            value: 'eq'
                                                        },
                                                        value: {
                                                            kind: 'Variable',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'providerJobIdFilter'
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ],
                        directives: [],
                        selectionSet: {
                            kind: 'SelectionSet',
                            selections: [
                                {
                                    kind: 'Field',
                                    name: { kind: 'Name', value: 'edges' },
                                    arguments: [],
                                    directives: [],
                                    selectionSet: {
                                        kind: 'SelectionSet',
                                        selections: [
                                            {
                                                kind: 'Field',
                                                name: {
                                                    kind: 'Name',
                                                    value: 'node'
                                                },
                                                arguments: [],
                                                directives: [],
                                                selectionSet: {
                                                    kind: 'SelectionSet',
                                                    selections: [
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'id'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'isActive'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        },
                                                        {
                                                            kind: 'Field',
                                                            name: {
                                                                kind: 'Name',
                                                                value: 'isArchived'
                                                            },
                                                            arguments: [],
                                                            directives: []
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        }
    ]
};


/***/ }),

/***/ "./libs/integration-hubstaff/src/index.ts":
/*!************************************************!*\
  !*** ./libs/integration-hubstaff/src/index.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./lib/hubstaff-entity-settings */ "./libs/integration-hubstaff/src/lib/hubstaff-entity-settings.ts"), exports);


/***/ }),

/***/ "./libs/integration-hubstaff/src/lib/hubstaff-entity-settings.ts":
/*!***********************************************************************!*\
  !*** ./libs/integration-hubstaff/src/lib/hubstaff-entity-settings.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PROJECT_TIED_ENTITIES = exports.DEFAULT_ENTITY_SETTINGS = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
exports.DEFAULT_ENTITY_SETTINGS = [
    {
        entity: models_1.IntegrationEntity.ORGANIZATION,
        sync: true
    },
    {
        entity: models_1.IntegrationEntity.PROJECT,
        sync: true
    },
    {
        entity: models_1.IntegrationEntity.CLIENT,
        sync: true
    }
];
exports.PROJECT_TIED_ENTITIES = [
    {
        entity: models_1.IntegrationEntity.TASK,
        sync: true
    },
    {
        entity: models_1.IntegrationEntity.ACTIVITY,
        sync: true
    },
    {
        entity: models_1.IntegrationEntity.SCREENSHOT,
        sync: true
    }
];


/***/ }),

/***/ "./libs/integration-upwork/src/index.ts":
/*!**********************************************!*\
  !*** ./libs/integration-upwork/src/index.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./lib/upwork-job.service */ "./libs/integration-upwork/src/lib/upwork-job.service.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/upwork-offers.service */ "./libs/integration-upwork/src/lib/upwork-offers.service.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/upwork-report.service */ "./libs/integration-upwork/src/lib/upwork-report.service.ts"), exports);


/***/ }),

/***/ "./libs/integration-upwork/src/lib/upwork-job.service.ts":
/*!***************************************************************!*\
  !*** ./libs/integration-upwork/src/lib/upwork-job.service.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UpworkJobService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const UpworkApi = __webpack_require__(/*! upwork-api */ "upwork-api");
const profile_js_1 = __webpack_require__(/*! upwork-api/lib/routers/jobs/profile.js */ "upwork-api/lib/routers/jobs/profile.js");
let UpworkJobService = class UpworkJobService {
    constructor() { }
    async getJobProfileByKey(config, jobKey) {
        try {
            const api = new UpworkApi(config);
            const profile = new profile_js_1.Profile(api);
            return new Promise((resolve, reject) => {
                api.setAccessToken(config.accessToken, config.accessSecret, () => {
                    profile.getSpecific(jobKey, (err, data) => err ? reject(err) : resolve(data));
                });
            });
        }
        catch (error) {
            throw new common_1.BadRequestException('Cannot get job by key');
        }
    }
};
UpworkJobService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], UpworkJobService);
exports.UpworkJobService = UpworkJobService;


/***/ }),

/***/ "./libs/integration-upwork/src/lib/upwork-offers.service.ts":
/*!******************************************************************!*\
  !*** ./libs/integration-upwork/src/lib/upwork-offers.service.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UpworkOffersService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const UpworkApi = __webpack_require__(/*! upwork-api */ "upwork-api");
const offers_js_1 = __webpack_require__(/*! upwork-api/lib/routers/hr/freelancers/offers.js */ "upwork-api/lib/routers/hr/freelancers/offers.js");
const applications_js_1 = __webpack_require__(/*! upwork-api/lib/routers/hr/freelancers/applications.js */ "upwork-api/lib/routers/hr/freelancers/applications.js");
let UpworkOffersService = class UpworkOffersService {
    constructor() { }
    async getOffersListByFreelancer(config, status) {
        try {
            const api = new UpworkApi(config);
            const offers = new offers_js_1.Offers(api);
            const params = {
                status,
                offset: 0
            };
            return new Promise((resolve, reject) => {
                api.setAccessToken(config.accessToken, config.accessSecret, () => {
                    offers.getList(params, (err, data) => err ? reject(err) : resolve(data));
                });
            });
        }
        catch (error) {
            throw new common_1.BadRequestException('Cannot get offers list');
        }
    }
    async getOfferByKey(config, offerKey) {
        try {
            const api = new UpworkApi(config);
            const offers = new offers_js_1.Offers(api);
            return new Promise((resolve, reject) => {
                api.setAccessToken(config.accessToken, config.accessSecret, () => {
                    offers.getSpecific(offerKey, (err, data) => err ? reject(err) : resolve(data));
                });
            });
        }
        catch (error) {
            throw new common_1.BadRequestException('Cannot get freelancer offers');
        }
    }
    async getProposalLisByFreelancer(config, status) {
        try {
            const api = new UpworkApi(config);
            const applications = new applications_js_1.Applications(api);
            const params = {
                status,
                offset: 0
            };
            return new Promise((resolve, reject) => {
                api.setAccessToken(config.accessToken, config.accessSecret, () => {
                    applications.getList(params, (err, data) => err ? reject(err) : resolve(data));
                });
            });
        }
        catch (error) {
            throw new common_1.BadRequestException('Cannot get proposal list');
        }
    }
    getProposalBykey(config, applicationId) {
        try {
            const api = new UpworkApi(config);
            const applications = new applications_js_1.Applications(api);
            return new Promise((resolve, reject) => {
                api.setAccessToken(config.accessToken, config.accessSecret, () => {
                    applications.getSpecific(applicationId, (err, data) => err ? reject(err) : resolve(data));
                });
            });
        }
        catch (error) {
            throw new common_1.BadRequestException('Cannot get proposal by applicationId');
        }
    }
};
UpworkOffersService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], UpworkOffersService);
exports.UpworkOffersService = UpworkOffersService;


/***/ }),

/***/ "./libs/integration-upwork/src/lib/upwork-report.service.ts":
/*!******************************************************************!*\
  !*** ./libs/integration-upwork/src/lib/upwork-report.service.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UpworkReportService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const moment = __webpack_require__(/*! moment */ "moment");
const UpworkApi = __webpack_require__(/*! upwork-api */ "upwork-api");
const billings_js_1 = __webpack_require__(/*! upwork-api/lib/routers/reports/finance/billings.js */ "upwork-api/lib/routers/reports/finance/billings.js");
const earnings_js_1 = __webpack_require__(/*! upwork-api/lib/routers/reports/finance/earnings.js */ "upwork-api/lib/routers/reports/finance/earnings.js");
const time_js_1 = __webpack_require__(/*! upwork-api/lib/routers/reports/time.js */ "upwork-api/lib/routers/reports/time.js");
const DEFAULT_DATE_RANGE = {
    start: moment()
        .quarter(moment().quarter())
        .startOf('quarter')
        .format('YYYY-MM-DD'),
    end: moment()
        .quarter(moment().quarter())
        .endOf('quarter')
        .format('YYYY-MM-DD')
};
let UpworkReportService = class UpworkReportService {
    constructor() { }
    async getFullReportByFreelancer(config, providerId, dateRange) {
        try {
            const api = new UpworkApi(config);
            const reports = new time_js_1.Time(api);
            const { start, end } = dateRange;
            const select = `SELECT 
							worked_on,
							company_id,
							company_name,
							assignment_name, 
							assignment_team_id,
							assignment_ref,
							assignment_rate,
							hours, 
							memo,
							contract_type
						WHERE 
							worked_on > '${start || DEFAULT_DATE_RANGE.start}' AND 
							worked_on <= '${end || DEFAULT_DATE_RANGE.end}'
						ORDER BY 
							worked_on,
							assignment_ref`;
            return new Promise((resolve, reject) => {
                api.setAccessToken(config.accessToken, config.accessSecret, () => {
                    reports.getByFreelancerFull(providerId, {
                        tq: select
                    }, (err, data) => (err ? reject(err) : resolve(data)));
                });
            });
        }
        catch (_a) {
            throw new common_1.BadRequestException('Cannot get freelancer income report');
        }
    }
    async getLimitedReportByFreelance(config, providerId, dateRange) {
        try {
            const api = new UpworkApi(config);
            const reports = new time_js_1.Time(api);
            const { start, end } = dateRange;
            const select = `SELECT 
							worked_on,
							company_id,
							company_name, 
							assignment_name, 
							assignment_team_id,
							assignment_ref,
							assignment_rate,
							hours, 
							memo,
							contract_type
						WHERE
							worked_on > '${start || DEFAULT_DATE_RANGE.start}' AND 
							worked_on <= '${end || DEFAULT_DATE_RANGE.end}'
						ORDER BY 
							worked_on,
							assignment_ref`;
            return new Promise((resolve, reject) => {
                api.setAccessToken(config.accessToken, config.accessSecret, () => {
                    reports.getByFreelancerLimited(providerId, {
                        tq: select
                    }, (err, data) => (err ? reject(err) : resolve(data)));
                });
            });
        }
        catch (error) {
            throw new common_1.BadRequestException('Cannot get freelancer income report');
        }
    }
    async getBillingReportByFreelancer(config, providerRefernceId, dateRange) {
        try {
            const api = new UpworkApi(config);
            const billings = new billings_js_1.Billings(api);
            const { start, end } = dateRange;
            const select = `SELECT 
								amount,
								date,
								type,
								subtype
							WHERE 
								date > '${start || DEFAULT_DATE_RANGE.start}' AND 
								date <= '${end || DEFAULT_DATE_RANGE.end}'`;
            return new Promise((resolve, reject) => {
                api.setAccessToken(config.accessToken, config.accessSecret, () => {
                    billings.getByFreelancer(providerRefernceId, {
                        tq: select
                    }, (err, data) => (err ? reject(err) : resolve(data)));
                });
            });
        }
        catch (error) {
            throw new common_1.BadRequestException('Cannot get freelancer billing report');
        }
    }
    async getEarningReportByFreelancer(config, providerRefernceId, dateRange) {
        try {
            const api = new UpworkApi(config);
            const earnings = new earnings_js_1.Earnings(api);
            const { start, end } = dateRange;
            const select = `SELECT 
								amount,
								date,
								type,
								subtype,
								description,
								assignment_name,
								assignment__reference,
								provider__reference,
								reference
							WHERE 
								date > '${start || DEFAULT_DATE_RANGE.start}' AND 
								date <= '${end || DEFAULT_DATE_RANGE.end}'`;
            return new Promise((resolve, reject) => {
                api.setAccessToken(config.accessToken, config.accessSecret, () => {
                    earnings.getByFreelancer(providerRefernceId, {
                        tq: select
                    }, (err, data) => (err ? reject(err) : resolve(data)));
                });
            });
        }
        catch (error) {
            throw new common_1.BadRequestException('Cannot get freelancer earning report');
        }
    }
};
UpworkReportService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], UpworkReportService);
exports.UpworkReportService = UpworkReportService;


/***/ }),

/***/ "./libs/models/src/index.ts":
/*!**********************************!*\
  !*** ./libs/models/src/index.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IBasePerTenantEntityModel = exports.IBasePerTenantAndOrganizationEntityModel = exports.BaseEntityModel = exports.RolesEnum = exports.IRole = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./lib/appointment-employees.model */ "./libs/models/src/lib/appointment-employees.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/approval-policy.model */ "./libs/models/src/lib/approval-policy.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/availability-slots.model */ "./libs/models/src/lib/availability-slots.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/candidate-criterions-rating.model */ "./libs/models/src/lib/candidate-criterions-rating.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/candidate-document.model */ "./libs/models/src/lib/candidate-document.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/candidate-education.model */ "./libs/models/src/lib/candidate-education.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/candidate-experience.model */ "./libs/models/src/lib/candidate-experience.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/candidate-feedback.model */ "./libs/models/src/lib/candidate-feedback.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/candidate-interview.model */ "./libs/models/src/lib/candidate-interview.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/candidate-interviewers.model */ "./libs/models/src/lib/candidate-interviewers.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/candidate-personal-qualities.model */ "./libs/models/src/lib/candidate-personal-qualities.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/candidate-skill.model */ "./libs/models/src/lib/candidate-skill.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/candidate-source.model */ "./libs/models/src/lib/candidate-source.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/candidate-technologies.model */ "./libs/models/src/lib/candidate-technologies.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/candidate.model */ "./libs/models/src/lib/candidate.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/chart.model */ "./libs/models/src/lib/chart.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/contact.model */ "./libs/models/src/lib/contact.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/core.model */ "./libs/models/src/lib/core.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/country.model */ "./libs/models/src/lib/country.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/currency.model */ "./libs/models/src/lib/currency.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/custom-smtp.model */ "./libs/models/src/lib/custom-smtp.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/deal.model */ "./libs/models/src/lib/deal.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/email-template.model */ "./libs/models/src/lib/email-template.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/email.model */ "./libs/models/src/lib/email.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/employee-appointment.model */ "./libs/models/src/lib/employee-appointment.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/employee-award.model */ "./libs/models/src/lib/employee-award.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/employee-job.model */ "./libs/models/src/lib/employee-job.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/employee-proposal-template.model */ "./libs/models/src/lib/employee-proposal-template.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/employee-recurring-expense.model */ "./libs/models/src/lib/employee-recurring-expense.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/employee-settings.model */ "./libs/models/src/lib/employee-settings.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/employee-statistics.model */ "./libs/models/src/lib/employee-statistics.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/employee.model */ "./libs/models/src/lib/employee.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/entity-with-members.model */ "./libs/models/src/lib/entity-with-members.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/equipment-sharing-policy.model */ "./libs/models/src/lib/equipment-sharing-policy.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/equipment-sharing.model */ "./libs/models/src/lib/equipment-sharing.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/equipment.model */ "./libs/models/src/lib/equipment.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/estimate-email.model */ "./libs/models/src/lib/estimate-email.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/event-type.model */ "./libs/models/src/lib/event-type.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/expense-category.model */ "./libs/models/src/lib/expense-category.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/expense-category.model */ "./libs/models/src/lib/expense-category.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/expense.model */ "./libs/models/src/lib/expense.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/feature.model */ "./libs/models/src/lib/feature.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/file-provider */ "./libs/models/src/lib/file-provider.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/geo-location.model */ "./libs/models/src/lib/geo-location.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/goal-settings.model */ "./libs/models/src/lib/goal-settings.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/goals.model */ "./libs/models/src/lib/goals.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/help-center-article.model */ "./libs/models/src/lib/help-center-article.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/help-center-menu.model */ "./libs/models/src/lib/help-center-menu.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/http-status.enum */ "./libs/models/src/lib/http-status.enum.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/hubstaff.model */ "./libs/models/src/lib/hubstaff.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/income.model */ "./libs/models/src/lib/income.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/integration.model */ "./libs/models/src/lib/integration.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/invite.model */ "./libs/models/src/lib/invite.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/invoice-estimate-history.model */ "./libs/models/src/lib/invoice-estimate-history.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/invoice-item.model */ "./libs/models/src/lib/invoice-item.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/invoice.model */ "./libs/models/src/lib/invoice.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/job-matching.model */ "./libs/models/src/lib/job-matching.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/job-search-category.model */ "./libs/models/src/lib/job-search-category.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/job-search-occupation.model */ "./libs/models/src/lib/job-search-occupation.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/language.model */ "./libs/models/src/lib/language.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/organization-awards.model */ "./libs/models/src/lib/organization-awards.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/organization-contact.model */ "./libs/models/src/lib/organization-contact.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/organization-department.model */ "./libs/models/src/lib/organization-department.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/organization-document.model */ "./libs/models/src/lib/organization-document.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/organization-employment-type.model */ "./libs/models/src/lib/organization-employment-type.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/organization-expense-category.model */ "./libs/models/src/lib/organization-expense-category.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/organization-languages.model */ "./libs/models/src/lib/organization-languages.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/organization-positions.model */ "./libs/models/src/lib/organization-positions.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/organization-projects.model */ "./libs/models/src/lib/organization-projects.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/organization-recurring-expense.model */ "./libs/models/src/lib/organization-recurring-expense.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/organization-sprint.model */ "./libs/models/src/lib/organization-sprint.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/organization-team-employee-model */ "./libs/models/src/lib/organization-team-employee-model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/organization-team-model */ "./libs/models/src/lib/organization-team-model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/organization-vendors.model */ "./libs/models/src/lib/organization-vendors.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/organization.model */ "./libs/models/src/lib/organization.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/payment.model */ "./libs/models/src/lib/payment.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/pipeline-stage.model */ "./libs/models/src/lib/pipeline-stage.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/pipeline.model */ "./libs/models/src/lib/pipeline.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/product.model */ "./libs/models/src/lib/product.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/proposal.model */ "./libs/models/src/lib/proposal.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/recurring-expense.model */ "./libs/models/src/lib/recurring-expense.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/report.model */ "./libs/models/src/lib/report.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/request-approval-employee.model */ "./libs/models/src/lib/request-approval-employee.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/request-approval-team.model */ "./libs/models/src/lib/request-approval-team.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/request-approval.model */ "./libs/models/src/lib/request-approval.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/role-permission.model */ "./libs/models/src/lib/role-permission.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/seed.model */ "./libs/models/src/lib/seed.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/skill-entity.model */ "./libs/models/src/lib/skill-entity.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/sms.model */ "./libs/models/src/lib/sms.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/tag-entity.model */ "./libs/models/src/lib/tag-entity.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/task-entity.model */ "./libs/models/src/lib/task-entity.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/tenant.model */ "./libs/models/src/lib/tenant.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/time-off.model */ "./libs/models/src/lib/time-off.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/timesheet-statistics.model */ "./libs/models/src/lib/timesheet-statistics.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/timesheet.model */ "./libs/models/src/lib/timesheet.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/translation.model */ "./libs/models/src/lib/translation.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/tree-node.model */ "./libs/models/src/lib/tree-node.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/upwork.model */ "./libs/models/src/lib/upwork.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/user-organization.model */ "./libs/models/src/lib/user-organization.model.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./lib/user.model */ "./libs/models/src/lib/user.model.ts"), exports);
var role_model_1 = __webpack_require__(/*! ./lib/role.model */ "./libs/models/src/lib/role.model.ts");
Object.defineProperty(exports, "IRole", { enumerable: true, get: function () { return role_model_1.IRole; } });
Object.defineProperty(exports, "RolesEnum", { enumerable: true, get: function () { return role_model_1.RolesEnum; } });
var base_entity_model_1 = __webpack_require__(/*! ./lib/base-entity.model */ "./libs/models/src/lib/base-entity.model.ts");
Object.defineProperty(exports, "BaseEntityModel", { enumerable: true, get: function () { return base_entity_model_1.IBaseEntityModel; } });
var base_entity_model_2 = __webpack_require__(/*! ./lib/base-entity.model */ "./libs/models/src/lib/base-entity.model.ts");
Object.defineProperty(exports, "IBasePerTenantAndOrganizationEntityModel", { enumerable: true, get: function () { return base_entity_model_2.IBasePerTenantAndOrganizationEntityModel; } });
Object.defineProperty(exports, "IBasePerTenantEntityModel", { enumerable: true, get: function () { return base_entity_model_2.IBasePerTenantEntityModel; } });


/***/ }),

/***/ "./libs/models/src/lib/appointment-employees.model.ts":
/*!************************************************************!*\
  !*** ./libs/models/src/lib/appointment-employees.model.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/approval-policy.model.ts":
/*!******************************************************!*\
  !*** ./libs/models/src/lib/approval-policy.model.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ApprovalPolicyTypesStringEnum = exports.ApprovalPolicyTypesEnum = void 0;
var ApprovalPolicyTypesEnum;
(function (ApprovalPolicyTypesEnum) {
    ApprovalPolicyTypesEnum[ApprovalPolicyTypesEnum["TIME_OFF"] = 1] = "TIME_OFF";
    ApprovalPolicyTypesEnum[ApprovalPolicyTypesEnum["EQUIPMENT_SHARING"] = 2] = "EQUIPMENT_SHARING";
    ApprovalPolicyTypesEnum[ApprovalPolicyTypesEnum["BUSINESS_TRIP"] = 3] = "BUSINESS_TRIP";
})(ApprovalPolicyTypesEnum = exports.ApprovalPolicyTypesEnum || (exports.ApprovalPolicyTypesEnum = {}));
var ApprovalPolicyTypesStringEnum;
(function (ApprovalPolicyTypesStringEnum) {
    ApprovalPolicyTypesStringEnum["TIME_OFF"] = "TIME_OFF";
    ApprovalPolicyTypesStringEnum["EQUIPMENT_SHARING"] = "EQUIPMENT_SHARING";
    ApprovalPolicyTypesStringEnum["BUSINESS_TRIP"] = "EQUIPMENT_SHARING";
})(ApprovalPolicyTypesStringEnum = exports.ApprovalPolicyTypesStringEnum || (exports.ApprovalPolicyTypesStringEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/availability-slots.model.ts":
/*!*********************************************************!*\
  !*** ./libs/models/src/lib/availability-slots.model.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.AvailabilityMergeType = exports.AvailabilitySlotType = void 0;
var AvailabilitySlotType;
(function (AvailabilitySlotType) {
    AvailabilitySlotType["DEFAULT"] = "Default";
    AvailabilitySlotType["RECURRING"] = "Recurring";
})(AvailabilitySlotType = exports.AvailabilitySlotType || (exports.AvailabilitySlotType = {}));
var AvailabilityMergeType;
(function (AvailabilityMergeType) {
    AvailabilityMergeType["MERGE"] = "merge";
    AvailabilityMergeType["REMOVE"] = "remove";
    AvailabilityMergeType["SKIP"] = "skip";
})(AvailabilityMergeType = exports.AvailabilityMergeType || (exports.AvailabilityMergeType = {}));


/***/ }),

/***/ "./libs/models/src/lib/base-entity.model.ts":
/*!**************************************************!*\
  !*** ./libs/models/src/lib/base-entity.model.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/candidate-criterions-rating.model.ts":
/*!******************************************************************!*\
  !*** ./libs/models/src/lib/candidate-criterions-rating.model.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/candidate-document.model.ts":
/*!*********************************************************!*\
  !*** ./libs/models/src/lib/candidate-document.model.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/candidate-education.model.ts":
/*!**********************************************************!*\
  !*** ./libs/models/src/lib/candidate-education.model.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/candidate-experience.model.ts":
/*!***********************************************************!*\
  !*** ./libs/models/src/lib/candidate-experience.model.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/candidate-feedback.model.ts":
/*!*********************************************************!*\
  !*** ./libs/models/src/lib/candidate-feedback.model.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/candidate-interview.model.ts":
/*!**********************************************************!*\
  !*** ./libs/models/src/lib/candidate-interview.model.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/candidate-interviewers.model.ts":
/*!*************************************************************!*\
  !*** ./libs/models/src/lib/candidate-interviewers.model.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/candidate-personal-qualities.model.ts":
/*!*******************************************************************!*\
  !*** ./libs/models/src/lib/candidate-personal-qualities.model.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/candidate-skill.model.ts":
/*!******************************************************!*\
  !*** ./libs/models/src/lib/candidate-skill.model.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/candidate-source.model.ts":
/*!*******************************************************!*\
  !*** ./libs/models/src/lib/candidate-source.model.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/candidate-technologies.model.ts":
/*!*************************************************************!*\
  !*** ./libs/models/src/lib/candidate-technologies.model.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/candidate.model.ts":
/*!************************************************!*\
  !*** ./libs/models/src/lib/candidate.model.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateStatus = void 0;
var CandidateStatus;
(function (CandidateStatus) {
    CandidateStatus["APPLIED"] = "APPLIED";
    CandidateStatus["REJECTED"] = "REJECTED";
    CandidateStatus["HIRED"] = "HIRED";
})(CandidateStatus = exports.CandidateStatus || (exports.CandidateStatus = {}));


/***/ }),

/***/ "./libs/models/src/lib/chart.model.ts":
/*!********************************************!*\
  !*** ./libs/models/src/lib/chart.model.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/contact.model.ts":
/*!**********************************************!*\
  !*** ./libs/models/src/lib/contact.model.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/core.model.ts":
/*!*******************************************!*\
  !*** ./libs/models/src/lib/core.model.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/country.model.ts":
/*!**********************************************!*\
  !*** ./libs/models/src/lib/country.model.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/currency.model.ts":
/*!***********************************************!*\
  !*** ./libs/models/src/lib/currency.model.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CurrenciesEnum = exports.DEFAULT_CURRENCIES = void 0;
exports.DEFAULT_CURRENCIES = {
    AFN: 'Afghan Afghani',
    AFA: 'Afghan Afghani (1927\u20132002)',
    ALL: 'Albanian Lek',
    ALK: 'Albanian Lek (1946\u20131965)',
    DZD: 'Algerian Dinar',
    ADP: 'Andorran Peseta',
    AOA: 'Angolan Kwanza',
    AOK: 'Angolan Kwanza (1977\u20131991)',
    AON: 'Angolan New Kwanza (1990\u20132000)',
    AOR: 'Angolan Readjusted Kwanza (1995\u20131999)',
    ARA: 'Argentine Austral',
    ARS: 'Argentine Peso',
    ARM: 'Argentine Peso (1881\u20131970)',
    ARP: 'Argentine Peso (1983\u20131985)',
    ARL: 'Argentine Peso Ley (1970\u20131983)',
    AMD: 'Armenian Dram',
    AWG: 'Aruban Florin',
    AUD: 'Australian Dollar',
    ATS: 'Austrian Schilling',
    AZN: 'Azerbaijani Manat',
    AZM: 'Azerbaijani Manat (1993\u20132006)',
    BSD: 'Bahamian Dollar',
    BHD: 'Bahraini Dinar',
    BDT: 'Bangladeshi Taka',
    BBD: 'Barbadian Dollar',
    BYN: 'Belarusian Ruble',
    BYB: 'Belarusian Ruble (1994\u20131999)',
    BYR: 'Belarusian Ruble (2000\u20132016)',
    BEF: 'Belgian Franc',
    BEC: 'Belgian Franc (convertible)',
    BEL: 'Belgian Franc (financial)',
    BZD: 'Belize Dollar',
    BMD: 'Bermudan Dollar',
    BTN: 'Bhutanese Ngultrum',
    BOB: 'Bolivian Boliviano',
    BOL: 'Bolivian Boliviano (1863\u20131963)',
    BOV: 'Bolivian Mvdol',
    BOP: 'Bolivian Peso',
    BAM: 'Bosnia-Herzegovina Convertible Mark',
    BAD: 'Bosnia-Herzegovina Dinar (1992\u20131994)',
    BAN: 'Bosnia-Herzegovina New Dinar (1994\u20131997)',
    BWP: 'Botswanan Pula',
    BRC: 'Brazilian Cruzado (1986\u20131989)',
    BRZ: 'Brazilian Cruzeiro (1942\u20131967)',
    BRE: 'Brazilian Cruzeiro (1990\u20131993)',
    BRR: 'Brazilian Cruzeiro (1993\u20131994)',
    BRN: 'Brazilian New Cruzado (1989\u20131990)',
    BRB: 'Brazilian New Cruzeiro (1967\u20131986)',
    BRL: 'Brazilian Real',
    GBP: 'British Pound',
    BND: 'Brunei Dollar',
    BGL: 'Bulgarian Hard Lev',
    BGN: 'Bulgarian Lev',
    BGO: 'Bulgarian Lev (1879\u20131952)',
    BGM: 'Bulgarian Socialist Lev',
    BUK: 'Burmese Kyat',
    BIF: 'Burundian Franc',
    XPF: 'CFP Franc',
    KHR: 'Cambodian Riel',
    CAD: 'Canadian Dollar',
    CVE: 'Cape Verdean Escudo',
    KYD: 'Cayman Islands Dollar',
    XAF: 'Central African CFA Franc',
    CLE: 'Chilean Escudo',
    CLP: 'Chilean Peso',
    CLF: 'Chilean Unit of Account (UF)',
    CNX: 'Chinese People\u2019s Bank Dollar',
    CNY: 'Chinese Yuan',
    COP: 'Colombian Peso',
    COU: 'Colombian Real Value Unit',
    KMF: 'Comorian Franc',
    CDF: 'Congolese Franc',
    CRC: 'Costa Rican Col\u00f3n',
    HRD: 'Croatian Dinar',
    HRK: 'Croatian Kuna',
    CUC: 'Cuban Convertible Peso',
    CUP: 'Cuban Peso',
    CYP: 'Cypriot Pound',
    CZK: 'Czech Koruna',
    CSK: 'Czechoslovak Hard Koruna',
    DKK: 'Danish Krone',
    DJF: 'Djiboutian Franc',
    DOP: 'Dominican Peso',
    NLG: 'Dutch Guilder',
    XCD: 'East Caribbean Dollar',
    DDM: 'East German Mark',
    ECS: 'Ecuadorian Sucre',
    ECV: 'Ecuadorian Unit of Constant Value',
    EGP: 'Egyptian Pound',
    GQE: 'Equatorial Guinean Ekwele',
    ERN: 'Eritrean Nakfa',
    EEK: 'Estonian Kroon',
    ETB: 'Ethiopian Birr',
    EUR: 'Euro',
    XEU: 'European Currency Unit',
    FKP: 'Falkland Islands Pound',
    FJD: 'Fijian Dollar',
    FIM: 'Finnish Markka',
    FRF: 'French Franc',
    XFO: 'French Gold Franc',
    XFU: 'French UIC-Franc',
    GMD: 'Gambian Dalasi',
    GEK: 'Georgian Kupon Larit',
    GEL: 'Georgian Lari',
    DEM: 'German Mark',
    GHS: 'Ghanaian Cedi',
    GHC: 'Ghanaian Cedi (1979\u20132007)',
    GIP: 'Gibraltar Pound',
    GRD: 'Greek Drachma',
    GTQ: 'Guatemalan Quetzal',
    GWP: 'Guinea-Bissau Peso',
    GNF: 'Guinean Franc',
    GNS: 'Guinean Syli',
    GYD: 'Guyanaese Dollar',
    HTG: 'Haitian Gourde',
    HNL: 'Honduran Lempira',
    HKD: 'Hong Kong Dollar',
    HUF: 'Hungarian Forint',
    ISK: 'Icelandic Kr\u00f3na',
    ISJ: 'Icelandic Kr\u00f3na (1918\u20131981)',
    INR: 'Indian Rupee',
    IDR: 'Indonesian Rupiah',
    IRR: 'Iranian Rial',
    IQD: 'Iraqi Dinar',
    IEP: 'Irish Pound',
    ILS: 'Israeli New Shekel',
    ILP: 'Israeli Pound',
    ILR: 'Israeli Shekel (1980\u20131985)',
    ITL: 'Italian Lira',
    JMD: 'Jamaican Dollar',
    JPY: 'Japanese Yen',
    JOD: 'Jordanian Dinar',
    KZT: 'Kazakhstani Tenge',
    KES: 'Kenyan Shilling',
    KWD: 'Kuwaiti Dinar',
    KGS: 'Kyrgystani Som',
    LAK: 'Laotian Kip',
    LVL: 'Latvian Lats',
    LVR: 'Latvian Ruble',
    LBP: 'Lebanese Pound',
    LSL: 'Lesotho Loti',
    LRD: 'Liberian Dollar',
    LYD: 'Libyan Dinar',
    LTL: 'Lithuanian Litas',
    LTT: 'Lithuanian Talonas',
    LUL: 'Luxembourg Financial Franc',
    LUC: 'Luxembourgian Convertible Franc',
    LUF: 'Luxembourgian Franc',
    MOP: 'Macanese Pataca',
    MKD: 'Macedonian Denar',
    MKN: 'Macedonian Denar (1992\u20131993)',
    MGA: 'Malagasy Ariary',
    MGF: 'Malagasy Franc',
    MWK: 'Malawian Kwacha',
    MYR: 'Malaysian Ringgit',
    MVR: 'Maldivian Rufiyaa',
    MVP: 'Maldivian Rupee (1947\u20131981)',
    MLF: 'Malian Franc',
    MTL: 'Maltese Lira',
    MTP: 'Maltese Pound',
    MRO: 'Mauritanian Ouguiya',
    MUR: 'Mauritian Rupee',
    MXV: 'Mexican Investment Unit',
    MXN: 'Mexican Peso',
    MXP: 'Mexican Silver Peso (1861\u20131992)',
    MDC: 'Moldovan Cupon',
    MDL: 'Moldovan Leu',
    MCF: 'Monegasque Franc',
    MNT: 'Mongolian Tugrik',
    MAD: 'Moroccan Dirham',
    MAF: 'Moroccan Franc',
    MZE: 'Mozambican Escudo',
    MZN: 'Mozambican Metical',
    MZM: 'Mozambican Metical (1980\u20132006)',
    MMK: 'Myanmar Kyat',
    NAD: 'Namibian Dollar',
    NPR: 'Nepalese Rupee',
    ANG: 'Netherlands Antillean Guilder',
    TWD: 'New Taiwan Dollar',
    NZD: 'New Zealand Dollar',
    NIO: 'Nicaraguan C\u00f3rdoba',
    NIC: 'Nicaraguan C\u00f3rdoba (1988\u20131991)',
    NGN: 'Nigerian Naira',
    KPW: 'North Korean Won',
    NOK: 'Norwegian Krone',
    OMR: 'Omani Rial',
    PKR: 'Pakistani Rupee',
    PAB: 'Panamanian Balboa',
    PGK: 'Papua New Guinean Kina',
    PYG: 'Paraguayan Guarani',
    PEI: 'Peruvian Inti',
    PEN: 'Peruvian Sol',
    PES: 'Peruvian Sol (1863\u20131965)',
    PHP: 'Philippine Peso',
    PLN: 'Polish Zloty',
    PLZ: 'Polish Zloty (1950\u20131995)',
    PTE: 'Portuguese Escudo',
    GWE: 'Portuguese Guinea Escudo',
    QAR: 'Qatari Rial',
    XRE: 'RINET Funds',
    RHD: 'Rhodesian Dollar',
    RON: 'Romanian Leu',
    ROL: 'Romanian Leu (1952\u20132006)',
    RUB: 'Russian Ruble',
    RUR: 'Russian Ruble (1991\u20131998)',
    RWF: 'Rwandan Franc',
    SVC: 'Salvadoran Col\u00f3n',
    WST: 'Samoan Tala',
    SAR: 'Saudi Riyal',
    RSD: 'Serbian Dinar',
    CSD: 'Serbian Dinar (2002\u20132006)',
    SCR: 'Seychellois Rupee',
    SLL: 'Sierra Leonean Leone',
    SGD: 'Singapore Dollar',
    SKK: 'Slovak Koruna',
    SIT: 'Slovenian Tolar',
    SBD: 'Solomon Islands Dollar',
    SOS: 'Somali Shilling',
    ZAR: 'South African Rand',
    ZAL: 'South African Rand (financial)',
    KRH: 'South Korean Hwan (1953\u20131962)',
    KRW: 'South Korean Won',
    KRO: 'South Korean Won (1945\u20131953)',
    SSP: 'South Sudanese Pound',
    SUR: 'Soviet Rouble',
    ESP: 'Spanish Peseta',
    ESA: 'Spanish Peseta (A account)',
    ESB: 'Spanish Peseta (convertible account)',
    LKR: 'Sri Lankan Rupee',
    SHP: 'St. Helena Pound',
    SDD: 'Sudanese Dinar (1992\u20132007)',
    SDG: 'Sudanese Pound',
    SDP: 'Sudanese Pound (1957\u20131998)',
    SRD: 'Surinamese Dollar',
    SRG: 'Surinamese Guilder',
    SZL: 'Swazi Lilangeni',
    SEK: 'Swedish Krona',
    CHF: 'Swiss Franc',
    SYP: 'Syrian Pound',
    STD: 'S\u00e3o Tom\u00e9 & Pr\u00edncipe Dobra',
    TJR: 'Tajikistani Ruble',
    TJS: 'Tajikistani Somoni',
    TZS: 'Tanzanian Shilling',
    THB: 'Thai Baht',
    TPE: 'Timorese Escudo',
    TOP: 'Tongan Pa\u02bbanga',
    TTD: 'Trinidad & Tobago Dollar',
    TND: 'Tunisian Dinar',
    TRY: 'Turkish Lira',
    TRL: 'Turkish Lira (1922\u20132005)',
    TMT: 'Turkmenistani Manat',
    TMM: 'Turkmenistani Manat (1993\u20132009)',
    USD: 'US Dollar',
    USN: 'US Dollar (Next day)',
    USS: 'US Dollar (Same day)',
    UGX: 'Ugandan Shilling',
    UGS: 'Ugandan Shilling (1966\u20131987)',
    UAH: 'Ukrainian Hryvnia',
    UAK: 'Ukrainian Karbovanets',
    AED: 'United Arab Emirates Dirham',
    UYU: 'Uruguayan Peso',
    UYP: 'Uruguayan Peso (1975\u20131993)',
    UYI: 'Uruguayan Peso (Indexed Units)',
    UZS: 'Uzbekistani Som',
    VUV: 'Vanuatu Vatu',
    VEF: 'Venezuelan Bol\u00edvar',
    VEB: 'Venezuelan Bol\u00edvar (1871\u20132008)',
    VND: 'Vietnamese Dong',
    VNN: 'Vietnamese Dong (1978\u20131985)',
    CHE: 'WIR Euro',
    CHW: 'WIR Franc',
    XOF: 'West African CFA Franc',
    YDD: 'Yemeni Dinar',
    YER: 'Yemeni Rial',
    YUN: 'Yugoslavian Convertible Dinar (1990\u20131992)',
    YUD: 'Yugoslavian Hard Dinar (1966\u20131990)',
    YUM: 'Yugoslavian New Dinar (1994\u20132002)',
    YUR: 'Yugoslavian Reformed Dinar (1992\u20131993)',
    ZRN: 'Zairean New Zaire (1993\u20131998)',
    ZRZ: 'Zairean Zaire (1971\u20131993)',
    ZMW: 'Zambian Kwacha',
    ZMK: 'Zambian Kwacha (1968\u20132012)',
    ZWD: 'Zimbabwean Dollar (1980\u20132008)',
    ZWR: 'Zimbabwean Dollar (2008)',
    ZWL: 'Zimbabwean Dollar (2009)'
};
var CurrenciesEnum;
(function (CurrenciesEnum) {
    CurrenciesEnum["AFN"] = "AFN";
    CurrenciesEnum["AFA"] = "AFA";
    CurrenciesEnum["ALL"] = "ALL";
    CurrenciesEnum["ALK"] = "ALK";
    CurrenciesEnum["DZD"] = "DZD";
    CurrenciesEnum["ADP"] = "ADP";
    CurrenciesEnum["AOA"] = "AOA";
    CurrenciesEnum["AOK"] = "AOK";
    CurrenciesEnum["AON"] = "AON";
    CurrenciesEnum["AOR"] = "AOR";
    CurrenciesEnum["ARA"] = "ARA";
    CurrenciesEnum["ARS"] = "ARS";
    CurrenciesEnum["ARM"] = "ARM";
    CurrenciesEnum["ARP"] = "ARP";
    CurrenciesEnum["ARL"] = "ARL";
    CurrenciesEnum["AMD"] = "AMD";
    CurrenciesEnum["AWG"] = "AWG";
    CurrenciesEnum["AUD"] = "AUD";
    CurrenciesEnum["ATS"] = "ATS";
    CurrenciesEnum["AZN"] = "AZN";
    CurrenciesEnum["AZM"] = "AZM";
    CurrenciesEnum["BSD"] = "BSD";
    CurrenciesEnum["BHD"] = "BHD";
    CurrenciesEnum["BDT"] = "BDT";
    CurrenciesEnum["BBD"] = "BBD";
    CurrenciesEnum["BYN"] = "BYN";
    CurrenciesEnum["BYB"] = "BYB";
    CurrenciesEnum["BYR"] = "BYR";
    CurrenciesEnum["BEF"] = "BEF";
    CurrenciesEnum["BEC"] = "BEC";
    CurrenciesEnum["BEL"] = "BEL";
    CurrenciesEnum["BZD"] = "BZD";
    CurrenciesEnum["BMD"] = "BMD";
    CurrenciesEnum["BTN"] = "BTN";
    CurrenciesEnum["BOB"] = "BOB";
    CurrenciesEnum["BOL"] = "BOL";
    CurrenciesEnum["BOV"] = "BOV";
    CurrenciesEnum["BOP"] = "BOP";
    CurrenciesEnum["BAM"] = "BAM";
    CurrenciesEnum["BAD"] = "BAD";
    CurrenciesEnum["BAN"] = "BAN";
    CurrenciesEnum["BWP"] = "BWP";
    CurrenciesEnum["BRC"] = "BRC";
    CurrenciesEnum["BRZ"] = "BRZ";
    CurrenciesEnum["BRE"] = "BRE";
    CurrenciesEnum["BRR"] = "BRR";
    CurrenciesEnum["BRN"] = "BRN";
    CurrenciesEnum["BRB"] = "BRB";
    CurrenciesEnum["BRL"] = "BRL";
    CurrenciesEnum["GBP"] = "GBP";
    CurrenciesEnum["BND"] = "BND";
    CurrenciesEnum["BGL"] = "BGL";
    CurrenciesEnum["BGN"] = "BGN";
    CurrenciesEnum["BGO"] = "BGO";
    CurrenciesEnum["BGM"] = "BGM";
    CurrenciesEnum["BUK"] = "BUK";
    CurrenciesEnum["BIF"] = "BIF";
    CurrenciesEnum["XPF"] = "XPF";
    CurrenciesEnum["KHR"] = "KHR";
    CurrenciesEnum["CAD"] = "CAD";
    CurrenciesEnum["CVE"] = "CVE";
    CurrenciesEnum["KYD"] = "KYD";
    CurrenciesEnum["XAF"] = "XAF";
    CurrenciesEnum["CLE"] = "CLE";
    CurrenciesEnum["CLP"] = "CLP";
    CurrenciesEnum["CLF"] = "CLF";
    CurrenciesEnum["CNX"] = "CNX";
    CurrenciesEnum["CNY"] = "CNY";
    CurrenciesEnum["COP"] = "COP";
    CurrenciesEnum["COU"] = "COU";
    CurrenciesEnum["KMF"] = "KMF";
    CurrenciesEnum["CDF"] = "CDF";
    CurrenciesEnum["CRC"] = "CRC";
    CurrenciesEnum["HRD"] = "HRD";
    CurrenciesEnum["HRK"] = "HRK";
    CurrenciesEnum["CUC"] = "CUC";
    CurrenciesEnum["CUP"] = "CUP";
    CurrenciesEnum["CYP"] = "CYP";
    CurrenciesEnum["CZK"] = "CZK";
    CurrenciesEnum["CSK"] = "CSK";
    CurrenciesEnum["DKK"] = "DKK";
    CurrenciesEnum["DJF"] = "DJF";
    CurrenciesEnum["DOP"] = "DOP";
    CurrenciesEnum["NLG"] = "NLG";
    CurrenciesEnum["XCD"] = "XCD";
    CurrenciesEnum["DDM"] = "DDM";
    CurrenciesEnum["ECS"] = "ECS";
    CurrenciesEnum["ECV"] = "ECV";
    CurrenciesEnum["EGP"] = "EGP";
    CurrenciesEnum["GQE"] = "GQE";
    CurrenciesEnum["ERN"] = "ERN";
    CurrenciesEnum["EEK"] = "EEK";
    CurrenciesEnum["ETB"] = "ETB";
    CurrenciesEnum["EUR"] = "EUR";
    CurrenciesEnum["XEU"] = "XEU";
    CurrenciesEnum["FKP"] = "FKP";
    CurrenciesEnum["FJD"] = "FJD";
    CurrenciesEnum["FIM"] = "FIM";
    CurrenciesEnum["FRF"] = "FRF";
    CurrenciesEnum["XFO"] = "XFO";
    CurrenciesEnum["XFU"] = "XFU";
    CurrenciesEnum["GMD"] = "GMD";
    CurrenciesEnum["GEK"] = "GEK";
    CurrenciesEnum["GEL"] = "GEL";
    CurrenciesEnum["DEM"] = "DEM";
    CurrenciesEnum["GHS"] = "GHS";
    CurrenciesEnum["GHC"] = "GHC";
    CurrenciesEnum["GIP"] = "GIP";
    CurrenciesEnum["GRD"] = "GRD";
    CurrenciesEnum["GTQ"] = "GTQ";
    CurrenciesEnum["GWP"] = "GWP";
    CurrenciesEnum["GNF"] = "GNF";
    CurrenciesEnum["GNS"] = "GNS";
    CurrenciesEnum["GYD"] = "GYD";
    CurrenciesEnum["HTG"] = "HTG";
    CurrenciesEnum["HNL"] = "HNL";
    CurrenciesEnum["HKD"] = "HKD";
    CurrenciesEnum["HUF"] = "HUF";
    CurrenciesEnum["ISK"] = "ISK";
    CurrenciesEnum["ISJ"] = "ISJ";
    CurrenciesEnum["INR"] = "INR";
    CurrenciesEnum["IDR"] = "IDR";
    CurrenciesEnum["IRR"] = "IRR";
    CurrenciesEnum["IQD"] = "IQD";
    CurrenciesEnum["IEP"] = "IEP";
    CurrenciesEnum["ILS"] = "ILS";
    CurrenciesEnum["ILP"] = "ILP";
    CurrenciesEnum["ILR"] = "ILR";
    CurrenciesEnum["ITL"] = "ITL";
    CurrenciesEnum["JMD"] = "JMD";
    CurrenciesEnum["JPY"] = "JPY";
    CurrenciesEnum["JOD"] = "JOD";
    CurrenciesEnum["KZT"] = "KZT";
    CurrenciesEnum["KES"] = "KES";
    CurrenciesEnum["KWD"] = "KWD";
    CurrenciesEnum["KGS"] = "KGS";
    CurrenciesEnum["LAK"] = "LAK";
    CurrenciesEnum["LVL"] = "LVL";
    CurrenciesEnum["LVR"] = "LVR";
    CurrenciesEnum["LBP"] = "LBP";
    CurrenciesEnum["LSL"] = "LSL";
    CurrenciesEnum["LRD"] = "LRD";
    CurrenciesEnum["LYD"] = "LYD";
    CurrenciesEnum["LTL"] = "LTL";
    CurrenciesEnum["LTT"] = "LTT";
    CurrenciesEnum["LUL"] = "LUL";
    CurrenciesEnum["LUC"] = "LUC";
    CurrenciesEnum["LUF"] = "LUF";
    CurrenciesEnum["MOP"] = "MOP";
    CurrenciesEnum["MKD"] = "MKD";
    CurrenciesEnum["MKN"] = "MKN";
    CurrenciesEnum["MGA"] = "MGA";
    CurrenciesEnum["MGF"] = "MGF";
    CurrenciesEnum["MWK"] = "MWK";
    CurrenciesEnum["MYR"] = "MYR";
    CurrenciesEnum["MVR"] = "MVR";
    CurrenciesEnum["MVP"] = "MVP";
    CurrenciesEnum["MLF"] = "MLF";
    CurrenciesEnum["MTL"] = "MTL";
    CurrenciesEnum["MTP"] = "MTP";
    CurrenciesEnum["MRO"] = "MRO";
    CurrenciesEnum["MUR"] = "MUR";
    CurrenciesEnum["MXV"] = "MXV";
    CurrenciesEnum["MXN"] = "MXN";
    CurrenciesEnum["MXP"] = "MXP";
    CurrenciesEnum["MDC"] = "MDC";
    CurrenciesEnum["MDL"] = "MDL";
    CurrenciesEnum["MCF"] = "MCF";
    CurrenciesEnum["MNT"] = "MNT";
    CurrenciesEnum["MAD"] = "MAD";
    CurrenciesEnum["MAF"] = "MAF";
    CurrenciesEnum["MZE"] = "MZE";
    CurrenciesEnum["MZN"] = "MZN";
    CurrenciesEnum["MZM"] = "MZM";
    CurrenciesEnum["MMK"] = "MMK";
    CurrenciesEnum["NAD"] = "NAD";
    CurrenciesEnum["NPR"] = "NPR";
    CurrenciesEnum["ANG"] = "ANG";
    CurrenciesEnum["TWD"] = "TWD";
    CurrenciesEnum["NZD"] = "NZD";
    CurrenciesEnum["NIO"] = "NIO";
    CurrenciesEnum["NIC"] = "NIC";
    CurrenciesEnum["NGN"] = "NGN";
    CurrenciesEnum["KPW"] = "KPW";
    CurrenciesEnum["NOK"] = "NOK";
    CurrenciesEnum["OMR"] = "OMR";
    CurrenciesEnum["PKR"] = "PKR";
    CurrenciesEnum["PAB"] = "PAB";
    CurrenciesEnum["PGK"] = "PGK";
    CurrenciesEnum["PYG"] = "PYG";
    CurrenciesEnum["PEI"] = "PEI";
    CurrenciesEnum["PEN"] = "PEN";
    CurrenciesEnum["PES"] = "PES";
    CurrenciesEnum["PHP"] = "PHP";
    CurrenciesEnum["PLN"] = "PLN";
    CurrenciesEnum["PLZ"] = "PLZ";
    CurrenciesEnum["PTE"] = "PTE";
    CurrenciesEnum["GWE"] = "GWE";
    CurrenciesEnum["QAR"] = "QAR";
    CurrenciesEnum["XRE"] = "XRE";
    CurrenciesEnum["RHD"] = "RHD";
    CurrenciesEnum["RON"] = "RON";
    CurrenciesEnum["ROL"] = "ROL";
    CurrenciesEnum["RUB"] = "RUB";
    CurrenciesEnum["RUR"] = "RUR";
    CurrenciesEnum["RWF"] = "RWF";
    CurrenciesEnum["SVC"] = "SVC";
    CurrenciesEnum["WST"] = "WST";
    CurrenciesEnum["SAR"] = "SAR";
    CurrenciesEnum["RSD"] = "RSD";
    CurrenciesEnum["CSD"] = "CSD";
    CurrenciesEnum["SCR"] = "SCR";
    CurrenciesEnum["SLL"] = "SLL";
    CurrenciesEnum["SGD"] = "SGD";
    CurrenciesEnum["SKK"] = "SKK";
    CurrenciesEnum["SIT"] = "SIT";
    CurrenciesEnum["SBD"] = "SBD";
    CurrenciesEnum["SOS"] = "SOS";
    CurrenciesEnum["ZAR"] = "ZAR";
    CurrenciesEnum["ZAL"] = "ZAL";
    CurrenciesEnum["KRH"] = "KRH";
    CurrenciesEnum["KRW"] = "KRW";
    CurrenciesEnum["KRO"] = "KRO";
    CurrenciesEnum["SSP"] = "SSP";
    CurrenciesEnum["SUR"] = "SUR";
    CurrenciesEnum["ESP"] = "ESP";
    CurrenciesEnum["ESA"] = "ESA";
    CurrenciesEnum["ESB"] = "ESB";
    CurrenciesEnum["LKR"] = "LKR";
    CurrenciesEnum["SHP"] = "SHP";
    CurrenciesEnum["SDD"] = "SDD";
    CurrenciesEnum["SDG"] = "SDG";
    CurrenciesEnum["SDP"] = "SDP";
    CurrenciesEnum["SRD"] = "SRD";
    CurrenciesEnum["SRG"] = "SRG";
    CurrenciesEnum["SZL"] = "SZL";
    CurrenciesEnum["SEK"] = "SEK";
    CurrenciesEnum["CHF"] = "CHF";
    CurrenciesEnum["SYP"] = "SYP";
    CurrenciesEnum["STD"] = "STD";
    CurrenciesEnum["TJR"] = "TJR";
    CurrenciesEnum["TJS"] = "TJS";
    CurrenciesEnum["TZS"] = "TZS";
    CurrenciesEnum["THB"] = "THB";
    CurrenciesEnum["TPE"] = "TPE";
    CurrenciesEnum["TOP"] = "TOP";
    CurrenciesEnum["TTD"] = "TTD";
    CurrenciesEnum["TND"] = "TND";
    CurrenciesEnum["TRY"] = "TRY";
    CurrenciesEnum["TRL"] = "TRL";
    CurrenciesEnum["TMT"] = "TMT";
    CurrenciesEnum["TMM"] = "TMM";
    CurrenciesEnum["USD"] = "USD";
    CurrenciesEnum["USN"] = "USN";
    CurrenciesEnum["USS"] = "USS";
    CurrenciesEnum["UGX"] = "UGX";
    CurrenciesEnum["UGS"] = "UGS";
    CurrenciesEnum["UAH"] = "UAH";
    CurrenciesEnum["UAK"] = "UAK";
    CurrenciesEnum["AED"] = "AED";
    CurrenciesEnum["UYU"] = "UYU";
    CurrenciesEnum["UYP"] = "UYP";
    CurrenciesEnum["UYI"] = "UYI";
    CurrenciesEnum["UZS"] = "UZS";
    CurrenciesEnum["VUV"] = "VUV";
    CurrenciesEnum["VEF"] = "VEF";
    CurrenciesEnum["VEB"] = "VEB";
    CurrenciesEnum["VND"] = "VND";
    CurrenciesEnum["VNN"] = "VNN";
    CurrenciesEnum["CHE"] = "CHE";
    CurrenciesEnum["CHW"] = "CHW";
    CurrenciesEnum["XOF"] = "XOF";
    CurrenciesEnum["YDD"] = "YDD";
    CurrenciesEnum["YER"] = "YER";
    CurrenciesEnum["YUN"] = "YUN";
    CurrenciesEnum["YUD"] = "YUD";
    CurrenciesEnum["YUM"] = "YUM";
    CurrenciesEnum["YUR"] = "YUR";
    CurrenciesEnum["ZRN"] = "ZRN";
    CurrenciesEnum["ZRZ"] = "ZRZ";
    CurrenciesEnum["ZMW"] = "ZMW";
    CurrenciesEnum["ZMK"] = "ZMK";
    CurrenciesEnum["ZWD"] = "ZWD";
    CurrenciesEnum["ZWR"] = "ZWR";
    CurrenciesEnum["ZWL"] = "ZWL";
})(CurrenciesEnum = exports.CurrenciesEnum || (exports.CurrenciesEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/custom-smtp.model.ts":
/*!**************************************************!*\
  !*** ./libs/models/src/lib/custom-smtp.model.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SMTPSecureEnum = void 0;
var SMTPSecureEnum;
(function (SMTPSecureEnum) {
    SMTPSecureEnum["TRUE"] = "True";
    SMTPSecureEnum["FALSE"] = "False";
})(SMTPSecureEnum = exports.SMTPSecureEnum || (exports.SMTPSecureEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/deal.model.ts":
/*!*******************************************!*\
  !*** ./libs/models/src/lib/deal.model.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/email-template.model.ts":
/*!*****************************************************!*\
  !*** ./libs/models/src/lib/email-template.model.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailTemplateNameEnum = void 0;
var EmailTemplateNameEnum;
(function (EmailTemplateNameEnum) {
    EmailTemplateNameEnum["PASSWORD_RESET"] = "password";
    EmailTemplateNameEnum["APPOINTMENT_CONFIRMATION"] = "appointment-confirmation";
    EmailTemplateNameEnum["APPOINTMENT_CANCELLATION"] = "appointment-cancellation";
    EmailTemplateNameEnum["TIME_OFF_POLICY_ACTION"] = "time-off-report-action";
    EmailTemplateNameEnum["TASK_UPDATE"] = "task-update";
    EmailTemplateNameEnum["EQUIPMENT"] = "equipment";
    EmailTemplateNameEnum["EQUIPMENT_REQUEST"] = "equipment-request";
    EmailTemplateNameEnum["TIME_SHEET_OVERVIEW"] = "timesheet-overview";
    EmailTemplateNameEnum["TIME_SHEET_SUBMIT"] = "timesheet-submit";
    EmailTemplateNameEnum["TIME_SHEET_ACTION"] = "timesheet-action";
    EmailTemplateNameEnum["TIME_SHEET_DELETE"] = "timesheet-delete";
    EmailTemplateNameEnum["CANDIDATE_INTERVIEW_SCHEDULE"] = "candidate-schedule-interview";
    EmailTemplateNameEnum["INTERVIEWER_INTERVIEW_SCHEDULE"] = "interviewer-interview-schedule";
    EmailTemplateNameEnum["WELCOME_USER"] = "welcome-user";
    EmailTemplateNameEnum["INVITE_ORGANIZATION_CLIENT"] = "invite-organization-client";
    EmailTemplateNameEnum["INVITE_EMPLOYEE"] = "invite-employee";
    EmailTemplateNameEnum["INVITE_USER"] = "invite-user";
    EmailTemplateNameEnum["EMAIL_INVOICE"] = "email-invoice";
    EmailTemplateNameEnum["EMAIL_ESTIMATE"] = "email-estimate";
})(EmailTemplateNameEnum = exports.EmailTemplateNameEnum || (exports.EmailTemplateNameEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/email.model.ts":
/*!********************************************!*\
  !*** ./libs/models/src/lib/email.model.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/employee-appointment.model.ts":
/*!***********************************************************!*\
  !*** ./libs/models/src/lib/employee-appointment.model.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/employee-award.model.ts":
/*!*****************************************************!*\
  !*** ./libs/models/src/lib/employee-award.model.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/employee-job.model.ts":
/*!***************************************************!*\
  !*** ./libs/models/src/lib/employee-job.model.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.JobPostTypeEnum = exports.JobPostStatusEnum = exports.JobPostSourceEnum = void 0;
var JobPostSourceEnum;
(function (JobPostSourceEnum) {
    JobPostSourceEnum["UPWORK"] = "UPWORK";
    JobPostSourceEnum["WEB"] = "WEB";
})(JobPostSourceEnum = exports.JobPostSourceEnum || (exports.JobPostSourceEnum = {}));
var JobPostStatusEnum;
(function (JobPostStatusEnum) {
    JobPostStatusEnum["OPEN"] = "OPEN";
    JobPostStatusEnum["APPLIED"] = "APPLIED";
    JobPostStatusEnum["CLOSED"] = "CLOSED";
})(JobPostStatusEnum = exports.JobPostStatusEnum || (exports.JobPostStatusEnum = {}));
var JobPostTypeEnum;
(function (JobPostTypeEnum) {
    JobPostTypeEnum["HOURLY"] = "HOURLY";
    JobPostTypeEnum["FIX_PRICE"] = "FIX_PRICE";
})(JobPostTypeEnum = exports.JobPostTypeEnum || (exports.JobPostTypeEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/employee-proposal-template.model.ts":
/*!*****************************************************************!*\
  !*** ./libs/models/src/lib/employee-proposal-template.model.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/employee-recurring-expense.model.ts":
/*!*****************************************************************!*\
  !*** ./libs/models/src/lib/employee-recurring-expense.model.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/employee-settings.model.ts":
/*!********************************************************!*\
  !*** ./libs/models/src/lib/employee-settings.model.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/employee-statistics.model.ts":
/*!**********************************************************!*\
  !*** ./libs/models/src/lib/employee-statistics.model.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeStatisticsHistoryEnum = void 0;
var EmployeeStatisticsHistoryEnum;
(function (EmployeeStatisticsHistoryEnum) {
    EmployeeStatisticsHistoryEnum["INCOME"] = "INCOME";
    EmployeeStatisticsHistoryEnum["EXPENSES"] = "EXPENSES";
    EmployeeStatisticsHistoryEnum["EXPENSES_WITHOUT_SALARY"] = "EXPENSES_WITHOUT_SALARY";
    EmployeeStatisticsHistoryEnum["NON_BONUS_INCOME"] = "NON_BONUS_INCOME";
    EmployeeStatisticsHistoryEnum["BONUS_INCOME"] = "BONUS_INCOME";
    EmployeeStatisticsHistoryEnum["PROFIT"] = "PROFIT";
})(EmployeeStatisticsHistoryEnum = exports.EmployeeStatisticsHistoryEnum || (exports.EmployeeStatisticsHistoryEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/employee.model.ts":
/*!***********************************************!*\
  !*** ./libs/models/src/lib/employee.model.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeAction = exports.PayPeriodEnum = void 0;
var PayPeriodEnum;
(function (PayPeriodEnum) {
    PayPeriodEnum["NONE"] = "NONE";
    PayPeriodEnum["BI_WEEKLY"] = "BI_WEEKLY";
    PayPeriodEnum["WEEKLY"] = "WEEKLY";
    PayPeriodEnum["TWICE_PER_MONTH"] = "TWICE_PER_MONTH";
    PayPeriodEnum["MONTHLY"] = "MONTHLY";
})(PayPeriodEnum = exports.PayPeriodEnum || (exports.PayPeriodEnum = {}));
var EmployeeAction;
(function (EmployeeAction) {
    EmployeeAction["CREATED"] = "CREATED";
    EmployeeAction["UPDATED"] = "UPDATED";
    EmployeeAction["DELETED"] = "DELETED";
})(EmployeeAction = exports.EmployeeAction || (exports.EmployeeAction = {}));


/***/ }),

/***/ "./libs/models/src/lib/entity-with-members.model.ts":
/*!**********************************************************!*\
  !*** ./libs/models/src/lib/entity-with-members.model.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/equipment-sharing-policy.model.ts":
/*!***************************************************************!*\
  !*** ./libs/models/src/lib/equipment-sharing-policy.model.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/equipment-sharing.model.ts":
/*!********************************************************!*\
  !*** ./libs/models/src/lib/equipment-sharing.model.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentSharingStatusEnum = void 0;
var EquipmentSharingStatusEnum;
(function (EquipmentSharingStatusEnum) {
    EquipmentSharingStatusEnum["ACTIVE"] = "Active";
    EquipmentSharingStatusEnum["REQUESTED"] = "Requested";
    EquipmentSharingStatusEnum["APPROVED"] = "Approved";
})(EquipmentSharingStatusEnum = exports.EquipmentSharingStatusEnum || (exports.EquipmentSharingStatusEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/equipment.model.ts":
/*!************************************************!*\
  !*** ./libs/models/src/lib/equipment.model.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/estimate-email.model.ts":
/*!*****************************************************!*\
  !*** ./libs/models/src/lib/estimate-email.model.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/event-type.model.ts":
/*!*************************************************!*\
  !*** ./libs/models/src/lib/event-type.model.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/expense-category.model.ts":
/*!*******************************************************!*\
  !*** ./libs/models/src/lib/expense-category.model.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpenseCategoriesEnum = void 0;
var ExpenseCategoriesEnum;
(function (ExpenseCategoriesEnum) {
    ExpenseCategoriesEnum["SOFTWARE"] = "Software";
    ExpenseCategoriesEnum["EMPLOYEES_BENEFITS"] = "Employees Benefits";
    ExpenseCategoriesEnum["COURSES"] = "Courses";
    ExpenseCategoriesEnum["SUBSCRIPTIONS"] = "Subscriptions";
    ExpenseCategoriesEnum["RENT"] = "Rent";
    ExpenseCategoriesEnum["SERVICE_FEE"] = "Service Fee";
})(ExpenseCategoriesEnum = exports.ExpenseCategoriesEnum || (exports.ExpenseCategoriesEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/expense.model.ts":
/*!**********************************************!*\
  !*** ./libs/models/src/lib/expense.model.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpenseStatusesEnum = exports.TaxTypesEnum = exports.ExpenseTypesEnum = void 0;
var ExpenseTypesEnum;
(function (ExpenseTypesEnum) {
    ExpenseTypesEnum["TAX_DEDUCTIBLE"] = "Tax Deductible";
    ExpenseTypesEnum["NOT_TAX_DEDUCTIBLE"] = "Not Tax Deductible";
    ExpenseTypesEnum["BILLABLE_TO_CONTACT"] = "Billable to Contact";
})(ExpenseTypesEnum = exports.ExpenseTypesEnum || (exports.ExpenseTypesEnum = {}));
var TaxTypesEnum;
(function (TaxTypesEnum) {
    TaxTypesEnum["PERCENTAGE"] = "Percentage";
    TaxTypesEnum["VALUE"] = "Value";
})(TaxTypesEnum = exports.TaxTypesEnum || (exports.TaxTypesEnum = {}));
var ExpenseStatusesEnum;
(function (ExpenseStatusesEnum) {
    ExpenseStatusesEnum["INVOICED"] = "Invoiced";
    ExpenseStatusesEnum["UNINVOICED"] = "Uninvoiced";
    ExpenseStatusesEnum["PAID"] = "Paid";
})(ExpenseStatusesEnum = exports.ExpenseStatusesEnum || (exports.ExpenseStatusesEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/feature.model.ts":
/*!**********************************************!*\
  !*** ./libs/models/src/lib/feature.model.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureEnum = exports.IFeatureToggleTypeEnum = exports.FeatureStatusEnum = void 0;
var FeatureStatusEnum;
(function (FeatureStatusEnum) {
    FeatureStatusEnum["INFO"] = "info";
    FeatureStatusEnum["PRIMARY"] = "primary";
    FeatureStatusEnum["SUCCESS"] = "success";
    FeatureStatusEnum["WARNING"] = "warning";
})(FeatureStatusEnum = exports.FeatureStatusEnum || (exports.FeatureStatusEnum = {}));
var IFeatureToggleTypeEnum;
(function (IFeatureToggleTypeEnum) {
    IFeatureToggleTypeEnum["RELEASE"] = "release";
    IFeatureToggleTypeEnum["KILL_SWITCH"] = "kill-switch";
    IFeatureToggleTypeEnum["EXPERIMENT"] = "experiment";
    IFeatureToggleTypeEnum["OPERATIONAL"] = "operational";
    IFeatureToggleTypeEnum["PERMISSION"] = "permission";
})(IFeatureToggleTypeEnum = exports.IFeatureToggleTypeEnum || (exports.IFeatureToggleTypeEnum = {}));
var FeatureEnum;
(function (FeatureEnum) {
    FeatureEnum["FEATURE_DASHBOARD"] = "FEATURE_DASHBOARD";
    FeatureEnum["FEATURE_TIME_TRACKING"] = "FEATURE_TIME_TRACKING";
    FeatureEnum["FEATURE_ESTIMATE"] = "FEATURE_ESTIMATE";
    FeatureEnum["FEATURE_ESTIMATE_RECEIVED"] = "FEATURE_ESTIMATE_RECEIVED";
    FeatureEnum["FEATURE_INVOICE"] = "FEATURE_INVOICE";
    FeatureEnum["FEATURE_INVOICE_RECURRING"] = "FEATURE_INVOICE_RECURRING";
    FeatureEnum["FEATURE_INVOICE_RECEIVED"] = "FEATURE_INVOICE_RECEIVED";
    FeatureEnum["FEATURE_INCOME"] = "FEATURE_INCOME";
    FeatureEnum["FEATURE_EXPENSE"] = "FEATURE_EXPENSE";
    FeatureEnum["FEATURE_PAYMENT"] = "FEATURE_PAYMENT";
    FeatureEnum["FEATURE_PROPOSAL"] = "FEATURE_PROPOSAL";
    FeatureEnum["FEATURE_PROPOSAL_TEMPLATE"] = "FEATURE_PROPOSAL_TEMPLATE";
    FeatureEnum["FEATURE_PIPELINE"] = "FEATURE_PIPELINE";
    FeatureEnum["FEATURE_PIPELINE_DEAL"] = "FEATURE_PIPELINE_DEAL";
    FeatureEnum["FEATURE_DASHBOARD_TASK"] = "FEATURE_DASHBOARD_TASK";
    FeatureEnum["FEATURE_TEAM_TASK"] = "FEATURE_TEAM_TASK";
    FeatureEnum["FEATURE_MY_TASK"] = "FEATURE_MY_TASK";
    FeatureEnum["FEATURE_JOB"] = "FEATURE_JOB";
    FeatureEnum["FEATURE_EMPLOYEES"] = "FEATURE_EMPLOYEES";
    FeatureEnum["FEATURE_EMPLOYEE_TIME_ACTIVITY"] = "FEATURE_EMPLOYEE_TIME_ACTIVITY";
    FeatureEnum["FEATURE_EMPLOYEE_TIMESHEETS"] = "FEATURE_EMPLOYEE_TIMESHEETS";
    FeatureEnum["FEATURE_EMPLOYEE_APPOINTMENT"] = "FEATURE_EMPLOYEE_APPOINTMENT";
    FeatureEnum["FEATURE_EMPLOYEE_APPROVAL"] = "FEATURE_EMPLOYEE_APPROVAL";
    FeatureEnum["FEATURE_EMPLOYEE_APPROVAL_POLICY"] = "FEATURE_EMPLOYEE_APPROVAL_POLICY";
    FeatureEnum["FEATURE_EMPLOYEE_LEVEL"] = "FEATURE_EMPLOYEE_LEVEL";
    FeatureEnum["FEATURE_EMPLOYEE_POSITION"] = "FEATURE_EMPLOYEE_POSITION";
    FeatureEnum["FEATURE_EMPLOYEE_TIMEOFF"] = "FEATURE_EMPLOYEE_TIMEOFF";
    FeatureEnum["FEATURE_EMPLOYEE_RECURRING_EXPENSE"] = "FEATURE_EMPLOYEE_RECURRING_EXPENSE";
    FeatureEnum["FEATURE_EMPLOYEE_CANDIDATE"] = "FEATURE_EMPLOYEE_CANDIDATE";
    FeatureEnum["FEATURE_MANAGE_INTERVIEW"] = "FEATURE_MANAGE_INTERVIEW";
    FeatureEnum["FEATURE_MANAGE_INVITE"] = "FEATURE_MANAGE_INVITE";
    FeatureEnum["FEATURE_ORGANIZATION"] = "FEATURE_ORGANIZATION";
    FeatureEnum["FEATURE_ORGANIZATION_EQUIPMENT"] = "FEATURE_ORGANIZATION_EQUIPMENT";
    FeatureEnum["FEATURE_ORGANIZATION_INVENTORY"] = "FEATURE_ORGANIZATION_INVENTORY";
    FeatureEnum["FEATURE_ORGANIZATION_TAG"] = "FEATURE_ORGANIZATION_TAG";
    FeatureEnum["FEATURE_ORGANIZATION_VENDOR"] = "FEATURE_ORGANIZATION_VENDOR";
    FeatureEnum["FEATURE_ORGANIZATION_PROJECT"] = "FEATURE_ORGANIZATION_PROJECT";
    FeatureEnum["FEATURE_ORGANIZATION_DEPARTMENT"] = "FEATURE_ORGANIZATION_DEPARTMENT";
    FeatureEnum["FEATURE_ORGANIZATION_TEAM"] = "FEATURE_ORGANIZATION_TEAM";
    FeatureEnum["FEATURE_ORGANIZATION_DOCUMENT"] = "FEATURE_ORGANIZATION_DOCUMENT";
    FeatureEnum["FEATURE_ORGANIZATION_EMPLOYMENT_TYPE"] = "FEATURE_ORGANIZATION_EMPLOYMENT_TYPE";
    FeatureEnum["FEATURE_ORGANIZATION_RECURRING_EXPENSE"] = "FEATURE_ORGANIZATION_RECURRING_EXPENSE";
    FeatureEnum["FEATURE_ORGANIZATION_HELP_CENTER"] = "FEATURE_ORGANIZATION_HELP_CENTER";
    FeatureEnum["FEATURE_CONTACT"] = "FEATURE_CONTACT";
    FeatureEnum["FEATURE_GOAL"] = "FEATURE_GOAL";
    FeatureEnum["FEATURE_GOAL_REPORT"] = "FEATURE_GOAL_REPORT";
    FeatureEnum["FEATURE_GOAL_SETTING"] = "FEATURE_GOAL_SETTING";
    FeatureEnum["FEATURE_REPORT"] = "FEATURE_REPORT";
    FeatureEnum["FEATURE_USER"] = "FEATURE_USER";
    FeatureEnum["FEATURE_ORGANIZATIONS"] = "FEATURE_ORGANIZATIONS";
    FeatureEnum["FEATURE_APP_INTEGRATION"] = "FEATURE_APP_INTEGRATION";
    FeatureEnum["FEATURE_SETTING"] = "FEATURE_SETTING";
    FeatureEnum["FEATURE_EMAIL_HISTORY"] = "FEATURE_EMAIL_HISTORY";
    FeatureEnum["FEATURE_EMAIL_TEMPLATE"] = "FEATURE_EMAIL_TEMPLATE";
    FeatureEnum["FEATURE_IMPORT_EXPORT"] = "FEATURE_IMPORT_EXPORT";
    FeatureEnum["FEATURE_FILE_STORAGE"] = "FEATURE_FILE_STORAGE";
    FeatureEnum["FEATURE_PAYMENT_GATEWAY"] = "FEATURE_PAYMENT_GATEWAY";
    FeatureEnum["FEATURE_SMS_GATEWAY"] = "FEATURE_SMS_GATEWAY";
    FeatureEnum["FEATURE_SMTP"] = "FEATURE_SMTP";
    FeatureEnum["FEATURE_ROLES_PERMISSION"] = "FEATURE_ROLES_PERMISSION";
})(FeatureEnum = exports.FeatureEnum || (exports.FeatureEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/file-provider.ts":
/*!**********************************************!*\
  !*** ./libs/models/src/lib/file-provider.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.FileStorageProviderEnum = void 0;
var FileStorageProviderEnum;
(function (FileStorageProviderEnum) {
    FileStorageProviderEnum["LOCAL"] = "local";
    FileStorageProviderEnum["S3"] = "s3";
})(FileStorageProviderEnum = exports.FileStorageProviderEnum || (exports.FileStorageProviderEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/geo-location.model.ts":
/*!***************************************************!*\
  !*** ./libs/models/src/lib/geo-location.model.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getEmptyAddress = void 0;
function getEmptyAddress() {
    return {
        country: null,
        city: null,
        postcode: null,
        address: null,
        address2: null
    };
}
exports.getEmptyAddress = getEmptyAddress;


/***/ }),

/***/ "./libs/models/src/lib/goal-settings.model.ts":
/*!****************************************************!*\
  !*** ./libs/models/src/lib/goal-settings.model.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalOwnershipEnum = exports.KpiOperatorEnum = exports.GoalTemplateCategoriesEnum = exports.KpiMetricEnum = exports.TimeFrameStatusEnum = void 0;
var TimeFrameStatusEnum;
(function (TimeFrameStatusEnum) {
    TimeFrameStatusEnum["ACTIVE"] = "Active";
    TimeFrameStatusEnum["INACTIVE"] = "Inactive";
})(TimeFrameStatusEnum = exports.TimeFrameStatusEnum || (exports.TimeFrameStatusEnum = {}));
var KpiMetricEnum;
(function (KpiMetricEnum) {
    KpiMetricEnum["NUMERICAL"] = "Numerical";
    KpiMetricEnum["PERCENTAGE"] = "Percentage";
    KpiMetricEnum["CURRENCY"] = "Currency";
})(KpiMetricEnum = exports.KpiMetricEnum || (exports.KpiMetricEnum = {}));
var GoalTemplateCategoriesEnum;
(function (GoalTemplateCategoriesEnum) {
    GoalTemplateCategoriesEnum["PRODUCT_MANAGEMENT"] = "Product Management";
    GoalTemplateCategoriesEnum["SALES"] = "Sales";
    GoalTemplateCategoriesEnum["HR"] = "HR";
    GoalTemplateCategoriesEnum["MARKETING"] = "Marketing";
})(GoalTemplateCategoriesEnum = exports.GoalTemplateCategoriesEnum || (exports.GoalTemplateCategoriesEnum = {}));
var KpiOperatorEnum;
(function (KpiOperatorEnum) {
    KpiOperatorEnum["GREATER_THAN_EQUAL_TO"] = ">=";
    KpiOperatorEnum["LESSER_THAN_EQUAL_TO"] = "<=";
})(KpiOperatorEnum = exports.KpiOperatorEnum || (exports.KpiOperatorEnum = {}));
var GoalOwnershipEnum;
(function (GoalOwnershipEnum) {
    GoalOwnershipEnum["EMPLOYEES"] = "Employees";
    GoalOwnershipEnum["TEAMS"] = "Teams";
    GoalOwnershipEnum["EMPLOYEES_AND_TEAMS"] = "Employees and Teams";
})(GoalOwnershipEnum = exports.GoalOwnershipEnum || (exports.GoalOwnershipEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/goals.model.ts":
/*!********************************************!*\
  !*** ./libs/models/src/lib/goals.model.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyResultUpdateStatusEnum = exports.GoalLevelEnum = exports.KeyResultDeadlineEnum = exports.KeyResultTypeEnum = exports.KeyResultWeightEnum = exports.KeyResultNumberUnitsEnum = void 0;
var KeyResultNumberUnitsEnum;
(function (KeyResultNumberUnitsEnum) {
    KeyResultNumberUnitsEnum["SALES"] = "sales";
    KeyResultNumberUnitsEnum["VISITORS"] = "visitors";
    KeyResultNumberUnitsEnum["PEOPLE"] = "people";
    KeyResultNumberUnitsEnum["ITEMS"] = "items";
    KeyResultNumberUnitsEnum["CLIENTS"] = "clients";
})(KeyResultNumberUnitsEnum = exports.KeyResultNumberUnitsEnum || (exports.KeyResultNumberUnitsEnum = {}));
var KeyResultWeightEnum;
(function (KeyResultWeightEnum) {
    KeyResultWeightEnum["DEFAULT"] = "1";
    KeyResultWeightEnum["INCREASE_BY_2X"] = "2";
    KeyResultWeightEnum["INCREASE_BY_4X"] = "4";
})(KeyResultWeightEnum = exports.KeyResultWeightEnum || (exports.KeyResultWeightEnum = {}));
var KeyResultTypeEnum;
(function (KeyResultTypeEnum) {
    KeyResultTypeEnum["NUMERICAL"] = "Numerical";
    KeyResultTypeEnum["TRUE_OR_FALSE"] = "True/False";
    KeyResultTypeEnum["CURRENCY"] = "Currency";
    KeyResultTypeEnum["TASK"] = "Task";
    KeyResultTypeEnum["KPI"] = "KPI";
})(KeyResultTypeEnum = exports.KeyResultTypeEnum || (exports.KeyResultTypeEnum = {}));
var KeyResultDeadlineEnum;
(function (KeyResultDeadlineEnum) {
    KeyResultDeadlineEnum["NO_CUSTOM_DEADLINE"] = "No Custom Deadline";
    KeyResultDeadlineEnum["HARD_DEADLINE"] = "Hard Deadline";
    KeyResultDeadlineEnum["HARD_AND_SOFT_DEADLINE"] = "Hard and Soft Deadline";
})(KeyResultDeadlineEnum = exports.KeyResultDeadlineEnum || (exports.KeyResultDeadlineEnum = {}));
var GoalLevelEnum;
(function (GoalLevelEnum) {
    GoalLevelEnum["ORGANIZATION"] = "Organization";
    GoalLevelEnum["TEAM"] = "Team";
    GoalLevelEnum["EMPLOYEE"] = "Employee";
})(GoalLevelEnum = exports.GoalLevelEnum || (exports.GoalLevelEnum = {}));
var KeyResultUpdateStatusEnum;
(function (KeyResultUpdateStatusEnum) {
    KeyResultUpdateStatusEnum["ON_TRACK"] = "on track";
    KeyResultUpdateStatusEnum["NEEDS_ATTENTION"] = "needs attention";
    KeyResultUpdateStatusEnum["OFF_TRACK"] = "off track";
    KeyResultUpdateStatusEnum["NONE"] = "none";
})(KeyResultUpdateStatusEnum = exports.KeyResultUpdateStatusEnum || (exports.KeyResultUpdateStatusEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/help-center-article.model.ts":
/*!**********************************************************!*\
  !*** ./libs/models/src/lib/help-center-article.model.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/help-center-menu.model.ts":
/*!*******************************************************!*\
  !*** ./libs/models/src/lib/help-center-menu.model.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/http-status.enum.ts":
/*!*************************************************!*\
  !*** ./libs/models/src/lib/http-status.enum.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestMethodEnum = exports.HttpStatus = void 0;
var HttpStatus;
(function (HttpStatus) {
    HttpStatus[HttpStatus["CONTINUE"] = 100] = "CONTINUE";
    HttpStatus[HttpStatus["SWITCHING_PROTOCOLS"] = 101] = "SWITCHING_PROTOCOLS";
    HttpStatus[HttpStatus["PROCESSING"] = 102] = "PROCESSING";
    HttpStatus[HttpStatus["OK"] = 200] = "OK";
    HttpStatus[HttpStatus["CREATED"] = 201] = "CREATED";
    HttpStatus[HttpStatus["ACCEPTED"] = 202] = "ACCEPTED";
    HttpStatus[HttpStatus["NON_AUTHORITATIVE_INFORMATION"] = 203] = "NON_AUTHORITATIVE_INFORMATION";
    HttpStatus[HttpStatus["NO_CONTENT"] = 204] = "NO_CONTENT";
    HttpStatus[HttpStatus["RESET_CONTENT"] = 205] = "RESET_CONTENT";
    HttpStatus[HttpStatus["PARTIAL_CONTENT"] = 206] = "PARTIAL_CONTENT";
    HttpStatus[HttpStatus["AMBIGUOUS"] = 300] = "AMBIGUOUS";
    HttpStatus[HttpStatus["MOVED_PERMANENTLY"] = 301] = "MOVED_PERMANENTLY";
    HttpStatus[HttpStatus["FOUND"] = 302] = "FOUND";
    HttpStatus[HttpStatus["SEE_OTHER"] = 303] = "SEE_OTHER";
    HttpStatus[HttpStatus["NOT_MODIFIED"] = 304] = "NOT_MODIFIED";
    HttpStatus[HttpStatus["TEMPORARY_REDIRECT"] = 307] = "TEMPORARY_REDIRECT";
    HttpStatus[HttpStatus["PERMANENT_REDIRECT"] = 308] = "PERMANENT_REDIRECT";
    HttpStatus[HttpStatus["BAD_REQUEST"] = 400] = "BAD_REQUEST";
    HttpStatus[HttpStatus["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
    HttpStatus[HttpStatus["PAYMENT_REQUIRED"] = 402] = "PAYMENT_REQUIRED";
    HttpStatus[HttpStatus["FORBIDDEN"] = 403] = "FORBIDDEN";
    HttpStatus[HttpStatus["NOT_FOUND"] = 404] = "NOT_FOUND";
    HttpStatus[HttpStatus["METHOD_NOT_ALLOWED"] = 405] = "METHOD_NOT_ALLOWED";
    HttpStatus[HttpStatus["NOT_ACCEPTABLE"] = 406] = "NOT_ACCEPTABLE";
    HttpStatus[HttpStatus["PROXY_AUTHENTICATION_REQUIRED"] = 407] = "PROXY_AUTHENTICATION_REQUIRED";
    HttpStatus[HttpStatus["REQUEST_TIMEOUT"] = 408] = "REQUEST_TIMEOUT";
    HttpStatus[HttpStatus["CONFLICT"] = 409] = "CONFLICT";
    HttpStatus[HttpStatus["GONE"] = 410] = "GONE";
    HttpStatus[HttpStatus["LENGTH_REQUIRED"] = 411] = "LENGTH_REQUIRED";
    HttpStatus[HttpStatus["PRECONDITION_FAILED"] = 412] = "PRECONDITION_FAILED";
    HttpStatus[HttpStatus["PAYLOAD_TOO_LARGE"] = 413] = "PAYLOAD_TOO_LARGE";
    HttpStatus[HttpStatus["URI_TOO_LONG"] = 414] = "URI_TOO_LONG";
    HttpStatus[HttpStatus["UNSUPPORTED_MEDIA_TYPE"] = 415] = "UNSUPPORTED_MEDIA_TYPE";
    HttpStatus[HttpStatus["REQUESTED_RANGE_NOT_SATISFIABLE"] = 416] = "REQUESTED_RANGE_NOT_SATISFIABLE";
    HttpStatus[HttpStatus["EXPECTATION_FAILED"] = 417] = "EXPECTATION_FAILED";
    HttpStatus[HttpStatus["I_AM_A_TEAPOT"] = 418] = "I_AM_A_TEAPOT";
    HttpStatus[HttpStatus["UNPROCESSABLE_ENTITY"] = 422] = "UNPROCESSABLE_ENTITY";
    HttpStatus[HttpStatus["FAILED_DEPENDENCY"] = 424] = "FAILED_DEPENDENCY";
    HttpStatus[HttpStatus["TOO_MANY_REQUESTS"] = 429] = "TOO_MANY_REQUESTS";
    HttpStatus[HttpStatus["INTERNAL_SERVER_ERROR"] = 500] = "INTERNAL_SERVER_ERROR";
    HttpStatus[HttpStatus["NOT_IMPLEMENTED"] = 501] = "NOT_IMPLEMENTED";
    HttpStatus[HttpStatus["BAD_GATEWAY"] = 502] = "BAD_GATEWAY";
    HttpStatus[HttpStatus["SERVICE_UNAVAILABLE"] = 503] = "SERVICE_UNAVAILABLE";
    HttpStatus[HttpStatus["GATEWAY_TIMEOUT"] = 504] = "GATEWAY_TIMEOUT";
    HttpStatus[HttpStatus["HTTP_VERSION_NOT_SUPPORTED"] = 505] = "HTTP_VERSION_NOT_SUPPORTED";
})(HttpStatus = exports.HttpStatus || (exports.HttpStatus = {}));
var RequestMethodEnum;
(function (RequestMethodEnum) {
    RequestMethodEnum["GET"] = "GET";
    RequestMethodEnum["POST"] = "POST";
    RequestMethodEnum["PUT"] = "PUT";
    RequestMethodEnum["DELETE"] = "DELETE";
    RequestMethodEnum["PATCH"] = "PATCH";
    RequestMethodEnum["ALL"] = "ALL";
    RequestMethodEnum["OPTIONS"] = "OPTIONS";
    RequestMethodEnum["HEAD"] = "HEAD";
})(RequestMethodEnum = exports.RequestMethodEnum || (exports.RequestMethodEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/hubstaff.model.ts":
/*!***********************************************!*\
  !*** ./libs/models/src/lib/hubstaff.model.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/income.model.ts":
/*!*********************************************!*\
  !*** ./libs/models/src/lib/income.model.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IncomeTypeEnum = void 0;
var IncomeTypeEnum;
(function (IncomeTypeEnum) {
    IncomeTypeEnum["HOURLY"] = "Hourly";
})(IncomeTypeEnum = exports.IncomeTypeEnum || (exports.IncomeTypeEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/integration.model.ts":
/*!**************************************************!*\
  !*** ./libs/models/src/lib/integration.model.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_INTEGRATIONS = exports.DEFAULT_INTEGRATION_PAID_FILTERS = exports.IntegrationFilterEnum = exports.IntegrationTypeNameEnum = exports.IntegrationTypeGroupEnum = exports.IntegrationEntity = exports.IntegrationEnum = void 0;
var IntegrationEnum;
(function (IntegrationEnum) {
    IntegrationEnum["UPWORK"] = "Upwork";
    IntegrationEnum["HUBSTAFF"] = "Hubstaff";
})(IntegrationEnum = exports.IntegrationEnum || (exports.IntegrationEnum = {}));
var IntegrationEntity;
(function (IntegrationEntity) {
    IntegrationEntity["PROJECT"] = "Project";
    IntegrationEntity["ORGANIZATION"] = "Organization";
    IntegrationEntity["NOTE"] = "Note";
    IntegrationEntity["CLIENT"] = "Client";
    IntegrationEntity["TASK"] = "Task";
    IntegrationEntity["ACTIVITY"] = "Activity";
    IntegrationEntity["USER"] = "User";
    IntegrationEntity["EMPLOYEE"] = "Employee";
    IntegrationEntity["TIME_LOG"] = "TimeLog";
    IntegrationEntity["TIME_SLOT"] = "TimeSlot";
    IntegrationEntity["SCREENSHOT"] = "Screenshot";
    IntegrationEntity["INCOME"] = "Income";
    IntegrationEntity["EXPENSE"] = "Expense";
    IntegrationEntity["PROPOSAL"] = "Proposal";
})(IntegrationEntity = exports.IntegrationEntity || (exports.IntegrationEntity = {}));
var IntegrationTypeGroupEnum;
(function (IntegrationTypeGroupEnum) {
    IntegrationTypeGroupEnum["FEATURED"] = "Featured";
    IntegrationTypeGroupEnum["CATEGORIES"] = "Categories";
})(IntegrationTypeGroupEnum = exports.IntegrationTypeGroupEnum || (exports.IntegrationTypeGroupEnum = {}));
var IntegrationTypeNameEnum;
(function (IntegrationTypeNameEnum) {
    IntegrationTypeNameEnum["ALL_INTEGRATIONS"] = "All Integrations";
    IntegrationTypeNameEnum["FOR_SALES_TEAMS"] = "For Sales Teams";
    IntegrationTypeNameEnum["FOR_ACCOUNTANTS"] = "For Accountants";
    IntegrationTypeNameEnum["FOR_SUPPORT_TEAMS"] = "For Support Teams";
    IntegrationTypeNameEnum["CRM"] = "CRM";
    IntegrationTypeNameEnum["SCHEDULING"] = "Scheduling";
    IntegrationTypeNameEnum["TOOLS"] = "Tools";
})(IntegrationTypeNameEnum = exports.IntegrationTypeNameEnum || (exports.IntegrationTypeNameEnum = {}));
var IntegrationFilterEnum;
(function (IntegrationFilterEnum) {
    IntegrationFilterEnum["ALL"] = "All";
    IntegrationFilterEnum["FREE"] = "Free";
    IntegrationFilterEnum["PAID"] = "Paid";
})(IntegrationFilterEnum = exports.IntegrationFilterEnum || (exports.IntegrationFilterEnum = {}));
exports.DEFAULT_INTEGRATION_PAID_FILTERS = [
    {
        label: IntegrationFilterEnum.ALL,
        value: 'all'
    },
    {
        label: IntegrationFilterEnum.FREE,
        value: 'false'
    },
    {
        label: IntegrationFilterEnum.PAID,
        value: 'true'
    }
];
exports.DEFAULT_INTEGRATIONS = [
    {
        name: IntegrationEnum.HUBSTAFF,
        imgSrc: 'assets/images/integrations/hubstaff.svg',
        integrationTypesMap: [
            IntegrationTypeNameEnum.ALL_INTEGRATIONS
        ],
        order: 1
    },
    {
        name: IntegrationEnum.UPWORK,
        imgSrc: 'assets/images/integrations/upwork.svg',
        integrationTypesMap: [
            IntegrationTypeNameEnum.ALL_INTEGRATIONS
        ],
        order: 2
    },
    {
        name: 'Import/Export',
        imgSrc: 'assets/images/integrations/import-export.svg',
        isComingSoon: true,
        integrationTypesMap: [
            IntegrationTypeNameEnum.ALL_INTEGRATIONS,
            IntegrationTypeNameEnum.CRM
        ],
        order: 3
    }
];


/***/ }),

/***/ "./libs/models/src/lib/invite.model.ts":
/*!*********************************************!*\
  !*** ./libs/models/src/lib/invite.model.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InvitationTypeEnum = exports.InviteStatusEnum = void 0;
var InviteStatusEnum;
(function (InviteStatusEnum) {
    InviteStatusEnum["INVITED"] = "INVITED";
    InviteStatusEnum["ACCEPTED"] = "ACCEPTED";
})(InviteStatusEnum = exports.InviteStatusEnum || (exports.InviteStatusEnum = {}));
var InvitationTypeEnum;
(function (InvitationTypeEnum) {
    InvitationTypeEnum["USER"] = "USER";
    InvitationTypeEnum["EMPLOYEE"] = "EMPLOYEE";
    InvitationTypeEnum["CANDIDATE"] = "CANDIDATE";
})(InvitationTypeEnum = exports.InvitationTypeEnum || (exports.InvitationTypeEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/invoice-estimate-history.model.ts":
/*!***************************************************************!*\
  !*** ./libs/models/src/lib/invoice-estimate-history.model.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/invoice-item.model.ts":
/*!***************************************************!*\
  !*** ./libs/models/src/lib/invoice-item.model.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/invoice.model.ts":
/*!**********************************************!*\
  !*** ./libs/models/src/lib/invoice.model.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EstimateColumnsEnum = exports.InvoiceColumnsEnum = exports.EstimateStatusTypesEnum = exports.InvoiceStatusTypesEnum = exports.DiscountTaxTypeEnum = exports.InvoiceTypeEnum = void 0;
var InvoiceTypeEnum;
(function (InvoiceTypeEnum) {
    InvoiceTypeEnum["BY_EMPLOYEE_HOURS"] = "BY_EMPLOYEE_HOURS";
    InvoiceTypeEnum["BY_PROJECT_HOURS"] = "BY_PROJECT_HOURS";
    InvoiceTypeEnum["BY_TASK_HOURS"] = "BY_TASK_HOURS";
    InvoiceTypeEnum["BY_PRODUCTS"] = "BY_PRODUCTS";
    InvoiceTypeEnum["BY_EXPENSES"] = "BY_EXPENSES";
    InvoiceTypeEnum["DETAILED_ITEMS"] = "DETAILED_ITEMS";
})(InvoiceTypeEnum = exports.InvoiceTypeEnum || (exports.InvoiceTypeEnum = {}));
var DiscountTaxTypeEnum;
(function (DiscountTaxTypeEnum) {
    DiscountTaxTypeEnum["PERCENT"] = "PERCENT";
    DiscountTaxTypeEnum["FLAT_VALUE"] = "FLAT";
})(DiscountTaxTypeEnum = exports.DiscountTaxTypeEnum || (exports.DiscountTaxTypeEnum = {}));
var InvoiceStatusTypesEnum;
(function (InvoiceStatusTypesEnum) {
    InvoiceStatusTypesEnum["DRAFT"] = "DRAFT";
    InvoiceStatusTypesEnum["SENT"] = "SENT";
    InvoiceStatusTypesEnum["VIEWED"] = "VIEWED";
    InvoiceStatusTypesEnum["FULLY_PAID"] = "FULLY_PAID";
    InvoiceStatusTypesEnum["PARTIALLY_PAID"] = "PARTIALLY_PAID";
    InvoiceStatusTypesEnum["OVERPAID"] = "OVERPAID";
    InvoiceStatusTypesEnum["VOID"] = "VOID";
})(InvoiceStatusTypesEnum = exports.InvoiceStatusTypesEnum || (exports.InvoiceStatusTypesEnum = {}));
var EstimateStatusTypesEnum;
(function (EstimateStatusTypesEnum) {
    EstimateStatusTypesEnum["DRAFT"] = "DRAFT";
    EstimateStatusTypesEnum["SENT"] = "SENT";
    EstimateStatusTypesEnum["VIEWED"] = "VIEWED";
    EstimateStatusTypesEnum["ACCEPTED"] = "ACCEPTED";
    EstimateStatusTypesEnum["REJECTED"] = "REJECTED";
    EstimateStatusTypesEnum["VOID"] = "VOID";
})(EstimateStatusTypesEnum = exports.EstimateStatusTypesEnum || (exports.EstimateStatusTypesEnum = {}));
var InvoiceColumnsEnum;
(function (InvoiceColumnsEnum) {
    InvoiceColumnsEnum["INVOICE_DATE"] = "INVOICE_DATE";
    InvoiceColumnsEnum["DUE_DATE"] = "DUE_DATE";
    InvoiceColumnsEnum["STATUS"] = "STATUS";
    InvoiceColumnsEnum["TOTAL_VALUE"] = "TOTAL_VALUE";
    InvoiceColumnsEnum["CURRENCY"] = "CURRENCY";
    InvoiceColumnsEnum["TAX"] = "TAX";
    InvoiceColumnsEnum["TAX_2"] = "TAX_2";
    InvoiceColumnsEnum["DISCOUNT"] = "DISCOUNT";
    InvoiceColumnsEnum["CONTACT"] = "CONTACT";
    InvoiceColumnsEnum["PAID_STATUS"] = "PAID_STATUS";
})(InvoiceColumnsEnum = exports.InvoiceColumnsEnum || (exports.InvoiceColumnsEnum = {}));
var EstimateColumnsEnum;
(function (EstimateColumnsEnum) {
    EstimateColumnsEnum["ESTIMATE_DATE"] = "ESTIMATE_DATE";
    EstimateColumnsEnum["DUE_DATE"] = "DUE_DATE";
    EstimateColumnsEnum["STATUS"] = "STATUS";
    EstimateColumnsEnum["TOTAL_VALUE"] = "TOTAL_VALUE";
    EstimateColumnsEnum["CURRENCY"] = "CURRENCY";
    EstimateColumnsEnum["TAX"] = "TAX";
    EstimateColumnsEnum["TAX_2"] = "TAX_2";
    EstimateColumnsEnum["DISCOUNT"] = "DISCOUNT";
    EstimateColumnsEnum["CONTACT"] = "CONTACT";
})(EstimateColumnsEnum = exports.EstimateColumnsEnum || (exports.EstimateColumnsEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/job-matching.model.ts":
/*!***************************************************!*\
  !*** ./libs/models/src/lib/job-matching.model.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/job-search-category.model.ts":
/*!**********************************************************!*\
  !*** ./libs/models/src/lib/job-search-category.model.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/job-search-occupation.model.ts":
/*!************************************************************!*\
  !*** ./libs/models/src/lib/job-search-occupation.model.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/language.model.ts":
/*!***********************************************!*\
  !*** ./libs/models/src/lib/language.model.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/organization-awards.model.ts":
/*!**********************************************************!*\
  !*** ./libs/models/src/lib/organization-awards.model.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/organization-contact.model.ts":
/*!***********************************************************!*\
  !*** ./libs/models/src/lib/organization-contact.model.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ContactType = exports.ContactOrganizationInviteStatus = exports.OrganizationContactBudgetTypeEnum = void 0;
var OrganizationContactBudgetTypeEnum;
(function (OrganizationContactBudgetTypeEnum) {
    OrganizationContactBudgetTypeEnum["HOURS"] = "hours";
    OrganizationContactBudgetTypeEnum["COST"] = "cost";
})(OrganizationContactBudgetTypeEnum = exports.OrganizationContactBudgetTypeEnum || (exports.OrganizationContactBudgetTypeEnum = {}));
var ContactOrganizationInviteStatus;
(function (ContactOrganizationInviteStatus) {
    ContactOrganizationInviteStatus["NOT_INVITED"] = "NOT_INVITED";
    ContactOrganizationInviteStatus["INVITED"] = "INVITED";
    ContactOrganizationInviteStatus["ACCEPTED"] = "ACCEPTED";
})(ContactOrganizationInviteStatus = exports.ContactOrganizationInviteStatus || (exports.ContactOrganizationInviteStatus = {}));
var ContactType;
(function (ContactType) {
    ContactType["CLIENT"] = "CLIENT";
    ContactType["CUSTOMER"] = "CUSTOMER";
    ContactType["LEAD"] = "LEAD";
})(ContactType = exports.ContactType || (exports.ContactType = {}));


/***/ }),

/***/ "./libs/models/src/lib/organization-department.model.ts":
/*!**************************************************************!*\
  !*** ./libs/models/src/lib/organization-department.model.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/organization-document.model.ts":
/*!************************************************************!*\
  !*** ./libs/models/src/lib/organization-document.model.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/organization-employment-type.model.ts":
/*!*******************************************************************!*\
  !*** ./libs/models/src/lib/organization-employment-type.model.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericEmploymentTypes = void 0;
var GenericEmploymentTypes;
(function (GenericEmploymentTypes) {
    GenericEmploymentTypes["INTERN"] = "Intern";
    GenericEmploymentTypes["CONTRACT"] = "Contract";
    GenericEmploymentTypes["PROBATION"] = "Probation";
    GenericEmploymentTypes["PART_TIME"] = "Part-time";
    GenericEmploymentTypes["FULL_TIME"] = "Full-time";
    GenericEmploymentTypes["CONTRACTOR"] = "Contractor";
})(GenericEmploymentTypes = exports.GenericEmploymentTypes || (exports.GenericEmploymentTypes = {}));


/***/ }),

/***/ "./libs/models/src/lib/organization-expense-category.model.ts":
/*!********************************************************************!*\
  !*** ./libs/models/src/lib/organization-expense-category.model.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationExpenseCategoryEnum = void 0;
var OrganizationExpenseCategoryEnum;
(function (OrganizationExpenseCategoryEnum) {
    OrganizationExpenseCategoryEnum["SOFTWARE"] = "Software";
    OrganizationExpenseCategoryEnum["EMPLOYEES_BENEFITS"] = "Employees Benefits";
    OrganizationExpenseCategoryEnum["COURSES"] = "Courses";
    OrganizationExpenseCategoryEnum["SUBSCRIPTIONS"] = "Subscriptions";
    OrganizationExpenseCategoryEnum["RENT"] = "Rent";
    OrganizationExpenseCategoryEnum["SERVICE_FEE"] = "Service Fee";
})(OrganizationExpenseCategoryEnum = exports.OrganizationExpenseCategoryEnum || (exports.OrganizationExpenseCategoryEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/organization-languages.model.ts":
/*!*************************************************************!*\
  !*** ./libs/models/src/lib/organization-languages.model.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/organization-positions.model.ts":
/*!*************************************************************!*\
  !*** ./libs/models/src/lib/organization-positions.model.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/organization-projects.model.ts":
/*!************************************************************!*\
  !*** ./libs/models/src/lib/organization-projects.model.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationProjectAction = exports.OrganizationProjectBudgetTypeEnum = exports.TaskListTypeEnum = void 0;
var TaskListTypeEnum;
(function (TaskListTypeEnum) {
    TaskListTypeEnum["GRID"] = "GRID";
    TaskListTypeEnum["SPRINT"] = "SPRINT";
})(TaskListTypeEnum = exports.TaskListTypeEnum || (exports.TaskListTypeEnum = {}));
var OrganizationProjectBudgetTypeEnum;
(function (OrganizationProjectBudgetTypeEnum) {
    OrganizationProjectBudgetTypeEnum["HOURS"] = "hours";
    OrganizationProjectBudgetTypeEnum["COST"] = "cost";
})(OrganizationProjectBudgetTypeEnum = exports.OrganizationProjectBudgetTypeEnum || (exports.OrganizationProjectBudgetTypeEnum = {}));
var OrganizationProjectAction;
(function (OrganizationProjectAction) {
    OrganizationProjectAction["CREATED"] = "CREATED";
    OrganizationProjectAction["UPDATED"] = "UPDATED";
    OrganizationProjectAction["DELETED"] = "DELETED";
})(OrganizationProjectAction = exports.OrganizationProjectAction || (exports.OrganizationProjectAction = {}));


/***/ }),

/***/ "./libs/models/src/lib/organization-recurring-expense.model.ts":
/*!*********************************************************************!*\
  !*** ./libs/models/src/lib/organization-recurring-expense.model.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/organization-sprint.model.ts":
/*!**********************************************************!*\
  !*** ./libs/models/src/lib/organization-sprint.model.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SprintStartDayEnum = void 0;
var SprintStartDayEnum;
(function (SprintStartDayEnum) {
    SprintStartDayEnum[SprintStartDayEnum["SUNDAY"] = 1] = "SUNDAY";
    SprintStartDayEnum[SprintStartDayEnum["MONDAY"] = 2] = "MONDAY";
    SprintStartDayEnum[SprintStartDayEnum["TUESDAY"] = 3] = "TUESDAY";
    SprintStartDayEnum[SprintStartDayEnum["WEDNESDAY"] = 4] = "WEDNESDAY";
    SprintStartDayEnum[SprintStartDayEnum["THURSDAY"] = 5] = "THURSDAY";
    SprintStartDayEnum[SprintStartDayEnum["FRIDAY"] = 6] = "FRIDAY";
    SprintStartDayEnum[SprintStartDayEnum["SATURDAY"] = 7] = "SATURDAY";
})(SprintStartDayEnum = exports.SprintStartDayEnum || (exports.SprintStartDayEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/organization-team-employee-model.ts":
/*!*****************************************************************!*\
  !*** ./libs/models/src/lib/organization-team-employee-model.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/organization-team-model.ts":
/*!********************************************************!*\
  !*** ./libs/models/src/lib/organization-team-model.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/organization-vendors.model.ts":
/*!***********************************************************!*\
  !*** ./libs/models/src/lib/organization-vendors.model.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationVendorEnum = void 0;
var OrganizationVendorEnum;
(function (OrganizationVendorEnum) {
    OrganizationVendorEnum["UPWORK"] = "Upwork";
    OrganizationVendorEnum["MICROSOFT"] = "Microsoft";
    OrganizationVendorEnum["BENEFIT_SYSTEMS"] = "Benefit Systems";
    OrganizationVendorEnum["UDEMY"] = "Udemy";
    OrganizationVendorEnum["GOOGLE"] = "Google";
    OrganizationVendorEnum["CO_SHARE"] = "CoShare";
})(OrganizationVendorEnum = exports.OrganizationVendorEnum || (exports.OrganizationVendorEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/organization.model.ts":
/*!***************************************************!*\
  !*** ./libs/models/src/lib/organization.model.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationAction = exports.DEFAULT_REVENUE_BASED_BONUS = exports.DEFAULT_PROFIT_BASED_BONUS = exports.MinimumProjectSizeEnum = exports.ProjectOwnerEnum = exports.ClientFocusEnum = exports.BonusTypeEnum = exports.WeekDaysEnum = exports.CurrencyPosition = exports.AlignmentOptions = exports.ProjectBillingEnum = exports.DefaultValueDateTypeEnum = exports.RegionsEnum = exports.OrganizationSelectInput = exports.ListsInputTypeEnum = exports.OrganizationPermissionsEnum = void 0;
var OrganizationPermissionsEnum;
(function (OrganizationPermissionsEnum) {
    OrganizationPermissionsEnum["ALLOW_MANUAL_TIME"] = "allowManualTime";
    OrganizationPermissionsEnum["ALLOW_MODIFY_TIME"] = "allowModifyTime";
    OrganizationPermissionsEnum["ALLOW_DELETE_TIME"] = "allowDeleteTime";
    OrganizationPermissionsEnum["ALLOW_FUTURE_DATE"] = "futureDateAllowed";
})(OrganizationPermissionsEnum = exports.OrganizationPermissionsEnum || (exports.OrganizationPermissionsEnum = {}));
var ListsInputTypeEnum;
(function (ListsInputTypeEnum) {
    ListsInputTypeEnum["DEPARTMENTS"] = "DEPARTMENTS";
    ListsInputTypeEnum["POSITIONS"] = "POSITIONS";
    ListsInputTypeEnum["VENDORS"] = "VENDORS";
})(ListsInputTypeEnum = exports.ListsInputTypeEnum || (exports.ListsInputTypeEnum = {}));
var OrganizationSelectInput;
(function (OrganizationSelectInput) {
    OrganizationSelectInput["id"] = "id";
    OrganizationSelectInput["name"] = "name";
    OrganizationSelectInput["profile_link"] = "profile_link";
    OrganizationSelectInput["valueDate"] = "valueDate";
    OrganizationSelectInput["imageUrl"] = "imageUrl";
    OrganizationSelectInput["currency"] = "currency";
    OrganizationSelectInput["createdAt"] = "createdAt";
    OrganizationSelectInput["updatedAt"] = "updatedAt";
    OrganizationSelectInput["isActive"] = "isActive";
    OrganizationSelectInput["tags"] = "tags";
})(OrganizationSelectInput = exports.OrganizationSelectInput || (exports.OrganizationSelectInput = {}));
var RegionsEnum;
(function (RegionsEnum) {
    RegionsEnum["EN"] = "English (United States)";
    RegionsEnum["BG"] = "Bulgarian (Bulgaria)";
    RegionsEnum["HE"] = "Hebrew (Israel)";
    RegionsEnum["RU"] = "Rusian (Russia)";
})(RegionsEnum = exports.RegionsEnum || (exports.RegionsEnum = {}));
var DefaultValueDateTypeEnum;
(function (DefaultValueDateTypeEnum) {
    DefaultValueDateTypeEnum["TODAY"] = "TODAY";
    DefaultValueDateTypeEnum["END_OF_MONTH"] = "END_OF_MONTH";
    DefaultValueDateTypeEnum["START_OF_MONTH"] = "START_OF_MONTH";
})(DefaultValueDateTypeEnum = exports.DefaultValueDateTypeEnum || (exports.DefaultValueDateTypeEnum = {}));
var ProjectBillingEnum;
(function (ProjectBillingEnum) {
    ProjectBillingEnum["RATE"] = "RATE";
    ProjectBillingEnum["FLAT_FEE"] = "FLAT_FEE";
    ProjectBillingEnum["MILESTONES"] = "MILESTONES";
})(ProjectBillingEnum = exports.ProjectBillingEnum || (exports.ProjectBillingEnum = {}));
var AlignmentOptions;
(function (AlignmentOptions) {
    AlignmentOptions["LEFT"] = "LEFT";
    AlignmentOptions["RIGHT"] = "RIGHT";
    AlignmentOptions["CENTER"] = "CENTER";
})(AlignmentOptions = exports.AlignmentOptions || (exports.AlignmentOptions = {}));
var CurrencyPosition;
(function (CurrencyPosition) {
    CurrencyPosition["LEFT"] = "LEFT";
    CurrencyPosition["RIGHT"] = "RIGHT";
})(CurrencyPosition = exports.CurrencyPosition || (exports.CurrencyPosition = {}));
var WeekDaysEnum;
(function (WeekDaysEnum) {
    WeekDaysEnum["MONDAY"] = "MONDAY";
    WeekDaysEnum["TUESDAY"] = "TUESDAY";
    WeekDaysEnum["WEDNESDAY"] = "WEDNESDAY";
    WeekDaysEnum["THURSDAY"] = "THURSDAY";
    WeekDaysEnum["FRIDAY"] = "FRIDAY";
    WeekDaysEnum["SATURDAY"] = "SATURDAY";
    WeekDaysEnum["SUNDAY"] = "SUNDAY";
})(WeekDaysEnum = exports.WeekDaysEnum || (exports.WeekDaysEnum = {}));
var BonusTypeEnum;
(function (BonusTypeEnum) {
    BonusTypeEnum["PROFIT_BASED_BONUS"] = "PROFIT_BASED_BONUS";
    BonusTypeEnum["REVENUE_BASED_BONUS"] = "REVENUE_BASED_BONUS";
})(BonusTypeEnum = exports.BonusTypeEnum || (exports.BonusTypeEnum = {}));
var ClientFocusEnum;
(function (ClientFocusEnum) {
    ClientFocusEnum["VERY_SMALL_BUSINESSES"] = "Very Small Businesses";
    ClientFocusEnum["SMALL_BUSINESSES"] = "Small Businesses";
    ClientFocusEnum["MEDIUM_BUSINESSES"] = "Medium Businesses";
    ClientFocusEnum["LARGE_BUSINESSES"] = "Large Businesses";
})(ClientFocusEnum = exports.ClientFocusEnum || (exports.ClientFocusEnum = {}));
var ProjectOwnerEnum;
(function (ProjectOwnerEnum) {
    ProjectOwnerEnum["CLIENT"] = "CLIENT";
    ProjectOwnerEnum["INTERNAL"] = "INTERNAL";
})(ProjectOwnerEnum = exports.ProjectOwnerEnum || (exports.ProjectOwnerEnum = {}));
var MinimumProjectSizeEnum;
(function (MinimumProjectSizeEnum) {
    MinimumProjectSizeEnum["ONE_THOUSAND"] = "1000+";
    MinimumProjectSizeEnum["FIVE_THOUSAND"] = "5000+";
    MinimumProjectSizeEnum["TEN_THOUSAND"] = "10000+";
    MinimumProjectSizeEnum["TWENTY_FIVE_THOUSAND"] = "25000+";
    MinimumProjectSizeEnum["FIFTY_THOUSAND"] = "50000+";
    MinimumProjectSizeEnum["ONE_HUNDRED_THOUSAND"] = "100000+";
})(MinimumProjectSizeEnum = exports.MinimumProjectSizeEnum || (exports.MinimumProjectSizeEnum = {}));
exports.DEFAULT_PROFIT_BASED_BONUS = 75;
exports.DEFAULT_REVENUE_BASED_BONUS = 10;
var OrganizationAction;
(function (OrganizationAction) {
    OrganizationAction["CREATED"] = "CREATED";
    OrganizationAction["UPDATED"] = "UPDATED";
    OrganizationAction["DELETED"] = "DELETED";
})(OrganizationAction = exports.OrganizationAction || (exports.OrganizationAction = {}));


/***/ }),

/***/ "./libs/models/src/lib/payment.model.ts":
/*!**********************************************!*\
  !*** ./libs/models/src/lib/payment.model.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentMethodEnum = void 0;
var PaymentMethodEnum;
(function (PaymentMethodEnum) {
    PaymentMethodEnum["BANK_TRANSFER"] = "BANK_TRANSFER";
    PaymentMethodEnum["CASH"] = "CASH";
    PaymentMethodEnum["CHEQUE"] = "CHEQUE";
    PaymentMethodEnum["CREDIT_CARD"] = "CREDIT_CARD";
    PaymentMethodEnum["DEBIT"] = "DEBIT";
    PaymentMethodEnum["ONLINE"] = "ONLINE";
})(PaymentMethodEnum = exports.PaymentMethodEnum || (exports.PaymentMethodEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/pipeline-stage.model.ts":
/*!*****************************************************!*\
  !*** ./libs/models/src/lib/pipeline-stage.model.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/pipeline.model.ts":
/*!***********************************************!*\
  !*** ./libs/models/src/lib/pipeline.model.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/product.model.ts":
/*!**********************************************!*\
  !*** ./libs/models/src/lib/product.model.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductTypesIconsEnum = exports.BillingInvoicingPolicyEnum = void 0;
var BillingInvoicingPolicyEnum;
(function (BillingInvoicingPolicyEnum) {
    BillingInvoicingPolicyEnum["QUANTITY_ORDERED"] = "Quantity ordered";
    BillingInvoicingPolicyEnum["QUANTITY_DELIVERED"] = "Quantity Delivered";
})(BillingInvoicingPolicyEnum = exports.BillingInvoicingPolicyEnum || (exports.BillingInvoicingPolicyEnum = {}));
var ProductTypesIconsEnum;
(function (ProductTypesIconsEnum) {
    ProductTypesIconsEnum["BRIEFCASE"] = "briefcase-outline";
    ProductTypesIconsEnum["CAR"] = "car-outline";
    ProductTypesIconsEnum["COLOR_PALETTE"] = "color-palette-outline";
    ProductTypesIconsEnum["FLASH"] = "flash-outline";
    ProductTypesIconsEnum["HOME"] = "home-outline";
    ProductTypesIconsEnum["GIFT"] = "gift-outline";
    ProductTypesIconsEnum["HEART"] = "heart-outline";
    ProductTypesIconsEnum["RADIO_BTN_OFF"] = "radio-button-off-outline";
    ProductTypesIconsEnum["PIN"] = "pin-outline";
    ProductTypesIconsEnum["SETTINGS"] = "settings-outline";
    ProductTypesIconsEnum["STAR"] = "star-outline";
    ProductTypesIconsEnum["SHOPPING_BAG"] = "shopping-bag-outline";
    ProductTypesIconsEnum["SHARE"] = "share-outline";
    ProductTypesIconsEnum["ACTIVITY"] = "activity-outline";
    ProductTypesIconsEnum["ALERT"] = "alert-triangle-outline";
    ProductTypesIconsEnum["BULB"] = "bulb-outline";
    ProductTypesIconsEnum["CHECKMARK"] = "checkmark-circle-outline";
    ProductTypesIconsEnum["GLOBE"] = "globe-2-outline";
    ProductTypesIconsEnum["LAYERS"] = "layers-outline";
    ProductTypesIconsEnum["PHONE"] = "phone-outline";
    ProductTypesIconsEnum["SHOPPING_CART"] = "shopping-cart-outline";
})(ProductTypesIconsEnum = exports.ProductTypesIconsEnum || (exports.ProductTypesIconsEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/proposal.model.ts":
/*!***********************************************!*\
  !*** ./libs/models/src/lib/proposal.model.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProposalStatusEnum = void 0;
var ProposalStatusEnum;
(function (ProposalStatusEnum) {
    ProposalStatusEnum["SENT"] = "SENT";
    ProposalStatusEnum["ACCEPTED"] = "ACCEPTED";
})(ProposalStatusEnum = exports.ProposalStatusEnum || (exports.ProposalStatusEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/recurring-expense.model.ts":
/*!********************************************************!*\
  !*** ./libs/models/src/lib/recurring-expense.model.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.StartDateUpdateTypeEnum = exports.RecurringExpenseDefaultCategoriesEnum = exports.RecurringExpenseDeletionEnum = void 0;
var RecurringExpenseDeletionEnum;
(function (RecurringExpenseDeletionEnum) {
    RecurringExpenseDeletionEnum["CURRENT"] = "current";
    RecurringExpenseDeletionEnum["FUTURE"] = "future";
    RecurringExpenseDeletionEnum["ALL"] = "all";
})(RecurringExpenseDeletionEnum = exports.RecurringExpenseDeletionEnum || (exports.RecurringExpenseDeletionEnum = {}));
var RecurringExpenseDefaultCategoriesEnum;
(function (RecurringExpenseDefaultCategoriesEnum) {
    RecurringExpenseDefaultCategoriesEnum["SALARY"] = "SALARY";
    RecurringExpenseDefaultCategoriesEnum["SALARY_TAXES"] = "SALARY_TAXES";
    RecurringExpenseDefaultCategoriesEnum["RENT"] = "RENT";
    RecurringExpenseDefaultCategoriesEnum["EXTRA_BONUS"] = "EXTRA_BONUS";
})(RecurringExpenseDefaultCategoriesEnum = exports.RecurringExpenseDefaultCategoriesEnum || (exports.RecurringExpenseDefaultCategoriesEnum = {}));
var StartDateUpdateTypeEnum;
(function (StartDateUpdateTypeEnum) {
    StartDateUpdateTypeEnum["REDUCE_SAFE"] = "REDUCE_SAFE";
    StartDateUpdateTypeEnum["REDUCE_CONFLICT"] = "REDUCE_CONFLICT";
    StartDateUpdateTypeEnum["INCREASE_SAFE_WITHIN_LIMIT"] = "INCREASE_SAFE_WITHIN_LIMIT";
    StartDateUpdateTypeEnum["INCREASE_SAFE_OUTSIDE_LIMIT"] = "INCREASE_SAFE_OUTSIDE_LIMIT";
    StartDateUpdateTypeEnum["INCREASE_CONFLICT"] = "INCREASE_CONFLICT";
    StartDateUpdateTypeEnum["WITHIN_MONTH"] = "WITHIN_MONTH";
    StartDateUpdateTypeEnum["NO_CHANGE"] = "NO_CHANGE";
})(StartDateUpdateTypeEnum = exports.StartDateUpdateTypeEnum || (exports.StartDateUpdateTypeEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/report.model.ts":
/*!*********************************************!*\
  !*** ./libs/models/src/lib/report.model.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/request-approval-employee.model.ts":
/*!****************************************************************!*\
  !*** ./libs/models/src/lib/request-approval-employee.model.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/request-approval-team.model.ts":
/*!************************************************************!*\
  !*** ./libs/models/src/lib/request-approval-team.model.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/request-approval.model.ts":
/*!*******************************************************!*\
  !*** ./libs/models/src/lib/request-approval.model.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestApprovalStatus = exports.RequestApprovalStatusTypesEnum = void 0;
var RequestApprovalStatusTypesEnum;
(function (RequestApprovalStatusTypesEnum) {
    RequestApprovalStatusTypesEnum[RequestApprovalStatusTypesEnum["REQUESTED"] = 1] = "REQUESTED";
    RequestApprovalStatusTypesEnum[RequestApprovalStatusTypesEnum["APPROVED"] = 2] = "APPROVED";
    RequestApprovalStatusTypesEnum[RequestApprovalStatusTypesEnum["REFUSED"] = 3] = "REFUSED";
})(RequestApprovalStatusTypesEnum = exports.RequestApprovalStatusTypesEnum || (exports.RequestApprovalStatusTypesEnum = {}));
exports.RequestApprovalStatus = {
    REQUESTED: 1,
    APPROVED: 2,
    REFUSED: 3
};


/***/ }),

/***/ "./libs/models/src/lib/role-permission.model.ts":
/*!******************************************************!*\
  !*** ./libs/models/src/lib/role-permission.model.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionGroups = exports.PermissionsEnum = void 0;
var PermissionsEnum;
(function (PermissionsEnum) {
    PermissionsEnum["ADMIN_DASHBOARD_VIEW"] = "ADMIN_DASHBOARD_VIEW";
    PermissionsEnum["ORG_PAYMENT_VIEW"] = "ORG_PAYMENT_VIEW";
    PermissionsEnum["ORG_PAYMENT_ADD_EDIT"] = "ORG_PAYMENT_ADD_EDIT";
    PermissionsEnum["ORG_INCOMES_VIEW"] = "ORG_INCOMES_VIEW";
    PermissionsEnum["ORG_INCOMES_EDIT"] = "ORG_INCOMES_EDIT";
    PermissionsEnum["ORG_EXPENSES_VIEW"] = "ORG_EXPENSES_VIEW";
    PermissionsEnum["ORG_EXPENSES_EDIT"] = "ORG_EXPENSES_EDIT";
    PermissionsEnum["EMPLOYEE_EXPENSES_VIEW"] = "EMPLOYEE_EXPENSES_VIEW";
    PermissionsEnum["EMPLOYEE_EXPENSES_EDIT"] = "EMPLOYEE_EXPENSES_EDIT";
    PermissionsEnum["ORG_PROPOSALS_VIEW"] = "ORG_PROPOSALS_VIEW";
    PermissionsEnum["ORG_PROPOSALS_EDIT"] = "ORG_PROPOSALS_EDIT";
    PermissionsEnum["ORG_PROPOSAL_TEMPLATES_VIEW"] = "ORG_PROPOSAL_TEMPLATES_VIEW";
    PermissionsEnum["ORG_PROPOSAL_TEMPLATES_EDIT"] = "ORG_PROPOSAL_TEMPLATES_EDIT";
    PermissionsEnum["ORG_TIME_OFF_VIEW"] = "ORG_TIME_OFF_VIEW";
    PermissionsEnum["ORG_EMPLOYEES_VIEW"] = "ORG_EMPLOYEES_VIEW";
    PermissionsEnum["ORG_EMPLOYEES_EDIT"] = "ORG_EMPLOYEES_EDIT";
    PermissionsEnum["ORG_CANDIDATES_VIEW"] = "ORG_CANDIDATES_VIEW";
    PermissionsEnum["ORG_CANDIDATES_EDIT"] = "ORG_CANDIDATES_EDIT";
    PermissionsEnum["ORG_CANDIDATES_INTERVIEW_EDIT"] = "ORG_CANDIDATES_INTERVIEW_EDIT";
    PermissionsEnum["ORG_CANDIDATES_DOCUMENTS_VIEW"] = "ORG_CANDIDATES_DOCUMENTS_VIEW";
    PermissionsEnum["ORG_CANDIDATES_TASK_EDIT"] = "ORG_CANDIDATES_TASK_EDIT";
    PermissionsEnum["ORG_CANDIDATES_FEEDBACK_EDIT"] = "ORG_CANDIDATES_FEEDBACK_EDIT";
    PermissionsEnum["ORG_INVENTORY_PRODUCT_EDIT"] = "ORG_INVENTORY_PRODUCT_EDIT";
    PermissionsEnum["ORG_TAGS_EDIT"] = "ORG_TAGS_EDIT";
    PermissionsEnum["ORG_USERS_VIEW"] = "ORG_USERS_VIEW";
    PermissionsEnum["ORG_USERS_EDIT"] = "ORG_USERS_EDIT";
    PermissionsEnum["ORG_INVITE_VIEW"] = "ORG_INVITE_VIEW";
    PermissionsEnum["ORG_INVITE_EDIT"] = "ORG_INVITE_EDIT";
    PermissionsEnum["ALL_ORG_VIEW"] = "ALL_ORG_VIEW";
    PermissionsEnum["ALL_ORG_EDIT"] = "ALL_ORG_EDIT";
    PermissionsEnum["POLICY_VIEW"] = "POLICY_VIEW";
    PermissionsEnum["POLICY_EDIT"] = "POLICY_EDIT";
    PermissionsEnum["TIME_OFF_EDIT"] = "TIME_OFF_EDIT";
    PermissionsEnum["REQUEST_APPROVAL_VIEW"] = "REQUEST_APPROVAL_VIEW";
    PermissionsEnum["REQUEST_APPROVAL_EDIT"] = "REQUEST_APPROVAL_EDIT";
    PermissionsEnum["APPROVAL_POLICY_VIEW"] = "APPROVALS_POLICY_VIEW";
    PermissionsEnum["APPROVAL_POLICY_EDIT"] = "APPROVALS_POLICY_EDIT";
    PermissionsEnum["CHANGE_SELECTED_EMPLOYEE"] = "CHANGE_SELECTED_EMPLOYEE";
    PermissionsEnum["CHANGE_SELECTED_CANDIDATE"] = "CHANGE_SELECTED_CANDIDATE";
    PermissionsEnum["CHANGE_SELECTED_ORGANIZATION"] = "CHANGE_SELECTED_ORGANIZATION";
    PermissionsEnum["CHANGE_ROLES_PERMISSIONS"] = "CHANGE_ROLES_PERMISSIONS";
    PermissionsEnum["ACCESS_PRIVATE_PROJECTS"] = "ACCESS_PRIVATE_PROJECTS";
    PermissionsEnum["TIMESHEET_EDIT_TIME"] = "TIMESHEET_EDIT_TIME";
    PermissionsEnum["SUPER_ADMIN_EDIT"] = "SUPER_ADMIN_EDIT";
    PermissionsEnum["PUBLIC_PAGE_EDIT"] = "PUBLIC_PAGE_EDIT";
    PermissionsEnum["INVOICES_VIEW"] = "INVOICES_VIEW";
    PermissionsEnum["INVOICES_EDIT"] = "INVOICES_EDIT";
    PermissionsEnum["ESTIMATES_VIEW"] = "ESTIMATES_VIEW";
    PermissionsEnum["ESTIMATES_EDIT"] = "ESTIMATES_EDIT";
    PermissionsEnum["ORG_CANDIDATES_INTERVIEWERS_EDIT"] = "ORG_CANDIDATES_INTERVIEWERS_EDIT";
    PermissionsEnum["PROPOSALS_EDIT"] = "PROPOSALS_EDIT";
    PermissionsEnum["VIEW_ALL_EMAILS"] = "VIEW_ALL_EMAILS";
    PermissionsEnum["VIEW_ALL_EMAIL_TEMPLATES"] = "VIEW_ALL_EMAIL_TEMPLATES";
    PermissionsEnum["ORG_HELP_CENTER_EDIT"] = "ORG_HELP_CENTER_EDIT";
    PermissionsEnum["VIEW_SALES_PIPELINES"] = "VIEW_SALES_PIPELINES";
    PermissionsEnum["EDIT_SALES_PIPELINES"] = "EDIT_SALES_PIPELINES";
    PermissionsEnum["CAN_APPROVE_TIMESHEET"] = "CAN_APPROVE_TIMESHEET";
    PermissionsEnum["ORG_SPRINT_VIEW"] = "ORG_SPRINT_VIEW";
    PermissionsEnum["ORG_SPRINT_EDIT"] = "ORG_SPRINT_EDIT";
    PermissionsEnum["ORG_PROJECT_EDIT"] = "ORG_PROJECT_EDIT";
    PermissionsEnum["ORG_CONTACT_EDIT"] = "ORG_CONTACT_EDIT";
    PermissionsEnum["ORG_CONTACT_VIEW"] = "ORG_CONTACT_VIEW";
    PermissionsEnum["ORG_TEAM_EDIT"] = "ORG_TEAM_EDIT";
    PermissionsEnum["ORG_CONTRACT_EDIT"] = "ORG_CONTRACT_EDIT";
    PermissionsEnum["EVENT_TYPES_VIEW"] = "EVENT_TYPES_VIEW";
    PermissionsEnum["TIME_TRACKER"] = "TIME_TRACKER";
    PermissionsEnum["TENANT_ADD_EXISTING_USER"] = "TENANT_ADD_EXISTING_USER";
    PermissionsEnum["INTEGRATION_VIEW"] = "INTEGRATION_VIEW";
    PermissionsEnum["FILE_STORAGE_VIEW"] = "FILE_STORAGE_VIEW";
    PermissionsEnum["PAYMENT_GATEWAY_VIEW"] = "PAYMENT_GATEWAY_VIEW";
    PermissionsEnum["SMS_GATEWAY_VIEW"] = "SMS_GATEWAY_VIEW";
    PermissionsEnum["CUSTOM_SMTP_VIEW"] = "CUSTOM_SMTP_VIEW";
    PermissionsEnum["IMPORT_EXPORT_VIEW"] = "IMPORT_EXPORT_VIEW";
    PermissionsEnum["ORG_JOB_EMPLOYEE_VIEW"] = "ORG_JOB_EMPLOYEE_VIEW";
    PermissionsEnum["ORG_JOB_MATCHING_VIEW"] = "ORG_JOB_MATCHING_VIEW";
})(PermissionsEnum = exports.PermissionsEnum || (exports.PermissionsEnum = {}));
exports.PermissionGroups = {
    GENERAL: [
        PermissionsEnum.ADMIN_DASHBOARD_VIEW,
        PermissionsEnum.ORG_PAYMENT_VIEW,
        PermissionsEnum.ORG_PAYMENT_ADD_EDIT,
        PermissionsEnum.ORG_EXPENSES_VIEW,
        PermissionsEnum.ORG_EXPENSES_EDIT,
        PermissionsEnum.EMPLOYEE_EXPENSES_VIEW,
        PermissionsEnum.EMPLOYEE_EXPENSES_EDIT,
        PermissionsEnum.ORG_INCOMES_EDIT,
        PermissionsEnum.ORG_INCOMES_VIEW,
        PermissionsEnum.ORG_PROPOSALS_EDIT,
        PermissionsEnum.ORG_PROPOSALS_VIEW,
        PermissionsEnum.ORG_PROPOSAL_TEMPLATES_VIEW,
        PermissionsEnum.ORG_PROPOSAL_TEMPLATES_EDIT,
        PermissionsEnum.ORG_TIME_OFF_VIEW,
        PermissionsEnum.ORG_INVITE_VIEW,
        PermissionsEnum.ORG_INVITE_EDIT,
        PermissionsEnum.POLICY_VIEW,
        PermissionsEnum.POLICY_EDIT,
        PermissionsEnum.TIME_OFF_EDIT,
        PermissionsEnum.APPROVAL_POLICY_EDIT,
        PermissionsEnum.APPROVAL_POLICY_VIEW,
        PermissionsEnum.REQUEST_APPROVAL_EDIT,
        PermissionsEnum.REQUEST_APPROVAL_VIEW,
        PermissionsEnum.ACCESS_PRIVATE_PROJECTS,
        PermissionsEnum.TIMESHEET_EDIT_TIME,
        PermissionsEnum.INVOICES_VIEW,
        PermissionsEnum.INVOICES_EDIT,
        PermissionsEnum.ESTIMATES_VIEW,
        PermissionsEnum.ESTIMATES_EDIT,
        PermissionsEnum.ORG_CANDIDATES_DOCUMENTS_VIEW,
        PermissionsEnum.ORG_CANDIDATES_TASK_EDIT,
        PermissionsEnum.ORG_CANDIDATES_INTERVIEW_EDIT,
        PermissionsEnum.ORG_CANDIDATES_INTERVIEWERS_EDIT,
        PermissionsEnum.ORG_CANDIDATES_FEEDBACK_EDIT,
        PermissionsEnum.ORG_INVENTORY_PRODUCT_EDIT,
        PermissionsEnum.ORG_TAGS_EDIT,
        PermissionsEnum.VIEW_ALL_EMAILS,
        PermissionsEnum.VIEW_ALL_EMAIL_TEMPLATES,
        PermissionsEnum.ORG_HELP_CENTER_EDIT,
        PermissionsEnum.VIEW_SALES_PIPELINES,
        PermissionsEnum.EDIT_SALES_PIPELINES,
        PermissionsEnum.CAN_APPROVE_TIMESHEET,
        PermissionsEnum.ORG_SPRINT_EDIT,
        PermissionsEnum.ORG_SPRINT_VIEW,
        PermissionsEnum.ORG_PROJECT_EDIT,
        PermissionsEnum.ORG_CONTACT_EDIT,
        PermissionsEnum.ORG_CONTACT_VIEW,
        PermissionsEnum.ORG_TEAM_EDIT,
        PermissionsEnum.ORG_CONTRACT_EDIT,
        PermissionsEnum.EVENT_TYPES_VIEW
    ],
    ADMINISTRATION: [
        PermissionsEnum.ORG_EMPLOYEES_VIEW,
        PermissionsEnum.ORG_EMPLOYEES_EDIT,
        PermissionsEnum.ORG_CANDIDATES_VIEW,
        PermissionsEnum.ORG_CANDIDATES_EDIT,
        PermissionsEnum.ORG_USERS_VIEW,
        PermissionsEnum.ORG_USERS_EDIT,
        PermissionsEnum.ALL_ORG_VIEW,
        PermissionsEnum.ALL_ORG_EDIT,
        PermissionsEnum.CHANGE_SELECTED_EMPLOYEE,
        PermissionsEnum.CHANGE_SELECTED_CANDIDATE,
        PermissionsEnum.CHANGE_SELECTED_ORGANIZATION,
        PermissionsEnum.CHANGE_ROLES_PERMISSIONS,
        PermissionsEnum.SUPER_ADMIN_EDIT,
        PermissionsEnum.PUBLIC_PAGE_EDIT,
        PermissionsEnum.ORG_INVENTORY_PRODUCT_EDIT,
        PermissionsEnum.APPROVAL_POLICY_EDIT,
        PermissionsEnum.APPROVAL_POLICY_VIEW,
        PermissionsEnum.TIME_OFF_EDIT,
        PermissionsEnum.REQUEST_APPROVAL_EDIT,
        PermissionsEnum.REQUEST_APPROVAL_VIEW,
        PermissionsEnum.TENANT_ADD_EXISTING_USER,
        PermissionsEnum.INTEGRATION_VIEW,
        PermissionsEnum.FILE_STORAGE_VIEW,
        PermissionsEnum.PAYMENT_GATEWAY_VIEW,
        PermissionsEnum.SMS_GATEWAY_VIEW,
        PermissionsEnum.CUSTOM_SMTP_VIEW,
        PermissionsEnum.IMPORT_EXPORT_VIEW,
        PermissionsEnum.ORG_JOB_EMPLOYEE_VIEW,
        PermissionsEnum.ORG_JOB_MATCHING_VIEW
    ]
};


/***/ }),

/***/ "./libs/models/src/lib/role.model.ts":
/*!*******************************************!*\
  !*** ./libs/models/src/lib/role.model.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RolesEnum = void 0;
var RolesEnum;
(function (RolesEnum) {
    RolesEnum["SUPER_ADMIN"] = "SUPER_ADMIN";
    RolesEnum["ADMIN"] = "ADMIN";
    RolesEnum["DATA_ENTRY"] = "DATA_ENTRY";
    RolesEnum["EMPLOYEE"] = "EMPLOYEE";
    RolesEnum["CANDIDATE"] = "CANDIDATE";
    RolesEnum["MANAGER"] = "MANAGER";
    RolesEnum["VIEWER"] = "VIEWER";
})(RolesEnum = exports.RolesEnum || (exports.RolesEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/seed.model.ts":
/*!*******************************************!*\
  !*** ./libs/models/src/lib/seed.model.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/skill-entity.model.ts":
/*!***************************************************!*\
  !*** ./libs/models/src/lib/skill-entity.model.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/sms.model.ts":
/*!******************************************!*\
  !*** ./libs/models/src/lib/sms.model.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SMSProviderEnum = void 0;
var SMSProviderEnum;
(function (SMSProviderEnum) {
    SMSProviderEnum["TWILIO"] = "Twilio";
})(SMSProviderEnum = exports.SMSProviderEnum || (exports.SMSProviderEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/tag-entity.model.ts":
/*!*************************************************!*\
  !*** ./libs/models/src/lib/tag-entity.model.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/task-entity.model.ts":
/*!**************************************************!*\
  !*** ./libs/models/src/lib/task-entity.model.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskStatusEnum = void 0;
var TaskStatusEnum;
(function (TaskStatusEnum) {
    TaskStatusEnum["TODO"] = "Todo";
    TaskStatusEnum["IN_PROGRESS"] = "In Progress";
    TaskStatusEnum["FOR_TESTING"] = "For Testing";
    TaskStatusEnum["COMPLETED"] = "Completed";
})(TaskStatusEnum = exports.TaskStatusEnum || (exports.TaskStatusEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/tenant.model.ts":
/*!*********************************************!*\
  !*** ./libs/models/src/lib/tenant.model.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/time-off.model.ts":
/*!***********************************************!*\
  !*** ./libs/models/src/lib/time-off.model.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.StatusTypesMapRequestApprovalEnum = exports.StatusTypesEnum = void 0;
var StatusTypesEnum;
(function (StatusTypesEnum) {
    StatusTypesEnum["REQUESTED"] = "Requested";
    StatusTypesEnum["APPROVED"] = "Approved";
    StatusTypesEnum["DENIED"] = "Denied";
    StatusTypesEnum["ALL"] = "All";
})(StatusTypesEnum = exports.StatusTypesEnum || (exports.StatusTypesEnum = {}));
var StatusTypesMapRequestApprovalEnum;
(function (StatusTypesMapRequestApprovalEnum) {
    StatusTypesMapRequestApprovalEnum[StatusTypesMapRequestApprovalEnum["Requested"] = 1] = "Requested";
    StatusTypesMapRequestApprovalEnum[StatusTypesMapRequestApprovalEnum["Approved"] = 2] = "Approved";
    StatusTypesMapRequestApprovalEnum[StatusTypesMapRequestApprovalEnum["Denied"] = 3] = "Denied";
})(StatusTypesMapRequestApprovalEnum = exports.StatusTypesMapRequestApprovalEnum || (exports.StatusTypesMapRequestApprovalEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/timesheet-statistics.model.ts":
/*!***********************************************************!*\
  !*** ./libs/models/src/lib/timesheet-statistics.model.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/timesheet.model.ts":
/*!************************************************!*\
  !*** ./libs/models/src/lib/timesheet.model.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityType = exports.TimeLogSourceEnum = exports.TimeLogType = exports.TimesheetStatus = void 0;
var TimesheetStatus;
(function (TimesheetStatus) {
    TimesheetStatus["DRAFT"] = "DRAFT";
    TimesheetStatus["PENDING"] = "PENDING";
    TimesheetStatus["IN_REVIEW"] = "IN_REVIEW";
    TimesheetStatus["DENIED"] = "DENIED";
    TimesheetStatus["APPROVED"] = "APPROVED";
})(TimesheetStatus = exports.TimesheetStatus || (exports.TimesheetStatus = {}));
var TimeLogType;
(function (TimeLogType) {
    TimeLogType["TRACKED"] = "TRACKED";
    TimeLogType["MANUAL"] = "MANUAL";
    TimeLogType["IDEAL"] = "IDEAL";
    TimeLogType["RESUMED"] = "RESUMED";
})(TimeLogType = exports.TimeLogType || (exports.TimeLogType = {}));
var TimeLogSourceEnum;
(function (TimeLogSourceEnum) {
    TimeLogSourceEnum["MOBILE"] = "MOBILE";
    TimeLogSourceEnum["WEB_TIMER"] = "WEB_TIMER";
    TimeLogSourceEnum["DESKTOP"] = "DESKTOP";
    TimeLogSourceEnum["BROWSER"] = "BROWSER";
    TimeLogSourceEnum["HUBSTAFF"] = "HUBSTAFF";
    TimeLogSourceEnum["UPWORK"] = "UPWORK";
})(TimeLogSourceEnum = exports.TimeLogSourceEnum || (exports.TimeLogSourceEnum = {}));
var ActivityType;
(function (ActivityType) {
    ActivityType["URL"] = "URL";
    ActivityType["APP"] = "APP";
})(ActivityType = exports.ActivityType || (exports.ActivityType = {}));


/***/ }),

/***/ "./libs/models/src/lib/translation.model.ts":
/*!**************************************************!*\
  !*** ./libs/models/src/lib/translation.model.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/tree-node.model.ts":
/*!************************************************!*\
  !*** ./libs/models/src/lib/tree-node.model.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/upwork.model.ts":
/*!*********************************************!*\
  !*** ./libs/models/src/lib/upwork.model.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IUpworkProposalStatusEnum = exports.IUpworkOfferStatusEnum = void 0;
var IUpworkOfferStatusEnum;
(function (IUpworkOfferStatusEnum) {
    IUpworkOfferStatusEnum["ACCEPTED"] = "accepted";
    IUpworkOfferStatusEnum["NEW"] = "new";
    IUpworkOfferStatusEnum["DECLINED"] = "declined";
    IUpworkOfferStatusEnum["EXPIRED"] = "expired";
    IUpworkOfferStatusEnum["WITHDRAWN"] = "withdrawn";
    IUpworkOfferStatusEnum["CANCELLED"] = "cancelled";
    IUpworkOfferStatusEnum["CHANGED"] = "changed";
})(IUpworkOfferStatusEnum = exports.IUpworkOfferStatusEnum || (exports.IUpworkOfferStatusEnum = {}));
var IUpworkProposalStatusEnum;
(function (IUpworkProposalStatusEnum) {
    IUpworkProposalStatusEnum["ACTIVE"] = "active";
    IUpworkProposalStatusEnum["SUBMITTED"] = "submitted";
    IUpworkProposalStatusEnum["ARCHIVED"] = "archived";
})(IUpworkProposalStatusEnum = exports.IUpworkProposalStatusEnum || (exports.IUpworkProposalStatusEnum = {}));


/***/ }),

/***/ "./libs/models/src/lib/user-organization.model.ts":
/*!********************************************************!*\
  !*** ./libs/models/src/lib/user-organization.model.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./libs/models/src/lib/user.model.ts":
/*!*******************************************!*\
  !*** ./libs/models/src/lib/user.model.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderEnum = exports.ComponentLayoutStyleEnum = exports.LanguagesEnum = void 0;
var LanguagesEnum;
(function (LanguagesEnum) {
    LanguagesEnum["ENGLISH"] = "en";
    LanguagesEnum["BULGARIAN"] = "bg";
    LanguagesEnum["HEBREW"] = "he";
    LanguagesEnum["RUSSIAN"] = "ru";
})(LanguagesEnum = exports.LanguagesEnum || (exports.LanguagesEnum = {}));
var ComponentLayoutStyleEnum;
(function (ComponentLayoutStyleEnum) {
    ComponentLayoutStyleEnum["CARDS_GRID"] = "CARDS_GRID";
    ComponentLayoutStyleEnum["TABLE"] = "TABLE";
    ComponentLayoutStyleEnum["SPRINT_VIEW"] = "SPRINT_VIEW";
})(ComponentLayoutStyleEnum = exports.ComponentLayoutStyleEnum || (exports.ComponentLayoutStyleEnum = {}));
var ProviderEnum;
(function (ProviderEnum) {
    ProviderEnum["GOOGLE"] = "google";
    ProviderEnum["FACEBOOK"] = "facebook";
})(ProviderEnum = exports.ProviderEnum || (exports.ProviderEnum = {}));


/***/ }),

/***/ "./libs/utils/src/index.ts":
/*!*********************************!*\
  !*** ./libs/utils/src/index.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./lib/utils */ "./libs/utils/src/lib/utils.ts"), exports);


/***/ }),

/***/ "./libs/utils/src/lib/utils.ts":
/*!*************************************!*\
  !*** ./libs/utils/src/lib/utils.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ucFirst = exports.retrieveNameFromEmail = exports.convertPrecisionFloatDigit = exports.average = exports.isEmpty = exports.isJsObject = exports.toParams = exports.progressStatus = exports.toFormData = exports.getContrastColor = exports.convertLocalToTimezone = exports.toLocal = exports.toUTC = void 0;
const moment = __webpack_require__(/*! moment */ "moment");
const timezone = __webpack_require__(/*! moment-timezone */ "moment-timezone");
const http_1 = __webpack_require__(/*! @angular/common/http */ "@angular/common/http");
function toUTC(data) {
    return moment(data).utc();
}
exports.toUTC = toUTC;
function toLocal(data) {
    return moment.utc(data).local();
}
exports.toLocal = toLocal;
function convertLocalToTimezone(localDt, localDtFormat, timeZone, format = 'YYYY-MM-DD hh:mm:ss') {
    return timezone(localDt, localDtFormat).tz(timeZone).format(format);
}
exports.convertLocalToTimezone = convertLocalToTimezone;
function getContrastColor(hex) {
    const threshold = 130;
    const hexToRGB = (h) => {
        const hexValue = h.charAt(0) === '#' ? h.substring(1, 7) : h;
        return {
            red: parseInt(hexValue.substring(0, 2), 16),
            blue: parseInt(hexValue.substring(2, 4), 16),
            green: parseInt(hexValue.substring(4, 6), 16)
        };
    };
    const { red, green, blue } = hexToRGB(hex);
    const cBrightness = (red * 299 + green * 587 + blue * 114) / 1000;
    return cBrightness > threshold ? '#000000' : '#ffffff';
}
exports.getContrastColor = getContrastColor;
function toFormData(obj, form, namespace) {
    const fd = form || new FormData();
    let formKey;
    for (const property in obj) {
        if (obj.hasOwnProperty(property) && obj[property]) {
            if (namespace) {
                formKey = namespace + '[' + property + ']';
            }
            else {
                formKey = property;
            }
            if (obj[property] instanceof Date) {
                fd.append(formKey, obj[property].toISOString());
            }
            else if (typeof obj[property] === 'object' &&
                !(obj[property] instanceof File)) {
                toFormData(obj[property], fd, formKey);
            }
            else {
                fd.append(formKey, obj[property]);
            }
        }
    }
    return fd;
}
exports.toFormData = toFormData;
function progressStatus(value) {
    if (value >= 75) {
        return 'success';
    }
    else if (value >= 50) {
        return 'warning';
    }
    else if (value >= 25) {
        return 'info';
    }
    else {
        return 'danger';
    }
}
exports.progressStatus = progressStatus;
function toParams(query) {
    let params = new http_1.HttpParams();
    Object.keys(query).forEach((key) => {
        if (isJsObject(query[key])) {
            params = toSubParams(params, key, query[key]);
        }
        else {
            params = params.append(key.toString(), query[key]);
        }
    });
    return params;
}
exports.toParams = toParams;
function toSubParams(params, key, object) {
    Object.keys(object).forEach((childKey) => {
        if (isJsObject(object[childKey])) {
            params = toSubParams(params, `${key}[${childKey}]`, object[childKey]);
        }
        else {
            params = params.append(`${key}[${childKey}]`, object[childKey]);
        }
    });
    return params;
}
function isJsObject(object) {
    return (object !== null && object !== undefined && typeof object === 'object');
}
exports.isJsObject = isJsObject;
function isEmpty(value) {
    if (value instanceof Array) {
        value = value.filter((val) => !isEmpty(val));
        return value.length === 0;
    }
    else if (value && typeof value === 'object') {
        return Object.keys(value).length === 0;
    }
    else {
        return (!value ||
            (value + '').toLocaleLowerCase() === 'null' ||
            (value + '').toLocaleLowerCase() === 'undefined');
    }
}
exports.isEmpty = isEmpty;
function average(items, column) {
    let sum = 0;
    if (items.length > 0) {
        items.forEach((item) => {
            sum += parseFloat(item[column]);
        });
    }
    return sum / items.length;
}
exports.average = average;
function convertPrecisionFloatDigit(val, digit = 6) {
    return parseFloat(parseFloat(val.toString()).toFixed(digit));
}
exports.convertPrecisionFloatDigit = convertPrecisionFloatDigit;
function retrieveNameFromEmail(email) {
    return ucFirst(email.substring(0, email.lastIndexOf('@')), true);
}
exports.retrieveNameFromEmail = retrieveNameFromEmail;
function ucFirst(str, force) {
    str = force ? str.toLowerCase() : str;
    return str.replace(/(\b)([a-zA-Z])/, function (firstLetter) {
        return firstLetter.toUpperCase();
    });
}
exports.ucFirst = ucFirst;


/***/ }),

/***/ "./src/app/app.controller.ts":
/*!***********************************!*\
  !*** ./src/app/app.controller.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const app_service_1 = __webpack_require__(/*! ./app.service */ "./src/app/app.service.ts");
let AppController = class AppController {
    constructor(appService) {
        this.appService = appService;
    }
};
AppController = tslib_1.__decorate([
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof app_service_1.AppService !== "undefined" && app_service_1.AppService) === "function" ? _a : Object])
], AppController);
exports.AppController = AppController;


/***/ }),

/***/ "./src/app/app.module.ts":
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.AppModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const candidate_interviewers_module_1 = __webpack_require__(/*! ./candidate-interviewers/candidate-interviewers.module */ "./src/app/candidate-interviewers/candidate-interviewers.module.ts");
const candidate_skill_module_1 = __webpack_require__(/*! ./candidate-skill/candidate-skill.module */ "./src/app/candidate-skill/candidate-skill.module.ts");
const invoice_module_1 = __webpack_require__(/*! ./invoice/invoice.module */ "./src/app/invoice/invoice.module.ts");
const invoice_item_module_1 = __webpack_require__(/*! ./invoice-item/invoice-item.module */ "./src/app/invoice-item/invoice-item.module.ts");
const tag_module_1 = __webpack_require__(/*! ./tags/tag.module */ "./src/app/tags/tag.module.ts");
const skill_module_1 = __webpack_require__(/*! ./skills/skill.module */ "./src/app/skills/skill.module.ts");
const language_module_1 = __webpack_require__(/*! ./language/language.module */ "./src/app/language/language.module.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const nest_router_1 = __webpack_require__(/*! nest-router */ "nest-router");
const app_controller_1 = __webpack_require__(/*! ./app.controller */ "./src/app/app.controller.ts");
const app_service_1 = __webpack_require__(/*! ./app.service */ "./src/app/app.service.ts");
const user_module_1 = __webpack_require__(/*! ./user/user.module */ "./src/app/user/user.module.ts");
const home_module_1 = __webpack_require__(/*! ./home/home.module */ "./src/app/home/home.module.ts");
const employee_module_1 = __webpack_require__(/*! ./employee/employee.module */ "./src/app/employee/employee.module.ts");
const role_module_1 = __webpack_require__(/*! ./role/role.module */ "./src/app/role/role.module.ts");
const organization_module_1 = __webpack_require__(/*! ./organization/organization.module */ "./src/app/organization/organization.module.ts");
const income_module_1 = __webpack_require__(/*! ./income/income.module */ "./src/app/income/income.module.ts");
const expense_module_1 = __webpack_require__(/*! ./expense/expense.module */ "./src/app/expense/expense.module.ts");
const employee_setting_1 = __webpack_require__(/*! ./employee-setting */ "./src/app/employee-setting/index.ts");
const employee_job_1 = __webpack_require__(/*! ./employee-job */ "./src/app/employee-job/index.ts");
const employee_appointment_1 = __webpack_require__(/*! ./employee-appointment */ "./src/app/employee-appointment/index.ts");
const core_1 = __webpack_require__(/*! ./core */ "./src/app/core/index.ts");
const auth_module_1 = __webpack_require__(/*! ./auth/auth.module */ "./src/app/auth/auth.module.ts");
const seed_data_service_1 = __webpack_require__(/*! ./core/seeds/seed-data.service */ "./src/app/core/seeds/seed-data.service.ts");
const user_organization_module_1 = __webpack_require__(/*! ./user-organization/user-organization.module */ "./src/app/user-organization/user-organization.module.ts");
const employee_statistics_module_1 = __webpack_require__(/*! ./employee-statistics/employee-statistics.module */ "./src/app/employee-statistics/employee-statistics.module.ts");
const organization_department_module_1 = __webpack_require__(/*! ./organization-department/organization-department.module */ "./src/app/organization-department/organization-department.module.ts");
const organization_recurring_expense_module_1 = __webpack_require__(/*! ./organization-recurring-expense/organization-recurring-expense.module */ "./src/app/organization-recurring-expense/organization-recurring-expense.module.ts");
const employee_recurring_expense_module_1 = __webpack_require__(/*! ./employee-recurring-expense/employee-recurring-expense.module */ "./src/app/employee-recurring-expense/employee-recurring-expense.module.ts");
const organization_contact_module_1 = __webpack_require__(/*! ./organization-contact/organization-contact.module */ "./src/app/organization-contact/organization-contact.module.ts");
const organization_positions_module_1 = __webpack_require__(/*! ./organization-positions/organization-positions.module */ "./src/app/organization-positions/organization-positions.module.ts");
const organization_projects_module_1 = __webpack_require__(/*! ./organization-projects/organization-projects.module */ "./src/app/organization-projects/organization-projects.module.ts");
const organization_vendors_module_1 = __webpack_require__(/*! ./organization-vendors/organization-vendors.module */ "./src/app/organization-vendors/organization-vendors.module.ts");
const organization_team_module_1 = __webpack_require__(/*! ./organization-team/organization-team.module */ "./src/app/organization-team/organization-team.module.ts");
const organization_team_employee_module_1 = __webpack_require__(/*! ./organization-team-employee/organization-team-employee.module */ "./src/app/organization-team-employee/organization-team-employee.module.ts");
const organization_awards_module_1 = __webpack_require__(/*! ./organization-awards/organization-awards.module */ "./src/app/organization-awards/organization-awards.module.ts");
const organization_languages_module_1 = __webpack_require__(/*! ./organization-languages/organization-languages.module */ "./src/app/organization-languages/organization-languages.module.ts");
const organization_documents_module_1 = __webpack_require__(/*! ./organization-documents/organization-documents.module */ "./src/app/organization-documents/organization-documents.module.ts");
const proposal_module_1 = __webpack_require__(/*! ./proposal/proposal.module */ "./src/app/proposal/proposal.module.ts");
const country_1 = __webpack_require__(/*! ./country */ "./src/app/country/index.ts");
const currency_1 = __webpack_require__(/*! ./currency */ "./src/app/currency/index.ts");
const invite_module_1 = __webpack_require__(/*! ./invite/invite.module */ "./src/app/invite/invite.module.ts");
const email_module_1 = __webpack_require__(/*! ./email/email.module */ "./src/app/email/email.module.ts");
const time_off_policy_module_1 = __webpack_require__(/*! ./time-off-policy/time-off-policy.module */ "./src/app/time-off-policy/time-off-policy.module.ts");
const role_permissions_module_1 = __webpack_require__(/*! ./role-permissions/role-permissions.module */ "./src/app/role-permissions/role-permissions.module.ts");
const tenant_module_1 = __webpack_require__(/*! ./tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
const email_template_module_1 = __webpack_require__(/*! ./email-template/email-template.module */ "./src/app/email-template/email-template.module.ts");
const equipment_module_1 = __webpack_require__(/*! ./equipment/equipment.module */ "./src/app/equipment/equipment.module.ts");
const organization_employee_level_module_1 = __webpack_require__(/*! ./organization_employee-level/organization-employee-level.module */ "./src/app/organization_employee-level/organization-employee-level.module.ts");
const export_all_module_1 = __webpack_require__(/*! ./export_import/export-all.module */ "./src/app/export_import/export-all.module.ts");
const import_all_module_1 = __webpack_require__(/*! ./export_import/import/import-all.module */ "./src/app/export_import/import/import-all.module.ts");
const Sentry = __webpack_require__(/*! @sentry/node */ "@sentry/node");
const Tracing = __webpack_require__(/*! @sentry/tracing */ "@sentry/tracing");
const nestjs_sentry_1 = __webpack_require__(/*! @ntegral/nestjs-sentry */ "@ntegral/nestjs-sentry");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const types_1 = __webpack_require__(/*! @sentry/types */ "@sentry/types");
const task_module_1 = __webpack_require__(/*! ./tasks/task.module */ "./src/app/tasks/task.module.ts");
const equipment_sharing_module_1 = __webpack_require__(/*! ./equipment-sharing/equipment-sharing.module */ "./src/app/equipment-sharing/equipment-sharing.module.ts");
const organization_employment_type_module_1 = __webpack_require__(/*! ./organization-employment-type/organization-employment-type.module */ "./src/app/organization-employment-type/organization-employment-type.module.ts");
const timesheet_module_1 = __webpack_require__(/*! ./timesheet/timesheet.module */ "./src/app/timesheet/timesheet.module.ts");
const expense_categories_module_1 = __webpack_require__(/*! ./expense-categories/expense-categories.module */ "./src/app/expense-categories/expense-categories.module.ts");
const upwork_module_1 = __webpack_require__(/*! ./upwork/upwork.module */ "./src/app/upwork/upwork.module.ts");
const hubstaff_module_1 = __webpack_require__(/*! ./hubstaff/hubstaff.module */ "./src/app/hubstaff/hubstaff.module.ts");
const candidate_module_1 = __webpack_require__(/*! ./candidate/candidate.module */ "./src/app/candidate/candidate.module.ts");
const product_category_module_1 = __webpack_require__(/*! ./product-category/product-category.module */ "./src/app/product-category/product-category.module.ts");
const product_type_module_1 = __webpack_require__(/*! ./product-type/product-type.module */ "./src/app/product-type/product-type.module.ts");
const product_module_1 = __webpack_require__(/*! ./product/product.module */ "./src/app/product/product.module.ts");
const integration_setting_module_1 = __webpack_require__(/*! ./integration-setting/integration-setting.module */ "./src/app/integration-setting/integration-setting.module.ts");
const integration_map_module_1 = __webpack_require__(/*! ./integration-map/integration-map.module */ "./src/app/integration-map/integration-map.module.ts");
const product_variant_price_module_1 = __webpack_require__(/*! ./product-variant-price/product-variant-price-module */ "./src/app/product-variant-price/product-variant-price-module.ts");
const product_variant_module_1 = __webpack_require__(/*! ./product-variant/product-variant.module */ "./src/app/product-variant/product-variant.module.ts");
const integration_entity_setting_module_1 = __webpack_require__(/*! ./integration-entity-setting/integration-entity-setting.module */ "./src/app/integration-entity-setting/integration-entity-setting.module.ts");
const integration_entity_setting_tied_entity_module_1 = __webpack_require__(/*! ./integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.module */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.module.ts");
const candidate_education_module_1 = __webpack_require__(/*! ./candidate-education/candidate-education.module */ "./src/app/candidate-education/candidate-education.module.ts");
const candidate_source_module_1 = __webpack_require__(/*! ./candidate-source/candidate-source.module */ "./src/app/candidate-source/candidate-source.module.ts");
const candidate_documents_module_1 = __webpack_require__(/*! ./candidate-documents/candidate-documents.module */ "./src/app/candidate-documents/candidate-documents.module.ts");
const candidate_experience_module_1 = __webpack_require__(/*! ./candidate-experience/candidate-experience.module */ "./src/app/candidate-experience/candidate-experience.module.ts");
const candidate_feedbacks_module_1 = __webpack_require__(/*! ./candidate-feedbacks/candidate-feedbacks.module */ "./src/app/candidate-feedbacks/candidate-feedbacks.module.ts");
const product_settings_module_1 = __webpack_require__(/*! ./product-settings/product-settings.module */ "./src/app/product-settings/product-settings.module.ts");
const integration_module_1 = __webpack_require__(/*! ./integration/integration.module */ "./src/app/integration/integration.module.ts");
const integration_tenant_module_1 = __webpack_require__(/*! ./integration-tenant/integration-tenant.module */ "./src/app/integration-tenant/integration-tenant.module.ts");
const candidate_interview_module_1 = __webpack_require__(/*! ./candidate-interview/candidate-interview.module */ "./src/app/candidate-interview/candidate-interview.module.ts");
const appointment_employees_module_1 = __webpack_require__(/*! ./appointment-employees/appointment-employees.module */ "./src/app/appointment-employees/appointment-employees.module.ts");
const approval_policy_module_1 = __webpack_require__(/*! ./approval-policy/approval-policy.module */ "./src/app/approval-policy/approval-policy.module.ts");
const request_approval_employee_module_1 = __webpack_require__(/*! ./request-approval-employee/request-approval-employee.module */ "./src/app/request-approval-employee/request-approval-employee.module.ts");
const request_approval_module_1 = __webpack_require__(/*! ./request-approval/request-approval.module */ "./src/app/request-approval/request-approval.module.ts");
const path = __webpack_require__(/*! path */ "path");
const nestjs_i18n_1 = __webpack_require__(/*! nestjs-i18n */ "nestjs-i18n");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const event_type_module_1 = __webpack_require__(/*! ./event-types/event-type.module */ "./src/app/event-types/event-type.module.ts");
const availability_slots_module_1 = __webpack_require__(/*! ./availability-slots/availability-slots.module */ "./src/app/availability-slots/availability-slots.module.ts");
const help_center_module_1 = __webpack_require__(/*! ./help-center/help-center.module */ "./src/app/help-center/help-center.module.ts");
const pipeline_module_1 = __webpack_require__(/*! ./pipeline/pipeline.module */ "./src/app/pipeline/pipeline.module.ts");
const payment_module_1 = __webpack_require__(/*! ./payment/payment.module */ "./src/app/payment/payment.module.ts");
const candidate_personal_qualities_module_1 = __webpack_require__(/*! ./candidate-personal-qualities/candidate-personal-qualities.module */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.module.ts");
const pipeline_stage_module_1 = __webpack_require__(/*! ./pipeline-stage/pipeline-stage.module */ "./src/app/pipeline-stage/pipeline-stage.module.ts");
const candidate_technologies_module_1 = __webpack_require__(/*! ./candidate-technologies/candidate-technologies.module */ "./src/app/candidate-technologies/candidate-technologies.module.ts");
const goal_module_1 = __webpack_require__(/*! ./goal/goal.module */ "./src/app/goal/goal.module.ts");
const keyresult_module_1 = __webpack_require__(/*! ./keyresult/keyresult.module */ "./src/app/keyresult/keyresult.module.ts");
const request_approval_team_module_1 = __webpack_require__(/*! ./request-approval-team/request-approval-team.module */ "./src/app/request-approval-team/request-approval-team.module.ts");
const keyresult_update_module_1 = __webpack_require__(/*! ./keyresult-update/keyresult-update.module */ "./src/app/keyresult-update/keyresult-update.module.ts");
const candidate_criterion_rating_module_1 = __webpack_require__(/*! ./candidate-criterions-rating/candidate-criterion-rating.module */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.module.ts");
const help_center_article_module_1 = __webpack_require__(/*! ./help-center-article/help-center-article.module */ "./src/app/help-center-article/help-center-article.module.ts");
const goal_time_frame_module_1 = __webpack_require__(/*! ./goal-time-frame/goal-time-frame.module */ "./src/app/goal-time-frame/goal-time-frame.module.ts");
const estimate_email_entity_1 = __webpack_require__(/*! ./estimate-email/estimate-email.entity */ "./src/app/estimate-email/estimate-email.entity.ts");
const estimate_email_module_1 = __webpack_require__(/*! ./estimate-email/estimate-email.module */ "./src/app/estimate-email/estimate-email.module.ts");
const serve_static_1 = __webpack_require__(/*! @nestjs/serve-static */ "@nestjs/serve-static");
const time_off_request_module_1 = __webpack_require__(/*! ./time-off-request/time-off-request.module */ "./src/app/time-off-request/time-off-request.module.ts");
const deal_module_1 = __webpack_require__(/*! ./deal/deal.module */ "./src/app/deal/deal.module.ts");
const help_center_author_module_1 = __webpack_require__(/*! ./help-center-author/help-center-author.module */ "./src/app/help-center-author/help-center-author.module.ts");
const organization_sprint_module_1 = __webpack_require__(/*! ./organization-sprint/organization-sprint.module */ "./src/app/organization-sprint/organization-sprint.module.ts");
const goal_kpi_module_1 = __webpack_require__(/*! ./goal-kpi/goal-kpi.module */ "./src/app/goal-kpi/goal-kpi.module.ts");
const platform_express_1 = __webpack_require__(/*! @nestjs/platform-express */ "@nestjs/platform-express");
const goal_general_setting_module_1 = __webpack_require__(/*! ./goal-general-setting/goal-general-setting.module */ "./src/app/goal-general-setting/goal-general-setting.module.ts");
const equipment_sharing_policy_module_1 = __webpack_require__(/*! ./equipment-sharing-policy/equipment-sharing-policy.module */ "./src/app/equipment-sharing-policy/equipment-sharing-policy.module.ts");
const goal_template_module_1 = __webpack_require__(/*! ./goal-template/goal-template.module */ "./src/app/goal-template/goal-template.module.ts");
const keyresult_template_module_1 = __webpack_require__(/*! ./keyresult-template/keyresult-template.module */ "./src/app/keyresult-template/keyresult-template.module.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const employee_award_module_1 = __webpack_require__(/*! ./employee-award/employee-award.module */ "./src/app/employee-award/employee-award.module.ts");
const invoice_estimate_history_module_1 = __webpack_require__(/*! ./invoice-estimate-history/invoice-estimate-history.module */ "./src/app/invoice-estimate-history/invoice-estimate-history.module.ts");
const goal_kpi_template_module_1 = __webpack_require__(/*! ./goal-kpi-template/goal-kpi-template.module */ "./src/app/goal-kpi-template/goal-kpi-template.module.ts");
const tenant_setting_module_1 = __webpack_require__(/*! ./tenant/tenant-setting/tenant-setting.module */ "./src/app/tenant/tenant-setting/tenant-setting.module.ts");
const employee_job_preset_module_1 = __webpack_require__(/*! ./employee-job-preset/employee-job-preset.module */ "./src/app/employee-job-preset/employee-job-preset.module.ts");
const report_module_1 = __webpack_require__(/*! ./reports/report.module */ "./src/app/reports/report.module.ts");
const employee_proposal_template_module_1 = __webpack_require__(/*! ./employee-proposal-template/employee-proposal-template.module */ "./src/app/employee-proposal-template/employee-proposal-template.module.ts");
const custom_smtp_module_1 = __webpack_require__(/*! ./custom-smtp/custom-smtp.module */ "./src/app/custom-smtp/custom-smtp.module.ts");
const feature_module_1 = __webpack_require__(/*! ./feature/feature.module */ "./src/app/feature/feature.module.ts");
const unleash = __webpack_require__(/*! unleash-client */ "unleash-client");
const { unleashConfig } = environment_1.environment;
if (unleashConfig.url) {
    const instance = unleash.initialize({
        appName: unleashConfig.appName,
        url: unleashConfig.url,
        instanceId: unleashConfig.instanceId,
        refreshInterval: unleashConfig.refreshInterval,
        metricsInterval: unleashConfig.metricsInterval
    });
    instance.on('registered', (client) => console.log('registered', client));
}
const sentryIntegrations = [];
sentryIntegrations.push(new Sentry.Integrations.Http({ tracing: true }));
if (process.env.DB_TYPE === 'postgres') {
    sentryIntegrations.push(new Tracing.Integrations.Postgres());
}
let AppModule = class AppModule {
    constructor() {
        moment.locale('en', {
            week: {
                dow: 1
            }
        });
        moment.locale('en');
    }
};
AppModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            serve_static_1.ServeStaticModule.forRoot({
                rootPath: environment_1.environment.isElectron
                    ? path.resolve(environment_1.environment.gauzyUserPath, 'public')
                    : path.resolve(process.cwd(), 'apps', 'api', 'public'),
                serveRoot: '/public/'
            }),
            platform_express_1.MulterModule.register(),
            nest_router_1.RouterModule.forRoutes([
                {
                    path: '',
                    children: [
                        { path: '/', module: home_module_1.HomeModule },
                        { path: '/auth', module: auth_module_1.AuthModule },
                        { path: '/user', module: user_module_1.UserModule },
                        { path: '/employee', module: employee_module_1.EmployeeModule },
                        { path: '/candidate', module: candidate_module_1.CandidateModule },
                        {
                            path: '/candidate-educations',
                            module: candidate_education_module_1.CandidateEducationModule
                        },
                        {
                            path: '/candidate-documents',
                            module: candidate_documents_module_1.CandidateDocumentsModule
                        },
                        {
                            path: '/candidate-feedbacks',
                            module: candidate_feedbacks_module_1.CandidateFeedbacksModule
                        },
                        {
                            path: '/candidate-interview',
                            module: candidate_interview_module_1.CandidateInterviewModule
                        },
                        {
                            path: '/candidate-interviewers',
                            module: candidate_interviewers_module_1.CandidateInterviewersModule
                        },
                        {
                            path: '/candidate-experience',
                            module: candidate_experience_module_1.CandidateExperienceModule
                        },
                        {
                            path: '/candidate-skills',
                            module: candidate_skill_module_1.CandidateSkillModule
                        },
                        {
                            path: '/candidate-source',
                            module: candidate_source_module_1.CandidateSourceModule
                        },
                        {
                            path: '/candidate-personal-qualities',
                            module: candidate_personal_qualities_module_1.CandidatePersonalQualitiesModule
                        },
                        {
                            path: '/candidate-technologies',
                            module: candidate_technologies_module_1.CandidateTechnologiesModule
                        },
                        {
                            path: '/candidate-criterions-rating',
                            module: candidate_criterion_rating_module_1.CandidateCriterionsRatingModule
                        },
                        { path: '/download', module: export_all_module_1.ExportAllModule },
                        { path: '/import', module: import_all_module_1.ImportAllModule },
                        { path: '/role', module: role_module_1.RoleModule },
                        { path: '/organization', module: organization_module_1.OrganizationModule },
                        { path: '/income', module: income_module_1.IncomeModule },
                        { path: '/expense', module: expense_module_1.ExpenseModule },
                        { path: '/help-center', module: help_center_module_1.HelpCenterModule },
                        {
                            path: '/help-center-article',
                            module: help_center_article_module_1.HelpCenterArticleModule
                        },
                        {
                            path: '/help-center-author',
                            module: help_center_author_module_1.HelpCenterAuthorModule
                        },
                        { path: '/equipment', module: equipment_module_1.EquipmentModule },
                        { path: '/employee-level', module: organization_employee_level_module_1.EmployeeLevelModule },
                        {
                            path: '/job-preset',
                            module: employee_job_preset_module_1.EmployeeJobPresetModule
                        },
                        {
                            path: '/employee-job',
                            module: employee_job_1.EmployeeJobPostModule
                        },
                        {
                            path: '/employee-settings',
                            module: employee_setting_1.EmployeeSettingModule
                        },
                        {
                            path: '/employee-statistics',
                            module: employee_statistics_module_1.EmployeeStatisticsModule
                        },
                        {
                            path: '/employee-appointment',
                            module: employee_appointment_1.EmployeeAppointmentModule
                        },
                        {
                            path: '/employee-award',
                            module: employee_award_module_1.EmployeeAwardModule
                        },
                        {
                            path: '/appointment-employees',
                            module: appointment_employees_module_1.AppointmentEmployeesModule
                        },
                        {
                            path: '/user-organization',
                            module: user_organization_module_1.UserOrganizationModule
                        },
                        {
                            path: '/organization-department',
                            module: organization_department_module_1.OrganizationDepartmentModule
                        },
                        {
                            path: '/organization-contact',
                            module: organization_contact_module_1.OrganizationContactModule
                        },
                        {
                            path: '/organization-positions',
                            module: organization_positions_module_1.OrganizationPositionsModule
                        },
                        {
                            path: '/organization-awards',
                            module: organization_awards_module_1.OrganizationAwardsModule
                        },
                        {
                            path: '/organization-languages',
                            module: organization_languages_module_1.OrganizationLanguagesModule
                        },
                        {
                            path: '/organization-projects',
                            module: organization_projects_module_1.OrganizationProjectsModule
                        },
                        {
                            path: '/organization-vendors',
                            module: organization_vendors_module_1.OrganizationVendorsModule
                        },
                        {
                            path: '/organization-recurring-expense',
                            module: organization_recurring_expense_module_1.OrganizationRecurringExpenseModule
                        },
                        {
                            path: '/organization-documents',
                            module: organization_documents_module_1.OrganizationDocumentsModule
                        },
                        {
                            path: '/employee-recurring-expense',
                            module: employee_recurring_expense_module_1.EmployeeRecurringExpenseModule
                        },
                        {
                            path: '/organization-team',
                            module: organization_team_module_1.OrganizationTeamModule
                        },
                        {
                            path: '/organization-sprint',
                            module: organization_sprint_module_1.OrganizationSprintModule
                        },
                        {
                            path: '/proposal',
                            module: proposal_module_1.ProposalModule
                        },
                        {
                            path: '/country',
                            module: country_1.CountryModule
                        },
                        {
                            path: '/currency',
                            module: currency_1.CurrencyModule
                        },
                        {
                            path: '/invite',
                            module: invite_module_1.InviteModule
                        },
                        {
                            path: '/email',
                            module: email_module_1.EmailModule
                        },
                        {
                            path: '/email-template',
                            module: email_template_module_1.EmailTemplateModule
                        },
                        {
                            path: '/estimate-email',
                            module: estimate_email_module_1.EstimateEmailModule
                        },
                        {
                            path: 'time-off-request',
                            module: time_off_request_module_1.TimeOffRequestModule
                        },
                        {
                            path: 'time-off-policy',
                            module: time_off_policy_module_1.TimeOffPolicyModule
                        },
                        {
                            path: '/approval-policy',
                            module: approval_policy_module_1.ApprovalPolicyModule
                        },
                        {
                            path: '/request-approval',
                            module: request_approval_module_1.RequestApprovalModule
                        },
                        {
                            path: 'role-permissions',
                            module: role_permissions_module_1.RolePermissionsModule
                        },
                        {
                            path: '/tenant-setting',
                            module: tenant_setting_module_1.TenantSettingModule
                        },
                        {
                            path: '/tenant',
                            module: tenant_module_1.TenantModule
                        },
                        {
                            path: '/tags',
                            module: tag_module_1.TagModule
                        },
                        {
                            path: '/skills',
                            module: skill_module_1.SkillModule
                        },
                        {
                            path: '/languages',
                            module: language_module_1.LanguageModule
                        },
                        {
                            path: '/tasks',
                            module: task_module_1.TaskModule
                        },
                        {
                            path: '/equipment-sharing',
                            module: equipment_sharing_module_1.EquipmentSharingModule
                        },
                        {
                            path: '/equipment-sharing-policy',
                            module: equipment_sharing_policy_module_1.EquipmentSharingPolicyModule
                        },
                        {
                            path: '/organization-employment-type',
                            module: organization_employment_type_module_1.OrganizationEmploymentTypeModule
                        },
                        {
                            path: '/expense-categories',
                            module: expense_categories_module_1.ExpenseCategoriesModule
                        },
                        {
                            path: '/timesheet',
                            module: timesheet_module_1.TimesheetModule
                        },
                        {
                            path: '/integrations/upwork',
                            module: upwork_module_1.UpworkModule
                        },
                        {
                            path: '/integrations/hubstaff',
                            module: hubstaff_module_1.HubstaffModule
                        },
                        {
                            path: '/integration-tenant',
                            module: integration_tenant_module_1.IntegrationTenantModule
                        },
                        {
                            path: '/integration-entity-setting',
                            module: integration_entity_setting_module_1.IntegrationEntitySettingModule
                        },
                        {
                            path: '/integration',
                            module: integration_module_1.IntegrationModule
                        },
                        {
                            path: '/invoices',
                            module: invoice_module_1.InvoiceModule
                        },
                        {
                            path: '/invoice-item',
                            module: invoice_item_module_1.InvoiceItemModule
                        },
                        {
                            path: '/products',
                            module: product_module_1.ProductModule
                        },
                        {
                            path: '/product-categories',
                            module: product_category_module_1.ProductCategoriesModule
                        },
                        {
                            path: '/product-types',
                            module: product_type_module_1.ProductTypesModule
                        },
                        {
                            path: '/product-variant-prices',
                            module: product_variant_price_module_1.ProductVariantPriceModule
                        },
                        {
                            path: '/product-variants',
                            module: product_variant_module_1.ProductVariantModule
                        },
                        {
                            path: '/product-variant-settings',
                            module: product_settings_module_1.ProductVariantSettingsModule
                        },
                        {
                            path: '/event-type',
                            module: event_type_module_1.EventTypeModule
                        },
                        {
                            path: '/availability-slots',
                            module: availability_slots_module_1.AvailabilitySlotsModule
                        },
                        {
                            path: '/pipelines',
                            module: pipeline_module_1.PipelineModule
                        },
                        {
                            path: '/deals',
                            module: deal_module_1.DealModule
                        },
                        {
                            path: '/payments',
                            module: payment_module_1.PaymentModule
                        },
                        {
                            path: '/goals',
                            module: goal_module_1.GoalModule
                        },
                        {
                            path: '/goal-time-frame',
                            module: goal_time_frame_module_1.GoalTimeFrameModule
                        },
                        {
                            path: '/goal-general-settings',
                            module: goal_general_setting_module_1.GoalGeneralSettingModule
                        },
                        {
                            path: '/goal-kpi',
                            module: goal_kpi_module_1.GoalKpiModule
                        },
                        {
                            path: '/goal-kpi-template',
                            module: goal_kpi_template_module_1.GoalKpiTemplateModule
                        },
                        {
                            path: '/goal-templates',
                            module: goal_template_module_1.GoalTemplateModule
                        },
                        {
                            path: '/key-results',
                            module: keyresult_module_1.KeyResultModule
                        },
                        {
                            path: '/key-result-updates',
                            module: keyresult_update_module_1.KeyResultUpdateModule
                        },
                        {
                            path: '/key-result-templates',
                            module: keyresult_template_module_1.KeyresultTemplateModule
                        },
                        {
                            path: '/invoice-estimate-history',
                            module: invoice_estimate_history_module_1.InvoiceEstimateHistoryModule
                        },
                        {
                            path: '/report',
                            module: report_module_1.ReportModule
                        },
                        {
                            path: '/smtp',
                            module: custom_smtp_module_1.CustomSmtpModule
                        },
                        {
                            path: '/feature/toggle',
                            module: feature_module_1.FeatureModule
                        }
                    ]
                }
            ]),
            nestjs_i18n_1.I18nModule.forRoot({
                fallbackLanguage: models_1.LanguagesEnum.ENGLISH,
                parser: nestjs_i18n_1.I18nJsonParser,
                parserOptions: {
                    path: path.join(__dirname, '/assets/i18n/'),
                    watch: !environment_1.environment.production
                },
                resolvers: [new nestjs_i18n_1.HeaderResolver(['language'])]
            }),
            ...(environment_1.environment.sentry
                ? [
                    nestjs_sentry_1.SentryModule.forRoot({
                        dsn: environment_1.environment.sentry.dns,
                        debug: !environment_1.environment.production,
                        environment: environment_1.environment.production
                            ? 'production'
                            : 'development',
                        release: 'gauzy@' + process.env.npm_package_version,
                        logLevel: types_1.LogLevel.Error,
                        integrations: sentryIntegrations,
                        tracesSampleRate: 1.0
                    })
                ]
                : []),
            core_1.CoreModule,
            auth_module_1.AuthModule,
            user_module_1.UserModule,
            home_module_1.HomeModule,
            employee_module_1.EmployeeModule,
            employee_recurring_expense_module_1.EmployeeRecurringExpenseModule,
            employee_award_module_1.EmployeeAwardModule,
            candidate_module_1.CandidateModule,
            candidate_documents_module_1.CandidateDocumentsModule,
            candidate_source_module_1.CandidateSourceModule,
            candidate_education_module_1.CandidateEducationModule,
            candidate_experience_module_1.CandidateExperienceModule,
            candidate_skill_module_1.CandidateSkillModule,
            candidate_feedbacks_module_1.CandidateFeedbacksModule,
            candidate_interview_module_1.CandidateInterviewModule,
            candidate_interviewers_module_1.CandidateInterviewersModule,
            candidate_personal_qualities_module_1.CandidatePersonalQualitiesModule,
            candidate_technologies_module_1.CandidateTechnologiesModule,
            candidate_criterion_rating_module_1.CandidateCriterionsRatingModule,
            custom_smtp_module_1.CustomSmtpModule,
            export_all_module_1.ExportAllModule,
            import_all_module_1.ImportAllModule,
            employee_setting_1.EmployeeSettingModule,
            employee_job_preset_module_1.EmployeeJobPresetModule,
            employee_job_1.EmployeeJobPostModule,
            employee_proposal_template_module_1.EmployeeProposalTemplateModule,
            employee_statistics_module_1.EmployeeStatisticsModule,
            employee_appointment_1.EmployeeAppointmentModule,
            appointment_employees_module_1.AppointmentEmployeesModule,
            role_module_1.RoleModule,
            organization_module_1.OrganizationModule,
            income_module_1.IncomeModule,
            expense_module_1.ExpenseModule,
            user_organization_module_1.UserOrganizationModule,
            organization_department_module_1.OrganizationDepartmentModule,
            organization_recurring_expense_module_1.OrganizationRecurringExpenseModule,
            organization_contact_module_1.OrganizationContactModule,
            organization_positions_module_1.OrganizationPositionsModule,
            organization_projects_module_1.OrganizationProjectsModule,
            organization_vendors_module_1.OrganizationVendorsModule,
            organization_awards_module_1.OrganizationAwardsModule,
            organization_languages_module_1.OrganizationLanguagesModule,
            organization_sprint_module_1.OrganizationSprintModule,
            organization_team_module_1.OrganizationTeamModule,
            organization_team_employee_module_1.OrganizationTeamEmployeeModule,
            organization_documents_module_1.OrganizationDocumentsModule,
            request_approval_employee_module_1.RequestApprovalEmployeeModule,
            request_approval_team_module_1.RequestApprovalTeamModule,
            proposal_module_1.ProposalModule,
            email_module_1.EmailModule,
            email_template_module_1.EmailTemplateModule,
            country_1.CountryModule,
            currency_1.CurrencyModule,
            invite_module_1.InviteModule,
            time_off_policy_module_1.TimeOffPolicyModule,
            time_off_request_module_1.TimeOffRequestModule,
            approval_policy_module_1.ApprovalPolicyModule,
            equipment_sharing_policy_module_1.EquipmentSharingPolicyModule,
            request_approval_module_1.RequestApprovalModule,
            role_permissions_module_1.RolePermissionsModule,
            help_center_article_module_1.HelpCenterArticleModule,
            tenant_module_1.TenantModule,
            tenant_setting_module_1.TenantSettingModule,
            tag_module_1.TagModule,
            skill_module_1.SkillModule,
            language_module_1.LanguageModule,
            invoice_module_1.InvoiceModule,
            invoice_item_module_1.InvoiceItemModule,
            payment_module_1.PaymentModule,
            estimate_email_entity_1.EstimateEmail,
            goal_module_1.GoalModule,
            goal_time_frame_module_1.GoalTimeFrameModule,
            goal_general_setting_module_1.GoalGeneralSettingModule,
            keyresult_module_1.KeyResultModule,
            keyresult_update_module_1.KeyResultUpdateModule,
            organization_employee_level_module_1.EmployeeLevelModule,
            event_type_module_1.EventTypeModule,
            availability_slots_module_1.AvailabilitySlotsModule,
            pipeline_module_1.PipelineModule,
            pipeline_stage_module_1.StageModule,
            deal_module_1.DealModule,
            invoice_estimate_history_module_1.InvoiceEstimateHistoryModule,
            help_center_module_1.HelpCenterModule,
            help_center_author_module_1.HelpCenterAuthorModule,
            equipment_module_1.EquipmentModule,
            equipment_sharing_module_1.EquipmentSharingModule,
            task_module_1.TaskModule,
            organization_employment_type_module_1.OrganizationEmploymentTypeModule,
            timesheet_module_1.TimesheetModule,
            feature_module_1.FeatureModule,
            report_module_1.ReportModule,
            upwork_module_1.UpworkModule,
            hubstaff_module_1.HubstaffModule,
            expense_categories_module_1.ExpenseCategoriesModule,
            product_category_module_1.ProductCategoriesModule,
            product_type_module_1.ProductTypesModule,
            product_module_1.ProductModule,
            integration_module_1.IntegrationModule,
            integration_setting_module_1.IntegrationSettingModule,
            integration_tenant_module_1.IntegrationTenantModule,
            integration_map_module_1.IntegrationMapModule,
            product_variant_price_module_1.ProductVariantPriceModule,
            product_variant_module_1.ProductVariantModule,
            product_settings_module_1.ProductVariantSettingsModule,
            integration_entity_setting_module_1.IntegrationEntitySettingModule,
            integration_entity_setting_tied_entity_module_1.IntegrationEntitySettingTiedEntityModule,
            goal_kpi_module_1.GoalKpiModule,
            goal_template_module_1.GoalTemplateModule,
            keyresult_template_module_1.KeyresultTemplateModule,
            goal_kpi_template_module_1.GoalKpiTemplateModule
        ],
        controllers: [app_controller_1.AppController],
        providers: [app_service_1.AppService, seed_data_service_1.SeedDataService],
        exports: []
    }),
    tslib_1.__metadata("design:paramtypes", [])
], AppModule);
exports.AppModule = AppModule;


/***/ }),

/***/ "./src/app/app.service.ts":
/*!********************************!*\
  !*** ./src/app/app.service.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const seed_data_service_1 = __webpack_require__(/*! ./core/seeds/seed-data.service */ "./src/app/core/seeds/seed-data.service.ts");
const user_service_1 = __webpack_require__(/*! ./user/user.service */ "./src/app/user/user.service.ts");
let AppService = class AppService {
    constructor(seedDataService, userService) {
        this.seedDataService = seedDataService;
        this.userService = userService;
    }
    async seedDBIfEmpty() {
        const count = await this.userService.count();
        console.log(`Found ${count} users in DB`);
        if (count === 0) {
            await this.seedDataService.runDefaultSeed();
        }
    }
};
AppService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, common_1.Inject(common_1.forwardRef(() => seed_data_service_1.SeedDataService))),
    tslib_1.__param(1, common_1.Inject(common_1.forwardRef(() => user_service_1.UserService))),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof seed_data_service_1.SeedDataService !== "undefined" && seed_data_service_1.SeedDataService) === "function" ? _a : Object, typeof (_b = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" ? _b : Object])
], AppService);
exports.AppService = AppService;


/***/ }),

/***/ "./src/app/appointment-employees/appointment-employees.controller.ts":
/*!***************************************************************************!*\
  !*** ./src/app/appointment-employees/appointment-employees.controller.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppointmentEmployeesController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const appointment_employees_entity_1 = __webpack_require__(/*! ./appointment-employees.entity */ "./src/app/appointment-employees/appointment-employees.entity.ts");
const appointment_employees_service_1 = __webpack_require__(/*! ./appointment-employees.service */ "./src/app/appointment-employees/appointment-employees.service.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let AppointmentEmployeesController = class AppointmentEmployeesController extends core_1.CrudController {
    constructor(appointmentEmployeesService) {
        super(appointmentEmployeesService);
        this.appointmentEmployeesService = appointmentEmployeesService;
    }
    async findOneById(appointmentid) {
        return (await this.appointmentEmployeesService.findAll({
            where: {
                appointmentId: appointmentid
            }
        })).items;
    }
    async findEmployeeAppointments(employeeId) {
        return (await this.appointmentEmployeesService.findAll({
            where: {
                employeeId: employeeId
            },
            relations: ['employeeAppointment']
        })).items;
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find appointment employees by appointment id.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found one record',
        type: appointment_employees_entity_1.AppointmentEmployee
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Get(':appointmentid'),
    tslib_1.__param(0, common_1.Param('appointmentid', shared_1.UUIDValidationPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], AppointmentEmployeesController.prototype, "findOneById", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find appointments based on employee id.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found records',
        type: appointment_employees_entity_1.AppointmentEmployee
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Records not found'
    }),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Get('findEmployeeAppointments/:employeeId'),
    tslib_1.__param(0, common_1.Param('employeeId', shared_1.UUIDValidationPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], AppointmentEmployeesController.prototype, "findEmployeeAppointments", null);
AppointmentEmployeesController = tslib_1.__decorate([
    swagger_1.ApiTags('AppointmentEmployee'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof appointment_employees_service_1.AppointmentEmployeesService !== "undefined" && appointment_employees_service_1.AppointmentEmployeesService) === "function" ? _c : Object])
], AppointmentEmployeesController);
exports.AppointmentEmployeesController = AppointmentEmployeesController;


/***/ }),

/***/ "./src/app/appointment-employees/appointment-employees.entity.ts":
/*!***********************************************************************!*\
  !*** ./src/app/appointment-employees/appointment-employees.entity.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppointmentEmployee = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const employee_appointment_1 = __webpack_require__(/*! ../employee-appointment */ "./src/app/employee-appointment/index.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let AppointmentEmployee = class AppointmentEmployee extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], AppointmentEmployee.prototype, "appointmentId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], AppointmentEmployee.prototype, "employeeId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_appointment_1.EmployeeAppointment }),
    typeorm_1.ManyToOne((type) => employee_appointment_1.EmployeeAppointment, (employeeAppointment) => employeeAppointment, { onDelete: 'SET NULL' }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IEmployeeAppointment !== "undefined" && models_1.IEmployeeAppointment) === "function" ? _a : Object)
], AppointmentEmployee.prototype, "employeeAppointment", void 0);
AppointmentEmployee = tslib_1.__decorate([
    typeorm_1.Entity('appointment_employee')
], AppointmentEmployee);
exports.AppointmentEmployee = AppointmentEmployee;


/***/ }),

/***/ "./src/app/appointment-employees/appointment-employees.module.ts":
/*!***********************************************************************!*\
  !*** ./src/app/appointment-employees/appointment-employees.module.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.AppointmentEmployeesModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const appointment_employees_entity_1 = __webpack_require__(/*! ./appointment-employees.entity */ "./src/app/appointment-employees/appointment-employees.entity.ts");
const appointment_employees_controller_1 = __webpack_require__(/*! ./appointment-employees.controller */ "./src/app/appointment-employees/appointment-employees.controller.ts");
const appointment_employees_service_1 = __webpack_require__(/*! ./appointment-employees.service */ "./src/app/appointment-employees/appointment-employees.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let AppointmentEmployeesModule = class AppointmentEmployeesModule {
};
AppointmentEmployeesModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([appointment_employees_entity_1.AppointmentEmployee]), tenant_module_1.TenantModule],
        controllers: [appointment_employees_controller_1.AppointmentEmployeesController],
        providers: [appointment_employees_service_1.AppointmentEmployeesService],
        exports: [appointment_employees_service_1.AppointmentEmployeesService]
    })
], AppointmentEmployeesModule);
exports.AppointmentEmployeesModule = AppointmentEmployeesModule;


/***/ }),

/***/ "./src/app/appointment-employees/appointment-employees.seed.ts":
/*!*********************************************************************!*\
  !*** ./src/app/appointment-employees/appointment-employees.seed.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomAppointmentEmployees = void 0;
const appointment_employees_entity_1 = __webpack_require__(/*! ./appointment-employees.entity */ "./src/app/appointment-employees/appointment-employees.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
exports.createRandomAppointmentEmployees = async (connection, tenants, tenantEmployeeMap) => {
    if (!tenantEmployeeMap) {
        console.warn('Warning: tenantEmployeeMap not found, Appointment Employees  will not be created');
        return;
    }
    const appointEmployees = [];
    for (const tenant of tenants) {
        const tenantEmployees = tenantEmployeeMap.get(tenant);
        for (const tenantEmployee of tenantEmployees) {
            for (let i = 0; i < faker.random.number(15); i++) {
                const appointemployee = new appointment_employees_entity_1.AppointmentEmployee();
                appointemployee.appointmentId = faker.random
                    .number({ min: 100000, max: 1000000 })
                    .toString();
                appointemployee.employeeId = tenantEmployee.id;
                appointemployee.organization = tenantEmployee.organization;
                appointemployee.tenant = tenant;
                appointEmployees.push(appointemployee);
            }
        }
    }
    await connection.manager.save(appointEmployees);
};


/***/ }),

/***/ "./src/app/appointment-employees/appointment-employees.service.ts":
/*!************************************************************************!*\
  !*** ./src/app/appointment-employees/appointment-employees.service.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppointmentEmployeesService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const appointment_employees_entity_1 = __webpack_require__(/*! ./appointment-employees.entity */ "./src/app/appointment-employees/appointment-employees.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
let AppointmentEmployeesService = class AppointmentEmployeesService extends core_1.CrudService {
    constructor(appointmentEmployeesRepository) {
        super(appointmentEmployeesRepository);
        this.appointmentEmployeesRepository = appointmentEmployeesRepository;
    }
};
AppointmentEmployeesService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(appointment_employees_entity_1.AppointmentEmployee)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], AppointmentEmployeesService);
exports.AppointmentEmployeesService = AppointmentEmployeesService;


/***/ }),

/***/ "./src/app/approval-policy/approval-policy.controller.ts":
/*!***************************************************************!*\
  !*** ./src/app/approval-policy/approval-policy.controller.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApprovalPolicyController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const approval_policy_entity_1 = __webpack_require__(/*! ./approval-policy.entity */ "./src/app/approval-policy/approval-policy.entity.ts");
const approval_policy_service_1 = __webpack_require__(/*! ./approval-policy.service */ "./src/app/approval-policy/approval-policy.service.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const parse_json_pipe_1 = __webpack_require__(/*! ../shared/pipes/parse-json.pipe */ "./src/app/shared/pipes/parse-json.pipe.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/approval-policy/commands/index.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
let ApprovalPolicyController = class ApprovalPolicyController extends core_1.CrudController {
    constructor(approvalPolicyService, commandBus) {
        super(approvalPolicyService);
        this.approvalPolicyService = approvalPolicyService;
        this.commandBus = commandBus;
    }
    findAllApprovalPolicies(data) {
        return this.commandBus.execute(new commands_1.ApprovalPolicyGetCommand(data));
    }
    findApprovalPoliciesForRequestApproval(data) {
        return this.commandBus.execute(new commands_1.RequestApprovalPolicyGetCommand(data));
    }
    async createApprovalPolicy(entity) {
        return this.commandBus.execute(new commands_1.ApprovalPolicyCreateCommand(entity));
    }
    async updateApprovalPolicy(id, entity) {
        return this.commandBus.execute(new commands_1.ApprovalPolicyUpdateCommand(Object.assign({ id }, entity)));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all approval policies.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found policies',
        type: approval_policy_entity_1.ApprovalPolicy
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    permissions_1.Permissions(models_1.PermissionsEnum.APPROVAL_POLICY_VIEW),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.IListQueryInput !== "undefined" && models_1.IListQueryInput) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], ApprovalPolicyController.prototype, "findAllApprovalPolicies", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all approval policies except time off and equipment sharing policy.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found policies',
        type: approval_policy_entity_1.ApprovalPolicy
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    permissions_1.Permissions(models_1.PermissionsEnum.APPROVAL_POLICY_VIEW),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Get('/request-approval'),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.IListQueryInput !== "undefined" && models_1.IListQueryInput) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], ApprovalPolicyController.prototype, "findApprovalPoliciesForRequestApproval", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    permissions_1.Permissions(models_1.PermissionsEnum.APPROVAL_POLICY_EDIT),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof models_1.IApprovalPolicyCreateInput !== "undefined" && models_1.IApprovalPolicyCreateInput) === "function" ? _e : Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], ApprovalPolicyController.prototype, "createApprovalPolicy", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    permissions_1.Permissions(models_1.PermissionsEnum.APPROVAL_POLICY_EDIT),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id', shared_1.UUIDValidationPipe)),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_g = typeof models_1.IApprovalPolicyUpdateInput !== "undefined" && models_1.IApprovalPolicyUpdateInput) === "function" ? _g : Object]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], ApprovalPolicyController.prototype, "updateApprovalPolicy", null);
ApprovalPolicyController = tslib_1.__decorate([
    swagger_1.ApiTags('ApprovalPolicy'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard, permission_guard_1.PermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_j = typeof approval_policy_service_1.ApprovalPolicyService !== "undefined" && approval_policy_service_1.ApprovalPolicyService) === "function" ? _j : Object, typeof (_k = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _k : Object])
], ApprovalPolicyController);
exports.ApprovalPolicyController = ApprovalPolicyController;


/***/ }),

/***/ "./src/app/approval-policy/approval-policy.entity.ts":
/*!***********************************************************!*\
  !*** ./src/app/approval-policy/approval-policy.entity.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ApprovalPolicy = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let ApprovalPolicy = class ApprovalPolicy extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], ApprovalPolicy.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], ApprovalPolicy.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.ApprovalPolicyTypesStringEnum }),
    class_validator_1.IsEnum(models_1.ApprovalPolicyTypesStringEnum),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], ApprovalPolicy.prototype, "approvalType", void 0);
ApprovalPolicy = tslib_1.__decorate([
    typeorm_1.Entity('approval_policy')
], ApprovalPolicy);
exports.ApprovalPolicy = ApprovalPolicy;


/***/ }),

/***/ "./src/app/approval-policy/approval-policy.module.ts":
/*!***********************************************************!*\
  !*** ./src/app/approval-policy/approval-policy.module.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ApprovalPolicyModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const approval_policy_entity_1 = __webpack_require__(/*! ./approval-policy.entity */ "./src/app/approval-policy/approval-policy.entity.ts");
const approval_policy_controller_1 = __webpack_require__(/*! ./approval-policy.controller */ "./src/app/approval-policy/approval-policy.controller.ts");
const approval_policy_service_1 = __webpack_require__(/*! ./approval-policy.service */ "./src/app/approval-policy/approval-policy.service.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/approval-policy/commands/handlers/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
let ApprovalPolicyModule = class ApprovalPolicyModule {
};
ApprovalPolicyModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([user_entity_1.User, approval_policy_entity_1.ApprovalPolicy]),
            tenant_module_1.TenantModule,
            cqrs_1.CqrsModule
        ],
        controllers: [approval_policy_controller_1.ApprovalPolicyController],
        providers: [approval_policy_service_1.ApprovalPolicyService, user_service_1.UserService, ...handlers_1.CommandHandlers],
        exports: [typeorm_1.TypeOrmModule, approval_policy_service_1.ApprovalPolicyService]
    })
], ApprovalPolicyModule);
exports.ApprovalPolicyModule = ApprovalPolicyModule;


/***/ }),

/***/ "./src/app/approval-policy/approval-policy.seed.ts":
/*!*********************************************************!*\
  !*** ./src/app/approval-policy/approval-policy.seed.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomApprovalPolicyForOrg = exports.createDefaultApprovalPolicyForOrg = void 0;
const approval_policy_entity_1 = __webpack_require__(/*! ./approval-policy.entity */ "./src/app/approval-policy/approval-policy.entity.ts");
const default_approval_policies_1 = __webpack_require__(/*! ./default-approval-policies */ "./src/app/approval-policy/default-approval-policies.ts");
exports.createDefaultApprovalPolicyForOrg = async (connection, defaultData) => {
    const promises = [];
    defaultData.orgs.forEach((org) => {
        const defaultApprovalPolicy = new approval_policy_entity_1.ApprovalPolicy();
        defaultApprovalPolicy.name = 'Default Approval Policy';
        defaultApprovalPolicy.organization = org;
        defaultApprovalPolicy.tenant = org.tenant;
        defaultApprovalPolicy.description = 'Default approval policy';
        defaultApprovalPolicy.approvalType = 'DEFAULT_APPROVAL_POLICY';
        promises.push(insertDefaultPolicy(connection, defaultApprovalPolicy));
    });
    await Promise.all(promises);
};
const insertDefaultPolicy = async (connection, defaultPolicy) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(approval_policy_entity_1.ApprovalPolicy)
        .values(defaultPolicy)
        .execute();
};
exports.createRandomApprovalPolicyForOrg = async (connection, tenants, tenantOrganizationsMap) => {
    const policies = [];
    for (const tenant of tenants) {
        const orgs = tenantOrganizationsMap.get(tenant);
        orgs.forEach((org) => {
            default_approval_policies_1.DEFAULT_APPROVAL_POLICIES.forEach((name) => {
                const policy = new approval_policy_entity_1.ApprovalPolicy();
                policy.description = name;
                policy.name = name;
                policy.tenant = tenant;
                policy.organizationId = org.id;
                policy.approvalType = name.replace(/\s+/g, '_').toUpperCase();
                policies.push(policy);
            });
        });
    }
    await connection
        .createQueryBuilder()
        .insert()
        .into(approval_policy_entity_1.ApprovalPolicy)
        .values(policies)
        .execute();
    return policies;
};


/***/ }),

/***/ "./src/app/approval-policy/approval-policy.service.ts":
/*!************************************************************!*\
  !*** ./src/app/approval-policy/approval-policy.service.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApprovalPolicyService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const approval_policy_entity_1 = __webpack_require__(/*! ./approval-policy.entity */ "./src/app/approval-policy/approval-policy.entity.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
let ApprovalPolicyService = class ApprovalPolicyService extends core_1.TenantAwareCrudService {
    constructor(approvalPolicyRepository) {
        super(approvalPolicyRepository);
        this.approvalPolicyRepository = approvalPolicyRepository;
    }
    async findAllApprovalPolicies({ findInput: where, relations }) {
        const query = { where, relations };
        return await super.findAll(query);
    }
    async findApprovalPoliciesForRequestApproval({ findInput, relations }) {
        const query = {
            where: Object.assign({ approvalType: typeorm_2.Not(typeorm_2.In([
                    models_1.ApprovalPolicyTypesStringEnum.EQUIPMENT_SHARING,
                    models_1.ApprovalPolicyTypesStringEnum.TIME_OFF
                ])) }, findInput),
            relations
        };
        return await super.findAll(query);
    }
    async create(entity) {
        try {
            const approvalPolicy = new approval_policy_entity_1.ApprovalPolicy();
            approvalPolicy.name = entity.name;
            approvalPolicy.organizationId = entity.organizationId;
            approvalPolicy.tenantId = context_1.RequestContext.currentTenantId();
            approvalPolicy.description = entity.description;
            approvalPolicy.approvalType = entity.name
                ? entity.name.replace(/\s+/g, '_').toUpperCase()
                : null;
            return this.approvalPolicyRepository.save(approvalPolicy);
        }
        catch (error) {
            throw new common_1.BadRequestException(error);
        }
    }
    async update(id, entity) {
        try {
            const approvalPolicy = await this.approvalPolicyRepository.findOne(id);
            approvalPolicy.name = entity.name;
            approvalPolicy.organizationId = entity.organizationId;
            approvalPolicy.tenantId = context_1.RequestContext.currentTenantId();
            approvalPolicy.description = entity.description;
            approvalPolicy.approvalType = entity.name
                ? entity.name.replace(/\s+/g, '_').toUpperCase()
                : null;
            return this.approvalPolicyRepository.save(approvalPolicy);
        }
        catch (error) {
            throw new common_1.BadRequestException(error);
        }
    }
};
ApprovalPolicyService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(approval_policy_entity_1.ApprovalPolicy)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], ApprovalPolicyService);
exports.ApprovalPolicyService = ApprovalPolicyService;


/***/ }),

/***/ "./src/app/approval-policy/commands/approval-policy.create.command.ts":
/*!****************************************************************************!*\
  !*** ./src/app/approval-policy/commands/approval-policy.create.command.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ApprovalPolicyCreateCommand = void 0;
class ApprovalPolicyCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.ApprovalPolicyCreateCommand = ApprovalPolicyCreateCommand;
ApprovalPolicyCreateCommand.type = '[ApprovalPolicy] Create';


/***/ }),

/***/ "./src/app/approval-policy/commands/approval-policy.get.command.ts":
/*!*************************************************************************!*\
  !*** ./src/app/approval-policy/commands/approval-policy.get.command.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ApprovalPolicyGetCommand = void 0;
class ApprovalPolicyGetCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.ApprovalPolicyGetCommand = ApprovalPolicyGetCommand;
ApprovalPolicyGetCommand.type = '[ApprovalPolicy] Get';


/***/ }),

/***/ "./src/app/approval-policy/commands/approval-policy.update.command.ts":
/*!****************************************************************************!*\
  !*** ./src/app/approval-policy/commands/approval-policy.update.command.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ApprovalPolicyUpdateCommand = void 0;
class ApprovalPolicyUpdateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.ApprovalPolicyUpdateCommand = ApprovalPolicyUpdateCommand;
ApprovalPolicyUpdateCommand.type = '[ApprovalPolicy] Update';


/***/ }),

/***/ "./src/app/approval-policy/commands/handlers/approval-policy.create.handler.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/approval-policy/commands/handlers/approval-policy.create.handler.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApprovalPolicyCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const approval_policy_service_1 = __webpack_require__(/*! ../../approval-policy.service */ "./src/app/approval-policy/approval-policy.service.ts");
const approval_policy_create_command_1 = __webpack_require__(/*! ../approval-policy.create.command */ "./src/app/approval-policy/commands/approval-policy.create.command.ts");
let ApprovalPolicyCreateHandler = class ApprovalPolicyCreateHandler {
    constructor(approvalPolicyService) {
        this.approvalPolicyService = approvalPolicyService;
    }
    async execute(command) {
        const { input } = command;
        return this.approvalPolicyService.create(input);
    }
};
ApprovalPolicyCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(approval_policy_create_command_1.ApprovalPolicyCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof approval_policy_service_1.ApprovalPolicyService !== "undefined" && approval_policy_service_1.ApprovalPolicyService) === "function" ? _a : Object])
], ApprovalPolicyCreateHandler);
exports.ApprovalPolicyCreateHandler = ApprovalPolicyCreateHandler;


/***/ }),

/***/ "./src/app/approval-policy/commands/handlers/approval-policy.get.handler.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/approval-policy/commands/handlers/approval-policy.get.handler.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApprovalPolicyGetHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const approval_policy_service_1 = __webpack_require__(/*! ../../approval-policy.service */ "./src/app/approval-policy/approval-policy.service.ts");
const approval_policy_get_command_1 = __webpack_require__(/*! ../approval-policy.get.command */ "./src/app/approval-policy/commands/approval-policy.get.command.ts");
let ApprovalPolicyGetHandler = class ApprovalPolicyGetHandler {
    constructor(approvalPolicyService) {
        this.approvalPolicyService = approvalPolicyService;
    }
    async execute(command) {
        const { input } = command;
        return this.approvalPolicyService.findAllApprovalPolicies(input);
    }
};
ApprovalPolicyGetHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(approval_policy_get_command_1.ApprovalPolicyGetCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof approval_policy_service_1.ApprovalPolicyService !== "undefined" && approval_policy_service_1.ApprovalPolicyService) === "function" ? _a : Object])
], ApprovalPolicyGetHandler);
exports.ApprovalPolicyGetHandler = ApprovalPolicyGetHandler;


/***/ }),

/***/ "./src/app/approval-policy/commands/handlers/approval-policy.update.handler.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/approval-policy/commands/handlers/approval-policy.update.handler.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApprovalPolicyUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const approval_policy_service_1 = __webpack_require__(/*! ../../approval-policy.service */ "./src/app/approval-policy/approval-policy.service.ts");
const approval_policy_update_command_1 = __webpack_require__(/*! ../approval-policy.update.command */ "./src/app/approval-policy/commands/approval-policy.update.command.ts");
let ApprovalPolicyUpdateHandler = class ApprovalPolicyUpdateHandler {
    constructor(approvalPolicyService) {
        this.approvalPolicyService = approvalPolicyService;
    }
    async execute(command) {
        const { input } = command;
        const { id } = input;
        return this.approvalPolicyService.update(id, input);
    }
};
ApprovalPolicyUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(approval_policy_update_command_1.ApprovalPolicyUpdateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof approval_policy_service_1.ApprovalPolicyService !== "undefined" && approval_policy_service_1.ApprovalPolicyService) === "function" ? _a : Object])
], ApprovalPolicyUpdateHandler);
exports.ApprovalPolicyUpdateHandler = ApprovalPolicyUpdateHandler;


/***/ }),

/***/ "./src/app/approval-policy/commands/handlers/index.ts":
/*!************************************************************!*\
  !*** ./src/app/approval-policy/commands/handlers/index.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const approval_policy_create_handler_1 = __webpack_require__(/*! ./approval-policy.create.handler */ "./src/app/approval-policy/commands/handlers/approval-policy.create.handler.ts");
const approval_policy_get_handler_1 = __webpack_require__(/*! ./approval-policy.get.handler */ "./src/app/approval-policy/commands/handlers/approval-policy.get.handler.ts");
const approval_policy_update_handler_1 = __webpack_require__(/*! ./approval-policy.update.handler */ "./src/app/approval-policy/commands/handlers/approval-policy.update.handler.ts");
const request_approval_policy_get_handler_1 = __webpack_require__(/*! ./request-approval-policy.get.handler */ "./src/app/approval-policy/commands/handlers/request-approval-policy.get.handler.ts");
exports.CommandHandlers = [
    approval_policy_create_handler_1.ApprovalPolicyCreateHandler,
    approval_policy_get_handler_1.ApprovalPolicyGetHandler,
    request_approval_policy_get_handler_1.RequestApprovalPolicyGetHandler,
    approval_policy_update_handler_1.ApprovalPolicyUpdateHandler
];


/***/ }),

/***/ "./src/app/approval-policy/commands/handlers/request-approval-policy.get.handler.ts":
/*!******************************************************************************************!*\
  !*** ./src/app/approval-policy/commands/handlers/request-approval-policy.get.handler.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestApprovalPolicyGetHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const approval_policy_service_1 = __webpack_require__(/*! ../../approval-policy.service */ "./src/app/approval-policy/approval-policy.service.ts");
const request_approval_policy_get_command_1 = __webpack_require__(/*! ../request-approval-policy.get.command */ "./src/app/approval-policy/commands/request-approval-policy.get.command.ts");
let RequestApprovalPolicyGetHandler = class RequestApprovalPolicyGetHandler {
    constructor(approvalPolicyService) {
        this.approvalPolicyService = approvalPolicyService;
    }
    async execute(command) {
        const { input } = command;
        return this.approvalPolicyService.findApprovalPoliciesForRequestApproval(input);
    }
};
RequestApprovalPolicyGetHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(request_approval_policy_get_command_1.RequestApprovalPolicyGetCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof approval_policy_service_1.ApprovalPolicyService !== "undefined" && approval_policy_service_1.ApprovalPolicyService) === "function" ? _a : Object])
], RequestApprovalPolicyGetHandler);
exports.RequestApprovalPolicyGetHandler = RequestApprovalPolicyGetHandler;


/***/ }),

/***/ "./src/app/approval-policy/commands/index.ts":
/*!***************************************************!*\
  !*** ./src/app/approval-policy/commands/index.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestApprovalPolicyGetCommand = exports.ApprovalPolicyUpdateCommand = exports.ApprovalPolicyGetCommand = exports.ApprovalPolicyCreateCommand = void 0;
var approval_policy_create_command_1 = __webpack_require__(/*! ./approval-policy.create.command */ "./src/app/approval-policy/commands/approval-policy.create.command.ts");
Object.defineProperty(exports, "ApprovalPolicyCreateCommand", { enumerable: true, get: function () { return approval_policy_create_command_1.ApprovalPolicyCreateCommand; } });
var approval_policy_get_command_1 = __webpack_require__(/*! ./approval-policy.get.command */ "./src/app/approval-policy/commands/approval-policy.get.command.ts");
Object.defineProperty(exports, "ApprovalPolicyGetCommand", { enumerable: true, get: function () { return approval_policy_get_command_1.ApprovalPolicyGetCommand; } });
var approval_policy_update_command_1 = __webpack_require__(/*! ./approval-policy.update.command */ "./src/app/approval-policy/commands/approval-policy.update.command.ts");
Object.defineProperty(exports, "ApprovalPolicyUpdateCommand", { enumerable: true, get: function () { return approval_policy_update_command_1.ApprovalPolicyUpdateCommand; } });
var request_approval_policy_get_command_1 = __webpack_require__(/*! ./request-approval-policy.get.command */ "./src/app/approval-policy/commands/request-approval-policy.get.command.ts");
Object.defineProperty(exports, "RequestApprovalPolicyGetCommand", { enumerable: true, get: function () { return request_approval_policy_get_command_1.RequestApprovalPolicyGetCommand; } });


/***/ }),

/***/ "./src/app/approval-policy/commands/request-approval-policy.get.command.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/approval-policy/commands/request-approval-policy.get.command.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestApprovalPolicyGetCommand = void 0;
class RequestApprovalPolicyGetCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.RequestApprovalPolicyGetCommand = RequestApprovalPolicyGetCommand;
RequestApprovalPolicyGetCommand.type = '[RequestApprovalPolicy] Get';


/***/ }),

/***/ "./src/app/approval-policy/default-approval-policies.ts":
/*!**************************************************************!*\
  !*** ./src/app/approval-policy/default-approval-policies.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_APPROVAL_POLICIES = void 0;
exports.DEFAULT_APPROVAL_POLICIES = [
    'Trade Policy',
    'Union Budget',
    'Definition, Licensing Policies and Registration',
    'State Government Industrial Policies',
    'Reservation Policy',
    'National Policies',
    'International Policies',
    'Time Off',
    'Equipment Sharing'
];


/***/ }),

/***/ "./src/app/auth/auth.controller.ts":
/*!*****************************************!*\
  !*** ./src/app/auth/auth.controller.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const auth_service_1 = __webpack_require__(/*! ./auth.service */ "./src/app/auth/auth.service.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/auth/commands/index.ts");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const express_1 = __webpack_require__(/*! express */ "express");
const nestjs_i18n_1 = __webpack_require__(/*! nestjs-i18n */ "nestjs-i18n");
const auth_login_command_1 = __webpack_require__(/*! ./commands/auth.login.command */ "./src/app/auth/commands/auth.login.command.ts");
let AuthController = class AuthController {
    constructor(authService, commandBus) {
        this.authService = authService;
        this.commandBus = commandBus;
    }
    async authenticated() {
        const token = context_1.RequestContext.currentToken();
        return this.authService.isAuthenticated(token);
    }
    async hasRole(roles) {
        const token = context_1.RequestContext.currentToken();
        return this.authService.hasRole(token, roles);
    }
    async create(entity, request, languageCode, ...options) {
        if (!entity.user.imageUrl) {
            entity.user.imageUrl = core_1.getUserDummyImage(entity.user);
        }
        entity.originalUrl = request.get('Origin');
        return this.commandBus.execute(new commands_1.AuthRegisterCommand(entity, languageCode));
    }
    async login(entity, ...options) {
        return this.commandBus.execute(new auth_login_command_1.AuthLoginCommand(entity));
    }
    async resetPassword(findObject, ...options) {
        return await this.authService.resetPassword(findObject);
    }
    async requestPass(findObj, request, languageCode, ...options) {
        return await this.authService.requestPassword(findObj, languageCode, request.get('Origin'));
    }
    googleLogin() { }
    googleLoginCallback(req, res) {
        const { success, authData: { jwt, userId } } = req.user;
        if (success) {
            return res.redirect(`${environment_1.environment.host}:${environment_1.environment.port}/#/sign-in/success?jwt=${jwt}&userId=${userId}`);
        }
        else {
            return res.redirect(`${environment_1.environment.host}:${environment_1.environment.port}/#/auth/register`);
        }
    }
    linkedinLogin() { }
    linkedinLoginCallback(req, res) {
        const { success, authData: { jwt, userId } } = req.user;
        if (success) {
            return res.redirect(`${environment_1.environment.host}:${environment_1.environment.port}/#/sign-in/success?jwt=${jwt}&userId=${userId}`);
        }
        else {
            return res.redirect(`${environment_1.environment.host}:${environment_1.environment.port}/#/auth/register`);
        }
    }
    githubLogin() { }
    githubLoginCallback(req, res) {
        const { success, authData: { jwt, userId } } = req.user;
        if (success) {
            return res.redirect(`${environment_1.environment.host}:${environment_1.environment.port}/#/sign-in/success?jwt=${jwt}&userId=${userId}`);
        }
        else {
            return res.redirect(`${environment_1.environment.host}:${environment_1.environment.port}/#/auth/register`);
        }
    }
    async requestFacebookRedirectUrl(res) {
        const { redirectUri } = await this.authService.requestFacebookRedirectUri();
        return res.redirect(redirectUri);
    }
    async facebookCallback(req, res) {
        const { code } = req.query;
        return await this.authService.facebookSignIn(code, res);
    }
    requestJsonWebTokenAfterFacebookSignIn(req, res) {
        const { success, authData: { jwt, userId } } = req.user;
        if (success) {
            return res.redirect(`${environment_1.environment.host}:${environment_1.environment.port}/#/sign-in/success?jwt=${jwt}&userId=${userId}`);
        }
        else {
            return res.redirect(`${environment_1.environment.host}:${environment_1.environment.port}/#/auth/register`);
        }
    }
    twitterLogin() { }
    twitterLoginCallback(req, res) {
        const { success, authData: { jwt, userId } } = req.user;
        if (success) {
            return res.redirect(`${environment_1.environment.host}:${environment_1.environment.port}/#/sign-in/success?jwt=${jwt}&userId=${userId}`);
        }
        else {
            return res.redirect(`${environment_1.environment.host}:${environment_1.environment.port}/#/auth/register`);
        }
    }
    microsoftLogin() { }
    microsoftLoginCallback(req, res) {
        const { success, authData: { jwt, userId } } = req.user;
        if (success) {
            return res.redirect(`${environment_1.environment.host}:${environment_1.environment.port}/#/sign-in/success?jwt=${jwt}&userId=${userId}`);
        }
        else {
            return res.redirect(`${environment_1.environment.host}:${environment_1.environment.port}/#/auth/register`);
        }
    }
    auth0Login() { }
    auth0LoginCallback(req, res) {
        const { success, authData: { jwt, userId } } = req.user;
        if (success) {
            return res.redirect(`${environment_1.environment.host}:${environment_1.environment.port}/#/sign-in/success?jwt=${jwt}&userId=${userId}`);
        }
        else {
            return res.redirect(`${environment_1.environment.host}:${environment_1.environment.port}/#/auth/register`);
        }
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Is authenticated' }),
    swagger_1.ApiResponse({ status: common_1.HttpStatus.OK }),
    swagger_1.ApiResponse({ status: common_1.HttpStatus.BAD_REQUEST }),
    common_1.Get('/authenticated'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], AuthController.prototype, "authenticated", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Has role?' }),
    swagger_1.ApiResponse({ status: common_1.HttpStatus.OK }),
    swagger_1.ApiResponse({ status: common_1.HttpStatus.BAD_REQUEST }),
    common_1.Get('/role'),
    tslib_1.__param(0, common_1.Query('roles')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Array]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], AuthController.prototype, "hasRole", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Post('/register'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__param(1, common_1.Req()),
    tslib_1.__param(2, nestjs_i18n_1.I18nLang()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.IUserRegistrationInput !== "undefined" && models_1.IUserRegistrationInput) === "function" ? _c : Object, typeof (_d = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _d : Object, typeof (_e = typeof models_1.LanguagesEnum !== "undefined" && models_1.LanguagesEnum) === "function" ? _e : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], AuthController.prototype, "create", null);
tslib_1.__decorate([
    common_1.HttpCode(common_1.HttpStatus.OK),
    common_1.Post('/login'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_g = typeof models_1.IAuthLoginInput !== "undefined" && models_1.IAuthLoginInput) === "function" ? _g : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], AuthController.prototype, "login", null);
tslib_1.__decorate([
    common_1.Post('/reset-password'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AuthController.prototype, "resetPassword", null);
tslib_1.__decorate([
    common_1.Post('/request-password'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__param(1, common_1.Req()),
    tslib_1.__param(2, nestjs_i18n_1.I18nLang()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, typeof (_j = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _j : Object, typeof (_k = typeof models_1.LanguagesEnum !== "undefined" && models_1.LanguagesEnum) === "function" ? _k : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_l = typeof Promise !== "undefined" && Promise) === "function" ? _l : Object)
], AuthController.prototype, "requestPass", null);
tslib_1.__decorate([
    common_1.Get('google'),
    common_1.UseGuards(passport_1.AuthGuard('google')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], AuthController.prototype, "googleLogin", null);
tslib_1.__decorate([
    common_1.Get('google/callback'),
    common_1.UseGuards(passport_1.AuthGuard('google')),
    tslib_1.__param(0, common_1.Req()), tslib_1.__param(1, common_1.Res()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", void 0)
], AuthController.prototype, "googleLoginCallback", null);
tslib_1.__decorate([
    common_1.Get('linkedin'),
    common_1.UseGuards(passport_1.AuthGuard('linkedin')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], AuthController.prototype, "linkedinLogin", null);
tslib_1.__decorate([
    common_1.Get('linkedin/callback'),
    common_1.UseGuards(passport_1.AuthGuard('linkedin')),
    tslib_1.__param(0, common_1.Req()), tslib_1.__param(1, common_1.Res()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", void 0)
], AuthController.prototype, "linkedinLoginCallback", null);
tslib_1.__decorate([
    common_1.Get('github'),
    common_1.UseGuards(passport_1.AuthGuard('github')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], AuthController.prototype, "githubLogin", null);
tslib_1.__decorate([
    common_1.Get('github/callback'),
    common_1.UseGuards(passport_1.AuthGuard('github')),
    tslib_1.__param(0, common_1.Req()), tslib_1.__param(1, common_1.Res()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", void 0)
], AuthController.prototype, "githubLoginCallback", null);
tslib_1.__decorate([
    common_1.Get('facebook'),
    tslib_1.__param(0, common_1.Res()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Promise)
], AuthController.prototype, "requestFacebookRedirectUrl", null);
tslib_1.__decorate([
    common_1.Get('facebook/callback'),
    tslib_1.__param(0, common_1.Req()), tslib_1.__param(1, common_1.Res()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_m = typeof Promise !== "undefined" && Promise) === "function" ? _m : Object)
], AuthController.prototype, "facebookCallback", null);
tslib_1.__decorate([
    common_1.Post('facebook/token'),
    tslib_1.__param(0, common_1.Req()), tslib_1.__param(1, common_1.Res()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", void 0)
], AuthController.prototype, "requestJsonWebTokenAfterFacebookSignIn", null);
tslib_1.__decorate([
    common_1.Get('twitter'),
    common_1.UseGuards(passport_1.AuthGuard('twitter')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], AuthController.prototype, "twitterLogin", null);
tslib_1.__decorate([
    common_1.Get('twitter/callback'),
    common_1.UseGuards(passport_1.AuthGuard('twitter')),
    tslib_1.__param(0, common_1.Req()), tslib_1.__param(1, common_1.Res()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", void 0)
], AuthController.prototype, "twitterLoginCallback", null);
tslib_1.__decorate([
    common_1.Get('microsoft'),
    common_1.UseGuards(passport_1.AuthGuard('microsoft')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], AuthController.prototype, "microsoftLogin", null);
tslib_1.__decorate([
    common_1.Get('microsoft/callback'),
    common_1.UseGuards(passport_1.AuthGuard('microsoft')),
    tslib_1.__param(0, common_1.Req()), tslib_1.__param(1, common_1.Res()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", void 0)
], AuthController.prototype, "microsoftLoginCallback", null);
tslib_1.__decorate([
    common_1.Get('auth0'),
    common_1.UseGuards(passport_1.AuthGuard('auth0')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], AuthController.prototype, "auth0Login", null);
tslib_1.__decorate([
    common_1.Get('auth0/callback'),
    common_1.UseGuards(passport_1.AuthGuard('auth0')),
    tslib_1.__param(0, common_1.Req()), tslib_1.__param(1, common_1.Res()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", void 0)
], AuthController.prototype, "auth0LoginCallback", null);
AuthController = tslib_1.__decorate([
    swagger_1.ApiTags('Auth'),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_o = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _o : Object, typeof (_p = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _p : Object])
], AuthController);
exports.AuthController = AuthController;


/***/ }),

/***/ "./src/app/auth/auth.module.ts":
/*!*************************************!*\
  !*** ./src/app/auth/auth.module.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const passport_1 = __webpack_require__(/*! passport */ "passport");
const email_1 = __webpack_require__(/*! ../email */ "./src/app/email/index.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const auth_controller_1 = __webpack_require__(/*! ./auth.controller */ "./src/app/auth/auth.controller.ts");
const auth_service_1 = __webpack_require__(/*! ./auth.service */ "./src/app/auth/auth.service.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/auth/commands/handlers/index.ts");
const facebook_strategy_1 = __webpack_require__(/*! ./facebook.strategy */ "./src/app/auth/facebook.strategy.ts");
const google_strategy_1 = __webpack_require__(/*! ./google.strategy */ "./src/app/auth/google.strategy.ts");
const jwt_strategy_1 = __webpack_require__(/*! ./jwt.strategy */ "./src/app/auth/jwt.strategy.ts");
const user_organization_entity_1 = __webpack_require__(/*! ../user-organization/user-organization.entity */ "./src/app/user-organization/user-organization.entity.ts");
const user_organization_services_1 = __webpack_require__(/*! ../user-organization/user-organization.services */ "./src/app/user-organization/user-organization.services.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const microsoft_auth_guard_1 = __webpack_require__(/*! ./guard/microsoft-auth-guard */ "./src/app/auth/guard/microsoft-auth-guard.ts");
const microsoft_strategy_1 = __webpack_require__(/*! ./microsoft.strategy */ "./src/app/auth/microsoft.strategy.ts");
const linkedin_strategy_1 = __webpack_require__(/*! ./linkedin.strategy */ "./src/app/auth/linkedin.strategy.ts");
const keycloak_auth_guard_1 = __webpack_require__(/*! ./guard/keycloak-auth-guard */ "./src/app/auth/guard/keycloak-auth-guard.ts");
const github_strategy_1 = __webpack_require__(/*! ./github.strategy */ "./src/app/auth/github.strategy.ts");
const twitter_strategy_1 = __webpack_require__(/*! ./twitter.strategy */ "./src/app/auth/twitter.strategy.ts");
const auth0_strategy_1 = __webpack_require__(/*! ./auth0.strategy */ "./src/app/auth/auth0.strategy.ts");
let AuthModule = class AuthModule {
    configure(consumer) {
        consumer
            .apply(passport_1.authenticate('facebook', {
            session: false,
            scope: ['email']
        }))
            .forRoutes('auth/facebook/token');
    }
};
AuthModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([user_entity_1.User, user_organization_entity_1.UserOrganization, organization_entity_1.Organization]),
            email_1.EmailModule,
            cqrs_1.CqrsModule
        ],
        controllers: [auth_controller_1.AuthController],
        providers: [
            auth_service_1.AuthService,
            user_service_1.UserService,
            user_organization_services_1.UserOrganizationService,
            email_1.EmailService,
            ...handlers_1.CommandHandlers,
            google_strategy_1.GoogleStrategy,
            facebook_strategy_1.FacebookStrategy,
            jwt_strategy_1.JwtStrategy,
            microsoft_auth_guard_1.MicrosoftAuthGuard,
            microsoft_strategy_1.MicrosoftStrategy,
            linkedin_strategy_1.LinkedinStrategy,
            github_strategy_1.GithubStrategy,
            twitter_strategy_1.TwitterStrategy,
            auth0_strategy_1.Auth0Strategy,
            keycloak_auth_guard_1.KeycloakAuthGuard
        ],
        exports: [auth_service_1.AuthService, user_service_1.UserService]
    })
], AuthModule);
exports.AuthModule = AuthModule;


/***/ }),

/***/ "./src/app/auth/auth.service.ts":
/*!**************************************!*\
  !*** ./src/app/auth/auth.service.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const bcrypt = __webpack_require__(/*! bcryptjs */ "bcryptjs");
const jsonwebtoken_1 = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");
const request_1 = __webpack_require__(/*! request */ "request");
const email_service_1 = __webpack_require__(/*! ../email/email.service */ "./src/app/email/email.service.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const user_organization_services_1 = __webpack_require__(/*! ../user-organization/user-organization.services */ "./src/app/user-organization/user-organization.services.ts");
let AuthService = class AuthService {
    constructor(userService, emailService, userOrganizationService) {
        this.userService = userService;
        this.emailService = emailService;
        this.userOrganizationService = userOrganizationService;
        this.saltRounds = environment_1.environment.USER_PASSWORD_BCRYPT_SALT_ROUNDS;
    }
    async getPasswordHash(password) {
        return bcrypt.hash(password, this.saltRounds);
    }
    async login(findObj, password) {
        const user = await this.userService.findOne(findObj, {
            relations: ['role', 'role.rolePermissions', 'employee']
        });
        if (!user || !(await bcrypt.compare(password, user.hash))) {
            return null;
        }
        const { token } = await this.createToken(user);
        delete user.hash;
        return {
            user,
            token
        };
    }
    async requestPassword(findObj, languageCode, originUrl) {
        const user = await this.userService.findOne(findObj, {
            relations: ['role', 'employee']
        });
        if (user && user.id) {
            const { token } = await this.createToken(user);
            if (token) {
                const url = `${environment_1.environment.host}:4200/#/auth/reset-password?token=${token}&id=${user.id}`;
                const { organizationId } = await this.userOrganizationService.findOne({
                    where: {
                        user
                    }
                });
                this.emailService.requestPassword(user, url, languageCode, organizationId, originUrl);
                return {
                    id: user.id,
                    token
                };
            }
        }
        else {
            throw new Error('Email not found');
        }
    }
    async resetPassword(findObject) {
        if (findObject.password.length < 6) {
            throw new Error('Password should be at least 6 characters long');
        }
        if (findObject.password !== findObject.confirmPassword) {
            throw new Error('Passwords must match.');
        }
        if (!findObject.user.id) {
            throw new Error('User not found');
        }
        if (!findObject.user.token) {
            throw new Error('Authorization token is invalid or missing');
        }
        const hash = await this.getPasswordHash(findObject.password);
        return this.userService.changePassword(findObject.user.id, hash);
    }
    async register(input, languageCode) {
        let tenant = input.user.tenant;
        if (input.createdById) {
            const creatingUser = await this.userService.findOne(input.createdById, {
                relations: ['tenant']
            });
            tenant = creatingUser.tenant;
        }
        const user = this.userService.create(Object.assign(Object.assign(Object.assign({}, input.user), { tenant }), (input.password
            ? {
                hash: await this.getPasswordHash(input.password)
            }
            : {})));
        if (input.organizationId) {
            await this.userOrganizationService.addUserToOrganization(await user, input.organizationId);
        }
        this.emailService.welcomeUser(input.user, languageCode, input.organizationId, input.originalUrl);
        return user;
    }
    async getAuthenticatedUser(id, thirdPartyId) {
        return thirdPartyId
            ? this.userService.getIfExistsThirdParty(thirdPartyId)
            : this.userService.getIfExists(id);
    }
    async isAuthenticated(token) {
        try {
            const { id, thirdPartyId } = jsonwebtoken_1.verify(token, environment_1.environment.JWT_SECRET);
            let result;
            if (thirdPartyId) {
                result = this.userService.checkIfExistsThirdParty(thirdPartyId);
            }
            else {
                result = this.userService.checkIfExists(id);
            }
            return result;
        }
        catch (err) {
            if (err instanceof jsonwebtoken_1.JsonWebTokenError) {
                return false;
            }
            else {
                throw err;
            }
        }
    }
    async hasRole(token, roles = []) {
        try {
            const { role } = jsonwebtoken_1.verify(token, environment_1.environment.JWT_SECRET);
            return role ? roles.includes(role) : false;
        }
        catch (err) {
            if (err instanceof jsonwebtoken_1.JsonWebTokenError) {
                return false;
            }
            else {
                throw err;
            }
        }
    }
    async validateOAuthLoginEmail(emails) {
        let response = {
            success: false,
            authData: { jwt: null, userId: null }
        };
        try {
            for (const { value } of emails) {
                const userExist = await this.userService.checkIfExistsEmail(value);
                if (userExist) {
                    const user = await this.userService.getUserByEmail(value);
                    const { token } = await this.createToken(user);
                    response = {
                        success: true,
                        authData: { jwt: token, userId: user.id }
                    };
                }
            }
            return response;
        }
        catch (err) {
            throw new common_1.InternalServerErrorException('validateOAuthLoginEmail', err.message);
        }
    }
    async createToken(user) {
        if (!user.role || !user.employee) {
            user = await this.userService.findOne(user.id, {
                relations: ['role', 'role.rolePermissions', 'employee']
            });
        }
        const payload = {
            id: user.id,
            tenantId: user.tenantId,
            employeeId: user.employee ? user.employee.id : null
        };
        if (user.role) {
            payload.role = user.role.name;
            if (user.role.rolePermissions) {
                payload.permissions = user.role.rolePermissions
                    .filter((rolePermission) => rolePermission.enabled)
                    .map((rolePermission) => rolePermission.permission);
            }
            else {
                payload.permissions = null;
            }
        }
        else {
            payload.role = null;
        }
        const token = jsonwebtoken_1.sign(payload, environment_1.environment.JWT_SECRET, {});
        return { token };
    }
    async requestFacebookRedirectUri() {
        const { clientId, oauthRedirectUri, state, loginDialogUri } = environment_1.environment.facebookConfig;
        const queryParams = [
            `client_id=${clientId}`,
            `redirect_uri=${oauthRedirectUri}`,
            `state=${state}`
        ];
        const redirectUri = `${loginDialogUri}?${queryParams.join('&')}`;
        return { redirectUri };
    }
    async facebookSignIn(code, responseRedirectUse) {
        const { clientId, oauthRedirectUri, clientSecret, accessTokenUri } = environment_1.environment.facebookConfig;
        const queryParams = [
            `client_id=${clientId}`,
            `redirect_uri=${oauthRedirectUri}`,
            `client_secret=${clientSecret}`,
            `code=${code}`
        ];
        const uri = `${accessTokenUri}?${queryParams.join('&')}`;
        request_1.get(uri, (error, res, body) => {
            if (error) {
                console.error(error);
                throw error;
            }
            else if (body.error) {
                console.error(body.error);
                throw body.error;
            }
            const { access_token } = JSON.parse(body);
            const { host, port } = environment_1.environment;
            request_1.post({
                url: `${host}:${port}/api/auth/facebook/token`,
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                form: { access_token }
            }, async (innerError) => {
                if (innerError) {
                    console.error(innerError);
                    throw innerError;
                }
                else if (body.error) {
                    console.error(body.error);
                    throw body.error;
                }
                const redirectSuccessUrl = body.replace('Found. Redirecting to ', '');
                return responseRedirectUse.redirect(redirectSuccessUrl);
            });
        });
    }
};
AuthService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" ? _a : Object, typeof (_b = typeof email_service_1.EmailService !== "undefined" && email_service_1.EmailService) === "function" ? _b : Object, typeof (_c = typeof user_organization_services_1.UserOrganizationService !== "undefined" && user_organization_services_1.UserOrganizationService) === "function" ? _c : Object])
], AuthService);
exports.AuthService = AuthService;


/***/ }),

/***/ "./src/app/auth/auth0.strategy.ts":
/*!****************************************!*\
  !*** ./src/app/auth/auth0.strategy.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Auth0Strategy = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const passport_auth0_1 = __webpack_require__(/*! passport-auth0 */ "passport-auth0");
const auth_service_1 = __webpack_require__(/*! ./auth.service */ "./src/app/auth/auth.service.ts");
let Auth0Strategy = class Auth0Strategy extends passport_1.PassportStrategy(passport_auth0_1.Strategy, 'auth0') {
    constructor(_authService) {
        super({
            clientID: environment_1.environment.auth0Config.clientID || 'disabled',
            clientSecret: environment_1.environment.auth0Config.clientSecret || 'disabled',
            domain: environment_1.environment.auth0Config.domain || 'disabled',
            callbackURL: `${environment_1.environment.host}:${environment_1.environment.port}/api/auth/auth0/callback`
        });
        this._authService = _authService;
    }
};
Auth0Strategy = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _a : Object])
], Auth0Strategy);
exports.Auth0Strategy = Auth0Strategy;


/***/ }),

/***/ "./src/app/auth/commands/auth.login.command.ts":
/*!*****************************************************!*\
  !*** ./src/app/auth/commands/auth.login.command.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthLoginCommand = void 0;
class AuthLoginCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.AuthLoginCommand = AuthLoginCommand;
AuthLoginCommand.type = '[Auth] Login';


/***/ }),

/***/ "./src/app/auth/commands/auth.register.command.ts":
/*!********************************************************!*\
  !*** ./src/app/auth/commands/auth.register.command.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthRegisterCommand = void 0;
class AuthRegisterCommand {
    constructor(input, languageCode) {
        this.input = input;
        this.languageCode = languageCode;
    }
}
exports.AuthRegisterCommand = AuthRegisterCommand;
AuthRegisterCommand.type = '[Auth] Register';


/***/ }),

/***/ "./src/app/auth/commands/handlers/auth.login.handler.ts":
/*!**************************************************************!*\
  !*** ./src/app/auth/commands/handlers/auth.login.handler.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthLoginHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const auth_login_command_1 = __webpack_require__(/*! ../auth.login.command */ "./src/app/auth/commands/auth.login.command.ts");
const auth_service_1 = __webpack_require__(/*! ../../auth.service */ "./src/app/auth/auth.service.ts");
let AuthLoginHandler = class AuthLoginHandler {
    constructor(authService) {
        this.authService = authService;
    }
    async execute(command) {
        const { input } = command;
        const { findObj, password } = input;
        return this.authService.login(findObj, password);
    }
};
AuthLoginHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(auth_login_command_1.AuthLoginCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _a : Object])
], AuthLoginHandler);
exports.AuthLoginHandler = AuthLoginHandler;


/***/ }),

/***/ "./src/app/auth/commands/handlers/auth.register.handler.ts":
/*!*****************************************************************!*\
  !*** ./src/app/auth/commands/handlers/auth.register.handler.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthRegisterHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const auth_register_command_1 = __webpack_require__(/*! ../auth.register.command */ "./src/app/auth/commands/auth.register.command.ts");
const auth_service_1 = __webpack_require__(/*! ../../auth.service */ "./src/app/auth/auth.service.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const user_service_1 = __webpack_require__(/*! ../../../user/user.service */ "./src/app/user/user.service.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
let AuthRegisterHandler = class AuthRegisterHandler {
    constructor(authService, userService) {
        this.authService = authService;
        this.userService = userService;
    }
    async execute(command) {
        const { input, languageCode } = command;
        if (input.user &&
            input.user.role &&
            input.user.role.name === models_1.RolesEnum.SUPER_ADMIN) {
            if (!input.createdById)
                throw new common_1.BadRequestException();
            const { role } = await this.userService.findOne(input.createdById, {
                relations: ['role']
            });
            if (role.name !== models_1.RolesEnum.SUPER_ADMIN)
                throw new common_1.UnauthorizedException();
        }
        return await this.authService.register(input, languageCode);
    }
};
AuthRegisterHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(auth_register_command_1.AuthRegisterCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _a : Object, typeof (_b = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" ? _b : Object])
], AuthRegisterHandler);
exports.AuthRegisterHandler = AuthRegisterHandler;


/***/ }),

/***/ "./src/app/auth/commands/handlers/index.ts":
/*!*************************************************!*\
  !*** ./src/app/auth/commands/handlers/index.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const auth_login_handler_1 = __webpack_require__(/*! ./auth.login.handler */ "./src/app/auth/commands/handlers/auth.login.handler.ts");
const auth_register_handler_1 = __webpack_require__(/*! ./auth.register.handler */ "./src/app/auth/commands/handlers/auth.register.handler.ts");
exports.CommandHandlers = [auth_register_handler_1.AuthRegisterHandler, auth_login_handler_1.AuthLoginHandler];


/***/ }),

/***/ "./src/app/auth/commands/index.ts":
/*!****************************************!*\
  !*** ./src/app/auth/commands/index.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthLoginCommand = exports.AuthRegisterCommand = void 0;
var auth_register_command_1 = __webpack_require__(/*! ./auth.register.command */ "./src/app/auth/commands/auth.register.command.ts");
Object.defineProperty(exports, "AuthRegisterCommand", { enumerable: true, get: function () { return auth_register_command_1.AuthRegisterCommand; } });
var auth_login_command_1 = __webpack_require__(/*! ./auth.login.command */ "./src/app/auth/commands/auth.login.command.ts");
Object.defineProperty(exports, "AuthLoginCommand", { enumerable: true, get: function () { return auth_login_command_1.AuthLoginCommand; } });


/***/ }),

/***/ "./src/app/auth/facebook.strategy.ts":
/*!*******************************************!*\
  !*** ./src/app/auth/facebook.strategy.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FacebookStrategy = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! passport */ "passport");
const auth_service_1 = __webpack_require__(/*! ./auth.service */ "./src/app/auth/auth.service.ts");
const FacebookTokenStrategy = __webpack_require__(/*! passport-facebook-token */ "passport-facebook-token");
let FacebookStrategy = class FacebookStrategy {
    constructor(_authService) {
        this._authService = _authService;
        this.init();
    }
    init() {
        const { clientId, clientSecret, oauthRedirectUri } = environment_1.environment.facebookConfig;
        passport_1.use('facebook', new FacebookTokenStrategy({
            clientID: clientId || 'disabled',
            clientSecret: clientSecret || 'disabled',
            callbackURL: oauthRedirectUri,
            profileFields: ['email']
        }, async (accessToken, refreshToken, profile, done) => {
            const { emails } = profile;
            try {
                const { success, authData } = await this._authService.validateOAuthLoginEmail(emails);
                const user = { success, authData };
                done(null, user);
            }
            catch (err) {
                done(err, false);
            }
        }));
    }
};
FacebookStrategy = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _a : Object])
], FacebookStrategy);
exports.FacebookStrategy = FacebookStrategy;


/***/ }),

/***/ "./src/app/auth/github.strategy.ts":
/*!*****************************************!*\
  !*** ./src/app/auth/github.strategy.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GithubStrategy = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const auth_service_1 = __webpack_require__(/*! ./auth.service */ "./src/app/auth/auth.service.ts");
const passport_github2_1 = __webpack_require__(/*! passport-github2 */ "passport-github2");
let GithubStrategy = class GithubStrategy extends passport_1.PassportStrategy(passport_github2_1.Strategy, 'github') {
    constructor(_authService) {
        super({
            clientID: environment_1.environment.githubConfig.clientId || 'disabled',
            clientSecret: environment_1.environment.githubConfig.clientSecret || 'disabled',
            callbackURL: `${environment_1.environment.host}:${environment_1.environment.port}/api/auth/github/callback`,
            passReqToCallback: true,
            scope: ['user:email']
        });
        this._authService = _authService;
    }
};
GithubStrategy = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _a : Object])
], GithubStrategy);
exports.GithubStrategy = GithubStrategy;


/***/ }),

/***/ "./src/app/auth/google.strategy.ts":
/*!*****************************************!*\
  !*** ./src/app/auth/google.strategy.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoogleStrategy = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const passport_google_oauth20_1 = __webpack_require__(/*! passport-google-oauth20 */ "passport-google-oauth20");
const auth_service_1 = __webpack_require__(/*! ./auth.service */ "./src/app/auth/auth.service.ts");
let GoogleStrategy = class GoogleStrategy extends passport_1.PassportStrategy(passport_google_oauth20_1.Strategy, 'google') {
    constructor(_authService) {
        super({
            clientID: environment_1.environment.googleConfig.clientId || 'disabled',
            clientSecret: environment_1.environment.googleConfig.clientSecret || 'disabled',
            callbackURL: `${environment_1.environment.host}:${environment_1.environment.port}/api/auth/google/callback`,
            passReqToCallback: true,
            scope: ['profile', 'email']
        });
        this._authService = _authService;
    }
    async validate(request, accessToken, refreshToken, profile, done) {
        const { emails } = profile;
        try {
            const { success, authData } = await this._authService.validateOAuthLoginEmail(emails);
            const user = { success, authData };
            done(null, user);
        }
        catch (err) {
            done(err, false);
        }
    }
};
GoogleStrategy = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _a : Object])
], GoogleStrategy);
exports.GoogleStrategy = GoogleStrategy;


/***/ }),

/***/ "./src/app/auth/guard/keycloak-auth-guard.ts":
/*!***************************************************!*\
  !*** ./src/app/auth/guard/keycloak-auth-guard.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KeycloakAuthGuard = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const passport_2 = __webpack_require__(/*! passport */ "passport");
let KeycloakAuthGuard = class KeycloakAuthGuard extends passport_1.AuthGuard('keycloak') {
    canActivate(context) {
        const request = context.switchToHttp().getRequest();
        const baseUrl = request.headers.referer;
        const { roleName } = request.query;
        this.setPassportSession(roleName, baseUrl);
        return super.canActivate(context);
    }
    setPassportSession(roleName, baseUrl) {
        const client_url = passport_2.default['_strategies'].session.client_url;
        const role_name = passport_2.default['_strategies'].session.role_name;
        if (!client_url) {
            passport_2.default['_strategies'].session.client_url = baseUrl
                .slice(0, baseUrl.lastIndexOf('/'))
                .toString();
        }
        if (role_name) {
            passport_2.default['_strategies'].session.role_name = roleName;
        }
    }
};
KeycloakAuthGuard = tslib_1.__decorate([
    common_1.Injectable()
], KeycloakAuthGuard);
exports.KeycloakAuthGuard = KeycloakAuthGuard;


/***/ }),

/***/ "./src/app/auth/guard/microsoft-auth-guard.ts":
/*!****************************************************!*\
  !*** ./src/app/auth/guard/microsoft-auth-guard.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MicrosoftAuthGuard = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const passport_2 = __webpack_require__(/*! passport */ "passport");
let MicrosoftAuthGuard = class MicrosoftAuthGuard extends passport_1.AuthGuard('microsoft') {
    canActivate(context) {
        const request = context.switchToHttp().getRequest();
        const baseUrl = request.headers.referer;
        const { roleName } = request.query;
        this.setPassportSession(roleName, baseUrl);
        return super.canActivate(context);
    }
    setPassportSession(roleName, baseUrl) {
        const client_url = passport_2.default['_strategies'].session.client_url;
        const role_name = passport_2.default['_strategies'].session.role_name;
        if (!client_url) {
            passport_2.default['_strategies'].session.client_url = baseUrl
                .slice(0, baseUrl.lastIndexOf('/'))
                .toString();
        }
        if (role_name) {
            passport_2.default['_strategies'].session.role_name = roleName;
        }
    }
};
MicrosoftAuthGuard = tslib_1.__decorate([
    common_1.Injectable()
], MicrosoftAuthGuard);
exports.MicrosoftAuthGuard = MicrosoftAuthGuard;


/***/ }),

/***/ "./src/app/auth/jwt.strategy.ts":
/*!**************************************!*\
  !*** ./src/app/auth/jwt.strategy.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JwtStrategy = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const passport_jwt_1 = __webpack_require__(/*! passport-jwt */ "passport-jwt");
const auth_service_1 = __webpack_require__(/*! ./auth.service */ "./src/app/auth/auth.service.ts");
let JwtStrategy = class JwtStrategy extends passport_1.PassportStrategy(passport_jwt_1.Strategy, 'jwt') {
    constructor(authService) {
        super({
            jwtFromRequest: passport_jwt_1.ExtractJwt.fromAuthHeaderAsBearerToken(),
            secretOrKey: environment_1.environment.JWT_SECRET
        });
        this.authService = authService;
    }
    async validate(payload, done) {
        try {
            const user = await this.authService.getAuthenticatedUser(payload.id, payload.thirdPartyId);
            user.employeeId = payload.employeeId;
            done(null, user);
        }
        catch (err) {
            console.log({ err });
            throw new common_1.UnauthorizedException('unauthorized', err.message);
        }
    }
};
JwtStrategy = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _a : Object])
], JwtStrategy);
exports.JwtStrategy = JwtStrategy;


/***/ }),

/***/ "./src/app/auth/linkedin.strategy.ts":
/*!*******************************************!*\
  !*** ./src/app/auth/linkedin.strategy.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkedinStrategy = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! @angular/core */ "@angular/core");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const passport_jwt_1 = __webpack_require__(/*! passport-jwt */ "passport-jwt");
const auth_service_1 = __webpack_require__(/*! ./auth.service */ "./src/app/auth/auth.service.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const passport_linkedin_oauth2_1 = __webpack_require__(/*! passport-linkedin-oauth2 */ "passport-linkedin-oauth2");
let LinkedinStrategy = class LinkedinStrategy extends passport_1.PassportStrategy(passport_linkedin_oauth2_1.Strategy, 'linkedin') {
    constructor(_authService) {
        super({
            clientID: environment_1.environment.linkedinConfig.clientId || 'disabled',
            clientSecret: environment_1.environment.linkedinConfig.clientSecret || 'disabled',
            callbackURL: `${environment_1.environment.host}:${environment_1.environment.port}/api/auth/linkedin/callback`,
            scope: ['r_liteprofile', 'r_emailaddress'],
            passReqToCallback: true,
            secretOrKey: environment_1.environment.JWT_SECRET,
            jwtFromRequest: passport_jwt_1.ExtractJwt.fromAuthHeaderAsBearerToken()
        });
        this._authService = _authService;
    }
    async validate(request, accessToken, refreshToken, profile, done) {
        const { emails } = profile;
        try {
            const { success, authData } = await this._authService.validateOAuthLoginEmail(emails);
            const user = { success, authData };
            done(null, user);
        }
        catch (err) {
            done(err, false);
        }
    }
};
LinkedinStrategy = tslib_1.__decorate([
    core_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _a : Object])
], LinkedinStrategy);
exports.LinkedinStrategy = LinkedinStrategy;


/***/ }),

/***/ "./src/app/auth/microsoft.strategy.ts":
/*!********************************************!*\
  !*** ./src/app/auth/microsoft.strategy.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MicrosoftStrategy = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const auth_service_1 = __webpack_require__(/*! ./auth.service */ "./src/app/auth/auth.service.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const passport_azure_ad_oauth2_1 = __webpack_require__(/*! passport-azure-ad-oauth2 */ "passport-azure-ad-oauth2");
let MicrosoftStrategy = class MicrosoftStrategy extends passport_1.PassportStrategy(passport_azure_ad_oauth2_1.Strategy, 'microsoft') {
    constructor(_authService) {
        super({
            clientID: environment_1.environment.microsoftConfig.clientId || 'disabled',
            clientSecret: environment_1.environment.microsoftConfig.clientSecret || 'disabled',
            resource: environment_1.environment.microsoftConfig.resource || 'disabled',
            tenant: environment_1.environment.microsoftConfig.tenant || 'disabled',
            useCommonEndpoint: false,
            callbackURL: `${environment_1.environment.host}:${environment_1.environment.port}/api/auth/microsoft/callback`
        });
        this._authService = _authService;
    }
};
MicrosoftStrategy = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _a : Object])
], MicrosoftStrategy);
exports.MicrosoftStrategy = MicrosoftStrategy;


/***/ }),

/***/ "./src/app/auth/twitter.strategy.ts":
/*!******************************************!*\
  !*** ./src/app/auth/twitter.strategy.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TwitterStrategy = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const passport_jwt_1 = __webpack_require__(/*! passport-jwt */ "passport-jwt");
const auth_service_1 = __webpack_require__(/*! ./auth.service */ "./src/app/auth/auth.service.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const passport_twitter_1 = __webpack_require__(/*! passport-twitter */ "passport-twitter");
let TwitterStrategy = class TwitterStrategy extends passport_1.PassportStrategy(passport_twitter_1.Strategy, 'twitter') {
    constructor(_authService) {
        super({
            consumerKey: environment_1.environment.twitterConfig.clientId || 'disabled',
            consumerSecret: environment_1.environment.twitterConfig.clientSecret || 'disabled',
            callbackURL: `${environment_1.environment.host}:${environment_1.environment.port}/api/auth/twitter/callback`,
            passReqToCallback: true,
            includeEmail: true,
            secretOrKey: environment_1.environment.JWT_SECRET,
            jwtFromRequest: passport_jwt_1.ExtractJwt.fromAuthHeaderAsBearerToken()
        });
        this._authService = _authService;
    }
};
TwitterStrategy = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _a : Object])
], TwitterStrategy);
exports.TwitterStrategy = TwitterStrategy;


/***/ }),

/***/ "./src/app/availability-slots/availability-slots.controller.ts":
/*!*********************************************************************!*\
  !*** ./src/app/availability-slots/availability-slots.controller.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvailabilitySlotsController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const availability_slots_create_command_1 = __webpack_require__(/*! ./commands/availability-slots.create.command */ "./src/app/availability-slots/commands/availability-slots.create.command.ts");
const availability_slots_entity_1 = __webpack_require__(/*! ./availability-slots.entity */ "./src/app/availability-slots/availability-slots.entity.ts");
const availability_slots_service_1 = __webpack_require__(/*! ./availability-slots.service */ "./src/app/availability-slots/availability-slots.service.ts");
const availability_slots_bulk_create_command_1 = __webpack_require__(/*! ./commands/availability-slots.bulk.create.command */ "./src/app/availability-slots/commands/availability-slots.bulk.create.command.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let AvailabilitySlotsController = class AvailabilitySlotsController extends crud_controller_1.CrudController {
    constructor(availabilitySlotsService, commandBus) {
        super(availabilitySlotsService);
        this.availabilitySlotsService = availabilitySlotsService;
        this.commandBus = commandBus;
    }
    async findAllAvailabilitySlots(data) {
        const { relations, findInput } = JSON.parse(data);
        return this.availabilitySlotsService.findAll({
            where: findInput,
            relations
        });
    }
    async update(id, entity, ...options) {
        return this.availabilitySlotsService.create(Object.assign({ id }, entity));
    }
    async create(entity, ...options) {
        return this.commandBus.execute(new availability_slots_create_command_1.AvailabilitySlotsCreateCommand(entity));
    }
    async createManyWithEmailsId(entity) {
        return this.commandBus.execute(new availability_slots_bulk_create_command_1.AvailabilitySlotsBulkCreateCommand(entity));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all availability slots' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found availability slots',
        type: availability_slots_entity_1.AvailabilitySlot
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], AvailabilitySlotsController.prototype, "findAllAvailabilitySlots", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully updated.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_b = typeof availability_slots_entity_1.AvailabilitySlot !== "undefined" && availability_slots_entity_1.AvailabilitySlot) === "function" ? _b : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], AvailabilitySlotsController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof models_1.IAvailabilitySlotsCreateInput !== "undefined" && models_1.IAvailabilitySlotsCreateInput) === "function" ? _d : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], AvailabilitySlotsController.prototype, "create", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create slots in bulk' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The records have been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.CREATED),
    common_1.Post('/bulk'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Array]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], AvailabilitySlotsController.prototype, "createManyWithEmailsId", null);
AvailabilitySlotsController = tslib_1.__decorate([
    swagger_1.ApiTags('AvailabilitySlots'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_g = typeof availability_slots_service_1.AvailabilitySlotsService !== "undefined" && availability_slots_service_1.AvailabilitySlotsService) === "function" ? _g : Object, typeof (_h = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _h : Object])
], AvailabilitySlotsController);
exports.AvailabilitySlotsController = AvailabilitySlotsController;


/***/ }),

/***/ "./src/app/availability-slots/availability-slots.entity.ts":
/*!*****************************************************************!*\
  !*** ./src/app/availability-slots/availability-slots.entity.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvailabilitySlot = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let AvailabilitySlot = class AvailabilitySlot extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.ManyToOne(() => employee_entity_1.Employee, { nullable: true, onDelete: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IEmployee !== "undefined" && models_1.IEmployee) === "function" ? _a : Object)
], AvailabilitySlot.prototype, "employee", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    class_validator_1.IsOptional(),
    typeorm_1.RelationId((availabilitySlot) => availabilitySlot.employee),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], AvailabilitySlot.prototype, "employeeId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    class_validator_1.IsDate(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], AvailabilitySlot.prototype, "startTime", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    class_validator_1.IsDate(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], AvailabilitySlot.prototype, "endTime", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Boolean)
], AvailabilitySlot.prototype, "allDay", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ type: 'text', nullable: true }),
    tslib_1.__metadata("design:type", typeof (_d = typeof models_1.AvailabilitySlotType !== "undefined" && models_1.AvailabilitySlotType) === "function" ? _d : Object)
], AvailabilitySlot.prototype, "type", void 0);
AvailabilitySlot = tslib_1.__decorate([
    typeorm_1.Entity('availability_slot')
], AvailabilitySlot);
exports.AvailabilitySlot = AvailabilitySlot;


/***/ }),

/***/ "./src/app/availability-slots/availability-slots.module.ts":
/*!*****************************************************************!*\
  !*** ./src/app/availability-slots/availability-slots.module.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.AvailabilitySlotsModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const availability_slots_entity_1 = __webpack_require__(/*! ./availability-slots.entity */ "./src/app/availability-slots/availability-slots.entity.ts");
const availability_slots_service_1 = __webpack_require__(/*! ./availability-slots.service */ "./src/app/availability-slots/availability-slots.service.ts");
const availability_slots_controller_1 = __webpack_require__(/*! ./availability-slots.controller */ "./src/app/availability-slots/availability-slots.controller.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/availability-slots/commands/handlers/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const organization_service_1 = __webpack_require__(/*! ../organization/organization.service */ "./src/app/organization/organization.service.ts");
const user_module_1 = __webpack_require__(/*! ../user/user.module */ "./src/app/user/user.module.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let AvailabilitySlotsModule = class AvailabilitySlotsModule {
};
AvailabilitySlotsModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            user_module_1.UserModule,
            typeorm_1.TypeOrmModule.forFeature([availability_slots_entity_1.AvailabilitySlot, employee_entity_1.Employee, organization_entity_1.Organization]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [availability_slots_controller_1.AvailabilitySlotsController],
        providers: [
            availability_slots_service_1.AvailabilitySlotsService,
            employee_service_1.EmployeeService,
            organization_service_1.OrganizationService,
            ...handlers_1.CommandHandlers
        ],
        exports: [availability_slots_service_1.AvailabilitySlotsService]
    })
], AvailabilitySlotsModule);
exports.AvailabilitySlotsModule = AvailabilitySlotsModule;


/***/ }),

/***/ "./src/app/availability-slots/availability-slots.seed.ts":
/*!***************************************************************!*\
  !*** ./src/app/availability-slots/availability-slots.seed.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomAvailabilitySlots = exports.createDefaultAvailabilitySlots = void 0;
const availability_slots_entity_1 = __webpack_require__(/*! ./availability-slots.entity */ "./src/app/availability-slots/availability-slots.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const moment = __webpack_require__(/*! moment */ "moment");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
exports.createDefaultAvailabilitySlots = async (connection, tenants, organizations, employees, noOfAvailabilitySlotsPerOrganization) => {
    let slots = [];
    for (const tenant of tenants) {
        slots = await dataOperation(connection, slots, noOfAvailabilitySlotsPerOrganization, employees, organizations, tenant);
    }
    return slots;
};
exports.createRandomAvailabilitySlots = async (connection, tenants, tenantOrganizationsMap, tenantEmployeeMap, noOfAvailabilitySlotsPerOrganization) => {
    let slots = [];
    for (const tenant of tenants) {
        const organizations = tenantOrganizationsMap.get(tenant);
        const employees = tenantEmployeeMap.get(tenant);
        for (const org of organizations) {
            slots = await dataOperation(connection, slots, noOfAvailabilitySlotsPerOrganization, employees, org, tenant);
        }
    }
    return slots;
};
const dataOperation = async (connection, slots, noOfAvailabilitySlotsPerOrganization, employees, org, tenant) => {
    for (let i = 0; i < noOfAvailabilitySlotsPerOrganization; i++) {
        const slot = new availability_slots_entity_1.AvailabilitySlot();
        slot.allDay = faker.random.boolean();
        slot.employee = faker.random.arrayElement([
            faker.random.arrayElement(employees),
            null
        ]);
        slot.organization = org;
        slot.tenant = tenant;
        slot.startTime = faker.date.between(new Date(), moment(new Date()).add(2, 'months').toDate());
        slot.endTime = faker.date.between(slot.startTime, moment(slot.startTime).add(7, 'hours').toDate());
        slot.type = faker.random.arrayElement(Object.values(models_1.AvailabilitySlotType));
        slots.push(slot);
    }
    await connection.manager.save(slots);
    return slots;
};


/***/ }),

/***/ "./src/app/availability-slots/availability-slots.service.ts":
/*!******************************************************************!*\
  !*** ./src/app/availability-slots/availability-slots.service.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvailabilitySlotsService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const availability_slots_entity_1 = __webpack_require__(/*! ./availability-slots.entity */ "./src/app/availability-slots/availability-slots.entity.ts");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
let AvailabilitySlotsService = class AvailabilitySlotsService extends crud_service_1.CrudService {
    constructor(availabilitySlotsRepository) {
        super(availabilitySlotsRepository);
        this.availabilitySlotsRepository = availabilitySlotsRepository;
    }
    async findAll(filter) {
        const total = await this.repository.count(filter);
        const items = await this.repository.find(filter);
        return { items, total };
    }
    async createBulk(availabilitySlots) {
        return this.availabilitySlotsRepository.save(availabilitySlots);
    }
};
AvailabilitySlotsService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(availability_slots_entity_1.AvailabilitySlot)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], AvailabilitySlotsService);
exports.AvailabilitySlotsService = AvailabilitySlotsService;


/***/ }),

/***/ "./src/app/availability-slots/commands/availability-slots.bulk.create.command.ts":
/*!***************************************************************************************!*\
  !*** ./src/app/availability-slots/commands/availability-slots.bulk.create.command.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.AvailabilitySlotsBulkCreateCommand = void 0;
class AvailabilitySlotsBulkCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.AvailabilitySlotsBulkCreateCommand = AvailabilitySlotsBulkCreateCommand;
AvailabilitySlotsBulkCreateCommand.type = '[AvailabilitySlots] Register';


/***/ }),

/***/ "./src/app/availability-slots/commands/availability-slots.create.command.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/availability-slots/commands/availability-slots.create.command.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.AvailabilitySlotsCreateCommand = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
class AvailabilitySlotsCreateCommand {
    constructor(input, insertType = models_1.AvailabilityMergeType.MERGE) {
        this.input = input;
        this.insertType = insertType;
    }
}
exports.AvailabilitySlotsCreateCommand = AvailabilitySlotsCreateCommand;
AvailabilitySlotsCreateCommand.type = '[AvailabilitySlots] Create';


/***/ }),

/***/ "./src/app/availability-slots/commands/get-conflict-availability-slots.command.ts":
/*!****************************************************************************************!*\
  !*** ./src/app/availability-slots/commands/get-conflict-availability-slots.command.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GetConflictAvailabilitySlotsCommand = void 0;
class GetConflictAvailabilitySlotsCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.GetConflictAvailabilitySlotsCommand = GetConflictAvailabilitySlotsCommand;
GetConflictAvailabilitySlotsCommand.type = '[AvailabilitySlots] get conflict';


/***/ }),

/***/ "./src/app/availability-slots/commands/handlers/availability-slots.bulk.create.handler.ts":
/*!************************************************************************************************!*\
  !*** ./src/app/availability-slots/commands/handlers/availability-slots.bulk.create.handler.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvailabilitySlotsBulkCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const availability_slots_bulk_create_command_1 = __webpack_require__(/*! ../availability-slots.bulk.create.command */ "./src/app/availability-slots/commands/availability-slots.bulk.create.command.ts");
const availability_slots_entity_1 = __webpack_require__(/*! ../../availability-slots.entity */ "./src/app/availability-slots/availability-slots.entity.ts");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
const availability_slots_create_command_1 = __webpack_require__(/*! ../availability-slots.create.command */ "./src/app/availability-slots/commands/availability-slots.create.command.ts");
let AvailabilitySlotsBulkCreateHandler = class AvailabilitySlotsBulkCreateHandler {
    constructor(commandBus) {
        this.commandBus = commandBus;
    }
    async execute(command) {
        const { input } = command;
        const availabilitySlotsArray = [];
        const { tenantId } = context_1.RequestContext.currentUser();
        for (const o of input) {
            let availabilitySlots = new availability_slots_entity_1.AvailabilitySlot(Object.assign(Object.assign({}, o), { tenantId }));
            availabilitySlots = await this.commandBus.execute(new availability_slots_create_command_1.AvailabilitySlotsCreateCommand(availabilitySlots));
            availabilitySlotsArray.push(availabilitySlots);
        }
        return availabilitySlotsArray;
    }
};
AvailabilitySlotsBulkCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(availability_slots_bulk_create_command_1.AvailabilitySlotsBulkCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _a : Object])
], AvailabilitySlotsBulkCreateHandler);
exports.AvailabilitySlotsBulkCreateHandler = AvailabilitySlotsBulkCreateHandler;


/***/ }),

/***/ "./src/app/availability-slots/commands/handlers/availability-slots.create.handler.ts":
/*!*******************************************************************************************!*\
  !*** ./src/app/availability-slots/commands/handlers/availability-slots.create.handler.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvailabilitySlotsCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const availability_slots_create_command_1 = __webpack_require__(/*! ../availability-slots.create.command */ "./src/app/availability-slots/commands/availability-slots.create.command.ts");
const availability_slots_entity_1 = __webpack_require__(/*! ../../availability-slots.entity */ "./src/app/availability-slots/availability-slots.entity.ts");
const availability_slots_service_1 = __webpack_require__(/*! ../../availability-slots.service */ "./src/app/availability-slots/availability-slots.service.ts");
const get_conflict_availability_slots_command_1 = __webpack_require__(/*! ../get-conflict-availability-slots.command */ "./src/app/availability-slots/commands/get-conflict-availability-slots.command.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const underscore_1 = __webpack_require__(/*! underscore */ "underscore");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
let AvailabilitySlotsCreateHandler = class AvailabilitySlotsCreateHandler {
    constructor(availabilitySlotsService, commandBus) {
        this.availabilitySlotsService = availabilitySlotsService;
        this.commandBus = commandBus;
    }
    async execute(command) {
        const { input, insertType } = command;
        const conflicts = await this.commandBus.execute(new get_conflict_availability_slots_command_1.GetConflictAvailabilitySlotsCommand({
            employeeId: input.employeeId,
            startTime: input.startTime,
            endTime: input.endTime,
            type: input.type
        }));
        if (insertType === models_1.AvailabilityMergeType.SKIP) {
            return;
        }
        if (conflicts.length > 0) {
            if (insertType === models_1.AvailabilityMergeType.MERGE) {
                const startTimes = conflicts.map((item) => new Date(item.startTime).getTime());
                const endTimes = conflicts.map((item) => new Date(item.endTime).getTime());
                input.startTime = new Date(Math.min(new Date(input.startTime).getTime(), ...startTimes));
                input.endTime = new Date(Math.max(new Date(input.endTime).getTime(), ...endTimes));
            }
            await this.availabilitySlotsService.delete({
                id: typeorm_1.In(underscore_1.pluck(conflicts, 'id'))
            });
        }
        const availabilitySlots = new availability_slots_entity_1.AvailabilitySlot(Object.assign({}, input));
        return await this.availabilitySlotsService.create(availabilitySlots);
    }
};
AvailabilitySlotsCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(availability_slots_create_command_1.AvailabilitySlotsCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof availability_slots_service_1.AvailabilitySlotsService !== "undefined" && availability_slots_service_1.AvailabilitySlotsService) === "function" ? _a : Object, typeof (_b = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _b : Object])
], AvailabilitySlotsCreateHandler);
exports.AvailabilitySlotsCreateHandler = AvailabilitySlotsCreateHandler;


/***/ }),

/***/ "./src/app/availability-slots/commands/handlers/get-conflict-availability-slots.handler.ts":
/*!*************************************************************************************************!*\
  !*** ./src/app/availability-slots/commands/handlers/get-conflict-availability-slots.handler.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetConflictAvailabilitySlotsHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const moment = __webpack_require__(/*! moment */ "moment");
const availability_slots_entity_1 = __webpack_require__(/*! ../../availability-slots.entity */ "./src/app/availability-slots/availability-slots.entity.ts");
const get_conflict_availability_slots_command_1 = __webpack_require__(/*! ../get-conflict-availability-slots.command */ "./src/app/availability-slots/commands/get-conflict-availability-slots.command.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
let GetConflictAvailabilitySlotsHandler = class GetConflictAvailabilitySlotsHandler {
    constructor(timeLogRepository) {
        this.timeLogRepository = timeLogRepository;
    }
    async execute(command) {
        const { input } = command;
        const startedAt = moment(input.startTime).toISOString();
        const stoppedAt = moment(input.endTime).toISOString();
        let conflictQuery = this.timeLogRepository.createQueryBuilder();
        conflictQuery = conflictQuery
            .where(`"${conflictQuery.alias}"."employeeId" = :employeeId`, {
            employeeId: input.employeeId
        })
            .andWhere(environment_1.environment.database.type === 'sqlite'
            ? `${startedAt} >= "${conflictQuery.alias}"."startTime" and ${startedAt} <= "${conflictQuery.alias}"."endTime"`
            : `("${conflictQuery.alias}"."startTime", "${conflictQuery.alias}"."endTime") OVERLAPS (timestamptz '${startedAt}', timestamptz '${stoppedAt}')`);
        if (input.type) {
            conflictQuery.andWhere(`${conflictQuery.alias}.type = :type`, {
                type: input.type
            });
        }
        if (input.relations) {
            input.relations.forEach((relation) => {
                conflictQuery = conflictQuery.leftJoinAndSelect(`${conflictQuery.alias}.${relation}`, relation);
            });
        }
        if (input.ignoreId) {
            conflictQuery = conflictQuery.andWhere(`${conflictQuery.alias}.id NOT IN (:...id)`, {
                id: input.ignoreId instanceof Array
                    ? input.ignoreId
                    : [input.ignoreId]
            });
        }
        return await conflictQuery.getMany();
    }
};
GetConflictAvailabilitySlotsHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(get_conflict_availability_slots_command_1.GetConflictAvailabilitySlotsCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(availability_slots_entity_1.AvailabilitySlot)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], GetConflictAvailabilitySlotsHandler);
exports.GetConflictAvailabilitySlotsHandler = GetConflictAvailabilitySlotsHandler;


/***/ }),

/***/ "./src/app/availability-slots/commands/handlers/index.ts":
/*!***************************************************************!*\
  !*** ./src/app/availability-slots/commands/handlers/index.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const availability_slots_create_handler_1 = __webpack_require__(/*! ./availability-slots.create.handler */ "./src/app/availability-slots/commands/handlers/availability-slots.create.handler.ts");
const availability_slots_bulk_create_handler_1 = __webpack_require__(/*! ./availability-slots.bulk.create.handler */ "./src/app/availability-slots/commands/handlers/availability-slots.bulk.create.handler.ts");
const get_conflict_availability_slots_handler_1 = __webpack_require__(/*! ./get-conflict-availability-slots.handler */ "./src/app/availability-slots/commands/handlers/get-conflict-availability-slots.handler.ts");
exports.CommandHandlers = [
    availability_slots_create_handler_1.AvailabilitySlotsCreateHandler,
    availability_slots_bulk_create_handler_1.AvailabilitySlotsBulkCreateHandler,
    get_conflict_availability_slots_handler_1.GetConflictAvailabilitySlotsHandler
];


/***/ }),

/***/ "./src/app/candidate-criterions-rating/candidate-criterion-rating.controller.ts":
/*!**************************************************************************************!*\
  !*** ./src/app/candidate-criterions-rating/candidate-criterion-rating.controller.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateCriterionsRatingController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const candidate_criterion_rating_service_1 = __webpack_require__(/*! ./candidate-criterion-rating.service */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.service.ts");
const candidate_criterion_rating_entity_1 = __webpack_require__(/*! ./candidate-criterion-rating.entity */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const role_guard_1 = __webpack_require__(/*! ../shared/guards/auth/role.guard */ "./src/app/shared/guards/auth/role.guard.ts");
const roles_1 = __webpack_require__(/*! ../shared/decorators/roles */ "./src/app/shared/decorators/roles.ts");
const candidate_criterions_rating_bulk_create_command_1 = __webpack_require__(/*! ./commands/candidate-criterions-rating.bulk.create.command */ "./src/app/candidate-criterions-rating/commands/candidate-criterions-rating.bulk.create.command.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const candidate_criterions_rating_bulk_delete_command_1 = __webpack_require__(/*! ./commands/candidate-criterions-rating.bulk.delete.command */ "./src/app/candidate-criterions-rating/commands/candidate-criterions-rating.bulk.delete.command.ts");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/candidate-criterions-rating/commands/index.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let CandidateCriterionsRatingController = class CandidateCriterionsRatingController extends crud_controller_1.CrudController {
    constructor(candidateCriterionsRatingService, commandBus) {
        super(candidateCriterionsRatingService);
        this.candidateCriterionsRatingService = candidateCriterionsRatingService;
        this.commandBus = commandBus;
    }
    async findCriterionRatings(data) {
        const { findInput } = JSON.parse(data);
        return this.candidateCriterionsRatingService.findAll({
            where: findInput
        });
    }
    async createBulk(input) {
        const { feedbackId = null, technologies = [], qualities = [] } = input;
        return this.commandBus.execute(new candidate_criterions_rating_bulk_create_command_1.CandidateCriterionsRatingBulkCreateCommand(feedbackId, technologies, qualities));
    }
    async updateBulk(data) {
        return this.commandBus.execute(new commands_1.CandidateCriterionsRatingBulkUpdateCommand(data));
    }
    async deleteBulk(data) {
        const { id = null } = data;
        return this.commandBus.execute(new candidate_criterions_rating_bulk_delete_command_1.CandidateCriterionsRatingBulkDeleteCommand(id));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all candidate criterion rating.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found candidate criterion rating',
        type: candidate_criterion_rating_entity_1.CandidateCriterionsRating
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], CandidateCriterionsRatingController.prototype, "findCriterionRatings", null);
tslib_1.__decorate([
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.CANDIDATE, models_1.RolesEnum.SUPER_ADMIN, models_1.RolesEnum.ADMIN),
    common_1.Post('createBulk'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], CandidateCriterionsRatingController.prototype, "createBulk", null);
tslib_1.__decorate([
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.CANDIDATE, models_1.RolesEnum.SUPER_ADMIN, models_1.RolesEnum.ADMIN),
    common_1.Put('updateBulk'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], CandidateCriterionsRatingController.prototype, "updateBulk", null);
tslib_1.__decorate([
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.CANDIDATE, models_1.RolesEnum.SUPER_ADMIN, models_1.RolesEnum.ADMIN),
    common_1.Delete('deleteBulk'),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], CandidateCriterionsRatingController.prototype, "deleteBulk", null);
CandidateCriterionsRatingController = tslib_1.__decorate([
    swagger_1.ApiTags('CandidateCriterionRating'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_module_1.TenantModule),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof candidate_criterion_rating_service_1.CandidateCriterionsRatingService !== "undefined" && candidate_criterion_rating_service_1.CandidateCriterionsRatingService) === "function" ? _e : Object, typeof (_f = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _f : Object])
], CandidateCriterionsRatingController);
exports.CandidateCriterionsRatingController = CandidateCriterionsRatingController;


/***/ }),

/***/ "./src/app/candidate-criterions-rating/candidate-criterion-rating.entity.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/candidate-criterions-rating/candidate-criterion-rating.entity.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateCriterionsRating = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const candidate_feedbacks_entity_1 = __webpack_require__(/*! ../candidate-feedbacks/candidate-feedbacks.entity */ "./src/app/candidate-feedbacks/candidate-feedbacks.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let CandidateCriterionsRating = class CandidateCriterionsRating extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], CandidateCriterionsRating.prototype, "rating", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], CandidateCriterionsRating.prototype, "technologyId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], CandidateCriterionsRating.prototype, "personalQualityId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], CandidateCriterionsRating.prototype, "feedbackId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => candidate_feedbacks_entity_1.CandidateFeedback, (feedback) => feedback.criterionsRating),
    tslib_1.__metadata("design:type", typeof (_a = typeof candidate_feedbacks_entity_1.CandidateFeedback !== "undefined" && candidate_feedbacks_entity_1.CandidateFeedback) === "function" ? _a : Object)
], CandidateCriterionsRating.prototype, "feedback", void 0);
CandidateCriterionsRating = tslib_1.__decorate([
    typeorm_1.Entity('candidate_criterion_rating')
], CandidateCriterionsRating);
exports.CandidateCriterionsRating = CandidateCriterionsRating;


/***/ }),

/***/ "./src/app/candidate-criterions-rating/candidate-criterion-rating.module.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/candidate-criterions-rating/candidate-criterion-rating.module.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateCriterionsRatingModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const role_module_1 = __webpack_require__(/*! ../role/role.module */ "./src/app/role/role.module.ts");
const user_module_1 = __webpack_require__(/*! ../user/user.module */ "./src/app/user/user.module.ts");
const role_permissions_module_1 = __webpack_require__(/*! ../role-permissions/role-permissions.module */ "./src/app/role-permissions/role-permissions.module.ts");
const auth_module_1 = __webpack_require__(/*! ../auth/auth.module */ "./src/app/auth/auth.module.ts");
const candidate_criterion_rating_entity_1 = __webpack_require__(/*! ./candidate-criterion-rating.entity */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.entity.ts");
const candidate_criterion_rating_service_1 = __webpack_require__(/*! ./candidate-criterion-rating.service */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.service.ts");
const candidate_criterion_rating_controller_1 = __webpack_require__(/*! ./candidate-criterion-rating.controller */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.controller.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/candidate-criterions-rating/commands/handlers/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
let CandidateCriterionsRatingModule = class CandidateCriterionsRatingModule {
};
CandidateCriterionsRatingModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([candidate_criterion_rating_entity_1.CandidateCriterionsRating]),
            user_module_1.UserModule,
            role_module_1.RoleModule,
            role_permissions_module_1.RolePermissionsModule,
            auth_module_1.AuthModule,
            cqrs_1.CqrsModule
        ],
        providers: [candidate_criterion_rating_service_1.CandidateCriterionsRatingService, ...handlers_1.CommandHandlers],
        controllers: [candidate_criterion_rating_controller_1.CandidateCriterionsRatingController],
        exports: [candidate_criterion_rating_service_1.CandidateCriterionsRatingService]
    })
], CandidateCriterionsRatingModule);
exports.CandidateCriterionsRatingModule = CandidateCriterionsRatingModule;


/***/ }),

/***/ "./src/app/candidate-criterions-rating/candidate-criterion-rating.seed.ts":
/*!********************************************************************************!*\
  !*** ./src/app/candidate-criterions-rating/candidate-criterion-rating.seed.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomCandidateCriterionRating = exports.createDefaultCandidateCriterionRating = void 0;
const candidate_criterion_rating_entity_1 = __webpack_require__(/*! ./candidate-criterion-rating.entity */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.entity.ts");
const candidate_feedbacks_entity_1 = __webpack_require__(/*! ../candidate-feedbacks/candidate-feedbacks.entity */ "./src/app/candidate-feedbacks/candidate-feedbacks.entity.ts");
const candidate_personal_qualities_entity_1 = __webpack_require__(/*! ../candidate-personal-qualities/candidate-personal-qualities.entity */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.entity.ts");
const candidate_technologies_entity_1 = __webpack_require__(/*! ../candidate-technologies/candidate-technologies.entity */ "./src/app/candidate-technologies/candidate-technologies.entity.ts");
const candidate_interview_entity_1 = __webpack_require__(/*! ../candidate-interview/candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
exports.createDefaultCandidateCriterionRating = async (connection, tenant, organization, defaultCandidates) => {
    if (!defaultCandidates) {
        console.warn('Warning: defaultCandidates not found, default Criterion rating  will not be created');
        return;
    }
    let candidates = [];
    for (const defaultCandidate of defaultCandidates) {
        const candidateInterviews = await connection.manager.find(candidate_interview_entity_1.CandidateInterview, {
            where: [{ candidate: defaultCandidate }]
        });
        for (const interview of candidateInterviews) {
            const candidatesFeedback = await connection.manager.find(candidate_feedbacks_entity_1.CandidateFeedback, {
                where: [{ candidate: defaultCandidate }]
            });
            const candidatesPersonalQualities = await connection.manager.find(candidate_personal_qualities_entity_1.CandidatePersonalQualities, {
                where: [{ interview: interview }]
            });
            const candidatesTechnologies = await connection.manager.find(candidate_technologies_entity_1.CandidateTechnologies, {
                where: [{ interview: interview }]
            });
            candidates = await dataOperation(connection, tenant, organization, candidates, candidatesFeedback, candidatesTechnologies, candidatesPersonalQualities);
        }
    }
    return candidates;
};
exports.createRandomCandidateCriterionRating = async (connection, tenants, tenantCandidatesMap) => {
    if (!tenantCandidatesMap) {
        console.warn('Warning: tenantCandidatesMap not found, Criterion rating  will not be created');
        return;
    }
    let candidates = [];
    for (const tenant of tenants) {
        const tenantCandidates = tenantCandidatesMap.get(tenant);
        for (const tenantCandidate of tenantCandidates) {
            const candidateInterviews = await connection.manager.find(candidate_interview_entity_1.CandidateInterview, {
                where: [{ candidate: tenantCandidate }]
            });
            for (const interview of candidateInterviews) {
                const candidatesFeedback = await connection.manager.find(candidate_feedbacks_entity_1.CandidateFeedback, {
                    where: [{ candidate: tenantCandidate }]
                });
                const candidatesPersonalQualities = await connection.manager.find(candidate_personal_qualities_entity_1.CandidatePersonalQualities, {
                    where: [{ interview: interview }]
                });
                const candidatesTechnologies = await connection.manager.find(candidate_technologies_entity_1.CandidateTechnologies, {
                    where: [{ interview: interview }]
                });
                candidates = await dataOperation(connection, tenant, interview.organization, candidates, candidatesFeedback, candidatesTechnologies, candidatesPersonalQualities);
            }
        }
    }
    return candidates;
};
const dataOperation = async (connection, tenant, organization, candidates, candidatesFeedback, candidatesTechnologies, candidatesPersonalQualities) => {
    for (const feedback of candidatesFeedback) {
        const candidate = new candidate_criterion_rating_entity_1.CandidateCriterionsRating();
        candidate.rating = Math.floor(Math.random() * 5) + 1;
        candidate.technologyId = candidatesTechnologies[0].id;
        candidate.personalQualityId = candidatesPersonalQualities[0].id;
        candidate.feedbackId = feedback.id;
        candidate.feedback = feedback;
        candidate.tenant = tenant;
        candidate.organization = organization;
        candidates.push(candidate);
    }
    await connection.manager.save(candidates);
    return candidates;
};


/***/ }),

/***/ "./src/app/candidate-criterions-rating/candidate-criterion-rating.service.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/candidate-criterions-rating/candidate-criterion-rating.service.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateCriterionsRatingService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const candidate_criterion_rating_entity_1 = __webpack_require__(/*! ./candidate-criterion-rating.entity */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.entity.ts");
let CandidateCriterionsRatingService = class CandidateCriterionsRatingService extends crud_service_1.CrudService {
    constructor(candidateCriterionsRatingRepository) {
        super(candidateCriterionsRatingRepository);
        this.candidateCriterionsRatingRepository = candidateCriterionsRatingRepository;
    }
    async createBulk(technologyCreateInput, qualityCreateInput) {
        return [
            await this.repository.save(technologyCreateInput),
            await this.repository.save(qualityCreateInput)
        ];
    }
    async getCriterionsByFeedbackId(feedbackId) {
        return await this.repository
            .createQueryBuilder('candidate_feedback')
            .where('candidate_feedback.feedbackId = :feedbackId', {
            feedbackId
        })
            .getMany();
    }
    async deleteBulk(ids) {
        return await this.repository.delete(ids);
    }
    async updateBulk(tech, qual) {
        return [
            await this.repository.save(tech),
            await this.repository.save(qual)
        ];
    }
};
CandidateCriterionsRatingService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(candidate_criterion_rating_entity_1.CandidateCriterionsRating)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], CandidateCriterionsRatingService);
exports.CandidateCriterionsRatingService = CandidateCriterionsRatingService;


/***/ }),

/***/ "./src/app/candidate-criterions-rating/commands/candidate-criterions-rating.bulk.create.command.ts":
/*!*********************************************************************************************************!*\
  !*** ./src/app/candidate-criterions-rating/commands/candidate-criterions-rating.bulk.create.command.ts ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateCriterionsRatingBulkCreateCommand = void 0;
class CandidateCriterionsRatingBulkCreateCommand {
    constructor(feedbackId, technologies, qualities) {
        this.feedbackId = feedbackId;
        this.technologies = technologies;
        this.qualities = qualities;
    }
}
exports.CandidateCriterionsRatingBulkCreateCommand = CandidateCriterionsRatingBulkCreateCommand;
CandidateCriterionsRatingBulkCreateCommand.type = '[CandidateCriterionsRating] Register';


/***/ }),

/***/ "./src/app/candidate-criterions-rating/commands/candidate-criterions-rating.bulk.delete.command.ts":
/*!*********************************************************************************************************!*\
  !*** ./src/app/candidate-criterions-rating/commands/candidate-criterions-rating.bulk.delete.command.ts ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateCriterionsRatingBulkDeleteCommand = void 0;
class CandidateCriterionsRatingBulkDeleteCommand {
    constructor(id) {
        this.id = id;
    }
}
exports.CandidateCriterionsRatingBulkDeleteCommand = CandidateCriterionsRatingBulkDeleteCommand;
CandidateCriterionsRatingBulkDeleteCommand.type = '[CandidateCriterionsRating] Delete';


/***/ }),

/***/ "./src/app/candidate-criterions-rating/commands/candidate-criterions-rating.bulk.update.command.ts":
/*!*********************************************************************************************************!*\
  !*** ./src/app/candidate-criterions-rating/commands/candidate-criterions-rating.bulk.update.command.ts ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateCriterionsRatingBulkUpdateCommand = void 0;
class CandidateCriterionsRatingBulkUpdateCommand {
    constructor(data) {
        this.data = data;
    }
}
exports.CandidateCriterionsRatingBulkUpdateCommand = CandidateCriterionsRatingBulkUpdateCommand;
CandidateCriterionsRatingBulkUpdateCommand.type = '[CandidateCriterionsRating] Update';


/***/ }),

/***/ "./src/app/candidate-criterions-rating/commands/handlers/candidate-criterions-rating.bulk.create.handler.ts":
/*!******************************************************************************************************************!*\
  !*** ./src/app/candidate-criterions-rating/commands/handlers/candidate-criterions-rating.bulk.create.handler.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateCriterionsRatingBulkCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const candidate_criterions_rating_bulk_create_command_1 = __webpack_require__(/*! ../candidate-criterions-rating.bulk.create.command */ "./src/app/candidate-criterions-rating/commands/candidate-criterions-rating.bulk.create.command.ts");
const candidate_criterion_rating_service_1 = __webpack_require__(/*! ../../candidate-criterion-rating.service */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.service.ts");
let CandidateCriterionsRatingBulkCreateHandler = class CandidateCriterionsRatingBulkCreateHandler {
    constructor(candidateCriterionsRatingService) {
        this.candidateCriterionsRatingService = candidateCriterionsRatingService;
    }
    async execute(command) {
        const { feedbackId, technologies, qualities } = command;
        let technologyRating;
        const technologyCreateInput = [];
        for (const item of technologies) {
            technologyRating = {
                rating: item.rating,
                technologyId: item.id,
                feedbackId: feedbackId,
                organizationId: item.organizationId,
                tenantId: item.tenantId
            };
            technologyCreateInput.push(technologyRating);
        }
        let qualityRating;
        const qualityCreateInput = [];
        for (const item of qualities) {
            qualityRating = {
                rating: item.rating,
                personalQualityId: item.id,
                feedbackId: feedbackId,
                organizationId: item.organizationId,
                tenantId: item.tenantId
            };
            qualityCreateInput.push(qualityRating);
        }
        return await this.candidateCriterionsRatingService.createBulk(technologyCreateInput, qualityCreateInput);
    }
};
CandidateCriterionsRatingBulkCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(candidate_criterions_rating_bulk_create_command_1.CandidateCriterionsRatingBulkCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof candidate_criterion_rating_service_1.CandidateCriterionsRatingService !== "undefined" && candidate_criterion_rating_service_1.CandidateCriterionsRatingService) === "function" ? _a : Object])
], CandidateCriterionsRatingBulkCreateHandler);
exports.CandidateCriterionsRatingBulkCreateHandler = CandidateCriterionsRatingBulkCreateHandler;


/***/ }),

/***/ "./src/app/candidate-criterions-rating/commands/handlers/candidate-criterions-rating.bulk.delete.handler.ts":
/*!******************************************************************************************************************!*\
  !*** ./src/app/candidate-criterions-rating/commands/handlers/candidate-criterions-rating.bulk.delete.handler.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateCriterionsRatingBulkDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const candidate_criterions_rating_bulk_delete_command_1 = __webpack_require__(/*! ../candidate-criterions-rating.bulk.delete.command */ "./src/app/candidate-criterions-rating/commands/candidate-criterions-rating.bulk.delete.command.ts");
const candidate_criterion_rating_service_1 = __webpack_require__(/*! ../../candidate-criterion-rating.service */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.service.ts");
let CandidateCriterionsRatingBulkDeleteHandler = class CandidateCriterionsRatingBulkDeleteHandler {
    constructor(candidateCriterionsRatingService) {
        this.candidateCriterionsRatingService = candidateCriterionsRatingService;
    }
    async execute(command) {
        const { id } = command;
        const criterions = await this.candidateCriterionsRatingService.getCriterionsByFeedbackId(id);
        if (criterions.length > 0) {
            await this.candidateCriterionsRatingService.deleteBulk(criterions.map((item) => item.id));
        }
        return;
    }
};
CandidateCriterionsRatingBulkDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(candidate_criterions_rating_bulk_delete_command_1.CandidateCriterionsRatingBulkDeleteCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof candidate_criterion_rating_service_1.CandidateCriterionsRatingService !== "undefined" && candidate_criterion_rating_service_1.CandidateCriterionsRatingService) === "function" ? _a : Object])
], CandidateCriterionsRatingBulkDeleteHandler);
exports.CandidateCriterionsRatingBulkDeleteHandler = CandidateCriterionsRatingBulkDeleteHandler;


/***/ }),

/***/ "./src/app/candidate-criterions-rating/commands/handlers/candidate-criterions-rating.bulk.update.handler.ts":
/*!******************************************************************************************************************!*\
  !*** ./src/app/candidate-criterions-rating/commands/handlers/candidate-criterions-rating.bulk.update.handler.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateCriterionsRatingBulkUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const candidate_criterion_rating_service_1 = __webpack_require__(/*! ../../candidate-criterion-rating.service */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.service.ts");
const candidate_criterions_rating_bulk_update_command_1 = __webpack_require__(/*! ../candidate-criterions-rating.bulk.update.command */ "./src/app/candidate-criterions-rating/commands/candidate-criterions-rating.bulk.update.command.ts");
let CandidateCriterionsRatingBulkUpdateHandler = class CandidateCriterionsRatingBulkUpdateHandler {
    constructor(candidateCriterionsRatingService) {
        this.candidateCriterionsRatingService = candidateCriterionsRatingService;
    }
    async execute(command) {
        const { data } = command;
        return this.candidateCriterionsRatingService.updateBulk(this.setRating(data.personalQualities, data.criterionsRating.filter((tech) => tech.personalQualityId)), this.setRating(data.technologies, data.criterionsRating.filter((tech) => tech.technologyId)));
    }
    setRating(ratings, data) {
        for (let i = 0; i < ratings.length; i++) {
            data[i].rating = ratings[i];
        }
        return data;
    }
};
CandidateCriterionsRatingBulkUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(candidate_criterions_rating_bulk_update_command_1.CandidateCriterionsRatingBulkUpdateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof candidate_criterion_rating_service_1.CandidateCriterionsRatingService !== "undefined" && candidate_criterion_rating_service_1.CandidateCriterionsRatingService) === "function" ? _a : Object])
], CandidateCriterionsRatingBulkUpdateHandler);
exports.CandidateCriterionsRatingBulkUpdateHandler = CandidateCriterionsRatingBulkUpdateHandler;


/***/ }),

/***/ "./src/app/candidate-criterions-rating/commands/handlers/index.ts":
/*!************************************************************************!*\
  !*** ./src/app/candidate-criterions-rating/commands/handlers/index.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const candidate_criterions_rating_bulk_delete_handler_1 = __webpack_require__(/*! ./candidate-criterions-rating.bulk.delete.handler */ "./src/app/candidate-criterions-rating/commands/handlers/candidate-criterions-rating.bulk.delete.handler.ts");
const candidate_criterions_rating_bulk_create_handler_1 = __webpack_require__(/*! ./candidate-criterions-rating.bulk.create.handler */ "./src/app/candidate-criterions-rating/commands/handlers/candidate-criterions-rating.bulk.create.handler.ts");
const candidate_criterions_rating_bulk_update_handler_1 = __webpack_require__(/*! ./candidate-criterions-rating.bulk.update.handler */ "./src/app/candidate-criterions-rating/commands/handlers/candidate-criterions-rating.bulk.update.handler.ts");
exports.CommandHandlers = [
    candidate_criterions_rating_bulk_delete_handler_1.CandidateCriterionsRatingBulkDeleteHandler,
    candidate_criterions_rating_bulk_create_handler_1.CandidateCriterionsRatingBulkCreateHandler,
    candidate_criterions_rating_bulk_update_handler_1.CandidateCriterionsRatingBulkUpdateHandler
];


/***/ }),

/***/ "./src/app/candidate-criterions-rating/commands/index.ts":
/*!***************************************************************!*\
  !*** ./src/app/candidate-criterions-rating/commands/index.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateCriterionsRatingBulkUpdateCommand = exports.CandidateCriterionsRatingBulkCreateCommand = exports.CandidateCriterionsRatingBulkDeleteCommand = void 0;
var candidate_criterions_rating_bulk_delete_command_1 = __webpack_require__(/*! ./candidate-criterions-rating.bulk.delete.command */ "./src/app/candidate-criterions-rating/commands/candidate-criterions-rating.bulk.delete.command.ts");
Object.defineProperty(exports, "CandidateCriterionsRatingBulkDeleteCommand", { enumerable: true, get: function () { return candidate_criterions_rating_bulk_delete_command_1.CandidateCriterionsRatingBulkDeleteCommand; } });
var candidate_criterions_rating_bulk_create_command_1 = __webpack_require__(/*! ./candidate-criterions-rating.bulk.create.command */ "./src/app/candidate-criterions-rating/commands/candidate-criterions-rating.bulk.create.command.ts");
Object.defineProperty(exports, "CandidateCriterionsRatingBulkCreateCommand", { enumerable: true, get: function () { return candidate_criterions_rating_bulk_create_command_1.CandidateCriterionsRatingBulkCreateCommand; } });
var candidate_criterions_rating_bulk_update_command_1 = __webpack_require__(/*! ./candidate-criterions-rating.bulk.update.command */ "./src/app/candidate-criterions-rating/commands/candidate-criterions-rating.bulk.update.command.ts");
Object.defineProperty(exports, "CandidateCriterionsRatingBulkUpdateCommand", { enumerable: true, get: function () { return candidate_criterions_rating_bulk_update_command_1.CandidateCriterionsRatingBulkUpdateCommand; } });


/***/ }),

/***/ "./src/app/candidate-documents/candidate-documents.controller.ts":
/*!***********************************************************************!*\
  !*** ./src/app/candidate-documents/candidate-documents.controller.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateDocumentsController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const candidate_documents_service_1 = __webpack_require__(/*! ./candidate-documents.service */ "./src/app/candidate-documents/candidate-documents.service.ts");
const candidate_documents_entity_1 = __webpack_require__(/*! ./candidate-documents.entity */ "./src/app/candidate-documents/candidate-documents.entity.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let CandidateDocumentsController = class CandidateDocumentsController extends crud_controller_1.CrudController {
    constructor(candidateDocumentsService) {
        super(candidateDocumentsService);
        this.candidateDocumentsService = candidateDocumentsService;
    }
    async findDocument(data) {
        const { findInput } = JSON.parse(data);
        return this.candidateDocumentsService.findAll({ where: findInput });
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all candidate document.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found candidate document',
        type: candidate_documents_entity_1.CandidateDocument
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_CANDIDATES_DOCUMENTS_VIEW),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], CandidateDocumentsController.prototype, "findDocument", null);
CandidateDocumentsController = tslib_1.__decorate([
    swagger_1.ApiTags('CandidateDocument'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof candidate_documents_service_1.CandidateDocumentsService !== "undefined" && candidate_documents_service_1.CandidateDocumentsService) === "function" ? _b : Object])
], CandidateDocumentsController);
exports.CandidateDocumentsController = CandidateDocumentsController;


/***/ }),

/***/ "./src/app/candidate-documents/candidate-documents.entity.ts":
/*!*******************************************************************!*\
  !*** ./src/app/candidate-documents/candidate-documents.entity.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateDocument = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const candidate_entity_1 = __webpack_require__(/*! ../candidate/candidate.entity */ "./src/app/candidate/candidate.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let CandidateDocument = class CandidateDocument extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], CandidateDocument.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], CandidateDocument.prototype, "candidateId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], CandidateDocument.prototype, "documentUrl", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => candidate_entity_1.Candidate, (candidate) => candidate.documents, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.ICandidate !== "undefined" && models_1.ICandidate) === "function" ? _a : Object)
], CandidateDocument.prototype, "candidate", void 0);
CandidateDocument = tslib_1.__decorate([
    typeorm_1.Entity('candidate_document')
], CandidateDocument);
exports.CandidateDocument = CandidateDocument;


/***/ }),

/***/ "./src/app/candidate-documents/candidate-documents.module.ts":
/*!*******************************************************************!*\
  !*** ./src/app/candidate-documents/candidate-documents.module.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateDocumentsModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const candidate_documents_controller_1 = __webpack_require__(/*! ./candidate-documents.controller */ "./src/app/candidate-documents/candidate-documents.controller.ts");
const candidate_documents_entity_1 = __webpack_require__(/*! ./candidate-documents.entity */ "./src/app/candidate-documents/candidate-documents.entity.ts");
const candidate_documents_service_1 = __webpack_require__(/*! ./candidate-documents.service */ "./src/app/candidate-documents/candidate-documents.service.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let CandidateDocumentsModule = class CandidateDocumentsModule {
};
CandidateDocumentsModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([user_entity_1.User, candidate_documents_entity_1.CandidateDocument]),
            tenant_module_1.TenantModule
        ],
        providers: [candidate_documents_service_1.CandidateDocumentsService, user_service_1.UserService],
        controllers: [candidate_documents_controller_1.CandidateDocumentsController],
        exports: [candidate_documents_service_1.CandidateDocumentsService, user_service_1.UserService]
    })
], CandidateDocumentsModule);
exports.CandidateDocumentsModule = CandidateDocumentsModule;


/***/ }),

/***/ "./src/app/candidate-documents/candidate-documents.seed.ts":
/*!*****************************************************************!*\
  !*** ./src/app/candidate-documents/candidate-documents.seed.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomCandidateDocuments = exports.createCandidateDocuments = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const faker = __webpack_require__(/*! faker */ "faker");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const candidate_documents_entity_1 = __webpack_require__(/*! ./candidate-documents.entity */ "./src/app/candidate-documents/candidate-documents.entity.ts");
const default_candidate_documents_1 = __webpack_require__(/*! ./default-candidate-documents */ "./src/app/candidate-documents/default-candidate-documents.ts");
exports.createCandidateDocuments = async (connection, tenant, candidates, organization) => {
    let defaultCandidateDocuments = [];
    if (!candidates) {
        console.warn('Warning: candidates not found, CandidateDocuments will not be created');
        return;
    }
    candidates.forEach((candidate) => {
        const documents = default_candidate_documents_1.DEFAULT_CANDIDATE_DOCUMENTS.map((document) => ({
            name: document.name,
            documentUrl: document.documentUrl,
            candidateId: candidate.id,
            tenant: tenant,
            organization: organization
        }));
        defaultCandidateDocuments = [
            ...defaultCandidateDocuments,
            ...documents
        ];
    });
    insertCandidateDocuments(connection, defaultCandidateDocuments);
    return defaultCandidateDocuments;
};
exports.createRandomCandidateDocuments = async (connection, tenants, tenantCandidatesMap) => {
    var e_1, _a;
    if (!tenantCandidatesMap) {
        console.warn('Warning: tenantCandidatesMap not found, CandidateDocuments will not be created');
        return;
    }
    let candidateDocuments = [];
    const candidateDocumentsMap = new Map();
    try {
        for (var _b = tslib_1.__asyncValues(tenants || []), _c; _c = await _b.next(), !_c.done;) {
            const tenant = _c.value;
            const organizations = await connection.manager.find(organization_entity_1.Organization, {
                where: [{ tenant: tenant }]
            });
            const candidates = tenantCandidatesMap.get(tenant);
            (candidates || []).forEach((candidate) => {
                const documents = default_candidate_documents_1.DEFAULT_CANDIDATE_DOCUMENTS.map((document) => ({
                    name: document.name,
                    documentUrl: document.documentUrl,
                    candidateId: candidate.id,
                    organization: faker.random.arrayElement(organizations),
                    tenant: tenant
                }));
                candidateDocumentsMap.set(candidate, documents);
                candidateDocuments = [...candidateDocuments, ...documents];
            });
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) await _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    await insertCandidateDocuments(connection, candidateDocuments);
    return candidateDocumentsMap;
};
const insertCandidateDocuments = async (connection, candidateDocuments) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(candidate_documents_entity_1.CandidateDocument)
        .values(candidateDocuments)
        .execute();
};


/***/ }),

/***/ "./src/app/candidate-documents/candidate-documents.service.ts":
/*!********************************************************************!*\
  !*** ./src/app/candidate-documents/candidate-documents.service.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateDocumentsService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const candidate_documents_entity_1 = __webpack_require__(/*! ./candidate-documents.entity */ "./src/app/candidate-documents/candidate-documents.entity.ts");
let CandidateDocumentsService = class CandidateDocumentsService extends crud_service_1.CrudService {
    constructor(candidateDocumentRepository) {
        super(candidateDocumentRepository);
        this.candidateDocumentRepository = candidateDocumentRepository;
    }
};
CandidateDocumentsService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(candidate_documents_entity_1.CandidateDocument)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], CandidateDocumentsService);
exports.CandidateDocumentsService = CandidateDocumentsService;


/***/ }),

/***/ "./src/app/candidate-documents/default-candidate-documents.ts":
/*!********************************************************************!*\
  !*** ./src/app/candidate-documents/default-candidate-documents.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_CANDIDATE_DOCUMENTS = void 0;
exports.DEFAULT_CANDIDATE_DOCUMENTS = [
    {
        name: 'Document 1',
        documentUrl: 'http://res.cloudinary.com/evereq/image/upload/v1587742725/everbie-products-images/n07vjqa8pa8dfinkzqdy.pdf',
        tenant: {}
    },
    {
        name: 'Document 2',
        documentUrl: 'http://res.cloudinary.com/evereq/raw/upload/v1587742757/everbie-products-images/wxjghcvuysc3imrx7z2t.docx',
        tenant: {}
    }
];


/***/ }),

/***/ "./src/app/candidate-education/candidate-education.controller.ts":
/*!***********************************************************************!*\
  !*** ./src/app/candidate-education/candidate-education.controller.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateEducationController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const candidate_education_service_1 = __webpack_require__(/*! ./candidate-education.service */ "./src/app/candidate-education/candidate-education.service.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const candidate_education_entity_1 = __webpack_require__(/*! ./candidate-education.entity */ "./src/app/candidate-education/candidate-education.entity.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let CandidateEducationController = class CandidateEducationController extends crud_controller_1.CrudController {
    constructor(candidateEducationService) {
        super(candidateEducationService);
        this.candidateEducationService = candidateEducationService;
    }
    async findEducations(data) {
        const { findInput } = JSON.parse(data);
        return this.candidateEducationService.findAll({ where: findInput });
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all candidate education.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found candidate education',
        type: candidate_education_entity_1.CandidateEducation
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], CandidateEducationController.prototype, "findEducations", null);
CandidateEducationController = tslib_1.__decorate([
    swagger_1.ApiTags('CandidateEducation'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof candidate_education_service_1.CandidateEducationService !== "undefined" && candidate_education_service_1.CandidateEducationService) === "function" ? _b : Object])
], CandidateEducationController);
exports.CandidateEducationController = CandidateEducationController;


/***/ }),

/***/ "./src/app/candidate-education/candidate-education.entity.ts":
/*!*******************************************************************!*\
  !*** ./src/app/candidate-education/candidate-education.entity.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateEducation = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const candidate_entity_1 = __webpack_require__(/*! ../candidate/candidate.entity */ "./src/app/candidate/candidate.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let CandidateEducation = class CandidateEducation extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], CandidateEducation.prototype, "schoolName", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], CandidateEducation.prototype, "degree", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], CandidateEducation.prototype, "field", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", typeof (_a = typeof Date !== "undefined" && Date) === "function" ? _a : Object)
], CandidateEducation.prototype, "completionDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], CandidateEducation.prototype, "notes", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], CandidateEducation.prototype, "candidateId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => candidate_entity_1.Candidate, (candidate) => candidate.educations, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", typeof (_b = typeof models_1.ICandidate !== "undefined" && models_1.ICandidate) === "function" ? _b : Object)
], CandidateEducation.prototype, "candidate", void 0);
CandidateEducation = tslib_1.__decorate([
    typeorm_1.Entity('candidate_education')
], CandidateEducation);
exports.CandidateEducation = CandidateEducation;


/***/ }),

/***/ "./src/app/candidate-education/candidate-education.module.ts":
/*!*******************************************************************!*\
  !*** ./src/app/candidate-education/candidate-education.module.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateEducationModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const candidate_education_service_1 = __webpack_require__(/*! ./candidate-education.service */ "./src/app/candidate-education/candidate-education.service.ts");
const candidate_education_entity_1 = __webpack_require__(/*! ./candidate-education.entity */ "./src/app/candidate-education/candidate-education.entity.ts");
const candidate_education_controller_1 = __webpack_require__(/*! ./candidate-education.controller */ "./src/app/candidate-education/candidate-education.controller.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let CandidateEducationModule = class CandidateEducationModule {
};
CandidateEducationModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([candidate_education_entity_1.CandidateEducation]), tenant_module_1.TenantModule],
        providers: [candidate_education_service_1.CandidateEducationService],
        controllers: [candidate_education_controller_1.CandidateEducationController],
        exports: [candidate_education_service_1.CandidateEducationService]
    })
], CandidateEducationModule);
exports.CandidateEducationModule = CandidateEducationModule;


/***/ }),

/***/ "./src/app/candidate-education/candidate-education.seed.ts":
/*!*****************************************************************!*\
  !*** ./src/app/candidate-education/candidate-education.seed.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomCandidateEducations = exports.createCandidateEducations = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const candidate_education_entity_1 = __webpack_require__(/*! ./candidate-education.entity */ "./src/app/candidate-education/candidate-education.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const default_candidate_educations_1 = __webpack_require__(/*! ./default-candidate-educations */ "./src/app/candidate-education/default-candidate-educations.ts");
exports.createCandidateEducations = async (connection, candidates) => {
    let defaultCandidateEducation = [];
    if (!candidates) {
        console.warn('Warning: candidates not found, CandidateEducation will not be created');
        return;
    }
    candidates.forEach((candidate) => {
        const educations = default_candidate_educations_1.DEFAULT_CANDIDATE_EDUCATIONS.map((education) => ({
            schoolName: education.schoolName,
            degree: education.degree,
            completionDate: education.completionDate,
            field: education.field,
            candidateId: candidate.id,
            organization: candidate.organization,
            tenant: candidate.tenant,
            notes: faker.lorem.sentence()
        }));
        defaultCandidateEducation = [
            ...defaultCandidateEducation,
            ...educations
        ];
    });
    insertCandidateEducations(connection, defaultCandidateEducation);
    return defaultCandidateEducation;
};
exports.createRandomCandidateEducations = async (connection, tenants, tenantCandidatesMap) => {
    var e_1, _a;
    if (!tenantCandidatesMap) {
        console.warn('Warning: tenantCandidatesMap not found, CandidateEducation will not be created');
        return;
    }
    let candidateEducation = [];
    const candidateEducationsMap = new Map();
    try {
        for (var _b = tslib_1.__asyncValues(tenants || []), _c; _c = await _b.next(), !_c.done;) {
            const tenant = _c.value;
            const organizations = await connection.manager.find(organization_entity_1.Organization, {
                where: [{ tenant: tenant }]
            });
            const candidates = tenantCandidatesMap.get(tenant);
            (candidates || []).forEach((candidate) => {
                const educations = default_candidate_educations_1.DEFAULT_CANDIDATE_EDUCATIONS.map((education) => ({
                    schoolName: education.schoolName,
                    degree: education.degree,
                    completionDate: education.completionDate,
                    field: education.field,
                    candidateId: candidate.id,
                    organization: faker.random.arrayElement(organizations),
                    tenant: tenant,
                    notes: faker.lorem.sentence()
                }));
                candidateEducationsMap.set(candidate, educations);
                candidateEducation = [
                    ...default_candidate_educations_1.DEFAULT_CANDIDATE_EDUCATIONS,
                    ...educations
                ];
            });
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) await _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    await insertCandidateEducations(connection, candidateEducation);
    return candidateEducationsMap;
};
const insertCandidateEducations = async (connection, educations) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(candidate_education_entity_1.CandidateEducation)
        .values(educations)
        .execute();
};


/***/ }),

/***/ "./src/app/candidate-education/candidate-education.service.ts":
/*!********************************************************************!*\
  !*** ./src/app/candidate-education/candidate-education.service.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateEducationService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const candidate_education_entity_1 = __webpack_require__(/*! ./candidate-education.entity */ "./src/app/candidate-education/candidate-education.entity.ts");
let CandidateEducationService = class CandidateEducationService extends crud_service_1.CrudService {
    constructor(candidateEducationRepository) {
        super(candidateEducationRepository);
        this.candidateEducationRepository = candidateEducationRepository;
    }
};
CandidateEducationService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(candidate_education_entity_1.CandidateEducation)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], CandidateEducationService);
exports.CandidateEducationService = CandidateEducationService;


/***/ }),

/***/ "./src/app/candidate-education/default-candidate-educations.ts":
/*!*********************************************************************!*\
  !*** ./src/app/candidate-education/default-candidate-educations.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_CANDIDATE_EDUCATIONS = void 0;
exports.DEFAULT_CANDIDATE_EDUCATIONS = [
    {
        schoolName: 'MIT',
        degree: 'Master',
        completionDate: new Date(2017, 4, 4),
        field: 'Computer Science'
    }
];


/***/ }),

/***/ "./src/app/candidate-experience/candidate-experience.controller.ts":
/*!*************************************************************************!*\
  !*** ./src/app/candidate-experience/candidate-experience.controller.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateExperienceController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const candidate_experience_service_1 = __webpack_require__(/*! ./candidate-experience.service */ "./src/app/candidate-experience/candidate-experience.service.ts");
const candidate_experience_entity_1 = __webpack_require__(/*! ./candidate-experience.entity */ "./src/app/candidate-experience/candidate-experience.entity.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let CandidateExperienceController = class CandidateExperienceController extends crud_controller_1.CrudController {
    constructor(candidateExperienceService) {
        super(candidateExperienceService);
        this.candidateExperienceService = candidateExperienceService;
    }
    async findExperience(data) {
        const { findInput, relations } = JSON.parse(data);
        return this.candidateExperienceService.findAll({
            where: findInput,
            relations
        });
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all candidate experience.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found candidate experience',
        type: candidate_experience_entity_1.CandidateExperience
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], CandidateExperienceController.prototype, "findExperience", null);
CandidateExperienceController = tslib_1.__decorate([
    swagger_1.ApiTags('CandidateExperience'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof candidate_experience_service_1.CandidateExperienceService !== "undefined" && candidate_experience_service_1.CandidateExperienceService) === "function" ? _b : Object])
], CandidateExperienceController);
exports.CandidateExperienceController = CandidateExperienceController;


/***/ }),

/***/ "./src/app/candidate-experience/candidate-experience.entity.ts":
/*!*********************************************************************!*\
  !*** ./src/app/candidate-experience/candidate-experience.entity.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateExperience = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const candidate_entity_1 = __webpack_require__(/*! ../candidate/candidate.entity */ "./src/app/candidate/candidate.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let CandidateExperience = class CandidateExperience extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], CandidateExperience.prototype, "occupation", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], CandidateExperience.prototype, "duration", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], CandidateExperience.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], CandidateExperience.prototype, "candidateId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => candidate_entity_1.Candidate, (candidate) => candidate.experience, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.ICandidate !== "undefined" && models_1.ICandidate) === "function" ? _a : Object)
], CandidateExperience.prototype, "candidate", void 0);
CandidateExperience = tslib_1.__decorate([
    typeorm_1.Entity('candidate_experience')
], CandidateExperience);
exports.CandidateExperience = CandidateExperience;


/***/ }),

/***/ "./src/app/candidate-experience/candidate-experience.module.ts":
/*!*********************************************************************!*\
  !*** ./src/app/candidate-experience/candidate-experience.module.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateExperienceModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const candidate_experience_entity_1 = __webpack_require__(/*! ./candidate-experience.entity */ "./src/app/candidate-experience/candidate-experience.entity.ts");
const candidate_experience_service_1 = __webpack_require__(/*! ./candidate-experience.service */ "./src/app/candidate-experience/candidate-experience.service.ts");
const candidate_experience_controller_1 = __webpack_require__(/*! ./candidate-experience.controller */ "./src/app/candidate-experience/candidate-experience.controller.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let CandidateExperienceModule = class CandidateExperienceModule {
};
CandidateExperienceModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([candidate_experience_entity_1.CandidateExperience]), tenant_module_1.TenantModule],
        providers: [candidate_experience_service_1.CandidateExperienceService],
        controllers: [candidate_experience_controller_1.CandidateExperienceController],
        exports: [candidate_experience_service_1.CandidateExperienceService]
    })
], CandidateExperienceModule);
exports.CandidateExperienceModule = CandidateExperienceModule;


/***/ }),

/***/ "./src/app/candidate-experience/candidate-experience.seed.ts":
/*!*******************************************************************!*\
  !*** ./src/app/candidate-experience/candidate-experience.seed.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomCandidateExperience = void 0;
const faker = __webpack_require__(/*! faker */ "faker");
const candidate_experience_entity_1 = __webpack_require__(/*! ./candidate-experience.entity */ "./src/app/candidate-experience/candidate-experience.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
exports.createRandomCandidateExperience = async (connection, tenants, tenantCandidatesMap) => {
    if (!tenantCandidatesMap) {
        console.warn('Warning: tenantCandidatesMap not found, CandidateExperience will not be created');
        return;
    }
    const candidateExperiences = [];
    for (const tenant of tenants) {
        const tenantCandidates = tenantCandidatesMap.get(tenant);
        const organizations = await connection.manager.find(organization_entity_1.Organization, {
            where: [{ tenant: tenant }]
        });
        for (const tenantCandidate of tenantCandidates) {
            for (let i = 0; i <= Math.floor(Math.random() * 3) + 1; i++) {
                const candidateExperience = new candidate_experience_entity_1.CandidateExperience();
                let getExperience = (faker.date.past().getDate() -
                    faker.date.past().getDate()) /
                    30 +
                    faker.date.past().getMonth() -
                    faker.date.past().getMonth() +
                    12 *
                        (faker.date.past().getFullYear() -
                            faker.date.past().getFullYear());
                getExperience = Number(getExperience.toFixed(2));
                const val = Math.abs(getExperience);
                candidateExperience.occupation = faker.name.jobArea();
                candidateExperience.organization = faker.random.arrayElement(organizations);
                candidateExperience.duration =
                    val.toString().split('.')[0].toString() + ' months';
                candidateExperience.description = faker.lorem.words();
                candidateExperience.candidateId = tenantCandidate.id;
                candidateExperience.candidate = tenantCandidate;
                candidateExperience.tenant = tenant;
                candidateExperiences.push(candidateExperience);
            }
        }
    }
    return await insertRandomCandidateExperience(connection, candidateExperiences);
};
const insertRandomCandidateExperience = async (connection, candidateExperiences) => {
    return await connection.manager.save(candidateExperiences);
};


/***/ }),

/***/ "./src/app/candidate-experience/candidate-experience.service.ts":
/*!**********************************************************************!*\
  !*** ./src/app/candidate-experience/candidate-experience.service.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateExperienceService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const candidate_experience_entity_1 = __webpack_require__(/*! ./candidate-experience.entity */ "./src/app/candidate-experience/candidate-experience.entity.ts");
let CandidateExperienceService = class CandidateExperienceService extends crud_service_1.CrudService {
    constructor(candidateExperienceRepository) {
        super(candidateExperienceRepository);
        this.candidateExperienceRepository = candidateExperienceRepository;
    }
};
CandidateExperienceService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(candidate_experience_entity_1.CandidateExperience)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], CandidateExperienceService);
exports.CandidateExperienceService = CandidateExperienceService;


/***/ }),

/***/ "./src/app/candidate-feedbacks/candidate-feedbacks.controller.ts":
/*!***********************************************************************!*\
  !*** ./src/app/candidate-feedbacks/candidate-feedbacks.controller.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateFeedbacksController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const candidate_feedbacks_entity_1 = __webpack_require__(/*! ./candidate-feedbacks.entity */ "./src/app/candidate-feedbacks/candidate-feedbacks.entity.ts");
const candidate_feedbacks_service_1 = __webpack_require__(/*! ./candidate-feedbacks.service */ "./src/app/candidate-feedbacks/candidate-feedbacks.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const candidate_feedbacks_update_command_1 = __webpack_require__(/*! ./commands/candidate-feedbacks.update.command */ "./src/app/candidate-feedbacks/commands/candidate-feedbacks.update.command.ts");
const candidate_feedbacks_delete_command_1 = __webpack_require__(/*! ./commands/candidate-feedbacks.delete.command */ "./src/app/candidate-feedbacks/commands/candidate-feedbacks.delete.command.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let CandidateFeedbacksController = class CandidateFeedbacksController extends crud_controller_1.CrudController {
    constructor(candidateFeedbacksService, commandBus) {
        super(candidateFeedbacksService);
        this.candidateFeedbacksService = candidateFeedbacksService;
        this.commandBus = commandBus;
    }
    async findFeedback(data) {
        const { relations = [], findInput = null } = data;
        return this.candidateFeedbacksService.findAll({
            where: findInput,
            relations
        });
    }
    async findById(id) {
        return this.candidateFeedbacksService.findOne(id);
    }
    async findByInterviewId(interviewId) {
        return this.candidateFeedbacksService.getFeedbacksByInterviewId(interviewId);
    }
    async createFeedBack(entity) {
        return this.candidateFeedbacksService.create(entity);
    }
    async updateCandidateFeedback(id, entity) {
        return this.commandBus.execute(new candidate_feedbacks_update_command_1.FeedbackUpdateCommand(id, entity));
    }
    async deleteFeedback(data) {
        const { feedbackId = null, interviewId = null } = data;
        return this.commandBus.execute(new candidate_feedbacks_delete_command_1.FeedbackDeleteCommand(feedbackId, interviewId));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all candidate feedback.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found candidate feedback',
        type: candidate_feedbacks_entity_1.CandidateFeedback
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], CandidateFeedbacksController.prototype, "findFeedback", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find candidate feedback by id'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found candidate feedback',
        type: candidate_feedbacks_entity_1.CandidateFeedback
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], CandidateFeedbacksController.prototype, "findById", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find feedbacks By Interview Id.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found candidate feedbacks',
        type: candidate_feedbacks_entity_1.CandidateFeedback
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    common_1.Get('getByInterviewId/:interviewId'),
    tslib_1.__param(0, common_1.Param('interviewId')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], CandidateFeedbacksController.prototype, "findByInterviewId", null);
tslib_1.__decorate([
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_CANDIDATES_FEEDBACK_EDIT),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof models_1.ICandidateFeedbackCreateInput !== "undefined" && models_1.ICandidateFeedbackCreateInput) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], CandidateFeedbacksController.prototype, "createFeedBack", null);
tslib_1.__decorate([
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_CANDIDATES_FEEDBACK_EDIT),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], CandidateFeedbacksController.prototype, "updateCandidateFeedback", null);
tslib_1.__decorate([
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_CANDIDATES_FEEDBACK_EDIT),
    common_1.Delete('deleteFeedback'),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], CandidateFeedbacksController.prototype, "deleteFeedback", null);
CandidateFeedbacksController = tslib_1.__decorate([
    swagger_1.ApiTags('CandidateFeedback'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_h = typeof candidate_feedbacks_service_1.CandidateFeedbacksService !== "undefined" && candidate_feedbacks_service_1.CandidateFeedbacksService) === "function" ? _h : Object, typeof (_j = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _j : Object])
], CandidateFeedbacksController);
exports.CandidateFeedbacksController = CandidateFeedbacksController;


/***/ }),

/***/ "./src/app/candidate-feedbacks/candidate-feedbacks.entity.ts":
/*!*******************************************************************!*\
  !*** ./src/app/candidate-feedbacks/candidate-feedbacks.entity.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateFeedback = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const candidate_interviewers_entity_1 = __webpack_require__(/*! ../candidate-interviewers/candidate-interviewers.entity */ "./src/app/candidate-interviewers/candidate-interviewers.entity.ts");
const candidate_criterion_rating_entity_1 = __webpack_require__(/*! ../candidate-criterions-rating/candidate-criterion-rating.entity */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.entity.ts");
const candidate_entity_1 = __webpack_require__(/*! ../candidate/candidate.entity */ "./src/app/candidate/candidate.entity.ts");
const candidate_interview_entity_1 = __webpack_require__(/*! ../candidate-interview/candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let CandidateFeedback = class CandidateFeedback extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], CandidateFeedback.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], CandidateFeedback.prototype, "candidateId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Number }),
    typeorm_1.Column({ nullable: true, type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], CandidateFeedback.prototype, "rating", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], CandidateFeedback.prototype, "interviewId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.CandidateStatus }),
    class_validator_1.IsEnum(models_1.CandidateStatus),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], CandidateFeedback.prototype, "status", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: candidate_interviewers_entity_1.CandidateInterviewers }),
    typeorm_1.OneToOne((type) => candidate_interviewers_entity_1.CandidateInterviewers),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.ICandidateInterviewers !== "undefined" && models_1.ICandidateInterviewers) === "function" ? _a : Object)
], CandidateFeedback.prototype, "interviewer", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany((type) => candidate_criterion_rating_entity_1.CandidateCriterionsRating, (criterionsRating) => criterionsRating.feedback, {
        cascade: true
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], CandidateFeedback.prototype, "criterionsRating", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => candidate_interview_entity_1.CandidateInterview, (candidateInterview) => candidateInterview.feedbacks, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", typeof (_b = typeof models_1.ICandidateInterview !== "undefined" && models_1.ICandidateInterview) === "function" ? _b : Object)
], CandidateFeedback.prototype, "interview", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => candidate_entity_1.Candidate, (candidate) => candidate.feedbacks, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", typeof (_c = typeof models_1.ICandidate !== "undefined" && models_1.ICandidate) === "function" ? _c : Object)
], CandidateFeedback.prototype, "candidate", void 0);
CandidateFeedback = tslib_1.__decorate([
    typeorm_1.Entity('candidate_feedback')
], CandidateFeedback);
exports.CandidateFeedback = CandidateFeedback;


/***/ }),

/***/ "./src/app/candidate-feedbacks/candidate-feedbacks.module.ts":
/*!*******************************************************************!*\
  !*** ./src/app/candidate-feedbacks/candidate-feedbacks.module.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateFeedbacksModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const candidate_feedbacks_entity_1 = __webpack_require__(/*! ./candidate-feedbacks.entity */ "./src/app/candidate-feedbacks/candidate-feedbacks.entity.ts");
const candidate_feedbacks_service_1 = __webpack_require__(/*! ./candidate-feedbacks.service */ "./src/app/candidate-feedbacks/candidate-feedbacks.service.ts");
const candidate_feedbacks_controller_1 = __webpack_require__(/*! ./candidate-feedbacks.controller */ "./src/app/candidate-feedbacks/candidate-feedbacks.controller.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/candidate-feedbacks/commands/handlers/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const candidate_interview_service_1 = __webpack_require__(/*! ../candidate-interview/candidate-interview.service */ "./src/app/candidate-interview/candidate-interview.service.ts");
const candidate_interview_entity_1 = __webpack_require__(/*! ../candidate-interview/candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let CandidateFeedbacksModule = class CandidateFeedbacksModule {
};
CandidateFeedbacksModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([candidate_feedbacks_entity_1.CandidateFeedback, user_entity_1.User, candidate_interview_entity_1.CandidateInterview]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        providers: [
            candidate_feedbacks_service_1.CandidateFeedbacksService,
            user_service_1.UserService,
            ...handlers_1.CommandHandlers,
            candidate_interview_service_1.CandidateInterviewService
        ],
        controllers: [candidate_feedbacks_controller_1.CandidateFeedbacksController],
        exports: [candidate_feedbacks_service_1.CandidateFeedbacksService]
    })
], CandidateFeedbacksModule);
exports.CandidateFeedbacksModule = CandidateFeedbacksModule;


/***/ }),

/***/ "./src/app/candidate-feedbacks/candidate-feedbacks.seed.ts":
/*!*****************************************************************!*\
  !*** ./src/app/candidate-feedbacks/candidate-feedbacks.seed.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomCandidateFeedbacks = exports.createCandidateFeedbacks = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const candidate_feedbacks_entity_1 = __webpack_require__(/*! ./candidate-feedbacks.entity */ "./src/app/candidate-feedbacks/candidate-feedbacks.entity.ts");
const candidate_interview_entity_1 = __webpack_require__(/*! ../candidate-interview/candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const default_candidate_feedbacks_1 = __webpack_require__(/*! ./default-candidate-feedbacks */ "./src/app/candidate-feedbacks/default-candidate-feedbacks.ts");
exports.createCandidateFeedbacks = async (connection, tenant, organization, candidates) => {
    let candidateFeedbacksMap = new Map();
    if (!candidates) {
        console.warn('Warning: candidates not found, CandidateFeedbacks will not be created');
        return;
    }
    candidateFeedbacksMap = await dataOperation(connection, tenant, organization, [], candidateFeedbacksMap, candidates);
    return candidateFeedbacksMap;
};
exports.createRandomCandidateFeedbacks = async (connection, tenants, tenantCandidatesMap) => {
    if (!tenantCandidatesMap) {
        console.warn('Warning: tenantCandidatesMap not found, CandidateFeedbacks will not be created');
        return;
    }
    const candidateFeedbacks = [];
    let candidateFeedbacksMap = new Map();
    for (const tenant of tenants) {
        const organizations = await connection.manager.find(organization_entity_1.Organization, {
            where: [{ tenant: tenant }]
        });
        const organization = faker.random.arrayElement(organizations);
        const candidates = tenantCandidatesMap.get(tenant);
        candidateFeedbacksMap = await dataOperation(connection, tenant, organization, candidateFeedbacks, candidateFeedbacksMap, candidates);
    }
    return candidateFeedbacksMap;
};
const insertCandidateFeedbacks = async (connection, candidateFeedbacks) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(candidate_feedbacks_entity_1.CandidateFeedback)
        .values(candidateFeedbacks)
        .execute();
};
const dataOperation = async (connection, tenant, organization, candidateFeedbacks, candidateFeedbacksMap, candidates) => {
    for (const candidate of candidates) {
        const candidateInterviews = await connection.manager.find(candidate_interview_entity_1.CandidateInterview, { where: [{ candidate: candidate }] });
        const interview = faker.random.arrayElement(candidateInterviews);
        const feedbacks = default_candidate_feedbacks_1.DEFAULT_CANDIDATE_FEEDBACKS.map((feedback) => ({
            description: feedback.description,
            rating: feedback.rating,
            candidateId: candidate.id,
            interviewId: interview.id,
            tenant: tenant,
            organization: organization,
            status: faker.random.arrayElement(Object.keys(models_1.CandidateStatus))
        }));
        candidateFeedbacksMap.set(candidate, feedbacks);
        candidateFeedbacks = [...candidateFeedbacks, ...feedbacks];
    }
    await insertCandidateFeedbacks(connection, candidateFeedbacks);
    return candidateFeedbacksMap;
};


/***/ }),

/***/ "./src/app/candidate-feedbacks/candidate-feedbacks.service.ts":
/*!********************************************************************!*\
  !*** ./src/app/candidate-feedbacks/candidate-feedbacks.service.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateFeedbacksService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const candidate_feedbacks_entity_1 = __webpack_require__(/*! ./candidate-feedbacks.entity */ "./src/app/candidate-feedbacks/candidate-feedbacks.entity.ts");
let CandidateFeedbacksService = class CandidateFeedbacksService extends crud_service_1.CrudService {
    constructor(candidateFeedbackRepository) {
        super(candidateFeedbackRepository);
        this.candidateFeedbackRepository = candidateFeedbackRepository;
    }
    async getFeedbacksByInterviewId(interviewId) {
        return await this.repository
            .createQueryBuilder('candidate_feedback')
            .where('candidate_feedback.interviewId = :interviewId', {
            interviewId
        })
            .getMany();
    }
    calcRating(feedbacks) {
        const rate = [];
        feedbacks.forEach((fb) => {
            rate.push(Number(fb.rating));
        });
        const fbSum = rate.reduce((sum, current) => {
            return sum + current;
        });
        return fbSum / feedbacks.length;
    }
};
CandidateFeedbacksService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(candidate_feedbacks_entity_1.CandidateFeedback)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], CandidateFeedbacksService);
exports.CandidateFeedbacksService = CandidateFeedbacksService;


/***/ }),

/***/ "./src/app/candidate-feedbacks/commands/candidate-feedbacks.delete.command.ts":
/*!************************************************************************************!*\
  !*** ./src/app/candidate-feedbacks/commands/candidate-feedbacks.delete.command.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedbackDeleteCommand = void 0;
class FeedbackDeleteCommand {
    constructor(feedbackId, interviewId) {
        this.feedbackId = feedbackId;
        this.interviewId = interviewId;
    }
}
exports.FeedbackDeleteCommand = FeedbackDeleteCommand;
FeedbackDeleteCommand.type = '[Feedback] Delete';


/***/ }),

/***/ "./src/app/candidate-feedbacks/commands/candidate-feedbacks.update.command.ts":
/*!************************************************************************************!*\
  !*** ./src/app/candidate-feedbacks/commands/candidate-feedbacks.update.command.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedbackUpdateCommand = void 0;
class FeedbackUpdateCommand {
    constructor(id, entity) {
        this.id = id;
        this.entity = entity;
    }
}
exports.FeedbackUpdateCommand = FeedbackUpdateCommand;
FeedbackUpdateCommand.type = '[Feedback] Update';


/***/ }),

/***/ "./src/app/candidate-feedbacks/commands/handlers/candidate-feedbacks.delete.handler.ts":
/*!*********************************************************************************************!*\
  !*** ./src/app/candidate-feedbacks/commands/handlers/candidate-feedbacks.delete.handler.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedbackDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const candidate_feedbacks_delete_command_1 = __webpack_require__(/*! ../candidate-feedbacks.delete.command */ "./src/app/candidate-feedbacks/commands/candidate-feedbacks.delete.command.ts");
const candidate_feedbacks_service_1 = __webpack_require__(/*! ../../candidate-feedbacks.service */ "./src/app/candidate-feedbacks/candidate-feedbacks.service.ts");
const candidate_interview_service_1 = __webpack_require__(/*! ../../../candidate-interview/candidate-interview.service */ "./src/app/candidate-interview/candidate-interview.service.ts");
let FeedbackDeleteHandler = class FeedbackDeleteHandler {
    constructor(candidateFeedbackService, candidateInterviewService) {
        this.candidateFeedbackService = candidateFeedbackService;
        this.candidateInterviewService = candidateInterviewService;
    }
    async execute(command) {
        const { feedbackId, interviewId } = command;
        const feedback = await this.deleteFeedback(feedbackId);
        if (feedback && interviewId) {
            const id = interviewId;
            const feedbacks = await this.candidateFeedbackService.getFeedbacksByInterviewId(id);
            let interviewRating;
            if (feedbacks.length > 0) {
                interviewRating = this.candidateFeedbackService.calcRating(feedbacks);
                await this.candidateInterviewService.create({
                    id: id,
                    rating: interviewRating
                });
            }
            else {
                await this.candidateInterviewService.create({
                    id: id,
                    rating: 0
                });
            }
            return;
        }
    }
    async deleteFeedback(id) {
        return this.candidateFeedbackService.delete(id);
    }
};
FeedbackDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(candidate_feedbacks_delete_command_1.FeedbackDeleteCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof candidate_feedbacks_service_1.CandidateFeedbacksService !== "undefined" && candidate_feedbacks_service_1.CandidateFeedbacksService) === "function" ? _a : Object, typeof (_b = typeof candidate_interview_service_1.CandidateInterviewService !== "undefined" && candidate_interview_service_1.CandidateInterviewService) === "function" ? _b : Object])
], FeedbackDeleteHandler);
exports.FeedbackDeleteHandler = FeedbackDeleteHandler;


/***/ }),

/***/ "./src/app/candidate-feedbacks/commands/handlers/candidate-feedbacks.update.handler.ts":
/*!*********************************************************************************************!*\
  !*** ./src/app/candidate-feedbacks/commands/handlers/candidate-feedbacks.update.handler.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedbackUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const candidate_feedbacks_update_command_1 = __webpack_require__(/*! ../candidate-feedbacks.update.command */ "./src/app/candidate-feedbacks/commands/candidate-feedbacks.update.command.ts");
const candidate_feedbacks_service_1 = __webpack_require__(/*! ../../candidate-feedbacks.service */ "./src/app/candidate-feedbacks/candidate-feedbacks.service.ts");
const candidate_interview_service_1 = __webpack_require__(/*! ../../../candidate-interview/candidate-interview.service */ "./src/app/candidate-interview/candidate-interview.service.ts");
let FeedbackUpdateHandler = class FeedbackUpdateHandler {
    constructor(candidateFeedbackService, candidateInterviewService) {
        this.candidateFeedbackService = candidateFeedbackService;
        this.candidateInterviewService = candidateInterviewService;
    }
    async execute(command) {
        const { id } = command;
        const { entity } = command;
        const feedback = await this.updateFeedback(id, entity);
        const interviewId = entity.interviewer.interviewId;
        if (feedback) {
            const feedbacks = await this.candidateFeedbackService.getFeedbacksByInterviewId(interviewId);
            let interviewRating;
            if (feedbacks.length > 0) {
                interviewRating = this.candidateFeedbackService.calcRating(feedbacks);
                await this.candidateInterviewService.create({
                    id: interviewId,
                    rating: interviewRating
                });
            }
            return feedback;
        }
    }
    async updateFeedback(id, entity) {
        return this.candidateFeedbackService.create(Object.assign({ id: id }, entity));
    }
};
FeedbackUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(candidate_feedbacks_update_command_1.FeedbackUpdateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof candidate_feedbacks_service_1.CandidateFeedbacksService !== "undefined" && candidate_feedbacks_service_1.CandidateFeedbacksService) === "function" ? _a : Object, typeof (_b = typeof candidate_interview_service_1.CandidateInterviewService !== "undefined" && candidate_interview_service_1.CandidateInterviewService) === "function" ? _b : Object])
], FeedbackUpdateHandler);
exports.FeedbackUpdateHandler = FeedbackUpdateHandler;


/***/ }),

/***/ "./src/app/candidate-feedbacks/commands/handlers/index.ts":
/*!****************************************************************!*\
  !*** ./src/app/candidate-feedbacks/commands/handlers/index.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const candidate_feedbacks_delete_handler_1 = __webpack_require__(/*! ./candidate-feedbacks.delete.handler */ "./src/app/candidate-feedbacks/commands/handlers/candidate-feedbacks.delete.handler.ts");
const candidate_feedbacks_update_handler_1 = __webpack_require__(/*! ./candidate-feedbacks.update.handler */ "./src/app/candidate-feedbacks/commands/handlers/candidate-feedbacks.update.handler.ts");
exports.CommandHandlers = [candidate_feedbacks_delete_handler_1.FeedbackDeleteHandler, candidate_feedbacks_update_handler_1.FeedbackUpdateHandler];


/***/ }),

/***/ "./src/app/candidate-feedbacks/default-candidate-feedbacks.ts":
/*!********************************************************************!*\
  !*** ./src/app/candidate-feedbacks/default-candidate-feedbacks.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_CANDIDATE_FEEDBACKS = void 0;
exports.DEFAULT_CANDIDATE_FEEDBACKS = [
    {
        description: 'Feedback 1',
        rating: 4
    },
    {
        description: 'Feedback 2',
        rating: 3
    }
];


/***/ }),

/***/ "./src/app/candidate-interview/candidate-interview.controller.ts":
/*!***********************************************************************!*\
  !*** ./src/app/candidate-interview/candidate-interview.controller.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateInterviewController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const candidate_interview_entity_1 = __webpack_require__(/*! ./candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
const candidate_interview_service_1 = __webpack_require__(/*! ./candidate-interview.service */ "./src/app/candidate-interview/candidate-interview.service.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let CandidateInterviewController = class CandidateInterviewController extends crud_controller_1.CrudController {
    constructor(candidateInterviewService) {
        super(candidateInterviewService);
        this.candidateInterviewService = candidateInterviewService;
    }
    async findInterview(data) {
        const { relations = [], findInput = null } = data;
        return this.candidateInterviewService.findAll({
            where: findInput,
            relations
        });
    }
    async createInterview(entity) {
        return this.candidateInterviewService.create(entity);
    }
    async updateInterview(id, entity) {
        return this.candidateInterviewService.updateInterview(id, Object.assign({}, entity));
    }
    async findById(id) {
        return this.candidateInterviewService.findOne(id);
    }
    async findByCandidateId(id) {
        return this.candidateInterviewService.findByCandidateId(id);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all candidate interview.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found candidate interview',
        type: candidate_interview_entity_1.CandidateInterview
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], CandidateInterviewController.prototype, "findInterview", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Create new record interview'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Success Add Interview',
        type: candidate_interview_entity_1.CandidateInterview
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_CANDIDATES_INTERVIEW_EDIT),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof models_1.ICandidateInterviewCreateInput !== "undefined" && models_1.ICandidateInterviewCreateInput) === "function" ? _b : Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], CandidateInterviewController.prototype, "createInterview", null);
tslib_1.__decorate([
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_CANDIDATES_INTERVIEW_EDIT),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param()),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], CandidateInterviewController.prototype, "updateInterview", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find interview by id' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found interview',
        type: candidate_interview_entity_1.CandidateInterview
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_CANDIDATES_INTERVIEW_EDIT),
    common_1.Get(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], CandidateInterviewController.prototype, "findById", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find interview by candidate id' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found interview',
        type: candidate_interview_entity_1.CandidateInterview
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_CANDIDATES_INTERVIEW_EDIT),
    common_1.Get('findByCandidateId/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], CandidateInterviewController.prototype, "findByCandidateId", null);
CandidateInterviewController = tslib_1.__decorate([
    swagger_1.ApiTags('CandidateInterview'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_g = typeof candidate_interview_service_1.CandidateInterviewService !== "undefined" && candidate_interview_service_1.CandidateInterviewService) === "function" ? _g : Object])
], CandidateInterviewController);
exports.CandidateInterviewController = CandidateInterviewController;


/***/ }),

/***/ "./src/app/candidate-interview/candidate-interview.entity.ts":
/*!*******************************************************************!*\
  !*** ./src/app/candidate-interview/candidate-interview.entity.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateInterview = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const candidate_personal_qualities_entity_1 = __webpack_require__(/*! ./../candidate-personal-qualities/candidate-personal-qualities.entity */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.entity.ts");
const candidate_technologies_entity_1 = __webpack_require__(/*! ./../candidate-technologies/candidate-technologies.entity */ "./src/app/candidate-technologies/candidate-technologies.entity.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const candidate_interviewers_entity_1 = __webpack_require__(/*! ../candidate-interviewers/candidate-interviewers.entity */ "./src/app/candidate-interviewers/candidate-interviewers.entity.ts");
const candidate_feedbacks_entity_1 = __webpack_require__(/*! ../candidate-feedbacks/candidate-feedbacks.entity */ "./src/app/candidate-feedbacks/candidate-feedbacks.entity.ts");
const candidate_entity_1 = __webpack_require__(/*! ../candidate/candidate.entity */ "./src/app/candidate/candidate.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let CandidateInterview = class CandidateInterview extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], CandidateInterview.prototype, "title", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_a = typeof Date !== "undefined" && Date) === "function" ? _a : Object)
], CandidateInterview.prototype, "startTime", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], CandidateInterview.prototype, "endTime", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], CandidateInterview.prototype, "candidateId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], CandidateInterview.prototype, "location", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], CandidateInterview.prototype, "note", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean, default: false }),
    typeorm_1.Column({ nullable: true, default: false }),
    tslib_1.__metadata("design:type", Boolean)
], CandidateInterview.prototype, "isArchived", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Number }),
    typeorm_1.Column({ nullable: true, type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], CandidateInterview.prototype, "rating", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany(() => candidate_feedbacks_entity_1.CandidateFeedback, (feedback) => feedback.interview, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], CandidateInterview.prototype, "feedbacks", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany(() => candidate_technologies_entity_1.CandidateTechnologies, (technologies) => technologies.interview, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], CandidateInterview.prototype, "technologies", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany(() => candidate_personal_qualities_entity_1.CandidatePersonalQualities, (personalQualities) => personalQualities.interview, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], CandidateInterview.prototype, "personalQualities", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany(() => candidate_interviewers_entity_1.CandidateInterviewers, (interviewers) => interviewers.interview, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], CandidateInterview.prototype, "interviewers", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => candidate_entity_1.Candidate, (candidate) => candidate.interview, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", typeof (_c = typeof models_1.ICandidate !== "undefined" && models_1.ICandidate) === "function" ? _c : Object)
], CandidateInterview.prototype, "candidate", void 0);
CandidateInterview = tslib_1.__decorate([
    typeorm_1.Entity('candidate_interview')
], CandidateInterview);
exports.CandidateInterview = CandidateInterview;


/***/ }),

/***/ "./src/app/candidate-interview/candidate-interview.module.ts":
/*!*******************************************************************!*\
  !*** ./src/app/candidate-interview/candidate-interview.module.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateInterviewModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const candidate_interview_service_1 = __webpack_require__(/*! ./candidate-interview.service */ "./src/app/candidate-interview/candidate-interview.service.ts");
const candidate_interview_controller_1 = __webpack_require__(/*! ./candidate-interview.controller */ "./src/app/candidate-interview/candidate-interview.controller.ts");
const candidate_interview_entity_1 = __webpack_require__(/*! ./candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let CandidateInterviewModule = class CandidateInterviewModule {
};
CandidateInterviewModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([candidate_interview_entity_1.CandidateInterview, user_entity_1.User]),
            tenant_module_1.TenantModule
        ],
        providers: [candidate_interview_service_1.CandidateInterviewService, user_service_1.UserService],
        controllers: [candidate_interview_controller_1.CandidateInterviewController],
        exports: [candidate_interview_service_1.CandidateInterviewService]
    })
], CandidateInterviewModule);
exports.CandidateInterviewModule = CandidateInterviewModule;


/***/ }),

/***/ "./src/app/candidate-interview/candidate-interview.seed.ts":
/*!*****************************************************************!*\
  !*** ./src/app/candidate-interview/candidate-interview.seed.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomCandidateInterview = exports.createDefaultCandidateInterview = void 0;
const faker = __webpack_require__(/*! faker */ "faker");
const candidate_interview_entity_1 = __webpack_require__(/*! ./candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
exports.createDefaultCandidateInterview = async (connection, tenant, organization, candidates) => {
    if (!candidates) {
        console.warn('Warning: Candidates not found, Default Candidate Interview will not be created');
        return;
    }
    let candidateInterviewes = [];
    for (const tenantCandidate of candidates) {
        candidateInterviewes = await dataOperation(connection, candidateInterviewes, tenantCandidate, tenant, organization);
    }
    return candidateInterviewes;
};
exports.createRandomCandidateInterview = async (connection, tenants, tenantCandidatesMap) => {
    if (!tenantCandidatesMap) {
        console.warn('Warning: tenantCandidatesMap not found, CandidateInterview will not be created');
        return;
    }
    let candidates = [];
    for (const tenant of tenants) {
        const organizations = await connection.manager.find(organization_entity_1.Organization, {
            where: [{ tenant: tenant }]
        });
        const organization = faker.random.arrayElement(organizations);
        const tenantCandidates = tenantCandidatesMap.get(tenant);
        for (const tenantCandidate of tenantCandidates) {
            candidates = await dataOperation(connection, candidates, tenantCandidate, tenant, organization);
        }
    }
    return candidates;
};
const dataOperation = async (connection, candidates, tenantCandidate, tenant, organization) => {
    for (let i = 0; i <= Math.floor(Math.random() * 3) + 1; i++) {
        const candidate = new candidate_interview_entity_1.CandidateInterview();
        const interViewDate = faker.date.past();
        candidate.title = faker.name.jobArea();
        candidate.startTime = new Date(interViewDate.setHours(10));
        candidate.endTime = new Date(interViewDate.setHours(12));
        candidate.location = faker.address.city();
        candidate.note = faker.lorem.words();
        candidate.candidate = tenantCandidate;
        candidate.tenant = tenant;
        candidate.organization = organization;
        candidates.push(candidate);
    }
    await connection.manager.save(candidates);
    return candidates;
};


/***/ }),

/***/ "./src/app/candidate-interview/candidate-interview.service.ts":
/*!********************************************************************!*\
  !*** ./src/app/candidate-interview/candidate-interview.service.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateInterviewService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const candidate_interview_entity_1 = __webpack_require__(/*! ./candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
let CandidateInterviewService = class CandidateInterviewService extends crud_service_1.CrudService {
    constructor(candidateInterviewRepository) {
        super(candidateInterviewRepository);
        this.candidateInterviewRepository = candidateInterviewRepository;
    }
    async findByCandidateId(candidateId) {
        return await this.repository
            .createQueryBuilder('candidate_interview')
            .where('candidate_interview.candidateId = :candidateId', {
            candidateId
        })
            .getMany();
    }
    async updateInterview(id, entity) {
        try {
            const interviewId = id['id'];
            const interview = await this.repository
                .createQueryBuilder('candidate_interview')
                .where('candidate_interview.id = :interviewId', {
                interviewId
            })
                .getOne();
            if (interview) {
                interview.rating =
                    entity.rating === interview.rating
                        ? interview.rating
                        : entity.rating;
                interview.isArchived =
                    entity.isArchived === interview.isArchived
                        ? interview.isArchived
                        : entity.isArchived;
                interview.note =
                    entity.note === interview.note
                        ? interview.note
                        : entity.note;
                interview.title =
                    entity.title === interview.title
                        ? interview.title
                        : entity.title;
                interview.location =
                    entity.location === interview.location
                        ? interview.location
                        : entity.location;
                interview.startTime =
                    entity.startTime === interview.startTime
                        ? interview.startTime
                        : entity.startTime;
                interview.endTime =
                    entity.endTime === interview.endTime
                        ? interview.endTime
                        : entity.endTime;
                return await this.repository.save(interview);
            }
        }
        catch (err) {
            throw new common_1.BadRequestException(err);
        }
    }
};
CandidateInterviewService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(candidate_interview_entity_1.CandidateInterview)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], CandidateInterviewService);
exports.CandidateInterviewService = CandidateInterviewService;


/***/ }),

/***/ "./src/app/candidate-interviewers/candidate-interviewers.controller.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/candidate-interviewers/candidate-interviewers.controller.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateInterviewersController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const candidate_interviewers_entity_1 = __webpack_require__(/*! ./candidate-interviewers.entity */ "./src/app/candidate-interviewers/candidate-interviewers.entity.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const candidate_interviewers_service_1 = __webpack_require__(/*! ./candidate-interviewers.service */ "./src/app/candidate-interviewers/candidate-interviewers.service.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/candidate-interviewers/commands/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let CandidateInterviewersController = class CandidateInterviewersController extends crud_controller_1.CrudController {
    constructor(candidateInterviewersService, commandBus) {
        super(candidateInterviewersService);
        this.candidateInterviewersService = candidateInterviewersService;
        this.commandBus = commandBus;
    }
    async findInterviewers(data) {
        const { findInput = null } = data;
        return this.candidateInterviewersService.findAll({ where: findInput });
    }
    async createInterviewer(entity) {
        return this.candidateInterviewersService.create(entity);
    }
    async createBulk(input) {
        return this.commandBus.execute(new commands_1.CandidateInterviewersBulkCreateCommand(input));
    }
    async findByInterviewId(interviewId) {
        return this.candidateInterviewersService.getInterviewersByInterviewId(interviewId);
    }
    async deleteBulkByInterviewId(data) {
        const { id = null } = data;
        return this.commandBus.execute(new commands_1.CandidateInterviewersInterviewBulkDeleteCommand(id));
    }
    async deleteBulkByEmployeeId(data) {
        const { deleteInput = null } = data;
        return this.commandBus.execute(new commands_1.CandidateInterviewersEmployeeBulkDeleteCommand(deleteInput));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all candidate interviewers.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found candidate interviewers',
        type: candidate_interviewers_entity_1.CandidateInterviewers
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], CandidateInterviewersController.prototype, "findInterviewers", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Create new record interviewers'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Success Add Interviewers',
        type: candidate_interviewers_entity_1.CandidateInterviewers
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_CANDIDATES_INTERVIEWERS_EDIT),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof models_1.ICandidateInterviewersCreateInput !== "undefined" && models_1.ICandidateInterviewersCreateInput) === "function" ? _b : Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], CandidateInterviewersController.prototype, "createInterviewer", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create interviewers in Bulk' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Interviewers have been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_CANDIDATES_EDIT),
    common_1.Post('createBulk'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], CandidateInterviewersController.prototype, "createBulk", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find Interviewers By Interview Id.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found candidate interviewers',
        type: candidate_interviewers_entity_1.CandidateInterviewers
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_CANDIDATES_INTERVIEWERS_EDIT),
    common_1.Get('getByInterviewId/:interviewId'),
    tslib_1.__param(0, common_1.Param('interviewId')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], CandidateInterviewersController.prototype, "findByInterviewId", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Delete Interviewers By Interview Id.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found candidate interviewers',
        type: candidate_interviewers_entity_1.CandidateInterviewers
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_CANDIDATES_INTERVIEWERS_EDIT),
    common_1.Delete('deleteBulkByInterviewId'),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], CandidateInterviewersController.prototype, "deleteBulkByInterviewId", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Delete Interviewers By employeeId.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found candidate interviewers',
        type: candidate_interviewers_entity_1.CandidateInterviewers
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_CANDIDATES_INTERVIEWERS_EDIT),
    common_1.Delete('deleteBulkByEmployeeId'),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], CandidateInterviewersController.prototype, "deleteBulkByEmployeeId", null);
CandidateInterviewersController = tslib_1.__decorate([
    swagger_1.ApiTags('CandidateInterviewer'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_h = typeof candidate_interviewers_service_1.CandidateInterviewersService !== "undefined" && candidate_interviewers_service_1.CandidateInterviewersService) === "function" ? _h : Object, typeof (_j = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _j : Object])
], CandidateInterviewersController);
exports.CandidateInterviewersController = CandidateInterviewersController;


/***/ }),

/***/ "./src/app/candidate-interviewers/candidate-interviewers.entity.ts":
/*!*************************************************************************!*\
  !*** ./src/app/candidate-interviewers/candidate-interviewers.entity.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateInterviewers = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const candidate_interview_entity_1 = __webpack_require__(/*! ../candidate-interview/candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let CandidateInterviewers = class CandidateInterviewers extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], CandidateInterviewers.prototype, "interviewId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], CandidateInterviewers.prototype, "employeeId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => candidate_interview_entity_1.CandidateInterview, (interview) => interview.interviewers, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.ICandidateInterview !== "undefined" && models_1.ICandidateInterview) === "function" ? _a : Object)
], CandidateInterviewers.prototype, "interview", void 0);
CandidateInterviewers = tslib_1.__decorate([
    typeorm_1.Entity('candidate_interviewer')
], CandidateInterviewers);
exports.CandidateInterviewers = CandidateInterviewers;


/***/ }),

/***/ "./src/app/candidate-interviewers/candidate-interviewers.module.ts":
/*!*************************************************************************!*\
  !*** ./src/app/candidate-interviewers/candidate-interviewers.module.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateInterviewersModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const candidate_interviewers_entity_1 = __webpack_require__(/*! ./candidate-interviewers.entity */ "./src/app/candidate-interviewers/candidate-interviewers.entity.ts");
const candidate_interviewers_service_1 = __webpack_require__(/*! ./candidate-interviewers.service */ "./src/app/candidate-interviewers/candidate-interviewers.service.ts");
const candidate_interviewers_controller_1 = __webpack_require__(/*! ./candidate-interviewers.controller */ "./src/app/candidate-interviewers/candidate-interviewers.controller.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/candidate-interviewers/commands/handlers/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let CandidateInterviewersModule = class CandidateInterviewersModule {
};
CandidateInterviewersModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([candidate_interviewers_entity_1.CandidateInterviewers, user_entity_1.User]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        providers: [candidate_interviewers_service_1.CandidateInterviewersService, user_service_1.UserService, ...handlers_1.CommandHandlers],
        controllers: [candidate_interviewers_controller_1.CandidateInterviewersController],
        exports: [candidate_interviewers_service_1.CandidateInterviewersService]
    })
], CandidateInterviewersModule);
exports.CandidateInterviewersModule = CandidateInterviewersModule;


/***/ }),

/***/ "./src/app/candidate-interviewers/candidate-interviewers.seed.ts":
/*!***********************************************************************!*\
  !*** ./src/app/candidate-interviewers/candidate-interviewers.seed.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomCandidateInterviewers = exports.createDefaultCandidateInterviewers = void 0;
const faker = __webpack_require__(/*! faker */ "faker");
const candidate_interviewers_entity_1 = __webpack_require__(/*! ./candidate-interviewers.entity */ "./src/app/candidate-interviewers/candidate-interviewers.entity.ts");
const candidate_interview_entity_1 = __webpack_require__(/*! ../candidate-interview/candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
exports.createDefaultCandidateInterviewers = async (connection, tenant, organization, defaultEmployees, defaultCandidates) => {
    if (!defaultEmployees) {
        console.warn('Warning: defaultEmployees not found, Default CandidateInterviewers will not be created');
        return;
    }
    if (!defaultCandidates) {
        console.warn('Warning: defaultCandidates not found, Default Candidate Interviewers will not be created');
        return;
    }
    let candidates = [];
    for (const defaultCandidate of defaultCandidates) {
        const CandidateInterviews = await connection.manager.find(candidate_interview_entity_1.CandidateInterview, {
            where: [{ candidate: defaultCandidate }]
        });
        candidates = await dataOperation(connection, tenant, organization, candidates, CandidateInterviews, defaultEmployees);
    }
    return candidates;
};
exports.createRandomCandidateInterviewers = async (connection, tenants, tenantEmployeeMap, tenantCandidatesMap) => {
    if (!tenantCandidatesMap) {
        console.warn('Warning: tenantCandidatesMap not found, CandidateInterviewers will not be created');
        return;
    }
    let candidates = [];
    for (const tenant of tenants) {
        const tenantCandidates = tenantCandidatesMap.get(tenant);
        const tenantEmployees = tenantEmployeeMap.get(tenant);
        for (const tenantCandidate of tenantCandidates) {
            const CandidateInterviews = await connection.manager.find(candidate_interview_entity_1.CandidateInterview, {
                where: [{ candidate: tenantCandidate }]
            });
            candidates = await dataOperation(connection, tenant, tenantCandidate.organization, candidates, CandidateInterviews, tenantEmployees);
        }
    }
    return candidates;
};
const dataOperation = async (connection, tenant, organization, candidates, CandidateInterviews, tenantEmployees) => {
    for (const interview of CandidateInterviews) {
        const candidate = new candidate_interviewers_entity_1.CandidateInterviewers();
        candidate.interviewId = interview.id;
        candidate.interview = interview;
        candidate.employeeId = faker.random.arrayElement(tenantEmployees).id;
        candidate.tenant = tenant;
        candidate.organization = organization;
        candidates.push(candidate);
    }
    await connection.manager.save(candidates);
    return candidates;
};


/***/ }),

/***/ "./src/app/candidate-interviewers/candidate-interviewers.service.ts":
/*!**************************************************************************!*\
  !*** ./src/app/candidate-interviewers/candidate-interviewers.service.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateInterviewersService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const candidate_interviewers_entity_1 = __webpack_require__(/*! ./candidate-interviewers.entity */ "./src/app/candidate-interviewers/candidate-interviewers.entity.ts");
let CandidateInterviewersService = class CandidateInterviewersService extends crud_service_1.CrudService {
    constructor(candidateInterviewersRepository) {
        super(candidateInterviewersRepository);
        this.candidateInterviewersRepository = candidateInterviewersRepository;
    }
    async getInterviewersByInterviewId(interviewId) {
        return await this.repository
            .createQueryBuilder('candidate_interviewer')
            .where('candidate_interviewer.interviewId = :interviewId', {
            interviewId
        })
            .getMany();
    }
    async getInterviewersByEmployeeId(employeeId) {
        return await this.repository
            .createQueryBuilder('candidate_interviewer')
            .where('candidate_interviewer.employeeId = :employeeId', {
            employeeId
        })
            .getMany();
    }
    async deleteBulk(ids) {
        return await this.repository.delete(ids);
    }
    async createBulk(createInput) {
        return await this.repository.save(createInput);
    }
};
CandidateInterviewersService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(candidate_interviewers_entity_1.CandidateInterviewers)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], CandidateInterviewersService);
exports.CandidateInterviewersService = CandidateInterviewersService;


/***/ }),

/***/ "./src/app/candidate-interviewers/commands/candidate-interviewers.bulk.create.command.ts":
/*!***********************************************************************************************!*\
  !*** ./src/app/candidate-interviewers/commands/candidate-interviewers.bulk.create.command.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateInterviewersBulkCreateCommand = void 0;
class CandidateInterviewersBulkCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.CandidateInterviewersBulkCreateCommand = CandidateInterviewersBulkCreateCommand;
CandidateInterviewersBulkCreateCommand.type = '[CandidateInterviewers] Register';


/***/ }),

/***/ "./src/app/candidate-interviewers/commands/candidate-interviewers.employee.bulk.delete.command.ts":
/*!********************************************************************************************************!*\
  !*** ./src/app/candidate-interviewers/commands/candidate-interviewers.employee.bulk.delete.command.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateInterviewersEmployeeBulkDeleteCommand = void 0;
class CandidateInterviewersEmployeeBulkDeleteCommand {
    constructor(deleteInput) {
        this.deleteInput = deleteInput;
    }
}
exports.CandidateInterviewersEmployeeBulkDeleteCommand = CandidateInterviewersEmployeeBulkDeleteCommand;
CandidateInterviewersEmployeeBulkDeleteCommand.type = '[CandidateInterviewers] Delete';


/***/ }),

/***/ "./src/app/candidate-interviewers/commands/candidate-interviewers.interview.bulk.delete.command.ts":
/*!*********************************************************************************************************!*\
  !*** ./src/app/candidate-interviewers/commands/candidate-interviewers.interview.bulk.delete.command.ts ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateInterviewersInterviewBulkDeleteCommand = void 0;
class CandidateInterviewersInterviewBulkDeleteCommand {
    constructor(id) {
        this.id = id;
    }
}
exports.CandidateInterviewersInterviewBulkDeleteCommand = CandidateInterviewersInterviewBulkDeleteCommand;
CandidateInterviewersInterviewBulkDeleteCommand.type = '[CandidateInterviewers] Delete';


/***/ }),

/***/ "./src/app/candidate-interviewers/commands/handlers/candidate-interviewers.bulk.create.handler.ts":
/*!********************************************************************************************************!*\
  !*** ./src/app/candidate-interviewers/commands/handlers/candidate-interviewers.bulk.create.handler.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateInterviewersBulkCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const candidate_interviewers_bulk_create_command_1 = __webpack_require__(/*! ../candidate-interviewers.bulk.create.command */ "./src/app/candidate-interviewers/commands/candidate-interviewers.bulk.create.command.ts");
const candidate_interviewers_service_1 = __webpack_require__(/*! ../../candidate-interviewers.service */ "./src/app/candidate-interviewers/candidate-interviewers.service.ts");
let CandidateInterviewersBulkCreateHandler = class CandidateInterviewersBulkCreateHandler {
    constructor(candidateInterviewersService) {
        this.candidateInterviewersService = candidateInterviewersService;
    }
    async execute(command) {
        const { input } = command;
        let interviewer;
        const createInput = [];
        const { employeeIds, interviewId, organizationId, tenantId } = input;
        for (const employeeId of employeeIds) {
            interviewer = { interviewId, employeeId, organizationId, tenantId };
            createInput.push(interviewer);
        }
        return await this.candidateInterviewersService.createBulk(createInput);
    }
};
CandidateInterviewersBulkCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(candidate_interviewers_bulk_create_command_1.CandidateInterviewersBulkCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof candidate_interviewers_service_1.CandidateInterviewersService !== "undefined" && candidate_interviewers_service_1.CandidateInterviewersService) === "function" ? _a : Object])
], CandidateInterviewersBulkCreateHandler);
exports.CandidateInterviewersBulkCreateHandler = CandidateInterviewersBulkCreateHandler;


/***/ }),

/***/ "./src/app/candidate-interviewers/commands/handlers/candidate-interviewers.employee.bulk.delete.handler.ts":
/*!*****************************************************************************************************************!*\
  !*** ./src/app/candidate-interviewers/commands/handlers/candidate-interviewers.employee.bulk.delete.handler.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateInterviewersEmployeeBulkDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const candidate_interviewers_employee_bulk_delete_command_1 = __webpack_require__(/*! ../candidate-interviewers.employee.bulk.delete.command */ "./src/app/candidate-interviewers/commands/candidate-interviewers.employee.bulk.delete.command.ts");
const candidate_interviewers_service_1 = __webpack_require__(/*! ../../candidate-interviewers.service */ "./src/app/candidate-interviewers/candidate-interviewers.service.ts");
let CandidateInterviewersEmployeeBulkDeleteHandler = class CandidateInterviewersEmployeeBulkDeleteHandler {
    constructor(candidateInterviewersService) {
        this.candidateInterviewersService = candidateInterviewersService;
    }
    async execute(command) {
        const { deleteInput } = command;
        for (const id of deleteInput) {
            const interviewers = await this.candidateInterviewersService.getInterviewersByEmployeeId(id);
            await this.candidateInterviewersService.deleteBulk(interviewers.map((item) => item.id));
        }
        return;
    }
};
CandidateInterviewersEmployeeBulkDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(candidate_interviewers_employee_bulk_delete_command_1.CandidateInterviewersEmployeeBulkDeleteCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof candidate_interviewers_service_1.CandidateInterviewersService !== "undefined" && candidate_interviewers_service_1.CandidateInterviewersService) === "function" ? _a : Object])
], CandidateInterviewersEmployeeBulkDeleteHandler);
exports.CandidateInterviewersEmployeeBulkDeleteHandler = CandidateInterviewersEmployeeBulkDeleteHandler;


/***/ }),

/***/ "./src/app/candidate-interviewers/commands/handlers/candidate-interviewers.interview.bulk.delete.handler.ts":
/*!******************************************************************************************************************!*\
  !*** ./src/app/candidate-interviewers/commands/handlers/candidate-interviewers.interview.bulk.delete.handler.ts ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateInterviewersInterviewBulkDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const candidate_interviewers_service_1 = __webpack_require__(/*! ../../candidate-interviewers.service */ "./src/app/candidate-interviewers/candidate-interviewers.service.ts");
const candidate_interviewers_interview_bulk_delete_command_1 = __webpack_require__(/*! ../candidate-interviewers.interview.bulk.delete.command */ "./src/app/candidate-interviewers/commands/candidate-interviewers.interview.bulk.delete.command.ts");
let CandidateInterviewersInterviewBulkDeleteHandler = class CandidateInterviewersInterviewBulkDeleteHandler {
    constructor(candidateInterviewersService) {
        this.candidateInterviewersService = candidateInterviewersService;
    }
    async execute(command) {
        const { id } = command;
        const interviewers = await this.candidateInterviewersService.getInterviewersByInterviewId(id);
        await this.candidateInterviewersService.deleteBulk(interviewers.map((item) => item.id));
        return;
    }
};
CandidateInterviewersInterviewBulkDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(candidate_interviewers_interview_bulk_delete_command_1.CandidateInterviewersInterviewBulkDeleteCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof candidate_interviewers_service_1.CandidateInterviewersService !== "undefined" && candidate_interviewers_service_1.CandidateInterviewersService) === "function" ? _a : Object])
], CandidateInterviewersInterviewBulkDeleteHandler);
exports.CandidateInterviewersInterviewBulkDeleteHandler = CandidateInterviewersInterviewBulkDeleteHandler;


/***/ }),

/***/ "./src/app/candidate-interviewers/commands/handlers/index.ts":
/*!*******************************************************************!*\
  !*** ./src/app/candidate-interviewers/commands/handlers/index.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const candidate_interviewers_interview_bulk_delete_handler_1 = __webpack_require__(/*! ./candidate-interviewers.interview.bulk.delete.handler */ "./src/app/candidate-interviewers/commands/handlers/candidate-interviewers.interview.bulk.delete.handler.ts");
const candidate_interviewers_employee_bulk_delete_handler_1 = __webpack_require__(/*! ./candidate-interviewers.employee.bulk.delete.handler */ "./src/app/candidate-interviewers/commands/handlers/candidate-interviewers.employee.bulk.delete.handler.ts");
const candidate_interviewers_bulk_create_handler_1 = __webpack_require__(/*! ./candidate-interviewers.bulk.create.handler */ "./src/app/candidate-interviewers/commands/handlers/candidate-interviewers.bulk.create.handler.ts");
exports.CommandHandlers = [
    candidate_interviewers_employee_bulk_delete_handler_1.CandidateInterviewersEmployeeBulkDeleteHandler,
    candidate_interviewers_interview_bulk_delete_handler_1.CandidateInterviewersInterviewBulkDeleteHandler,
    candidate_interviewers_bulk_create_handler_1.CandidateInterviewersBulkCreateHandler
];


/***/ }),

/***/ "./src/app/candidate-interviewers/commands/index.ts":
/*!**********************************************************!*\
  !*** ./src/app/candidate-interviewers/commands/index.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateInterviewersBulkCreateCommand = exports.CandidateInterviewersInterviewBulkDeleteCommand = exports.CandidateInterviewersEmployeeBulkDeleteCommand = void 0;
var candidate_interviewers_employee_bulk_delete_command_1 = __webpack_require__(/*! ./candidate-interviewers.employee.bulk.delete.command */ "./src/app/candidate-interviewers/commands/candidate-interviewers.employee.bulk.delete.command.ts");
Object.defineProperty(exports, "CandidateInterviewersEmployeeBulkDeleteCommand", { enumerable: true, get: function () { return candidate_interviewers_employee_bulk_delete_command_1.CandidateInterviewersEmployeeBulkDeleteCommand; } });
var candidate_interviewers_interview_bulk_delete_command_1 = __webpack_require__(/*! ./candidate-interviewers.interview.bulk.delete.command */ "./src/app/candidate-interviewers/commands/candidate-interviewers.interview.bulk.delete.command.ts");
Object.defineProperty(exports, "CandidateInterviewersInterviewBulkDeleteCommand", { enumerable: true, get: function () { return candidate_interviewers_interview_bulk_delete_command_1.CandidateInterviewersInterviewBulkDeleteCommand; } });
var candidate_interviewers_bulk_create_command_1 = __webpack_require__(/*! ./candidate-interviewers.bulk.create.command */ "./src/app/candidate-interviewers/commands/candidate-interviewers.bulk.create.command.ts");
Object.defineProperty(exports, "CandidateInterviewersBulkCreateCommand", { enumerable: true, get: function () { return candidate_interviewers_bulk_create_command_1.CandidateInterviewersBulkCreateCommand; } });


/***/ }),

/***/ "./src/app/candidate-personal-qualities/candidate-personal-qualities.controller.ts":
/*!*****************************************************************************************!*\
  !*** ./src/app/candidate-personal-qualities/candidate-personal-qualities.controller.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidatePersonalQualitiesController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const role_guard_1 = __webpack_require__(/*! ../shared/guards/auth/role.guard */ "./src/app/shared/guards/auth/role.guard.ts");
const roles_1 = __webpack_require__(/*! ../shared/decorators/roles */ "./src/app/shared/decorators/roles.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const candidate_personal_qualities_entity_1 = __webpack_require__(/*! ./candidate-personal-qualities.entity */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.entity.ts");
const candidate_personal_qualities_service_1 = __webpack_require__(/*! ./candidate-personal-qualities.service */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.service.ts");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/candidate-personal-qualities/commands/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let CandidatePersonalQualitiesController = class CandidatePersonalQualitiesController extends crud_controller_1.CrudController {
    constructor(candidatePersonalQualitiesService, commandBus) {
        super(candidatePersonalQualitiesService);
        this.candidatePersonalQualitiesService = candidatePersonalQualitiesService;
        this.commandBus = commandBus;
    }
    findAllPersonalQualities(data) {
        const { findInput, relations } = JSON.parse(data);
        return this.candidatePersonalQualitiesService.findAll({
            where: findInput,
            relations
        });
    }
    async addPersonalQuality(entity) {
        return this.candidatePersonalQualitiesService.create(entity);
    }
    deletePersonalQuality(id) {
        return this.candidatePersonalQualitiesService.delete(id);
    }
    async createBulk(input) {
        const { interviewId = null, personalQualities = [] } = input;
        return this.commandBus.execute(new commands_1.CandidatePersonalQualitiesBulkCreateCommand(interviewId, personalQualities));
    }
    async findByInterviewId(interviewId) {
        return this.candidatePersonalQualitiesService.getPersonalQualitiesByInterviewId(interviewId);
    }
    async deleteBulk(id, data) {
        const { personalQualities = null } = data;
        return this.commandBus.execute(new commands_1.CandidatePersonalQualitiesBulkDeleteCommand(id, personalQualities));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all candidate personal qualities.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found candidate personal qualities',
        type: candidate_personal_qualities_entity_1.CandidatePersonalQualities
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.CANDIDATE, models_1.RolesEnum.SUPER_ADMIN, models_1.RolesEnum.ADMIN),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", Object)
], CandidatePersonalQualitiesController.prototype, "findAllPersonalQualities", null);
tslib_1.__decorate([
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.CANDIDATE, models_1.RolesEnum.SUPER_ADMIN, models_1.RolesEnum.ADMIN),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof candidate_personal_qualities_entity_1.CandidatePersonalQualities !== "undefined" && candidate_personal_qualities_entity_1.CandidatePersonalQualities) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], CandidatePersonalQualitiesController.prototype, "addPersonalQuality", null);
tslib_1.__decorate([
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.CANDIDATE, models_1.RolesEnum.SUPER_ADMIN, models_1.RolesEnum.ADMIN),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], CandidatePersonalQualitiesController.prototype, "deletePersonalQuality", null);
tslib_1.__decorate([
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.CANDIDATE, models_1.RolesEnum.SUPER_ADMIN, models_1.RolesEnum.ADMIN),
    common_1.Post('createBulk'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], CandidatePersonalQualitiesController.prototype, "createBulk", null);
tslib_1.__decorate([
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.CANDIDATE, models_1.RolesEnum.SUPER_ADMIN, models_1.RolesEnum.ADMIN),
    common_1.Get('getByInterviewId/:interviewId'),
    tslib_1.__param(0, common_1.Param('interviewId')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], CandidatePersonalQualitiesController.prototype, "findByInterviewId", null);
tslib_1.__decorate([
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.CANDIDATE, models_1.RolesEnum.SUPER_ADMIN, models_1.RolesEnum.ADMIN),
    common_1.Delete('deleteBulk/:id'),
    tslib_1.__param(0, common_1.Param()),
    tslib_1.__param(1, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], CandidatePersonalQualitiesController.prototype, "deleteBulk", null);
CandidatePersonalQualitiesController = tslib_1.__decorate([
    swagger_1.ApiTags('CandidatePersonalQuality'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_g = typeof candidate_personal_qualities_service_1.CandidatePersonalQualitiesService !== "undefined" && candidate_personal_qualities_service_1.CandidatePersonalQualitiesService) === "function" ? _g : Object, typeof (_h = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _h : Object])
], CandidatePersonalQualitiesController);
exports.CandidatePersonalQualitiesController = CandidatePersonalQualitiesController;


/***/ }),

/***/ "./src/app/candidate-personal-qualities/candidate-personal-qualities.entity.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/candidate-personal-qualities/candidate-personal-qualities.entity.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidatePersonalQualities = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const candidate_interview_entity_1 = __webpack_require__(/*! ../candidate-interview/candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let CandidatePersonalQualities = class CandidatePersonalQualities extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], CandidatePersonalQualities.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], CandidatePersonalQualities.prototype, "interviewId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column({ nullable: true, type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], CandidatePersonalQualities.prototype, "rating", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => candidate_interview_entity_1.CandidateInterview, (interview) => interview.personalQualities, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.ICandidateInterview !== "undefined" && models_1.ICandidateInterview) === "function" ? _a : Object)
], CandidatePersonalQualities.prototype, "interview", void 0);
CandidatePersonalQualities = tslib_1.__decorate([
    typeorm_1.Entity('candidate_personal_quality')
], CandidatePersonalQualities);
exports.CandidatePersonalQualities = CandidatePersonalQualities;


/***/ }),

/***/ "./src/app/candidate-personal-qualities/candidate-personal-qualities.module.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/candidate-personal-qualities/candidate-personal-qualities.module.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidatePersonalQualitiesModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const role_module_1 = __webpack_require__(/*! ../role/role.module */ "./src/app/role/role.module.ts");
const user_module_1 = __webpack_require__(/*! ../user/user.module */ "./src/app/user/user.module.ts");
const role_permissions_module_1 = __webpack_require__(/*! ../role-permissions/role-permissions.module */ "./src/app/role-permissions/role-permissions.module.ts");
const auth_module_1 = __webpack_require__(/*! ../auth/auth.module */ "./src/app/auth/auth.module.ts");
const candidate_personal_qualities_service_1 = __webpack_require__(/*! ./candidate-personal-qualities.service */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.service.ts");
const candidate_personal_qualities_controller_1 = __webpack_require__(/*! ./candidate-personal-qualities.controller */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.controller.ts");
const candidate_personal_qualities_entity_1 = __webpack_require__(/*! ./candidate-personal-qualities.entity */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.entity.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/candidate-personal-qualities/commands/handlers/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let CandidatePersonalQualitiesModule = class CandidatePersonalQualitiesModule {
};
CandidatePersonalQualitiesModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([candidate_personal_qualities_entity_1.CandidatePersonalQualities, user_entity_1.User]),
            user_module_1.UserModule,
            role_module_1.RoleModule,
            role_permissions_module_1.RolePermissionsModule,
            auth_module_1.AuthModule,
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        providers: [
            candidate_personal_qualities_service_1.CandidatePersonalQualitiesService,
            user_service_1.UserService,
            ...handlers_1.CommandHandlers
        ],
        controllers: [candidate_personal_qualities_controller_1.CandidatePersonalQualitiesController],
        exports: [candidate_personal_qualities_service_1.CandidatePersonalQualitiesService]
    })
], CandidatePersonalQualitiesModule);
exports.CandidatePersonalQualitiesModule = CandidatePersonalQualitiesModule;


/***/ }),

/***/ "./src/app/candidate-personal-qualities/candidate-personal-qualities.seed.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/candidate-personal-qualities/candidate-personal-qualities.seed.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomCandidatePersonalQualities = exports.createDefaultCandidatePersonalQualities = void 0;
const faker = __webpack_require__(/*! faker */ "faker");
const candidate_personal_qualities_entity_1 = __webpack_require__(/*! ./candidate-personal-qualities.entity */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.entity.ts");
const candidate_interview_entity_1 = __webpack_require__(/*! ../candidate-interview/candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
exports.createDefaultCandidatePersonalQualities = async (connection, tenant, organization, defaultCandidates) => {
    if (!defaultCandidates) {
        console.warn('Warning: defaultCandidates not found, default Candidate Personal Qualities will not be created');
        return;
    }
    let candidates = [];
    for (const tenantCandidate of defaultCandidates) {
        const candidateInterviews = await connection.manager.find(candidate_interview_entity_1.CandidateInterview, {
            where: [{ candidate: tenantCandidate }]
        });
        candidates = await dataOperation(connection, tenant, organization, candidates, candidateInterviews);
    }
    return candidates;
};
exports.createRandomCandidatePersonalQualities = async (connection, tenants, tenantCandidatesMap) => {
    if (!tenantCandidatesMap) {
        console.warn('Warning: tenantCandidatesMap not found, CandidatePersonalQualities will not be created');
        return;
    }
    let candidates = [];
    for (const tenant of tenants) {
        const tenantCandidates = tenantCandidatesMap.get(tenant);
        for (const tenantCandidate of tenantCandidates) {
            const candidateInterviews = await connection.manager.find(candidate_interview_entity_1.CandidateInterview, {
                where: [{ candidate: tenantCandidate }]
            });
            candidates = await dataOperation(connection, tenant, tenantCandidate.organization, candidates, candidateInterviews);
        }
    }
    return candidates;
};
const dataOperation = async (connection, tenant, organization, candidates, CandidateInterviews) => {
    for (const interview of CandidateInterviews) {
        const candidate = new candidate_personal_qualities_entity_1.CandidatePersonalQualities();
        candidate.name = faker.name.jobArea();
        candidate.interviewId = interview.id;
        candidate.rating = Math.floor(Math.random() * 5) + 1;
        candidate.interview = interview;
        candidate.tenant = tenant;
        candidate.organization = organization;
        candidates.push(candidate);
    }
    await connection.manager.save(candidates);
    return candidates;
};


/***/ }),

/***/ "./src/app/candidate-personal-qualities/candidate-personal-qualities.service.ts":
/*!**************************************************************************************!*\
  !*** ./src/app/candidate-personal-qualities/candidate-personal-qualities.service.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidatePersonalQualitiesService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const candidate_personal_qualities_entity_1 = __webpack_require__(/*! ./candidate-personal-qualities.entity */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.entity.ts");
let CandidatePersonalQualitiesService = class CandidatePersonalQualitiesService extends crud_service_1.CrudService {
    constructor(candidatePersonalQualitiesRepository) {
        super(candidatePersonalQualitiesRepository);
        this.candidatePersonalQualitiesRepository = candidatePersonalQualitiesRepository;
    }
    async createBulk(createInput) {
        return await this.repository.save(createInput);
    }
    async getPersonalQualitiesByInterviewId(interviewId) {
        return await this.repository
            .createQueryBuilder('candidate_personal_quality')
            .where('candidate_personal_quality.interviewId = :interviewId', {
            interviewId
        })
            .getMany();
    }
    async deleteBulk(ids) {
        return await this.repository.delete(ids);
    }
};
CandidatePersonalQualitiesService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(candidate_personal_qualities_entity_1.CandidatePersonalQualities)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], CandidatePersonalQualitiesService);
exports.CandidatePersonalQualitiesService = CandidatePersonalQualitiesService;


/***/ }),

/***/ "./src/app/candidate-personal-qualities/commands/candidate-personal-qualities.bulk.create.command.ts":
/*!***********************************************************************************************************!*\
  !*** ./src/app/candidate-personal-qualities/commands/candidate-personal-qualities.bulk.create.command.ts ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidatePersonalQualitiesBulkCreateCommand = void 0;
class CandidatePersonalQualitiesBulkCreateCommand {
    constructor(interviewId, personalQualities) {
        this.interviewId = interviewId;
        this.personalQualities = personalQualities;
    }
}
exports.CandidatePersonalQualitiesBulkCreateCommand = CandidatePersonalQualitiesBulkCreateCommand;
CandidatePersonalQualitiesBulkCreateCommand.type = '[CandidatePersonalQualities] Register';


/***/ }),

/***/ "./src/app/candidate-personal-qualities/commands/candidate-personal-qualities.bulk.delete.command.ts":
/*!***********************************************************************************************************!*\
  !*** ./src/app/candidate-personal-qualities/commands/candidate-personal-qualities.bulk.delete.command.ts ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidatePersonalQualitiesBulkDeleteCommand = void 0;
class CandidatePersonalQualitiesBulkDeleteCommand {
    constructor(id, personalQualities) {
        this.id = id;
        this.personalQualities = personalQualities;
    }
}
exports.CandidatePersonalQualitiesBulkDeleteCommand = CandidatePersonalQualitiesBulkDeleteCommand;
CandidatePersonalQualitiesBulkDeleteCommand.type = '[CandidatePersonalQualities] Delete';


/***/ }),

/***/ "./src/app/candidate-personal-qualities/commands/handlers/candidate-personal-qualities.bulk.create.handler.ts":
/*!********************************************************************************************************************!*\
  !*** ./src/app/candidate-personal-qualities/commands/handlers/candidate-personal-qualities.bulk.create.handler.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidatePersonalQualitiesBulkCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const candidate_personal_qualities_bulk_create_command_1 = __webpack_require__(/*! ../candidate-personal-qualities.bulk.create.command */ "./src/app/candidate-personal-qualities/commands/candidate-personal-qualities.bulk.create.command.ts");
const candidate_personal_qualities_service_1 = __webpack_require__(/*! ../../candidate-personal-qualities.service */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.service.ts");
let CandidatePersonalQualitiesBulkCreateHandler = class CandidatePersonalQualitiesBulkCreateHandler {
    constructor(candidatePersonalQualitiesService) {
        this.candidatePersonalQualitiesService = candidatePersonalQualitiesService;
    }
    async execute(command) {
        const { interviewId, personalQualities } = command;
        let personalQuality;
        const createInput = [];
        for (const item of personalQualities) {
            personalQuality = { name: item, interviewId: interviewId };
            createInput.push(personalQuality);
        }
        return await this.candidatePersonalQualitiesService.createBulk(createInput);
    }
};
CandidatePersonalQualitiesBulkCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(candidate_personal_qualities_bulk_create_command_1.CandidatePersonalQualitiesBulkCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof candidate_personal_qualities_service_1.CandidatePersonalQualitiesService !== "undefined" && candidate_personal_qualities_service_1.CandidatePersonalQualitiesService) === "function" ? _a : Object])
], CandidatePersonalQualitiesBulkCreateHandler);
exports.CandidatePersonalQualitiesBulkCreateHandler = CandidatePersonalQualitiesBulkCreateHandler;


/***/ }),

/***/ "./src/app/candidate-personal-qualities/commands/handlers/candidate-personal-qualities.bulk.delete.handler.ts":
/*!********************************************************************************************************************!*\
  !*** ./src/app/candidate-personal-qualities/commands/handlers/candidate-personal-qualities.bulk.delete.handler.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidatePersonalQualitiesBulkDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const candidate_personal_qualities_bulk_delete_command_1 = __webpack_require__(/*! ../candidate-personal-qualities.bulk.delete.command */ "./src/app/candidate-personal-qualities/commands/candidate-personal-qualities.bulk.delete.command.ts");
const candidate_personal_qualities_service_1 = __webpack_require__(/*! ../../candidate-personal-qualities.service */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.service.ts");
let CandidatePersonalQualitiesBulkDeleteHandler = class CandidatePersonalQualitiesBulkDeleteHandler {
    constructor(candidatePersonalQualitiesService) {
        this.candidatePersonalQualitiesService = candidatePersonalQualitiesService;
    }
    async execute(command) {
        const { id, personalQualities } = command;
        if (personalQualities) {
            await this.candidatePersonalQualitiesService.deleteBulk(personalQualities.map((item) => item.id));
        }
        else {
            const qual = await this.candidatePersonalQualitiesService.getPersonalQualitiesByInterviewId(id['id']);
            await this.candidatePersonalQualitiesService.deleteBulk(qual.map((item) => item.id));
        }
        return;
    }
};
CandidatePersonalQualitiesBulkDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(candidate_personal_qualities_bulk_delete_command_1.CandidatePersonalQualitiesBulkDeleteCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof candidate_personal_qualities_service_1.CandidatePersonalQualitiesService !== "undefined" && candidate_personal_qualities_service_1.CandidatePersonalQualitiesService) === "function" ? _a : Object])
], CandidatePersonalQualitiesBulkDeleteHandler);
exports.CandidatePersonalQualitiesBulkDeleteHandler = CandidatePersonalQualitiesBulkDeleteHandler;


/***/ }),

/***/ "./src/app/candidate-personal-qualities/commands/handlers/index.ts":
/*!*************************************************************************!*\
  !*** ./src/app/candidate-personal-qualities/commands/handlers/index.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const candidate_personal_qualities_bulk_delete_handler_1 = __webpack_require__(/*! ./candidate-personal-qualities.bulk.delete.handler */ "./src/app/candidate-personal-qualities/commands/handlers/candidate-personal-qualities.bulk.delete.handler.ts");
const candidate_personal_qualities_bulk_create_handler_1 = __webpack_require__(/*! ./candidate-personal-qualities.bulk.create.handler */ "./src/app/candidate-personal-qualities/commands/handlers/candidate-personal-qualities.bulk.create.handler.ts");
exports.CommandHandlers = [
    candidate_personal_qualities_bulk_delete_handler_1.CandidatePersonalQualitiesBulkDeleteHandler,
    candidate_personal_qualities_bulk_create_handler_1.CandidatePersonalQualitiesBulkCreateHandler
];


/***/ }),

/***/ "./src/app/candidate-personal-qualities/commands/index.ts":
/*!****************************************************************!*\
  !*** ./src/app/candidate-personal-qualities/commands/index.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidatePersonalQualitiesBulkCreateCommand = exports.CandidatePersonalQualitiesBulkDeleteCommand = void 0;
var candidate_personal_qualities_bulk_delete_command_1 = __webpack_require__(/*! ./candidate-personal-qualities.bulk.delete.command */ "./src/app/candidate-personal-qualities/commands/candidate-personal-qualities.bulk.delete.command.ts");
Object.defineProperty(exports, "CandidatePersonalQualitiesBulkDeleteCommand", { enumerable: true, get: function () { return candidate_personal_qualities_bulk_delete_command_1.CandidatePersonalQualitiesBulkDeleteCommand; } });
var candidate_personal_qualities_bulk_create_command_1 = __webpack_require__(/*! ./candidate-personal-qualities.bulk.create.command */ "./src/app/candidate-personal-qualities/commands/candidate-personal-qualities.bulk.create.command.ts");
Object.defineProperty(exports, "CandidatePersonalQualitiesBulkCreateCommand", { enumerable: true, get: function () { return candidate_personal_qualities_bulk_create_command_1.CandidatePersonalQualitiesBulkCreateCommand; } });


/***/ }),

/***/ "./src/app/candidate-skill/candidate-skill.controller.ts":
/*!***************************************************************!*\
  !*** ./src/app/candidate-skill/candidate-skill.controller.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateSkillController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const candidate_skill_entity_1 = __webpack_require__(/*! ./candidate-skill.entity */ "./src/app/candidate-skill/candidate-skill.entity.ts");
const candidate_skill_service_1 = __webpack_require__(/*! ./candidate-skill.service */ "./src/app/candidate-skill/candidate-skill.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const role_guard_1 = __webpack_require__(/*! ../shared/guards/auth/role.guard */ "./src/app/shared/guards/auth/role.guard.ts");
const roles_1 = __webpack_require__(/*! ../shared/decorators/roles */ "./src/app/shared/decorators/roles.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let CandidateSkillController = class CandidateSkillController extends crud_controller_1.CrudController {
    constructor(candidateSkillService) {
        super(candidateSkillService);
        this.candidateSkillService = candidateSkillService;
    }
    async findSkill(data) {
        const { findInput } = JSON.parse(data);
        return this.candidateSkillService.findAll({ where: findInput });
    }
    async addSkill(entity) {
        return this.candidateSkillService.create(entity);
    }
    deleteCandidateSkill(id) {
        return this.candidateSkillService.delete(id);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all candidate skill.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found candidate skill',
        type: candidate_skill_entity_1.CandidateSkill
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], CandidateSkillController.prototype, "findSkill", null);
tslib_1.__decorate([
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.CANDIDATE, models_1.RolesEnum.SUPER_ADMIN, models_1.RolesEnum.ADMIN),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof candidate_skill_entity_1.CandidateSkill !== "undefined" && candidate_skill_entity_1.CandidateSkill) === "function" ? _b : Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], CandidateSkillController.prototype, "addSkill", null);
tslib_1.__decorate([
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.CANDIDATE, models_1.RolesEnum.SUPER_ADMIN, models_1.RolesEnum.ADMIN),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], CandidateSkillController.prototype, "deleteCandidateSkill", null);
CandidateSkillController = tslib_1.__decorate([
    swagger_1.ApiTags('CandidateSkill'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof candidate_skill_service_1.CandidateSkillService !== "undefined" && candidate_skill_service_1.CandidateSkillService) === "function" ? _e : Object])
], CandidateSkillController);
exports.CandidateSkillController = CandidateSkillController;


/***/ }),

/***/ "./src/app/candidate-skill/candidate-skill.entity.ts":
/*!***********************************************************!*\
  !*** ./src/app/candidate-skill/candidate-skill.entity.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateSkill = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const candidate_entity_1 = __webpack_require__(/*! ../candidate/candidate.entity */ "./src/app/candidate/candidate.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let CandidateSkill = class CandidateSkill extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], CandidateSkill.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], CandidateSkill.prototype, "candidateId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => candidate_entity_1.Candidate, (candidate) => candidate.skills, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.ICandidate !== "undefined" && models_1.ICandidate) === "function" ? _a : Object)
], CandidateSkill.prototype, "candidate", void 0);
CandidateSkill = tslib_1.__decorate([
    typeorm_1.Entity('candidate_skill')
], CandidateSkill);
exports.CandidateSkill = CandidateSkill;


/***/ }),

/***/ "./src/app/candidate-skill/candidate-skill.module.ts":
/*!***********************************************************!*\
  !*** ./src/app/candidate-skill/candidate-skill.module.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateSkillModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const candidate_skill_entity_1 = __webpack_require__(/*! ./candidate-skill.entity */ "./src/app/candidate-skill/candidate-skill.entity.ts");
const candidate_skill_service_1 = __webpack_require__(/*! ./candidate-skill.service */ "./src/app/candidate-skill/candidate-skill.service.ts");
const candidate_skill_controller_1 = __webpack_require__(/*! ./candidate-skill.controller */ "./src/app/candidate-skill/candidate-skill.controller.ts");
const role_module_1 = __webpack_require__(/*! ../role/role.module */ "./src/app/role/role.module.ts");
const user_module_1 = __webpack_require__(/*! ../user/user.module */ "./src/app/user/user.module.ts");
const role_permissions_module_1 = __webpack_require__(/*! ../role-permissions/role-permissions.module */ "./src/app/role-permissions/role-permissions.module.ts");
const auth_module_1 = __webpack_require__(/*! ../auth/auth.module */ "./src/app/auth/auth.module.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let CandidateSkillModule = class CandidateSkillModule {
};
CandidateSkillModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([candidate_skill_entity_1.CandidateSkill]),
            user_module_1.UserModule,
            role_module_1.RoleModule,
            role_permissions_module_1.RolePermissionsModule,
            auth_module_1.AuthModule,
            tenant_module_1.TenantModule
        ],
        providers: [candidate_skill_service_1.CandidateSkillService],
        controllers: [candidate_skill_controller_1.CandidateSkillController],
        exports: [candidate_skill_service_1.CandidateSkillService]
    })
], CandidateSkillModule);
exports.CandidateSkillModule = CandidateSkillModule;


/***/ }),

/***/ "./src/app/candidate-skill/candidate-skill.seed.ts":
/*!*********************************************************!*\
  !*** ./src/app/candidate-skill/candidate-skill.seed.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomCandidateSkills = exports.createCandidateSkills = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const faker = __webpack_require__(/*! faker */ "faker");
const candidate_skill_entity_1 = __webpack_require__(/*! ./candidate-skill.entity */ "./src/app/candidate-skill/candidate-skill.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const default_candidate_skills_1 = __webpack_require__(/*! ./default-candidate-skills */ "./src/app/candidate-skill/default-candidate-skills.ts");
exports.createCandidateSkills = async (connection, tenant, candidates, organization) => {
    let defaultCandidateSkills = [];
    if (!candidates) {
        console.warn('Warning: candidates not found, CandidateSkills will not be created');
        return;
    }
    candidates.forEach((candidate) => {
        const skills = default_candidate_skills_1.DEFAULT_CANDIDATE_SKILLS.map((skill) => (Object.assign({ name: skill.name, candidateId: candidate.id }, { organization, tenant })));
        defaultCandidateSkills = [...defaultCandidateSkills, ...skills];
    });
    insertCandidateSkills(connection, defaultCandidateSkills);
    return defaultCandidateSkills;
};
exports.createRandomCandidateSkills = async (connection, tenants, tenantCandidatesMap) => {
    var e_1, _a;
    if (!tenantCandidatesMap) {
        console.warn('Warning: tenantCandidatesMap not found, CandidateSkills will not be created');
        return;
    }
    let candidateSkills = [];
    const candidateSkillsMap = new Map();
    try {
        for (var _b = tslib_1.__asyncValues(tenants || []), _c; _c = await _b.next(), !_c.done;) {
            const tenant = _c.value;
            const organizations = await connection.manager.find(organization_entity_1.Organization, {
                where: [{ tenant: tenant }]
            });
            const candidates = tenantCandidatesMap.get(tenant);
            (candidates || []).forEach((candidate) => {
                const skills = default_candidate_skills_1.DEFAULT_CANDIDATE_SKILLS.map((skill) => ({
                    name: skill.name,
                    candidateId: candidate.id,
                    organization: faker.random.arrayElement(organizations),
                    tenant: tenant
                }));
                candidateSkillsMap.set(candidate, skills);
                candidateSkills = [...candidateSkills, ...skills];
            });
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) await _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    await insertCandidateSkills(connection, candidateSkills);
    return candidateSkillsMap;
};
const insertCandidateSkills = async (connection, candidateSkills) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(candidate_skill_entity_1.CandidateSkill)
        .values(candidateSkills)
        .execute();
};


/***/ }),

/***/ "./src/app/candidate-skill/candidate-skill.service.ts":
/*!************************************************************!*\
  !*** ./src/app/candidate-skill/candidate-skill.service.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateSkillService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const candidate_skill_entity_1 = __webpack_require__(/*! ./candidate-skill.entity */ "./src/app/candidate-skill/candidate-skill.entity.ts");
let CandidateSkillService = class CandidateSkillService extends crud_service_1.CrudService {
    constructor(candidateSkillRepository) {
        super(candidateSkillRepository);
        this.candidateSkillRepository = candidateSkillRepository;
    }
};
CandidateSkillService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(candidate_skill_entity_1.CandidateSkill)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], CandidateSkillService);
exports.CandidateSkillService = CandidateSkillService;


/***/ }),

/***/ "./src/app/candidate-skill/default-candidate-skills.ts":
/*!*************************************************************!*\
  !*** ./src/app/candidate-skill/default-candidate-skills.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_CANDIDATE_SKILLS = void 0;
exports.DEFAULT_CANDIDATE_SKILLS = [
    {
        name: 'Fullstack Developer'
    },
    {
        name: 'MEAN Stack Developer'
    }
];


/***/ }),

/***/ "./src/app/candidate-source/candidate-source.controller.ts":
/*!*****************************************************************!*\
  !*** ./src/app/candidate-source/candidate-source.controller.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateSourceController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const candidate_source_entity_1 = __webpack_require__(/*! ./candidate-source.entity */ "./src/app/candidate-source/candidate-source.entity.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const candidate_source_service_1 = __webpack_require__(/*! ./candidate-source.service */ "./src/app/candidate-source/candidate-source.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let CandidateSourceController = class CandidateSourceController extends crud_controller_1.CrudController {
    constructor(candidateSourceService) {
        super(candidateSourceService);
        this.candidateSourceService = candidateSourceService;
    }
    async findSource(data) {
        const { findInput } = JSON.parse(data);
        return this.candidateSourceService.findAll({ where: findInput });
    }
    async create(entity) {
        this.candidateSourceService.create(entity);
    }
    async updateBulk(entity) {
        return this.candidateSourceService.updateBulk(entity);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all candidate source.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found candidate source',
        type: candidate_source_entity_1.CandidateSource
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], CandidateSourceController.prototype, "findSource", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Create candidate source.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Created candidate source',
        type: candidate_source_entity_1.CandidateSource
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof candidate_source_entity_1.CandidateSource !== "undefined" && candidate_source_entity_1.CandidateSource) === "function" ? _b : Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], CandidateSourceController.prototype, "create", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Update candidate source.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Updated candidate source',
        type: candidate_source_entity_1.CandidateSource
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Put('updateBulk'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Array]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], CandidateSourceController.prototype, "updateBulk", null);
CandidateSourceController = tslib_1.__decorate([
    swagger_1.ApiTags('CandidateSource'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof candidate_source_service_1.CandidateSourceService !== "undefined" && candidate_source_service_1.CandidateSourceService) === "function" ? _e : Object])
], CandidateSourceController);
exports.CandidateSourceController = CandidateSourceController;


/***/ }),

/***/ "./src/app/candidate-source/candidate-source.entity.ts":
/*!*************************************************************!*\
  !*** ./src/app/candidate-source/candidate-source.entity.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateSource = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let CandidateSource = class CandidateSource extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], CandidateSource.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], CandidateSource.prototype, "candidateId", void 0);
CandidateSource = tslib_1.__decorate([
    typeorm_1.Entity('candidate_source')
], CandidateSource);
exports.CandidateSource = CandidateSource;


/***/ }),

/***/ "./src/app/candidate-source/candidate-source.module.ts":
/*!*************************************************************!*\
  !*** ./src/app/candidate-source/candidate-source.module.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateSourceModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const candidate_source_service_1 = __webpack_require__(/*! ./candidate-source.service */ "./src/app/candidate-source/candidate-source.service.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const candidate_source_entity_1 = __webpack_require__(/*! ./candidate-source.entity */ "./src/app/candidate-source/candidate-source.entity.ts");
const candidate_source_controller_1 = __webpack_require__(/*! ./candidate-source.controller */ "./src/app/candidate-source/candidate-source.controller.ts");
const user_module_1 = __webpack_require__(/*! ../user/user.module */ "./src/app/user/user.module.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let CandidateSourceModule = class CandidateSourceModule {
};
CandidateSourceModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([candidate_source_entity_1.CandidateSource]),
            user_module_1.UserModule,
            tenant_module_1.TenantModule
        ],
        providers: [candidate_source_service_1.CandidateSourceService],
        controllers: [candidate_source_controller_1.CandidateSourceController],
        exports: [candidate_source_service_1.CandidateSourceService]
    })
], CandidateSourceModule);
exports.CandidateSourceModule = CandidateSourceModule;


/***/ }),

/***/ "./src/app/candidate-source/candidate-source.seed.ts":
/*!***********************************************************!*\
  !*** ./src/app/candidate-source/candidate-source.seed.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomCandidateSources = exports.createCandidateSources = void 0;
const candidate_source_entity_1 = __webpack_require__(/*! ./candidate-source.entity */ "./src/app/candidate-source/candidate-source.entity.ts");
const default_candidate_sources_1 = __webpack_require__(/*! ./default-candidate-sources */ "./src/app/candidate-source/default-candidate-sources.ts");
exports.createCandidateSources = async (connection, tenant, candidates, organization) => {
    if (!candidates) {
        console.warn('Warning: candidates not found, CandidateSources will not be created');
        return;
    }
    let defaultCandidateSources = [];
    candidates.forEach((candidate) => {
        const rand = Math.floor(Math.random() * default_candidate_sources_1.DEFAULT_CANDIDATE_SOURCES.length);
        const sources = Object.assign({ name: default_candidate_sources_1.DEFAULT_CANDIDATE_SOURCES[rand].name, candidateId: candidate.id }, { organization, tenant });
        defaultCandidateSources = [...defaultCandidateSources, sources];
    });
    insertCandidateSources(connection, defaultCandidateSources);
    return defaultCandidateSources;
};
exports.createRandomCandidateSources = async (connection, tenants, tenantCandidatesMap) => {
    if (!tenantCandidatesMap) {
        console.warn('Warning: tenantCandidatesMap not found, CandidateSources will not be created');
        return;
    }
    let candidateSources = [];
    const candidateSourcesMap = new Map();
    (tenants || []).forEach((tenant) => {
        const candidates = tenantCandidatesMap.get(tenant);
        const rand = Math.floor(Math.random() * default_candidate_sources_1.DEFAULT_CANDIDATE_SOURCES.length);
        (candidates || []).forEach((candidate) => {
            const sources = Object.assign({ name: default_candidate_sources_1.DEFAULT_CANDIDATE_SOURCES[rand].name, candidateId: candidate.id }, { organization: candidate.organization, tenant });
            candidateSourcesMap.set(candidate, sources);
            candidateSources = [...candidateSources, sources];
        });
    });
    await insertCandidateSources(connection, candidateSources);
    return candidateSourcesMap;
};
const insertCandidateSources = async (connection, candidateSources) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(candidate_source_entity_1.CandidateSource)
        .values(candidateSources)
        .execute();
};


/***/ }),

/***/ "./src/app/candidate-source/candidate-source.service.ts":
/*!**************************************************************!*\
  !*** ./src/app/candidate-source/candidate-source.service.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateSourceService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const candidate_source_entity_1 = __webpack_require__(/*! ./candidate-source.entity */ "./src/app/candidate-source/candidate-source.entity.ts");
let CandidateSourceService = class CandidateSourceService extends crud_service_1.CrudService {
    constructor(candidateSourceRepository) {
        super(candidateSourceRepository);
        this.candidateSourceRepository = candidateSourceRepository;
    }
    updateBulk(updateInput) {
        updateInput.forEach(async (item) => {
            await this.candidateSourceRepository.save(item);
        });
        return;
    }
};
CandidateSourceService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(candidate_source_entity_1.CandidateSource)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], CandidateSourceService);
exports.CandidateSourceService = CandidateSourceService;


/***/ }),

/***/ "./src/app/candidate-source/default-candidate-sources.ts":
/*!***************************************************************!*\
  !*** ./src/app/candidate-source/default-candidate-sources.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_CANDIDATE_SOURCES = void 0;
exports.DEFAULT_CANDIDATE_SOURCES = [
    {
        name: 'LinkedIn'
    },
    {
        name: 'Indeed'
    },
    {
        name: 'Idealist'
    },
    {
        name: 'Dice'
    },
    {
        name: 'Monster'
    }
];


/***/ }),

/***/ "./src/app/candidate-technologies/candidate-technologies.controller.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/candidate-technologies/candidate-technologies.controller.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateTechnologiesController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const role_guard_1 = __webpack_require__(/*! ../shared/guards/auth/role.guard */ "./src/app/shared/guards/auth/role.guard.ts");
const roles_1 = __webpack_require__(/*! ../shared/decorators/roles */ "./src/app/shared/decorators/roles.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const candidate_technologies_service_1 = __webpack_require__(/*! ./candidate-technologies.service */ "./src/app/candidate-technologies/candidate-technologies.service.ts");
const candidate_technologies_entity_1 = __webpack_require__(/*! ./candidate-technologies.entity */ "./src/app/candidate-technologies/candidate-technologies.entity.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/candidate-technologies/commands/index.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let CandidateTechnologiesController = class CandidateTechnologiesController extends crud_controller_1.CrudController {
    constructor(candidateTechnologiesService, commandBus) {
        super(candidateTechnologiesService);
        this.candidateTechnologiesService = candidateTechnologiesService;
        this.commandBus = commandBus;
    }
    findAllApprovalPolicies(data) {
        const { findInput, relations } = JSON.parse(data);
        return this.candidateTechnologiesService.findAll({
            where: findInput,
            relations
        });
    }
    async addTechnology(entity) {
        return this.candidateTechnologiesService.create(entity);
    }
    deleteTechnology(id) {
        return this.candidateTechnologiesService.delete(id);
    }
    async createBulk(input) {
        const { interviewId = null, technologies = [] } = input;
        return this.commandBus.execute(new commands_1.CandidateTechnologiesBulkCreateCommand(interviewId, technologies));
    }
    async updateBulk(technologies) {
        return this.commandBus.execute(new commands_1.CandidateTechnologiesBulkUpdateCommand(technologies));
    }
    async findByInterviewId(interviewId) {
        return this.candidateTechnologiesService.getTechnologiesByInterviewId(interviewId);
    }
    async deleteBulkTechnologies(id, data) {
        const { technologies = null } = data;
        return this.commandBus.execute(new commands_1.CandidateTechnologiesBulkDeleteCommand(id, technologies));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all candidate technologies.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found candidate technologies',
        type: candidate_technologies_entity_1.CandidateTechnologies
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.CANDIDATE, models_1.RolesEnum.SUPER_ADMIN, models_1.RolesEnum.ADMIN),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", Object)
], CandidateTechnologiesController.prototype, "findAllApprovalPolicies", null);
tslib_1.__decorate([
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.CANDIDATE, models_1.RolesEnum.SUPER_ADMIN, models_1.RolesEnum.ADMIN),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof candidate_technologies_entity_1.CandidateTechnologies !== "undefined" && candidate_technologies_entity_1.CandidateTechnologies) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], CandidateTechnologiesController.prototype, "addTechnology", null);
tslib_1.__decorate([
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.CANDIDATE, models_1.RolesEnum.SUPER_ADMIN, models_1.RolesEnum.ADMIN),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], CandidateTechnologiesController.prototype, "deleteTechnology", null);
tslib_1.__decorate([
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.CANDIDATE, models_1.RolesEnum.SUPER_ADMIN, models_1.RolesEnum.ADMIN),
    common_1.Post('createBulk'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], CandidateTechnologiesController.prototype, "createBulk", null);
tslib_1.__decorate([
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.CANDIDATE, models_1.RolesEnum.SUPER_ADMIN, models_1.RolesEnum.ADMIN),
    common_1.Put('updateBulk'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Array]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], CandidateTechnologiesController.prototype, "updateBulk", null);
tslib_1.__decorate([
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.CANDIDATE, models_1.RolesEnum.SUPER_ADMIN, models_1.RolesEnum.ADMIN),
    common_1.Get('getByInterviewId/:interviewId'),
    tslib_1.__param(0, common_1.Param('interviewId')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], CandidateTechnologiesController.prototype, "findByInterviewId", null);
tslib_1.__decorate([
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.CANDIDATE, models_1.RolesEnum.SUPER_ADMIN, models_1.RolesEnum.ADMIN),
    common_1.Delete('deleteBulk/:id'),
    tslib_1.__param(0, common_1.Param()),
    tslib_1.__param(1, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], CandidateTechnologiesController.prototype, "deleteBulkTechnologies", null);
CandidateTechnologiesController = tslib_1.__decorate([
    swagger_1.ApiTags('CandidateTechnology'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_h = typeof candidate_technologies_service_1.CandidateTechnologiesService !== "undefined" && candidate_technologies_service_1.CandidateTechnologiesService) === "function" ? _h : Object, typeof (_j = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _j : Object])
], CandidateTechnologiesController);
exports.CandidateTechnologiesController = CandidateTechnologiesController;


/***/ }),

/***/ "./src/app/candidate-technologies/candidate-technologies.entity.ts":
/*!*************************************************************************!*\
  !*** ./src/app/candidate-technologies/candidate-technologies.entity.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateTechnologies = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const candidate_interview_entity_1 = __webpack_require__(/*! ../candidate-interview/candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let CandidateTechnologies = class CandidateTechnologies extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], CandidateTechnologies.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], CandidateTechnologies.prototype, "interviewId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column({ nullable: true, type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], CandidateTechnologies.prototype, "rating", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => candidate_interview_entity_1.CandidateInterview, (interview) => interview.technologies, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.ICandidateInterview !== "undefined" && models_1.ICandidateInterview) === "function" ? _a : Object)
], CandidateTechnologies.prototype, "interview", void 0);
CandidateTechnologies = tslib_1.__decorate([
    typeorm_1.Entity('candidate_technology')
], CandidateTechnologies);
exports.CandidateTechnologies = CandidateTechnologies;


/***/ }),

/***/ "./src/app/candidate-technologies/candidate-technologies.module.ts":
/*!*************************************************************************!*\
  !*** ./src/app/candidate-technologies/candidate-technologies.module.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateTechnologiesModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const role_module_1 = __webpack_require__(/*! ../role/role.module */ "./src/app/role/role.module.ts");
const role_permissions_module_1 = __webpack_require__(/*! ../role-permissions/role-permissions.module */ "./src/app/role-permissions/role-permissions.module.ts");
const auth_module_1 = __webpack_require__(/*! ../auth/auth.module */ "./src/app/auth/auth.module.ts");
const candidate_technologies_entity_1 = __webpack_require__(/*! ./candidate-technologies.entity */ "./src/app/candidate-technologies/candidate-technologies.entity.ts");
const candidate_technologies_controller_1 = __webpack_require__(/*! ./candidate-technologies.controller */ "./src/app/candidate-technologies/candidate-technologies.controller.ts");
const candidate_technologies_service_1 = __webpack_require__(/*! ./candidate-technologies.service */ "./src/app/candidate-technologies/candidate-technologies.service.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/candidate-technologies/commands/handlers/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let CandidateTechnologiesModule = class CandidateTechnologiesModule {
};
CandidateTechnologiesModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([candidate_technologies_entity_1.CandidateTechnologies, user_entity_1.User]),
            role_module_1.RoleModule,
            role_permissions_module_1.RolePermissionsModule,
            auth_module_1.AuthModule,
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        providers: [candidate_technologies_service_1.CandidateTechnologiesService, user_service_1.UserService, ...handlers_1.CommandHandlers],
        controllers: [candidate_technologies_controller_1.CandidateTechnologiesController],
        exports: [candidate_technologies_service_1.CandidateTechnologiesService]
    })
], CandidateTechnologiesModule);
exports.CandidateTechnologiesModule = CandidateTechnologiesModule;


/***/ }),

/***/ "./src/app/candidate-technologies/candidate-technologies.seed.ts":
/*!***********************************************************************!*\
  !*** ./src/app/candidate-technologies/candidate-technologies.seed.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomCandidateTechnologies = exports.createDefaultCandidateTechnologies = void 0;
const faker = __webpack_require__(/*! faker */ "faker");
const candidate_technologies_entity_1 = __webpack_require__(/*! ./candidate-technologies.entity */ "./src/app/candidate-technologies/candidate-technologies.entity.ts");
const candidate_interview_entity_1 = __webpack_require__(/*! ../candidate-interview/candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
exports.createDefaultCandidateTechnologies = async (connection, tenant, organization, defaultCandidates) => {
    if (!defaultCandidates) {
        console.warn('Warning: defaultCandidates not found, Default Candidate Feedbacks will not be created');
        return;
    }
    let candidates = [];
    for (const tenantCandidate of defaultCandidates) {
        const candidateInterviews = await connection.manager.find(candidate_interview_entity_1.CandidateInterview, {
            where: [{ candidate: tenantCandidate }]
        });
        candidates = await dataOperation(connection, tenant, organization, candidates, candidateInterviews);
    }
    return candidates;
};
exports.createRandomCandidateTechnologies = async (connection, tenants, tenantCandidatesMap) => {
    if (!tenantCandidatesMap) {
        console.warn('Warning: tenantCandidatesMap not found, CandidateFeedbacks will not be created');
        return;
    }
    let candidates = [];
    for (const tenant of tenants) {
        const tenantCandidates = tenantCandidatesMap.get(tenant);
        for (const tenantCandidate of tenantCandidates) {
            const candidateInterviews = await connection.manager.find(candidate_interview_entity_1.CandidateInterview, {
                where: [{ candidate: tenantCandidate }]
            });
            candidates = await dataOperation(connection, tenant, tenantCandidate.organization, candidates, candidateInterviews);
        }
    }
    return candidates;
};
const dataOperation = async (connection, tenant, organization, candidates, CandidateInterviews) => {
    for (const interview of CandidateInterviews) {
        const candidate = new candidate_technologies_entity_1.CandidateTechnologies();
        candidate.name = faker.name.jobArea();
        candidate.interviewId = interview.id;
        candidate.rating = Math.floor(Math.random() * 5) + 1;
        candidate.interview = interview;
        candidate.tenant = tenant;
        candidate.organization = organization;
        candidates.push(candidate);
    }
    await connection.manager.save(candidates);
    return candidates;
};


/***/ }),

/***/ "./src/app/candidate-technologies/candidate-technologies.service.ts":
/*!**************************************************************************!*\
  !*** ./src/app/candidate-technologies/candidate-technologies.service.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateTechnologiesService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const candidate_technologies_entity_1 = __webpack_require__(/*! ./candidate-technologies.entity */ "./src/app/candidate-technologies/candidate-technologies.entity.ts");
let CandidateTechnologiesService = class CandidateTechnologiesService extends crud_service_1.CrudService {
    constructor(candidateTechnologiesRepository) {
        super(candidateTechnologiesRepository);
        this.candidateTechnologiesRepository = candidateTechnologiesRepository;
    }
    async createBulk(createInput) {
        return await this.repository.save(createInput);
    }
    async getTechnologiesByInterviewId(interviewId) {
        return await this.repository
            .createQueryBuilder('candidate_technology')
            .where('candidate_technology.interviewId = :interviewId', {
            interviewId
        })
            .getMany();
    }
    async deleteBulk(ids) {
        return await this.repository.delete(ids);
    }
};
CandidateTechnologiesService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(candidate_technologies_entity_1.CandidateTechnologies)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], CandidateTechnologiesService);
exports.CandidateTechnologiesService = CandidateTechnologiesService;


/***/ }),

/***/ "./src/app/candidate-technologies/commands/candidate-technologies.bulk.create.command.ts":
/*!***********************************************************************************************!*\
  !*** ./src/app/candidate-technologies/commands/candidate-technologies.bulk.create.command.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateTechnologiesBulkCreateCommand = void 0;
class CandidateTechnologiesBulkCreateCommand {
    constructor(interviewId, technologies) {
        this.interviewId = interviewId;
        this.technologies = technologies;
    }
}
exports.CandidateTechnologiesBulkCreateCommand = CandidateTechnologiesBulkCreateCommand;
CandidateTechnologiesBulkCreateCommand.type = '[CandidateTechnologies] Register';


/***/ }),

/***/ "./src/app/candidate-technologies/commands/candidate-technologies.bulk.delete.command.ts":
/*!***********************************************************************************************!*\
  !*** ./src/app/candidate-technologies/commands/candidate-technologies.bulk.delete.command.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateTechnologiesBulkDeleteCommand = void 0;
class CandidateTechnologiesBulkDeleteCommand {
    constructor(id, technologies) {
        this.id = id;
        this.technologies = technologies;
    }
}
exports.CandidateTechnologiesBulkDeleteCommand = CandidateTechnologiesBulkDeleteCommand;
CandidateTechnologiesBulkDeleteCommand.type = '[CandidateTechnologies] Delete';


/***/ }),

/***/ "./src/app/candidate-technologies/commands/candidate-technologies.bulk.update.command.ts":
/*!***********************************************************************************************!*\
  !*** ./src/app/candidate-technologies/commands/candidate-technologies.bulk.update.command.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateTechnologiesBulkUpdateCommand = void 0;
class CandidateTechnologiesBulkUpdateCommand {
    constructor(technologies) {
        this.technologies = technologies;
    }
}
exports.CandidateTechnologiesBulkUpdateCommand = CandidateTechnologiesBulkUpdateCommand;
CandidateTechnologiesBulkUpdateCommand.type = '[CandidateTechnologies] Update';


/***/ }),

/***/ "./src/app/candidate-technologies/commands/handlers/candidate-technologies.bulk.create.handler.ts":
/*!********************************************************************************************************!*\
  !*** ./src/app/candidate-technologies/commands/handlers/candidate-technologies.bulk.create.handler.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateTechnologiesBulkCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const candidate_technologies_bulk_create_command_1 = __webpack_require__(/*! ../candidate-technologies.bulk.create.command */ "./src/app/candidate-technologies/commands/candidate-technologies.bulk.create.command.ts");
const candidate_technologies_service_1 = __webpack_require__(/*! ../../candidate-technologies.service */ "./src/app/candidate-technologies/candidate-technologies.service.ts");
let CandidateTechnologiesBulkCreateHandler = class CandidateTechnologiesBulkCreateHandler {
    constructor(candidateTechnologiesService) {
        this.candidateTechnologiesService = candidateTechnologiesService;
    }
    async execute(command) {
        const { interviewId, technologies } = command;
        let technology;
        const createInput = [];
        for (const item of technologies) {
            technology = { name: item, interviewId: interviewId };
            createInput.push(technology);
        }
        return await this.candidateTechnologiesService.createBulk(createInput);
    }
};
CandidateTechnologiesBulkCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(candidate_technologies_bulk_create_command_1.CandidateTechnologiesBulkCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof candidate_technologies_service_1.CandidateTechnologiesService !== "undefined" && candidate_technologies_service_1.CandidateTechnologiesService) === "function" ? _a : Object])
], CandidateTechnologiesBulkCreateHandler);
exports.CandidateTechnologiesBulkCreateHandler = CandidateTechnologiesBulkCreateHandler;


/***/ }),

/***/ "./src/app/candidate-technologies/commands/handlers/candidate-technologies.bulk.delete.handler.ts":
/*!********************************************************************************************************!*\
  !*** ./src/app/candidate-technologies/commands/handlers/candidate-technologies.bulk.delete.handler.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateTechnologiesBulkDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const candidate_technologies_bulk_delete_command_1 = __webpack_require__(/*! ../candidate-technologies.bulk.delete.command */ "./src/app/candidate-technologies/commands/candidate-technologies.bulk.delete.command.ts");
const candidate_technologies_service_1 = __webpack_require__(/*! ../../candidate-technologies.service */ "./src/app/candidate-technologies/candidate-technologies.service.ts");
let CandidateTechnologiesBulkDeleteHandler = class CandidateTechnologiesBulkDeleteHandler {
    constructor(candidateTechnologiesService) {
        this.candidateTechnologiesService = candidateTechnologiesService;
    }
    async execute(command) {
        const { id, technologies } = command;
        if (technologies) {
            await this.candidateTechnologiesService.deleteBulk(technologies.map((item) => item.id));
        }
        else {
            const tech = await this.candidateTechnologiesService.getTechnologiesByInterviewId(id['id']);
            await this.candidateTechnologiesService.deleteBulk(tech.map((item) => item.id));
        }
        return;
    }
};
CandidateTechnologiesBulkDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(candidate_technologies_bulk_delete_command_1.CandidateTechnologiesBulkDeleteCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof candidate_technologies_service_1.CandidateTechnologiesService !== "undefined" && candidate_technologies_service_1.CandidateTechnologiesService) === "function" ? _a : Object])
], CandidateTechnologiesBulkDeleteHandler);
exports.CandidateTechnologiesBulkDeleteHandler = CandidateTechnologiesBulkDeleteHandler;


/***/ }),

/***/ "./src/app/candidate-technologies/commands/handlers/candidate-technologies.bulk.update.handler.ts":
/*!********************************************************************************************************!*\
  !*** ./src/app/candidate-technologies/commands/handlers/candidate-technologies.bulk.update.handler.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateTechnologiesBulkUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const candidate_technologies_service_1 = __webpack_require__(/*! ../../candidate-technologies.service */ "./src/app/candidate-technologies/candidate-technologies.service.ts");
const candidate_technologies_bulk_update_command_1 = __webpack_require__(/*! ../candidate-technologies.bulk.update.command */ "./src/app/candidate-technologies/commands/candidate-technologies.bulk.update.command.ts");
let CandidateTechnologiesBulkUpdateHandler = class CandidateTechnologiesBulkUpdateHandler {
    constructor(candidateTechnologiesService) {
        this.candidateTechnologiesService = candidateTechnologiesService;
    }
    async execute(command) {
        const { technologies } = command;
        technologies.forEach((item) => this.candidateTechnologiesService.update(item.id, Object.assign({}, item)));
        return;
    }
};
CandidateTechnologiesBulkUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(candidate_technologies_bulk_update_command_1.CandidateTechnologiesBulkUpdateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof candidate_technologies_service_1.CandidateTechnologiesService !== "undefined" && candidate_technologies_service_1.CandidateTechnologiesService) === "function" ? _a : Object])
], CandidateTechnologiesBulkUpdateHandler);
exports.CandidateTechnologiesBulkUpdateHandler = CandidateTechnologiesBulkUpdateHandler;


/***/ }),

/***/ "./src/app/candidate-technologies/commands/handlers/index.ts":
/*!*******************************************************************!*\
  !*** ./src/app/candidate-technologies/commands/handlers/index.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const candidate_technologies_bulk_delete_handler_1 = __webpack_require__(/*! ./candidate-technologies.bulk.delete.handler */ "./src/app/candidate-technologies/commands/handlers/candidate-technologies.bulk.delete.handler.ts");
const candidate_technologies_bulk_create_handler_1 = __webpack_require__(/*! ./candidate-technologies.bulk.create.handler */ "./src/app/candidate-technologies/commands/handlers/candidate-technologies.bulk.create.handler.ts");
const candidate_technologies_bulk_update_handler_1 = __webpack_require__(/*! ./candidate-technologies.bulk.update.handler */ "./src/app/candidate-technologies/commands/handlers/candidate-technologies.bulk.update.handler.ts");
exports.CommandHandlers = [
    candidate_technologies_bulk_delete_handler_1.CandidateTechnologiesBulkDeleteHandler,
    candidate_technologies_bulk_create_handler_1.CandidateTechnologiesBulkCreateHandler,
    candidate_technologies_bulk_update_handler_1.CandidateTechnologiesBulkUpdateHandler
];


/***/ }),

/***/ "./src/app/candidate-technologies/commands/index.ts":
/*!**********************************************************!*\
  !*** ./src/app/candidate-technologies/commands/index.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateTechnologiesBulkUpdateCommand = exports.CandidateTechnologiesBulkCreateCommand = exports.CandidateTechnologiesBulkDeleteCommand = void 0;
var candidate_technologies_bulk_delete_command_1 = __webpack_require__(/*! ./candidate-technologies.bulk.delete.command */ "./src/app/candidate-technologies/commands/candidate-technologies.bulk.delete.command.ts");
Object.defineProperty(exports, "CandidateTechnologiesBulkDeleteCommand", { enumerable: true, get: function () { return candidate_technologies_bulk_delete_command_1.CandidateTechnologiesBulkDeleteCommand; } });
var candidate_technologies_bulk_create_command_1 = __webpack_require__(/*! ./candidate-technologies.bulk.create.command */ "./src/app/candidate-technologies/commands/candidate-technologies.bulk.create.command.ts");
Object.defineProperty(exports, "CandidateTechnologiesBulkCreateCommand", { enumerable: true, get: function () { return candidate_technologies_bulk_create_command_1.CandidateTechnologiesBulkCreateCommand; } });
var candidate_technologies_bulk_update_command_1 = __webpack_require__(/*! ./candidate-technologies.bulk.update.command */ "./src/app/candidate-technologies/commands/candidate-technologies.bulk.update.command.ts");
Object.defineProperty(exports, "CandidateTechnologiesBulkUpdateCommand", { enumerable: true, get: function () { return candidate_technologies_bulk_update_command_1.CandidateTechnologiesBulkUpdateCommand; } });


/***/ }),

/***/ "./src/app/candidate/candidate.controller.ts":
/*!***************************************************!*\
  !*** ./src/app/candidate/candidate.controller.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const candidate_service_1 = __webpack_require__(/*! ./candidate.service */ "./src/app/candidate/candidate.service.ts");
const candidate_entity_1 = __webpack_require__(/*! ./candidate.entity */ "./src/app/candidate/candidate.entity.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/candidate/commands/index.ts");
const nestjs_i18n_1 = __webpack_require__(/*! nestjs-i18n */ "nestjs-i18n");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let CandidateController = class CandidateController extends crud_controller_1.CrudController {
    constructor(candidateService, commandBus) {
        super(candidateService);
        this.candidateService = candidateService;
        this.commandBus = commandBus;
    }
    async update(id, entity) {
        return this.commandBus.execute(new commands_1.CandidateUpdateCommand(Object.assign({ id }, entity)));
    }
    async findAllCandidates(data) {
        const { relations, findInput } = data;
        return this.candidateService.findAll({
            where: findInput,
            relations
        });
    }
    async findById(id, data) {
        const { relations = [] } = data;
        return this.candidateService.findOne(id, {
            relations
        });
    }
    async create(entity, ...options) {
        return this.commandBus.execute(new commands_1.CandidateCreateCommand(entity));
    }
    async createBulk(input, languageCode, ...options) {
        input
            .filter((entity) => !entity.user.imageUrl)
            .forEach((entity) => (entity.user.imageUrl = core_1.getUserDummyImage(entity.user)));
        return this.commandBus.execute(new commands_1.CandidateBulkCreateCommand(input, languageCode));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id', shared_1.UUIDValidationPipe)),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_a = typeof models_1.ICandidateUpdateInput !== "undefined" && models_1.ICandidateUpdateInput) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], CandidateController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all candidates in the same tenant.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found candidates in the tenant',
        type: candidate_entity_1.Candidate
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], CandidateController.prototype, "findAllCandidates", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find Candidate by id ' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found one record',
        type: candidate_entity_1.Candidate
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], CandidateController.prototype, "findById", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_CANDIDATES_EDIT),
    common_1.Post('/create'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof models_1.ICandidateCreateInput !== "undefined" && models_1.ICandidateCreateInput) === "function" ? _e : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], CandidateController.prototype, "create", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create records in Bulk' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Records have been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_CANDIDATES_EDIT),
    common_1.Post('/createBulk'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__param(1, nestjs_i18n_1.I18nLang()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Array, typeof (_g = typeof models_1.LanguagesEnum !== "undefined" && models_1.LanguagesEnum) === "function" ? _g : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], CandidateController.prototype, "createBulk", null);
CandidateController = tslib_1.__decorate([
    swagger_1.ApiTags('Candidate'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_j = typeof candidate_service_1.CandidateService !== "undefined" && candidate_service_1.CandidateService) === "function" ? _j : Object, typeof (_k = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _k : Object])
], CandidateController);
exports.CandidateController = CandidateController;


/***/ }),

/***/ "./src/app/candidate/candidate.entity.ts":
/*!***********************************************!*\
  !*** ./src/app/candidate/candidate.entity.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Candidate = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const candidate_skill_entity_1 = __webpack_require__(/*! ./../candidate-skill/candidate-skill.entity */ "./src/app/candidate-skill/candidate-skill.entity.ts");
const candidate_experience_entity_1 = __webpack_require__(/*! ./../candidate-experience/candidate-experience.entity */ "./src/app/candidate-experience/candidate-experience.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const utils_1 = __webpack_require__(/*! @gauzy/utils */ "./libs/utils/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const organization_department_entity_1 = __webpack_require__(/*! ../organization-department/organization-department.entity */ "./src/app/organization-department/organization-department.entity.ts");
const organization_employment_type_entity_1 = __webpack_require__(/*! ../organization-employment-type/organization-employment-type.entity */ "./src/app/organization-employment-type/organization-employment-type.entity.ts");
const organization_positions_entity_1 = __webpack_require__(/*! ../organization-positions/organization-positions.entity */ "./src/app/organization-positions/organization-positions.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const candidate_education_entity_1 = __webpack_require__(/*! ../candidate-education/candidate-education.entity */ "./src/app/candidate-education/candidate-education.entity.ts");
const candidate_source_entity_1 = __webpack_require__(/*! ../candidate-source/candidate-source.entity */ "./src/app/candidate-source/candidate-source.entity.ts");
const candidate_documents_entity_1 = __webpack_require__(/*! ../candidate-documents/candidate-documents.entity */ "./src/app/candidate-documents/candidate-documents.entity.ts");
const candidate_feedbacks_entity_1 = __webpack_require__(/*! ../candidate-feedbacks/candidate-feedbacks.entity */ "./src/app/candidate-feedbacks/candidate-feedbacks.entity.ts");
const candidate_interview_entity_1 = __webpack_require__(/*! ../candidate-interview/candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
const contact_entity_1 = __webpack_require__(/*! ../contact/contact.entity */ "./src/app/contact/contact.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let Candidate = class Candidate extends tenant_organization_base_1.TenantOrganizationBase {
    calculateRatings() {
        if (Array.isArray(this.feedbacks)) {
            this.ratings = utils_1.average(this.feedbacks, 'rating');
        }
    }
};
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.candidate),
    typeorm_1.JoinTable({
        name: 'tag_candidate'
    }),
    tslib_1.__metadata("design:type", Array)
], Candidate.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: contact_entity_1.Contact }),
    typeorm_1.ManyToOne(() => contact_entity_1.Contact, (contact) => contact.candidates, {
        nullable: true,
        cascade: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IContact !== "undefined" && models_1.IContact) === "function" ? _a : Object)
], Candidate.prototype, "contact", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((candidate) => candidate.contact),
    tslib_1.__metadata("design:type", String)
], Candidate.prototype, "contactId", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany(() => candidate_education_entity_1.CandidateEducation, (education) => education.candidate, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Candidate.prototype, "educations", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany(() => candidate_interview_entity_1.CandidateInterview, (interview) => interview.candidate, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Candidate.prototype, "interview", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany(() => candidate_experience_entity_1.CandidateExperience, (experience) => experience.candidate, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Candidate.prototype, "experience", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany(() => candidate_skill_entity_1.CandidateSkill, (skill) => skill.candidate, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Candidate.prototype, "skills", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: candidate_source_entity_1.CandidateSource }),
    typeorm_1.OneToOne((type) => candidate_source_entity_1.CandidateSource, {
        cascade: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof models_1.ICandidateSource !== "undefined" && models_1.ICandidateSource) === "function" ? _b : Object)
], Candidate.prototype, "source", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany(() => candidate_documents_entity_1.CandidateDocument, (document) => document.candidate, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Candidate.prototype, "documents", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany(() => candidate_feedbacks_entity_1.CandidateFeedback, (feedback) => feedback.candidate, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Candidate.prototype, "feedbacks", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: user_entity_1.User }),
    typeorm_1.OneToOne((type) => user_entity_1.User, {
        cascade: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_c = typeof user_entity_1.User !== "undefined" && user_entity_1.User) === "function" ? _c : Object)
], Candidate.prototype, "user", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((candidate) => candidate.user),
    tslib_1.__metadata("design:type", String)
], Candidate.prototype, "userId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Number }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true, type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], Candidate.prototype, "rating", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: organization_positions_entity_1.OrganizationPositions }),
    typeorm_1.ManyToOne((type) => organization_positions_entity_1.OrganizationPositions, { nullable: true }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_d = typeof models_1.IOrganizationPosition !== "undefined" && models_1.IOrganizationPosition) === "function" ? _d : Object)
], Candidate.prototype, "organizationPosition", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((candidate) => candidate.organizationPosition),
    tslib_1.__metadata("design:type", String)
], Candidate.prototype, "organizationPositionId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object)
], Candidate.prototype, "valueDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_f = typeof Date !== "undefined" && Date) === "function" ? _f : Object)
], Candidate.prototype, "appliedDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_g = typeof Date !== "undefined" && Date) === "function" ? _g : Object)
], Candidate.prototype, "hiredDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.CandidateStatus }),
    class_validator_1.IsEnum(models_1.CandidateStatus),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true, default: models_1.CandidateStatus.APPLIED }),
    tslib_1.__metadata("design:type", String)
], Candidate.prototype, "status", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_h = typeof Date !== "undefined" && Date) === "function" ? _h : Object)
], Candidate.prototype, "rejectDate", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany(() => organization_department_entity_1.OrganizationDepartment, (department) => department.candidates, {
        cascade: true
    }),
    typeorm_1.JoinTable({
        name: 'candidate_department'
    }),
    tslib_1.__metadata("design:type", Array)
], Candidate.prototype, "organizationDepartments", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany(() => organization_employment_type_entity_1.OrganizationEmploymentType, (employmentType) => employmentType.candidates, {
        cascade: true
    }),
    typeorm_1.JoinTable({
        name: 'candidate_employment_type'
    }),
    tslib_1.__metadata("design:type", Array)
], Candidate.prototype, "organizationEmploymentTypes", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String, maxLength: 500 }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ length: 500, nullable: true }),
    tslib_1.__metadata("design:type", String)
], Candidate.prototype, "candidateLevel", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Number }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], Candidate.prototype, "reWeeklyLimit", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String, maxLength: 255 }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ length: 255, nullable: true }),
    tslib_1.__metadata("design:type", String)
], Candidate.prototype, "billRateCurrency", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Number }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], Candidate.prototype, "billRateValue", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.PayPeriodEnum }),
    class_validator_1.IsEnum(models_1.PayPeriodEnum),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Candidate.prototype, "payPeriod", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Candidate.prototype, "cvUrl", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean, default: false }),
    typeorm_1.Column({ nullable: true, default: false }),
    tslib_1.__metadata("design:type", Boolean)
], Candidate.prototype, "isArchived", void 0);
tslib_1.__decorate([
    typeorm_1.AfterLoad(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], Candidate.prototype, "calculateRatings", null);
Candidate = tslib_1.__decorate([
    typeorm_1.Entity('candidate')
], Candidate);
exports.Candidate = Candidate;


/***/ }),

/***/ "./src/app/candidate/candidate.module.ts":
/*!***********************************************!*\
  !*** ./src/app/candidate/candidate.module.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const candidate_controller_1 = __webpack_require__(/*! ./candidate.controller */ "./src/app/candidate/candidate.controller.ts");
const candidate_service_1 = __webpack_require__(/*! ./candidate.service */ "./src/app/candidate/candidate.service.ts");
const email_1 = __webpack_require__(/*! ../email */ "./src/app/email/index.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const auth_service_1 = __webpack_require__(/*! ../auth/auth.service */ "./src/app/auth/auth.service.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const candidate_entity_1 = __webpack_require__(/*! ./candidate.entity */ "./src/app/candidate/candidate.entity.ts");
const user_organization_module_1 = __webpack_require__(/*! ../user-organization/user-organization.module */ "./src/app/user-organization/user-organization.module.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/candidate/commands/handlers/index.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let CandidateModule = class CandidateModule {
};
CandidateModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([candidate_entity_1.Candidate, user_entity_1.User]),
            email_1.EmailModule,
            cqrs_1.CqrsModule,
            user_organization_module_1.UserOrganizationModule,
            tenant_module_1.TenantModule
        ],
        controllers: [candidate_controller_1.CandidateController],
        providers: [
            candidate_service_1.CandidateService,
            user_service_1.UserService,
            auth_service_1.AuthService,
            email_1.EmailService,
            ...handlers_1.CommandHandlers
        ],
        exports: [candidate_service_1.CandidateService]
    })
], CandidateModule);
exports.CandidateModule = CandidateModule;


/***/ }),

/***/ "./src/app/candidate/candidate.seed.ts":
/*!*********************************************!*\
  !*** ./src/app/candidate/candidate.seed.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomCandidates = exports.createDefaultCandidates = void 0;
const candidate_entity_1 = __webpack_require__(/*! ./candidate.entity */ "./src/app/candidate/candidate.entity.ts");
exports.createDefaultCandidates = async (connection, defaultData) => {
    const defaultUsers = defaultData.users;
    const defaultOrg = defaultData.org;
    const defaultTenant = defaultData.tenant;
    const candidates = [];
    for (const user of defaultUsers) {
        const candidate = new candidate_entity_1.Candidate();
        candidate.organization = defaultOrg;
        candidate.user = user;
        candidate.isArchived = false;
        candidate.tenant = defaultTenant;
        candidates.push(candidate);
    }
    return await insertCandidates(connection, candidates);
};
exports.createRandomCandidates = async (connection, tenants, tenantOrganizationsMap, tenantUsersMap, candidatesPerOrganization) => {
    const candidateMap = new Map();
    for (const tenant of tenants) {
        const candidates = [];
        const randomUsers = tenantUsersMap.get(tenant).candidateUsers;
        const randomOrgs = tenantOrganizationsMap.get(tenant);
        const insertCandidatesInToOrganization = async (quantity, organization) => {
            for (let index = 0; index < quantity; index++) {
                const candidate = new candidate_entity_1.Candidate();
                candidate.tenant = tenant;
                candidate.organization = organization;
                candidate.isArchived = false;
                candidate.user = randomUsers.pop();
                if (candidate.user) {
                    candidates.push(candidate);
                }
            }
            await insertCandidates(connection, candidates);
        };
        for (const org of randomOrgs) {
            if (randomUsers.length) {
                await insertCandidatesInToOrganization(candidatesPerOrganization, org);
            }
        }
        candidateMap.set(tenant, candidates);
    }
    return candidateMap;
};
const insertCandidates = async (connection, candidates) => {
    return await connection.manager.save(candidates);
};


/***/ }),

/***/ "./src/app/candidate/candidate.service.ts":
/*!************************************************!*\
  !*** ./src/app/candidate/candidate.service.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const candidate_entity_1 = __webpack_require__(/*! ./candidate.entity */ "./src/app/candidate/candidate.entity.ts");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
let CandidateService = class CandidateService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(candidateRepository) {
        super(candidateRepository);
        this.candidateRepository = candidateRepository;
    }
    async createBulk(input) {
        return Promise.all(input.map((candidate) => {
            candidate.user.tenant = {
                id: candidate.organization.tenantId
            };
            return this.create(candidate);
        }));
    }
};
CandidateService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(candidate_entity_1.Candidate)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], CandidateService);
exports.CandidateService = CandidateService;


/***/ }),

/***/ "./src/app/candidate/commands/candidate.bulk.create.command.ts":
/*!*********************************************************************!*\
  !*** ./src/app/candidate/commands/candidate.bulk.create.command.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateBulkCreateCommand = void 0;
class CandidateBulkCreateCommand {
    constructor(input, languageCode) {
        this.input = input;
        this.languageCode = languageCode;
    }
}
exports.CandidateBulkCreateCommand = CandidateBulkCreateCommand;
CandidateBulkCreateCommand.type = '[Candidate] Register';


/***/ }),

/***/ "./src/app/candidate/commands/candidate.create.command.ts":
/*!****************************************************************!*\
  !*** ./src/app/candidate/commands/candidate.create.command.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateCreateCommand = void 0;
class CandidateCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.CandidateCreateCommand = CandidateCreateCommand;
CandidateCreateCommand.type = '[Candidate] Register';


/***/ }),

/***/ "./src/app/candidate/commands/candidate.update.command.ts":
/*!****************************************************************!*\
  !*** ./src/app/candidate/commands/candidate.update.command.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateUpdateCommand = void 0;
class CandidateUpdateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.CandidateUpdateCommand = CandidateUpdateCommand;
CandidateUpdateCommand.type = '[Candidate] Update';


/***/ }),

/***/ "./src/app/candidate/commands/handlers/candidate.bulk.create.handler.ts":
/*!******************************************************************************!*\
  !*** ./src/app/candidate/commands/handlers/candidate.bulk.create.handler.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateBulkCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const auth_service_1 = __webpack_require__(/*! ../../../auth/auth.service */ "./src/app/auth/auth.service.ts");
const email_1 = __webpack_require__(/*! ../../../email */ "./src/app/email/index.ts");
const candidate_bulk_create_command_1 = __webpack_require__(/*! ../candidate.bulk.create.command */ "./src/app/candidate/commands/candidate.bulk.create.command.ts");
const candidate_service_1 = __webpack_require__(/*! ../../candidate.service */ "./src/app/candidate/candidate.service.ts");
let CandidateBulkCreateHandler = class CandidateBulkCreateHandler {
    constructor(candidateService, authService, emailService) {
        this.candidateService = candidateService;
        this.authService = authService;
        this.emailService = emailService;
    }
    async execute(command) {
        const { input, languageCode } = command;
        const inputWithHash = await this._loadPasswordHash(input);
        const createdCandidates = await this.candidateService.createBulk(inputWithHash);
        this._sendWelcomeEmail(createdCandidates, languageCode);
        return createdCandidates;
    }
    _sendWelcomeEmail(candidates, languageCode) {
        candidates.forEach((candidate) => this.emailService.welcomeUser(candidate.user, languageCode, candidate.organization.id));
    }
    async _loadPasswordHash(input) {
        const mappedInput = input.map(async (entity) => {
            entity.user.hash = await this.authService.getPasswordHash(entity.password);
            return entity;
        });
        return Promise.all(mappedInput);
    }
};
CandidateBulkCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(candidate_bulk_create_command_1.CandidateBulkCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof candidate_service_1.CandidateService !== "undefined" && candidate_service_1.CandidateService) === "function" ? _a : Object, typeof (_b = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _b : Object, typeof (_c = typeof email_1.EmailService !== "undefined" && email_1.EmailService) === "function" ? _c : Object])
], CandidateBulkCreateHandler);
exports.CandidateBulkCreateHandler = CandidateBulkCreateHandler;


/***/ }),

/***/ "./src/app/candidate/commands/handlers/candidate.create.handler.ts":
/*!*************************************************************************!*\
  !*** ./src/app/candidate/commands/handlers/candidate.create.handler.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const candidate_create_command_1 = __webpack_require__(/*! ../candidate.create.command */ "./src/app/candidate/commands/candidate.create.command.ts");
const candidate_service_1 = __webpack_require__(/*! ../../candidate.service */ "./src/app/candidate/candidate.service.ts");
let CandidateCreateHandler = class CandidateCreateHandler {
    constructor(candidateService) {
        this.candidateService = candidateService;
    }
    async execute(command) {
        const { input } = command;
        return await this.candidateService.create(input);
    }
};
CandidateCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(candidate_create_command_1.CandidateCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof candidate_service_1.CandidateService !== "undefined" && candidate_service_1.CandidateService) === "function" ? _a : Object])
], CandidateCreateHandler);
exports.CandidateCreateHandler = CandidateCreateHandler;


/***/ }),

/***/ "./src/app/candidate/commands/handlers/candidate.update.handler.ts":
/*!*************************************************************************!*\
  !*** ./src/app/candidate/commands/handlers/candidate.update.handler.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const candidate_service_1 = __webpack_require__(/*! ../../candidate.service */ "./src/app/candidate/candidate.service.ts");
const candidate_update_command_1 = __webpack_require__(/*! ../candidate.update.command */ "./src/app/candidate/commands/candidate.update.command.ts");
let CandidateUpdateHandler = class CandidateUpdateHandler {
    constructor(candidateService) {
        this.candidateService = candidateService;
    }
    async execute(command) {
        const { input } = command;
        const { id } = input;
        return await this.candidateService.create(Object.assign({ id }, input));
    }
};
CandidateUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(candidate_update_command_1.CandidateUpdateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof candidate_service_1.CandidateService !== "undefined" && candidate_service_1.CandidateService) === "function" ? _a : Object])
], CandidateUpdateHandler);
exports.CandidateUpdateHandler = CandidateUpdateHandler;


/***/ }),

/***/ "./src/app/candidate/commands/handlers/index.ts":
/*!******************************************************!*\
  !*** ./src/app/candidate/commands/handlers/index.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const candidate_bulk_create_handler_1 = __webpack_require__(/*! ./candidate.bulk.create.handler */ "./src/app/candidate/commands/handlers/candidate.bulk.create.handler.ts");
const candidate_create_handler_1 = __webpack_require__(/*! ./candidate.create.handler */ "./src/app/candidate/commands/handlers/candidate.create.handler.ts");
const candidate_update_handler_1 = __webpack_require__(/*! ./candidate.update.handler */ "./src/app/candidate/commands/handlers/candidate.update.handler.ts");
exports.CommandHandlers = [
    candidate_bulk_create_handler_1.CandidateBulkCreateHandler,
    candidate_create_handler_1.CandidateCreateHandler,
    candidate_update_handler_1.CandidateUpdateHandler
];


/***/ }),

/***/ "./src/app/candidate/commands/index.ts":
/*!*********************************************!*\
  !*** ./src/app/candidate/commands/index.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CandidateUpdateCommand = exports.CandidateCreateCommand = exports.CandidateBulkCreateCommand = void 0;
var candidate_bulk_create_command_1 = __webpack_require__(/*! ./candidate.bulk.create.command */ "./src/app/candidate/commands/candidate.bulk.create.command.ts");
Object.defineProperty(exports, "CandidateBulkCreateCommand", { enumerable: true, get: function () { return candidate_bulk_create_command_1.CandidateBulkCreateCommand; } });
var candidate_create_command_1 = __webpack_require__(/*! ./candidate.create.command */ "./src/app/candidate/commands/candidate.create.command.ts");
Object.defineProperty(exports, "CandidateCreateCommand", { enumerable: true, get: function () { return candidate_create_command_1.CandidateCreateCommand; } });
var candidate_update_command_1 = __webpack_require__(/*! ./candidate.update.command */ "./src/app/candidate/commands/candidate.update.command.ts");
Object.defineProperty(exports, "CandidateUpdateCommand", { enumerable: true, get: function () { return candidate_update_command_1.CandidateUpdateCommand; } });


/***/ }),

/***/ "./src/app/candidate/default-candidates.ts":
/*!*************************************************!*\
  !*** ./src/app/candidate/default-candidates.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_CANDIDATES = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
exports.DEFAULT_CANDIDATES = [
    {
        email: 'john@ever.co',
        password: '123456',
        firstName: 'John',
        lastName: 'Smith',
        imageUrl: 'assets/images/avatars/alish.jpg',
        candidateLevel: 'D',
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'jaye@ever.co',
        password: '123456',
        firstName: 'Jaye',
        lastName: 'Jeffreys',
        imageUrl: 'assets/images/avatars/alexander.jpg',
        candidateLevel: 'B',
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'kasey@ever.co',
        password: '123456',
        firstName: 'Kasey',
        lastName: 'Kraker',
        imageUrl: 'assets/images/avatars/rachit.png',
        candidateLevel: null,
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'norris@ever.co',
        password: '123456',
        firstName: 'Norris ',
        lastName: 'Nesbit',
        imageUrl: 'assets/images/avatars/blagovest.jpg',
        candidateLevel: 'A',
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'estella@ever.co',
        password: '123456',
        firstName: 'Estella',
        lastName: 'Ennis',
        imageUrl: 'assets/images/avatars/dimana.jpeg',
        candidateLevel: null,
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'greg@ever.co',
        password: '123456',
        firstName: 'Greg ',
        lastName: 'Grise',
        imageUrl: 'assets/images/avatars/hristo.jpg',
        candidateLevel: 'A',
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    }
];


/***/ }),

/***/ "./src/app/config/config.module.ts":
/*!*****************************************!*\
  !*** ./src/app/config/config.module.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const config_service_1 = __webpack_require__(/*! ./config.service */ "./src/app/config/config.service.ts");
let ConfigModule = class ConfigModule {
};
ConfigModule = tslib_1.__decorate([
    common_1.Global(),
    common_1.Module({
        providers: [config_service_1.ConfigService],
        exports: [config_service_1.ConfigService],
    })
], ConfigModule);
exports.ConfigModule = ConfigModule;


/***/ }),

/***/ "./src/app/config/config.service.ts":
/*!******************************************!*\
  !*** ./src/app/config/config.service.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ConfigService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const packageJson = null;
let ConfigService = ConfigService_1 = class ConfigService {
    constructor() {
        this.logger = new common_1.Logger(ConfigService_1.name);
        this.config = environment_1.environment;
        for (const [key, value] of Object.entries(environment_1.environment.env)) {
            process.env[key] = value;
        }
        this.logger.log('Is Production: ' + environment_1.environment.production);
        if (packageJson) {
            this.logger.log('Package.json version: ' + packageJson.version);
        }
    }
    get(key) {
        return this.config[key];
    }
    getVersion() {
        if (!process.env.APP_VERSION) {
            if (packageJson && packageJson.version) {
                process.env.APP_VERSION = packageJson.version;
            }
        }
        return process.env.APP_VERSION;
    }
    isProd() {
        return this.config.production;
    }
};
ConfigService = ConfigService_1 = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], ConfigService);
exports.ConfigService = ConfigService;


/***/ }),

/***/ "./src/app/config/index.ts":
/*!*********************************!*\
  !*** ./src/app/config/index.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./config.module */ "./src/app/config/config.module.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./config.service */ "./src/app/config/config.service.ts"), exports);


/***/ }),

/***/ "./src/app/contact/contact.entity.ts":
/*!*******************************************!*\
  !*** ./src/app/contact/contact.entity.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Contact = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const candidate_entity_1 = __webpack_require__(/*! ../candidate/candidate.entity */ "./src/app/candidate/candidate.entity.ts");
let Contact = class Contact extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Contact.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Contact.prototype, "firstName", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Contact.prototype, "lastName", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Contact.prototype, "country", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Contact.prototype, "city", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Contact.prototype, "address", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Contact.prototype, "address2", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], Contact.prototype, "postcode", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true, type: 'float', scale: 6 }),
    tslib_1.__metadata("design:type", Number)
], Contact.prototype, "latitude", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true, type: 'float', scale: 6 }),
    tslib_1.__metadata("design:type", Number)
], Contact.prototype, "longitude", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Contact.prototype, "regionCode", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Contact.prototype, "fax", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Contact.prototype, "fiscalInformation", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Contact.prototype, "website", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: organization_contact_entity_1.OrganizationContact }),
    typeorm_1.OneToMany(() => organization_contact_entity_1.OrganizationContact, (organizationContact) => organizationContact.contact, {
        onDelete: 'SET NULL'
    }),
    tslib_1.__metadata("design:type", Array)
], Contact.prototype, "organization_contacts", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.OneToMany(() => employee_entity_1.Employee, (employee) => employee.contact),
    tslib_1.__metadata("design:type", Array)
], Contact.prototype, "employees", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: candidate_entity_1.Candidate }),
    typeorm_1.OneToMany(() => candidate_entity_1.Candidate, (candidate) => candidate.contact, {
        onDelete: 'SET NULL'
    }),
    tslib_1.__metadata("design:type", Array)
], Contact.prototype, "candidates", void 0);
Contact = tslib_1.__decorate([
    typeorm_1.Entity('contact')
], Contact);
exports.Contact = Contact;


/***/ }),

/***/ "./src/app/contact/contact.seed.ts":
/*!*****************************************!*\
  !*** ./src/app/contact/contact.seed.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomContacts = void 0;
const contact_entity_1 = __webpack_require__(/*! ./contact.entity */ "./src/app/contact/contact.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const country_1 = __webpack_require__(/*! ../country */ "./src/app/country/index.ts");
exports.createRandomContacts = async (connection, tenant, organizations, noOfRandomContacts) => {
    const countries = await connection.manager.find(country_1.Country);
    const contacts = [];
    for (let i = 0; i < noOfRandomContacts; i++) {
        organizations.forEach((organization) => {
            const contact = new contact_entity_1.Contact();
            contact.firstName = faker.name.firstName();
            contact.lastName = faker.name.lastName();
            contact.address = faker.address.streetAddress();
            contact.address2 = faker.address.secondaryAddress();
            contact.city = faker.address.city();
            contact.country = faker.random.arrayElement(countries).isoCode;
            contact.name = contact.firstName + ' ' + contact.lastName;
            contact.organization = organization;
            contact.tenant = tenant;
            contacts.push(contact);
        });
    }
    return await connection.manager.save(contacts);
};


/***/ }),

/***/ "./src/app/contact/contact.service.ts":
/*!********************************************!*\
  !*** ./src/app/contact/contact.service.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContactService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const contact_entity_1 = __webpack_require__(/*! ./contact.entity */ "./src/app/contact/contact.entity.ts");
let ContactService = class ContactService extends core_1.CrudService {
    constructor(contactRepository) {
        super(contactRepository);
        this.contactRepository = contactRepository;
    }
    async saveContact(contactRequest) {
        return this.contactRepository.save(contactRequest);
    }
};
ContactService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(contact_entity_1.Contact)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], ContactService);
exports.ContactService = ContactService;


/***/ }),

/***/ "./src/app/core/context/index.ts":
/*!***************************************!*\
  !*** ./src/app/core/context/index.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./request-context */ "./src/app/core/context/request-context.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./request-context.middleware */ "./src/app/core/context/request-context.middleware.ts"), exports);


/***/ }),

/***/ "./src/app/core/context/request-context.middleware.ts":
/*!************************************************************!*\
  !*** ./src/app/core/context/request-context.middleware.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestContextMiddleware = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cls = __webpack_require__(/*! cls-hooked */ "cls-hooked");
const request_context_1 = __webpack_require__(/*! ./request-context */ "./src/app/core/context/request-context.ts");
let RequestContextMiddleware = class RequestContextMiddleware {
    use(req, res, next) {
        const requestContext = new request_context_1.RequestContext(req, res);
        const session = cls.getNamespace(request_context_1.RequestContext.name) || cls.createNamespace(request_context_1.RequestContext.name);
        session.run(async () => {
            session.set(request_context_1.RequestContext.name, requestContext);
            next();
        });
    }
};
RequestContextMiddleware = tslib_1.__decorate([
    common_1.Injectable()
], RequestContextMiddleware);
exports.RequestContextMiddleware = RequestContextMiddleware;


/***/ }),

/***/ "./src/app/core/context/request-context.ts":
/*!*************************************************!*\
  !*** ./src/app/core/context/request-context.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestContext = void 0;
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cls = __webpack_require__(/*! cls-hooked */ "cls-hooked");
const passport_jwt_1 = __webpack_require__(/*! passport-jwt */ "passport-jwt");
const jsonwebtoken_1 = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
class RequestContext {
    constructor(request, response) {
        this.id = Math.random();
        this.request = request;
        this.response = response;
    }
    static currentRequestContext() {
        const session = cls.getNamespace(RequestContext.name);
        if (session && session.active) {
            return session.get(RequestContext.name);
        }
        return null;
    }
    static currentRequest() {
        const requestContext = RequestContext.currentRequestContext();
        if (requestContext) {
            return requestContext.request;
        }
        return null;
    }
    static currentTenantId() {
        const user = RequestContext.currentUser();
        if (user) {
            return user.tenantId;
        }
        return null;
    }
    static currentUser(throwError) {
        const requestContext = RequestContext.currentRequestContext();
        if (requestContext) {
            const user = requestContext.request['user'];
            if (user) {
                return user;
            }
        }
        if (throwError) {
            throw new common_1.HttpException('Unauthorized', common_1.HttpStatus.UNAUTHORIZED);
        }
        return null;
    }
    static hasPermission(permission, throwError) {
        return this.hasPermissions([permission], throwError);
    }
    static getLanguageCode() {
        const req = this.currentRequest();
        let lang;
        const keys = ['language'];
        if (req) {
            for (const key of keys) {
                if (req.headers && req.headers[key]) {
                    lang = req.headers[key];
                    break;
                }
            }
        }
        return lang;
    }
    static hasPermissions(findPermissions, throwError) {
        const requestContext = RequestContext.currentRequestContext();
        if (requestContext) {
            const token = passport_jwt_1.ExtractJwt.fromAuthHeaderAsBearerToken()(requestContext.request);
            if (token) {
                const { permissions } = jsonwebtoken_1.verify(token, environment_1.environment.JWT_SECRET);
                if (permissions) {
                    const found = permissions.filter((value) => findPermissions.indexOf(value) >= 0);
                    if (found.length === findPermissions.length) {
                        return true;
                    }
                }
                else {
                    return false;
                }
            }
        }
        if (throwError) {
            throw new common_1.HttpException('Unauthorized', common_1.HttpStatus.UNAUTHORIZED);
        }
        return false;
    }
    static hasAnyPermission(findPermissions, throwError) {
        const requestContext = RequestContext.currentRequestContext();
        if (requestContext) {
            const token = passport_jwt_1.ExtractJwt.fromAuthHeaderAsBearerToken()(requestContext.request);
            if (token) {
                const { permissions } = jsonwebtoken_1.verify(token, environment_1.environment.JWT_SECRET);
                const found = permissions.filter((value) => findPermissions.indexOf(value) >= 0);
                if (found.length > 0) {
                    return true;
                }
            }
        }
        if (throwError) {
            throw new common_1.HttpException('Unauthorized', common_1.HttpStatus.UNAUTHORIZED);
        }
        return false;
    }
    static currentToken(throwError) {
        const requestContext = RequestContext.currentRequestContext();
        if (requestContext) {
            return passport_jwt_1.ExtractJwt.fromAuthHeaderAsBearerToken()(requestContext.request);
        }
        if (throwError) {
            throw new common_1.HttpException('Unauthorized', common_1.HttpStatus.UNAUTHORIZED);
        }
        return null;
    }
    static hasRole(role, throwError) {
        return this.hasRoles([role], throwError);
    }
    static hasRoles(findRoles, throwError) {
        const requestContext = RequestContext.currentRequestContext();
        if (requestContext) {
            try {
                const token = this.currentToken();
                if (token) {
                    const { role } = jsonwebtoken_1.verify(token, environment_1.environment.JWT_SECRET);
                    return role ? findRoles.includes(role) : false;
                }
            }
            catch (error) {
                if (error instanceof jsonwebtoken_1.JsonWebTokenError) {
                    return false;
                }
                else {
                    throw error;
                }
            }
        }
        if (throwError) {
            throw new common_1.HttpException('Unauthorized', common_1.HttpStatus.UNAUTHORIZED);
        }
        return false;
    }
}
exports.RequestContext = RequestContext;


/***/ }),

/***/ "./src/app/core/core.module.ts":
/*!*************************************!*\
  !*** ./src/app/core/core.module.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const candidate_interviewers_entity_1 = __webpack_require__(/*! ./../candidate-interviewers/candidate-interviewers.entity */ "./src/app/candidate-interviewers/candidate-interviewers.entity.ts");
const invoice_entity_1 = __webpack_require__(/*! ../invoice/invoice.entity */ "./src/app/invoice/invoice.entity.ts");
const invoice_item_entity_1 = __webpack_require__(/*! ../invoice-item/invoice-item.entity */ "./src/app/invoice-item/invoice-item.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const skill_entity_1 = __webpack_require__(/*! ../skills/skill.entity */ "./src/app/skills/skill.entity.ts");
const language_entity_1 = __webpack_require__(/*! ../language/language.entity */ "./src/app/language/language.entity.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const config_1 = __webpack_require__(/*! ../config */ "./src/app/config/index.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const role_entity_1 = __webpack_require__(/*! ../role/role.entity */ "./src/app/role/role.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const income_entity_1 = __webpack_require__(/*! ../income/income.entity */ "./src/app/income/income.entity.ts");
const expense_entity_1 = __webpack_require__(/*! ../expense/expense.entity */ "./src/app/expense/expense.entity.ts");
const employee_setting_1 = __webpack_require__(/*! ../employee-setting */ "./src/app/employee-setting/index.ts");
const context_1 = __webpack_require__(/*! ./context */ "./src/app/core/context/index.ts");
const user_organization_entity_1 = __webpack_require__(/*! ../user-organization/user-organization.entity */ "./src/app/user-organization/user-organization.entity.ts");
const organization_department_entity_1 = __webpack_require__(/*! ../organization-department/organization-department.entity */ "./src/app/organization-department/organization-department.entity.ts");
const organization_recurring_expense_entity_1 = __webpack_require__(/*! ../organization-recurring-expense/organization-recurring-expense.entity */ "./src/app/organization-recurring-expense/organization-recurring-expense.entity.ts");
const employee_recurring_expense_entity_1 = __webpack_require__(/*! ../employee-recurring-expense/employee-recurring-expense.entity */ "./src/app/employee-recurring-expense/employee-recurring-expense.entity.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const organization_positions_entity_1 = __webpack_require__(/*! ../organization-positions/organization-positions.entity */ "./src/app/organization-positions/organization-positions.entity.ts");
const organization_vendors_entity_1 = __webpack_require__(/*! ../organization-vendors/organization-vendors.entity */ "./src/app/organization-vendors/organization-vendors.entity.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const organization_team_entity_1 = __webpack_require__(/*! ../organization-team/organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const organization_team_employee_entity_1 = __webpack_require__(/*! ../organization-team-employee/organization-team-employee.entity */ "./src/app/organization-team-employee/organization-team-employee.entity.ts");
const organization_awards_entity_1 = __webpack_require__(/*! ../organization-awards/organization-awards.entity */ "./src/app/organization-awards/organization-awards.entity.ts");
const organization_languages_entity_1 = __webpack_require__(/*! ../organization-languages/organization-languages.entity */ "./src/app/organization-languages/organization-languages.entity.ts");
const proposal_entity_1 = __webpack_require__(/*! ../proposal/proposal.entity */ "./src/app/proposal/proposal.entity.ts");
const country_entity_1 = __webpack_require__(/*! ../country/country.entity */ "./src/app/country/country.entity.ts");
const invite_entity_1 = __webpack_require__(/*! ../invite/invite.entity */ "./src/app/invite/invite.entity.ts");
const email_entity_1 = __webpack_require__(/*! ../email/email.entity */ "./src/app/email/email.entity.ts");
const time_off_policy_entity_1 = __webpack_require__(/*! ../time-off-policy/time-off-policy.entity */ "./src/app/time-off-policy/time-off-policy.entity.ts");
const role_permissions_entity_1 = __webpack_require__(/*! ../role-permissions/role-permissions.entity */ "./src/app/role-permissions/role-permissions.entity.ts");
const tenant_entity_1 = __webpack_require__(/*! ./../tenant/tenant.entity */ "./src/app/tenant/tenant.entity.ts");
const email_template_entity_1 = __webpack_require__(/*! ../email-template/email-template.entity */ "./src/app/email-template/email-template.entity.ts");
const organization_employment_type_entity_1 = __webpack_require__(/*! ../organization-employment-type/organization-employment-type.entity */ "./src/app/organization-employment-type/organization-employment-type.entity.ts");
const equipment_entity_1 = __webpack_require__(/*! ../equipment/equipment.entity */ "./src/app/equipment/equipment.entity.ts");
const organization_employee_level_entity_1 = __webpack_require__(/*! ../organization_employee-level/organization-employee-level.entity */ "./src/app/organization_employee-level/organization-employee-level.entity.ts");
const task_entity_1 = __webpack_require__(/*! ../tasks/task.entity */ "./src/app/tasks/task.entity.ts");
const timesheet_entity_1 = __webpack_require__(/*! ../timesheet/timesheet.entity */ "./src/app/timesheet/timesheet.entity.ts");
const time_slot_entity_1 = __webpack_require__(/*! ../timesheet/time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const activity_entity_1 = __webpack_require__(/*! ../timesheet/activity.entity */ "./src/app/timesheet/activity.entity.ts");
const screenshot_entity_1 = __webpack_require__(/*! ../timesheet/screenshot.entity */ "./src/app/timesheet/screenshot.entity.ts");
const time_log_entity_1 = __webpack_require__(/*! ../timesheet/time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const expense_category_entity_1 = __webpack_require__(/*! ../expense-categories/expense-category.entity */ "./src/app/expense-categories/expense-category.entity.ts");
const equipment_sharing_entity_1 = __webpack_require__(/*! ../equipment-sharing/equipment-sharing.entity */ "./src/app/equipment-sharing/equipment-sharing.entity.ts");
const product_entity_1 = __webpack_require__(/*! ../product/product.entity */ "./src/app/product/product.entity.ts");
const product_option_entity_1 = __webpack_require__(/*! ../product-option/product-option.entity */ "./src/app/product-option/product-option.entity.ts");
const product_settings_entity_1 = __webpack_require__(/*! ../product-settings/product-settings.entity */ "./src/app/product-settings/product-settings.entity.ts");
const product_type_entity_1 = __webpack_require__(/*! ../product-type/product-type.entity */ "./src/app/product-type/product-type.entity.ts");
const product_variant_entity_1 = __webpack_require__(/*! ../product-variant/product-variant.entity */ "./src/app/product-variant/product-variant.entity.ts");
const product_variant_price_entity_1 = __webpack_require__(/*! ../product-variant-price/product-variant-price.entity */ "./src/app/product-variant-price/product-variant-price.entity.ts");
const product_category_entity_1 = __webpack_require__(/*! ../product-category/product-category.entity */ "./src/app/product-category/product-category.entity.ts");
const candidate_source_entity_1 = __webpack_require__(/*! ../candidate-source/candidate-source.entity */ "./src/app/candidate-source/candidate-source.entity.ts");
const integration_setting_entity_1 = __webpack_require__(/*! ../integration-setting/integration-setting.entity */ "./src/app/integration-setting/integration-setting.entity.ts");
const integration_tenant_entity_1 = __webpack_require__(/*! ../integration-tenant/integration-tenant.entity */ "./src/app/integration-tenant/integration-tenant.entity.ts");
const integration_map_entity_1 = __webpack_require__(/*! ../integration-map/integration-map.entity */ "./src/app/integration-map/integration-map.entity.ts");
const candidate_entity_1 = __webpack_require__(/*! ../candidate/candidate.entity */ "./src/app/candidate/candidate.entity.ts");
const integration_entity_setting_entity_1 = __webpack_require__(/*! ../integration-entity-setting/integration-entity-setting.entity */ "./src/app/integration-entity-setting/integration-entity-setting.entity.ts");
const integration_entity_setting_tied_entity_entity_1 = __webpack_require__(/*! ../integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.entity */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.entity.ts");
const candidate_education_entity_1 = __webpack_require__(/*! ../candidate-education/candidate-education.entity */ "./src/app/candidate-education/candidate-education.entity.ts");
const candidate_documents_entity_1 = __webpack_require__(/*! ../candidate-documents/candidate-documents.entity */ "./src/app/candidate-documents/candidate-documents.entity.ts");
const candidate_skill_entity_1 = __webpack_require__(/*! ../candidate-skill/candidate-skill.entity */ "./src/app/candidate-skill/candidate-skill.entity.ts");
const candidate_experience_entity_1 = __webpack_require__(/*! ./../candidate-experience/candidate-experience.entity */ "./src/app/candidate-experience/candidate-experience.entity.ts");
const candidate_feedbacks_entity_1 = __webpack_require__(/*! ./../candidate-feedbacks/candidate-feedbacks.entity */ "./src/app/candidate-feedbacks/candidate-feedbacks.entity.ts");
const integration_entity_1 = __webpack_require__(/*! ../integration/integration.entity */ "./src/app/integration/integration.entity.ts");
const integration_type_entity_1 = __webpack_require__(/*! ../integration/integration-type.entity */ "./src/app/integration/integration-type.entity.ts");
const candidate_interview_entity_1 = __webpack_require__(/*! ../candidate-interview/candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
const employee_appointment_1 = __webpack_require__(/*! ../employee-appointment */ "./src/app/employee-appointment/index.ts");
const appointment_employees_entity_1 = __webpack_require__(/*! ../appointment-employees/appointment-employees.entity */ "./src/app/appointment-employees/appointment-employees.entity.ts");
const request_approval_entity_1 = __webpack_require__(/*! ../request-approval/request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const request_approval_employee_entity_1 = __webpack_require__(/*! ../request-approval-employee/request-approval-employee.entity */ "./src/app/request-approval-employee/request-approval-employee.entity.ts");
const approval_policy_entity_1 = __webpack_require__(/*! ../approval-policy/approval-policy.entity */ "./src/app/approval-policy/approval-policy.entity.ts");
const event_type_entity_1 = __webpack_require__(/*! ../event-types/event-type.entity */ "./src/app/event-types/event-type.entity.ts");
const availability_slots_entity_1 = __webpack_require__(/*! ../availability-slots/availability-slots.entity */ "./src/app/availability-slots/availability-slots.entity.ts");
const product_type_translation_entity_1 = __webpack_require__(/*! ../product-type/product-type-translation.entity */ "./src/app/product-type/product-type-translation.entity.ts");
const help_center_entity_1 = __webpack_require__(/*! ../help-center/help-center.entity */ "./src/app/help-center/help-center.entity.ts");
const help_center_author_entity_1 = __webpack_require__(/*! ./../help-center-author/help-center-author.entity */ "./src/app/help-center-author/help-center-author.entity.ts");
const product_category_translation_entity_1 = __webpack_require__(/*! ../product-category/product-category-translation.entity */ "./src/app/product-category/product-category-translation.entity.ts");
const pipeline_entity_1 = __webpack_require__(/*! ../pipeline/pipeline.entity */ "./src/app/pipeline/pipeline.entity.ts");
const payment_entity_1 = __webpack_require__(/*! ../payment/payment.entity */ "./src/app/payment/payment.entity.ts");
const candidate_personal_qualities_entity_1 = __webpack_require__(/*! ../candidate-personal-qualities/candidate-personal-qualities.entity */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.entity.ts");
const pipeline_stage_entity_1 = __webpack_require__(/*! ../pipeline-stage/pipeline-stage.entity */ "./src/app/pipeline-stage/pipeline-stage.entity.ts");
const candidate_technologies_entity_1 = __webpack_require__(/*! ../candidate-technologies/candidate-technologies.entity */ "./src/app/candidate-technologies/candidate-technologies.entity.ts");
const goal_entity_1 = __webpack_require__(/*! ../goal/goal.entity */ "./src/app/goal/goal.entity.ts");
const keyresult_entity_1 = __webpack_require__(/*! ../keyresult/keyresult.entity */ "./src/app/keyresult/keyresult.entity.ts");
const request_approval_team_entity_1 = __webpack_require__(/*! ../request-approval-team/request-approval-team.entity */ "./src/app/request-approval-team/request-approval-team.entity.ts");
const keyresult_update_entity_1 = __webpack_require__(/*! ../keyresult-update/keyresult-update.entity */ "./src/app/keyresult-update/keyresult-update.entity.ts");
const candidate_criterion_rating_entity_1 = __webpack_require__(/*! ../candidate-criterions-rating/candidate-criterion-rating.entity */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.entity.ts");
const help_center_article_entity_1 = __webpack_require__(/*! ../help-center-article/help-center-article.entity */ "./src/app/help-center-article/help-center-article.entity.ts");
const goal_time_frame_entity_1 = __webpack_require__(/*! ../goal-time-frame/goal-time-frame.entity */ "./src/app/goal-time-frame/goal-time-frame.entity.ts");
const estimate_email_entity_1 = __webpack_require__(/*! ../estimate-email/estimate-email.entity */ "./src/app/estimate-email/estimate-email.entity.ts");
const time_slot_minute_entity_1 = __webpack_require__(/*! ../timesheet/time-slot-minute.entity */ "./src/app/timesheet/time-slot-minute.entity.ts");
const contact_entity_1 = __webpack_require__(/*! ../contact/contact.entity */ "./src/app/contact/contact.entity.ts");
const time_off_request_entity_1 = __webpack_require__(/*! ../time-off-request/time-off-request.entity */ "./src/app/time-off-request/time-off-request.entity.ts");
const deal_entity_1 = __webpack_require__(/*! ../deal/deal.entity */ "./src/app/deal/deal.entity.ts");
const organization_sprint_entity_1 = __webpack_require__(/*! ../organization-sprint/organization-sprint.entity */ "./src/app/organization-sprint/organization-sprint.entity.ts");
const goal_kpi_entity_1 = __webpack_require__(/*! ../goal-kpi/goal-kpi.entity */ "./src/app/goal-kpi/goal-kpi.entity.ts");
const organization_documents_entity_1 = __webpack_require__(/*! ../organization-documents/organization-documents.entity */ "./src/app/organization-documents/organization-documents.entity.ts");
const goal_general_setting_entity_1 = __webpack_require__(/*! ../goal-general-setting/goal-general-setting.entity */ "./src/app/goal-general-setting/goal-general-setting.entity.ts");
const equipment_sharing_policy_entity_1 = __webpack_require__(/*! ../equipment-sharing-policy/equipment-sharing-policy.entity */ "./src/app/equipment-sharing-policy/equipment-sharing-policy.entity.ts");
const keyresult_template_entity_1 = __webpack_require__(/*! ../keyresult-template/keyresult-template.entity */ "./src/app/keyresult-template/keyresult-template.entity.ts");
const goal_template_entity_1 = __webpack_require__(/*! ../goal-template/goal-template.entity */ "./src/app/goal-template/goal-template.entity.ts");
const employee_award_entity_1 = __webpack_require__(/*! ../employee-award/employee-award.entity */ "./src/app/employee-award/employee-award.entity.ts");
const invoice_estimate_history_entity_1 = __webpack_require__(/*! ../invoice-estimate-history/invoice-estimate-history.entity */ "./src/app/invoice-estimate-history/invoice-estimate-history.entity.ts");
const goal_kpi_template_entity_1 = __webpack_require__(/*! ../goal-kpi-template/goal-kpi-template.entity */ "./src/app/goal-kpi-template/goal-kpi-template.entity.ts");
const tenant_setting_entity_1 = __webpack_require__(/*! ../tenant/tenant-setting/tenant-setting.entity */ "./src/app/tenant/tenant-setting/tenant-setting.entity.ts");
const file_storage_1 = __webpack_require__(/*! ./file-storage */ "./src/app/core/file-storage/index.ts");
const employee_upwork_jobs_search_criterion_entity_1 = __webpack_require__(/*! ../employee-job-preset/employee-upwork-jobs-search-criterion.entity */ "./src/app/employee-job-preset/employee-upwork-jobs-search-criterion.entity.ts");
const job_preset_upwork_job_search_criterion_entity_1 = __webpack_require__(/*! ../employee-job-preset/job-preset-upwork-job-search-criterion.entity */ "./src/app/employee-job-preset/job-preset-upwork-job-search-criterion.entity.ts");
const job_preset_entity_1 = __webpack_require__(/*! ../employee-job-preset/job-preset.entity */ "./src/app/employee-job-preset/job-preset.entity.ts");
const job_search_occupation_entity_1 = __webpack_require__(/*! ../employee-job-preset/job-search-occupation/job-search-occupation.entity */ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.entity.ts");
const job_search_category_entity_1 = __webpack_require__(/*! ../employee-job-preset/job-search-category/job-search-category.entity */ "./src/app/employee-job-preset/job-search-category/job-search-category.entity.ts");
const report_entity_1 = __webpack_require__(/*! ../reports/report.entity */ "./src/app/reports/report.entity.ts");
const report_category_entity_1 = __webpack_require__(/*! ../reports/report-category.entity */ "./src/app/reports/report-category.entity.ts");
const employee_proposal_template_entity_1 = __webpack_require__(/*! ../employee-proposal-template/employee-proposal-template.entity */ "./src/app/employee-proposal-template/employee-proposal-template.entity.ts");
const report_organization_entity_1 = __webpack_require__(/*! ../reports/report-organization.entity */ "./src/app/reports/report-organization.entity.ts");
const custom_smtp_entity_1 = __webpack_require__(/*! ../custom-smtp/custom-smtp.entity */ "./src/app/custom-smtp/custom-smtp.entity.ts");
const currency_1 = __webpack_require__(/*! ../currency */ "./src/app/currency/index.ts");
const feature_entity_1 = __webpack_require__(/*! ../feature/feature.entity */ "./src/app/feature/feature.entity.ts");
const feature_organization_entity_1 = __webpack_require__(/*! ../feature/feature_organization.entity */ "./src/app/feature/feature_organization.entity.ts");
const entities = [
    activity_entity_1.Activity,
    appointment_employees_entity_1.AppointmentEmployee,
    approval_policy_entity_1.ApprovalPolicy,
    availability_slots_entity_1.AvailabilitySlot,
    candidate_entity_1.Candidate,
    candidate_criterion_rating_entity_1.CandidateCriterionsRating,
    candidate_documents_entity_1.CandidateDocument,
    candidate_education_entity_1.CandidateEducation,
    candidate_experience_entity_1.CandidateExperience,
    candidate_feedbacks_entity_1.CandidateFeedback,
    candidate_interview_entity_1.CandidateInterview,
    candidate_interviewers_entity_1.CandidateInterviewers,
    candidate_personal_qualities_entity_1.CandidatePersonalQualities,
    candidate_skill_entity_1.CandidateSkill,
    candidate_source_entity_1.CandidateSource,
    candidate_technologies_entity_1.CandidateTechnologies,
    contact_entity_1.Contact,
    country_entity_1.Country,
    currency_1.Currency,
    custom_smtp_entity_1.CustomSmtp,
    deal_entity_1.Deal,
    email_entity_1.Email,
    email_template_entity_1.EmailTemplate,
    employee_entity_1.Employee,
    employee_appointment_1.EmployeeAppointment,
    employee_award_entity_1.EmployeeAward,
    organization_employee_level_entity_1.EmployeeLevel,
    employee_proposal_template_entity_1.EmployeeProposalTemplate,
    employee_recurring_expense_entity_1.EmployeeRecurringExpense,
    employee_setting_1.EmployeeSetting,
    employee_upwork_jobs_search_criterion_entity_1.EmployeeUpworkJobsSearchCriterion,
    equipment_entity_1.Equipment,
    equipment_sharing_entity_1.EquipmentSharing,
    equipment_sharing_policy_entity_1.EquipmentSharingPolicy,
    estimate_email_entity_1.EstimateEmail,
    event_type_entity_1.EventType,
    expense_entity_1.Expense,
    expense_category_entity_1.ExpenseCategory,
    feature_entity_1.Feature,
    feature_organization_entity_1.FeatureOrganization,
    goal_entity_1.Goal,
    goal_general_setting_entity_1.GoalGeneralSetting,
    goal_kpi_entity_1.GoalKPI,
    goal_kpi_template_entity_1.GoalKPITemplate,
    goal_template_entity_1.GoalTemplate,
    goal_time_frame_entity_1.GoalTimeFrame,
    help_center_entity_1.HelpCenter,
    help_center_article_entity_1.HelpCenterArticle,
    help_center_author_entity_1.HelpCenterAuthor,
    income_entity_1.Income,
    integration_entity_1.Integration,
    integration_entity_setting_entity_1.IntegrationEntitySetting,
    integration_entity_setting_tied_entity_entity_1.IntegrationEntitySettingTiedEntity,
    integration_map_entity_1.IntegrationMap,
    integration_setting_entity_1.IntegrationSetting,
    integration_tenant_entity_1.IntegrationTenant,
    integration_type_entity_1.IntegrationType,
    invite_entity_1.Invite,
    invoice_entity_1.Invoice,
    invoice_estimate_history_entity_1.InvoiceEstimateHistory,
    invoice_item_entity_1.InvoiceItem,
    job_preset_entity_1.JobPreset,
    job_preset_upwork_job_search_criterion_entity_1.JobPresetUpworkJobSearchCriterion,
    job_search_category_entity_1.JobSearchCategory,
    job_search_occupation_entity_1.JobSearchOccupation,
    keyresult_entity_1.KeyResult,
    keyresult_template_entity_1.KeyResultTemplate,
    keyresult_update_entity_1.KeyResultUpdate,
    language_entity_1.Language,
    organization_entity_1.Organization,
    organization_awards_entity_1.OrganizationAwards,
    organization_contact_entity_1.OrganizationContact,
    organization_department_entity_1.OrganizationDepartment,
    organization_documents_entity_1.OrganizationDocuments,
    organization_employment_type_entity_1.OrganizationEmploymentType,
    organization_languages_entity_1.OrganizationLanguages,
    organization_positions_entity_1.OrganizationPositions,
    organization_projects_entity_1.OrganizationProject,
    organization_recurring_expense_entity_1.OrganizationRecurringExpense,
    organization_sprint_entity_1.OrganizationSprint,
    organization_team_entity_1.OrganizationTeam,
    organization_team_employee_entity_1.OrganizationTeamEmployee,
    organization_vendors_entity_1.OrganizationVendor,
    payment_entity_1.Payment,
    pipeline_entity_1.Pipeline,
    pipeline_stage_entity_1.PipelineStage,
    product_entity_1.Product,
    product_category_entity_1.ProductCategory,
    product_category_translation_entity_1.ProductCategoryTranslation,
    product_option_entity_1.ProductOption,
    product_type_entity_1.ProductType,
    product_type_translation_entity_1.ProductTypeTranslation,
    product_variant_entity_1.ProductVariant,
    product_variant_price_entity_1.ProductVariantPrice,
    product_settings_entity_1.ProductVariantSettings,
    proposal_entity_1.Proposal,
    report_entity_1.Report,
    report_category_entity_1.ReportCategory,
    report_organization_entity_1.ReportOrganization,
    request_approval_entity_1.RequestApproval,
    request_approval_employee_entity_1.RequestApprovalEmployee,
    request_approval_team_entity_1.RequestApprovalTeam,
    role_entity_1.Role,
    role_permissions_entity_1.RolePermissions,
    screenshot_entity_1.Screenshot,
    skill_entity_1.Skill,
    tag_entity_1.Tag,
    task_entity_1.Task,
    tenant_entity_1.Tenant,
    tenant_setting_entity_1.TenantSetting,
    time_log_entity_1.TimeLog,
    time_off_policy_entity_1.TimeOffPolicy,
    time_off_request_entity_1.TimeOffRequest,
    timesheet_entity_1.Timesheet,
    time_slot_entity_1.TimeSlot,
    time_slot_minute_entity_1.TimeSlotMinute,
    user_entity_1.User,
    user_organization_entity_1.UserOrganization
];
let CoreModule = class CoreModule {
    configure(consumer) {
        consumer.apply(context_1.RequestContextMiddleware).forRoutes('*');
    }
};
CoreModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forRootAsync({
                imports: [config_1.ConfigModule],
                useFactory: (config) => (Object.assign(Object.assign({}, environment_1.environment.database), { entities })),
                inject: [config_1.ConfigService]
            }),
            file_storage_1.FileStorageModule
        ],
        controllers: [],
        providers: []
    })
], CoreModule);
exports.CoreModule = CoreModule;


/***/ }),

/***/ "./src/app/core/crud/crud.controller.ts":
/*!**********************************************!*\
  !*** ./src/app/core/crud/crud.controller.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrudController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const QueryPartialEntity_1 = __webpack_require__(/*! typeorm/query-builder/QueryPartialEntity */ "typeorm/query-builder/QueryPartialEntity");
const icrud_service_1 = __webpack_require__(/*! ./icrud.service */ "./src/app/core/crud/icrud.service.ts");
const pagination_params_1 = __webpack_require__(/*! ./pagination-params */ "./src/app/core/crud/pagination-params.ts");
let CrudController = class CrudController {
    constructor(crudService) {
        this.crudService = crudService;
    }
    async findAll(filter) {
        return this.crudService.findAll(filter);
    }
    async findById(id) {
        return this.crudService.findOne(id);
    }
    async create(entity, ...options) {
        return this.crudService.create(entity);
    }
    async update(id, entity, ...options) {
        return this.crudService.update(id, entity);
    }
    async delete(id, ...options) {
        return this.crudService.delete(id);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'find all' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found records'
    }),
    common_1.Get(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof pagination_params_1.PaginationParams !== "undefined" && pagination_params_1.PaginationParams) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], CrudController.prototype, "findAll", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find by id' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found one record'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], CrudController.prototype, "findById", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.CREATED),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof typeorm_1.DeepPartial !== "undefined" && typeorm_1.DeepPartial) === "function" ? _d : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], CrudController.prototype, "create", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_f = typeof QueryPartialEntity_1.QueryDeepPartialEntity !== "undefined" && QueryPartialEntity_1.QueryDeepPartialEntity) === "function" ? _f : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], CrudController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Delete record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NO_CONTENT,
        description: 'The record has been successfully deleted'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], CrudController.prototype, "delete", null);
CrudController = tslib_1.__decorate([
    swagger_1.ApiResponse({ status: common_1.HttpStatus.UNAUTHORIZED, description: 'Unauthorized' }),
    swagger_1.ApiResponse({ status: common_1.HttpStatus.FORBIDDEN, description: 'Forbidden' }),
    swagger_1.ApiBearerAuth(),
    tslib_1.__metadata("design:paramtypes", [typeof (_j = typeof icrud_service_1.ICrudService !== "undefined" && icrud_service_1.ICrudService) === "function" ? _j : Object])
], CrudController);
exports.CrudController = CrudController;


/***/ }),

/***/ "./src/app/core/crud/crud.service.ts":
/*!*******************************************!*\
  !*** ./src/app/core/crud/crud.service.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CrudService = void 0;
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const operators_1 = __webpack_require__(/*! rxjs/operators */ "rxjs/operators");
const rxjs_1 = __webpack_require__(/*! rxjs */ "rxjs");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const bcrypt = __webpack_require__(/*! bcryptjs */ "bcryptjs");
class CrudService {
    constructor(repository) {
        this.repository = repository;
        this.saltRounds = environment_1.environment.USER_PASSWORD_BCRYPT_SALT_ROUNDS;
    }
    async count(filter) {
        return await this.repository.count(filter);
    }
    async findAll(filter) {
        const total = await this.repository.count(filter);
        const items = await this.repository.find(filter);
        return { items, total };
    }
    async findOneOrFail(id, options) {
        try {
            const record = await this.repository.findOneOrFail(id, options);
            return {
                success: true,
                record
            };
        }
        catch (error) {
            return {
                success: false,
                error
            };
        }
    }
    async findOne(id, options) {
        const record = await this.repository.findOne(id, options);
        if (!record) {
            throw new common_1.NotFoundException(`The requested record was not found`);
        }
        return record;
    }
    async create(entity, ...options) {
        const obj = this.repository.create(entity);
        try {
            return await this.repository.save(obj);
        }
        catch (err) {
            throw new common_1.BadRequestException(err);
        }
    }
    async getPasswordHash(password) {
        return bcrypt.hash(password, this.saltRounds);
    }
    async update(id, partialEntity, ...options) {
        try {
            if (partialEntity['hash']) {
                const hashPassword = await this.getPasswordHash(partialEntity['hash']);
                partialEntity['hash'] = hashPassword;
            }
            return await this.repository.update(id, partialEntity);
        }
        catch (err) {
            throw new common_1.BadRequestException(err);
        }
    }
    async delete(criteria, ...options) {
        try {
            return await this.repository.delete(criteria);
        }
        catch (err) {
            throw new common_1.NotFoundException(`The record was not found`, err);
        }
    }
    entityNotFound() {
        return (stream$) => stream$.pipe(operators_1.mergeMap((signal) => {
            if (!signal) {
                return rxjs_1.throwError(new common_1.NotFoundException(`The requested record was not found`));
            }
            return rxjs_1.of(signal);
        }));
    }
}
exports.CrudService = CrudService;


/***/ }),

/***/ "./src/app/core/crud/icrud.service.ts":
/*!********************************************!*\
  !*** ./src/app/core/crud/icrud.service.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./src/app/core/crud/index.ts":
/*!************************************!*\
  !*** ./src/app/core/crud/index.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./pagination */ "./src/app/core/crud/pagination.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./pagination-params */ "./src/app/core/crud/pagination-params.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./crud.service */ "./src/app/core/crud/crud.service.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./crud.controller */ "./src/app/core/crud/crud.controller.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts"), exports);


/***/ }),

/***/ "./src/app/core/crud/pagination-params.ts":
/*!************************************************!*\
  !*** ./src/app/core/crud/pagination-params.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PaginationParams = exports.OrderType = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_transformer_1 = __webpack_require__(/*! class-transformer */ "class-transformer");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
var OrderType;
(function (OrderType) {
    OrderType["DESC"] = "DESC";
    OrderType["ASC"] = "ASC";
})(OrderType = exports.OrderType || (exports.OrderType = {}));
class PaginationParams {
    constructor() {
        this.take = 10;
        this.skip = 0;
    }
}
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Number, minimum: 0, maximum: 50 }),
    class_validator_1.IsOptional(),
    class_validator_1.Min(0),
    class_validator_1.Max(50),
    class_transformer_1.Transform((val) => parseInt(val, 10)),
    tslib_1.__metadata("design:type", Object)
], PaginationParams.prototype, "take", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Number, minimum: 0 }),
    class_validator_1.IsOptional(),
    class_validator_1.Min(0),
    class_transformer_1.Transform((val) => parseInt(val, 10)),
    tslib_1.__metadata("design:type", Object)
], PaginationParams.prototype, "skip", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional(),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", Object)
], PaginationParams.prototype, "order", void 0);
exports.PaginationParams = PaginationParams;


/***/ }),

/***/ "./src/app/core/crud/pagination.ts":
/*!*****************************************!*\
  !*** ./src/app/core/crud/pagination.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),

/***/ "./src/app/core/crud/tenant-aware-crud.service.ts":
/*!********************************************************!*\
  !*** ./src/app/core/crud/tenant-aware-crud.service.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantAwareCrudService = void 0;
const context_1 = __webpack_require__(/*! ../context */ "./src/app/core/context/index.ts");
const crud_service_1 = __webpack_require__(/*! ./crud.service */ "./src/app/core/crud/crud.service.ts");
class TenantAwareCrudService extends crud_service_1.CrudService {
    constructor(repository) {
        super(repository);
        this.repository = repository;
    }
    findConditionsWithTenant(user, where) {
        if (Array.isArray(where)) {
            return where.map((options) => (Object.assign(Object.assign({}, options), { tenant: {
                    id: user.tenantId
                } })));
        }
        return where
            ? Object.assign(Object.assign({}, where), { tenant: {
                    id: user.tenantId
                } }) : {
            tenant: {
                id: user.tenantId
            }
        };
    }
    findManyWithTenant(filter) {
        const user = context_1.RequestContext.currentUser();
        if (!user || !user.tenantId) {
            return filter;
        }
        if (!filter) {
            return {
                where: this.findConditionsWithTenant(user)
            };
        }
        if (!filter.where) {
            return Object.assign(Object.assign({}, filter), { where: this.findConditionsWithTenant(user) });
        }
        if (filter.where instanceof Object) {
            return Object.assign(Object.assign({}, filter), { where: this.findConditionsWithTenant(user, filter.where) });
        }
        return filter;
    }
    async count(filter) {
        return await super.count(this.findManyWithTenant(filter));
    }
    async findAll(filter) {
        return await super.findAll(this.findManyWithTenant(filter));
    }
    async findOneOrFail(id, options) {
        return await super.findOneOrFail(id, this.findManyWithTenant(options));
    }
    async findOne(id, options) {
        if (typeof id === 'object') {
            const firstOptions = id;
            return await super.findOne(this.findManyWithTenant(firstOptions), options);
        }
        return await super.findOne(id, this.findManyWithTenant(options));
    }
    async create(entity, ...options) {
        const user = context_1.RequestContext.currentUser();
        if (user && user.tenantId) {
            const entityWithTenant = Object.assign(Object.assign({}, entity), { tenant: { id: user.tenantId } });
            return super.create(entityWithTenant, ...options);
        }
        return super.create(entity, ...options);
    }
}
exports.TenantAwareCrudService = TenantAwareCrudService;


/***/ }),

/***/ "./src/app/core/entities/base.ts":
/*!***************************************!*\
  !*** ./src/app/core/entities/base.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Base = exports.Model = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
class Model {
    constructor(input) {
        if (input) {
            Object.assign(this, input);
        }
    }
}
exports.Model = Model;
class Base extends Model {
}
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    typeorm_1.PrimaryGeneratedColumn('uuid'),
    tslib_1.__metadata("design:type", String)
], Base.prototype, "id", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({
        type: 'string',
        format: 'date-time',
        example: '2018-11-21T06:20:32.232Z'
    }),
    typeorm_1.CreateDateColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof Date !== "undefined" && Date) === "function" ? _a : Object)
], Base.prototype, "createdAt", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({
        type: 'string',
        format: 'date-time',
        example: '2018-11-21T06:20:32.232Z'
    }),
    typeorm_1.UpdateDateColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], Base.prototype, "updatedAt", void 0);
exports.Base = Base;


/***/ }),

/***/ "./src/app/core/entities/tenant-base.ts":
/*!**********************************************!*\
  !*** ./src/app/core/entities/tenant-base.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantBase = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const tenant_entity_1 = __webpack_require__(/*! ../../tenant/tenant.entity */ "./src/app/tenant/tenant.entity.ts");
const base_1 = __webpack_require__(/*! ./base */ "./src/app/core/entities/base.ts");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
class TenantBase extends base_1.Base {
}
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: tenant_entity_1.Tenant, readOnly: true }),
    typeorm_1.ManyToOne((type) => tenant_entity_1.Tenant, { nullable: true, onDelete: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.ITenant !== "undefined" && models_1.ITenant) === "function" ? _a : Object)
], TenantBase.prototype, "tenant", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((t) => t.tenant),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Index(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], TenantBase.prototype, "tenantId", void 0);
exports.TenantBase = TenantBase;


/***/ }),

/***/ "./src/app/core/entities/tenant-organization-base.ts":
/*!***********************************************************!*\
  !*** ./src/app/core/entities/tenant-organization-base.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantOrganizationBase = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const organization_entity_1 = __webpack_require__(/*! ../../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const base_1 = __webpack_require__(/*! ./base */ "./src/app/core/entities/base.ts");
const tenant_entity_1 = __webpack_require__(/*! ../../tenant/tenant.entity */ "./src/app/tenant/tenant.entity.ts");
class TenantOrganizationBase extends base_1.Base {
}
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: organization_entity_1.Organization, readOnly: true }),
    typeorm_1.ManyToOne((type) => organization_entity_1.Organization, { nullable: true, onDelete: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IOrganization !== "undefined" && models_1.IOrganization) === "function" ? _a : Object)
], TenantOrganizationBase.prototype, "organization", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((it) => it.organization),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Index(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], TenantOrganizationBase.prototype, "organizationId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: tenant_entity_1.Tenant, readOnly: true }),
    typeorm_1.ManyToOne((type) => tenant_entity_1.Tenant, { nullable: true, onDelete: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", typeof (_b = typeof models_1.ITenant !== "undefined" && models_1.ITenant) === "function" ? _b : Object)
], TenantOrganizationBase.prototype, "tenant", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((t) => t.tenant),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Index(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], TenantOrganizationBase.prototype, "tenantId", void 0);
exports.TenantOrganizationBase = TenantOrganizationBase;


/***/ }),

/***/ "./src/app/core/entities/translate-base.ts":
/*!*************************************************!*\
  !*** ./src/app/core/entities/translate-base.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TranslatableBase = exports.TranslationBase = void 0;
const tenant_organization_base_1 = __webpack_require__(/*! ./tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
class TranslationBase extends tenant_organization_base_1.TenantOrganizationBase {
}
exports.TranslationBase = TranslationBase;
class TranslatableBase extends tenant_organization_base_1.TenantOrganizationBase {
    translate(langCode) {
        if (!this.translations)
            return this;
        const translationObj = this.translations.find((translation) => {
            return translation.languageCode === langCode;
        });
        if (!translationObj)
            return this;
        for (const prop of Object.keys(translationObj)) {
            if (!['id', 'languageCode'].includes(prop)) {
                this[prop] = translationObj[prop];
            }
        }
        delete this.translations;
        return this;
    }
}
exports.TranslatableBase = TranslatableBase;


/***/ }),

/***/ "./src/app/core/file-storage/file-storage.middleware.ts":
/*!**************************************************************!*\
  !*** ./src/app/core/file-storage/file-storage.middleware.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileStorageMiddleware = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const tenant_setting_service_1 = __webpack_require__(/*! ../../tenant/tenant-setting/tenant-setting.service */ "./src/app/tenant/tenant-setting/tenant-setting.service.ts");
const jwt = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");
let FileStorageMiddleware = class FileStorageMiddleware {
    constructor(tenantSettingService) {
        this.tenantSettingService = tenantSettingService;
    }
    async use(req, res, next) {
        const authHeader = req.headers.authorization;
        if (authHeader) {
            const token = authHeader.split(' ')[1];
            const data = jwt.decode(token);
            let tenantSettings = {};
            if (data && data.tenantId) {
                tenantSettings = await this.tenantSettingService.get({
                    where: {
                        tenantId: data.tenantId
                    }
                });
            }
            req.tenantSettings = tenantSettings;
        }
        next();
    }
};
FileStorageMiddleware = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof tenant_setting_service_1.TenantSettingService !== "undefined" && tenant_setting_service_1.TenantSettingService) === "function" ? _a : Object])
], FileStorageMiddleware);
exports.FileStorageMiddleware = FileStorageMiddleware;


/***/ }),

/***/ "./src/app/core/file-storage/file-storage.module.ts":
/*!**********************************************************!*\
  !*** ./src/app/core/file-storage/file-storage.module.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.FileStorageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const tenant_setting_entity_1 = __webpack_require__(/*! ../../tenant/tenant-setting/tenant-setting.entity */ "./src/app/tenant/tenant-setting/tenant-setting.entity.ts");
const tenant_setting_service_1 = __webpack_require__(/*! ../../tenant/tenant-setting/tenant-setting.service */ "./src/app/tenant/tenant-setting/tenant-setting.service.ts");
const file_storage_middleware_1 = __webpack_require__(/*! ./file-storage.middleware */ "./src/app/core/file-storage/file-storage.middleware.ts");
let FileStorageModule = class FileStorageModule {
    configure(consumer) {
        consumer.apply(file_storage_middleware_1.FileStorageMiddleware).forRoutes('*');
    }
};
FileStorageModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([tenant_setting_entity_1.TenantSetting])],
        controllers: [],
        providers: [file_storage_middleware_1.FileStorageMiddleware, tenant_setting_service_1.TenantSettingService]
    })
], FileStorageModule);
exports.FileStorageModule = FileStorageModule;


/***/ }),

/***/ "./src/app/core/file-storage/file-storage.ts":
/*!***************************************************!*\
  !*** ./src/app/core/file-storage/file-storage.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.FileStorage = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const Providers = __webpack_require__(/*! ./providers */ "./src/app/core/file-storage/providers/index.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
class FileStorage {
    constructor(option) {
        this.providers = {};
        this.config = {
            dest: ''
        };
        this.initProvider();
        this.setConfig(option);
    }
    setConfig(config = {}) {
        this.config = Object.assign(Object.assign(Object.assign({}, this.config), config), { provider: (config.provider ||
                environment_1.environment.fileSystem.name) });
        return this;
    }
    setProvider(providerName) {
        if (providerName) {
            this.config.provider = providerName;
        }
        return this;
    }
    getProvider(providerName) {
        this.setProvider(providerName);
        return this.getProviderInstance();
    }
    storage(option) {
        let resp;
        this.setConfig(option);
        if (this.config.provider && this.providers[this.config.provider]) {
            resp = this.providers[this.config.provider].handler(this.config);
        }
        else {
            const provides = Object.values(models_1.FileStorageProviderEnum).join(', ');
            throw new Error(`Provider "${this.config.provider}" is not valid. Provider must be ${provides}`);
        }
        return resp;
    }
    getProviderInstance() {
        return this.providers[this.config.provider].getInstance();
    }
    initProvider() {
        for (const key in Providers) {
            if (Object.prototype.hasOwnProperty.call(Providers, key)) {
                const className = Providers[key];
                if (className.instance === undefined) {
                    const provider = new className();
                    this.providers[provider.name] = provider;
                    className.instance = provider;
                }
                else {
                    this.providers[className.instance.name] =
                        className.instance;
                }
            }
        }
    }
}
exports.FileStorage = FileStorage;


/***/ }),

/***/ "./src/app/core/file-storage/index.ts":
/*!********************************************!*\
  !*** ./src/app/core/file-storage/index.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./file-storage */ "./src/app/core/file-storage/file-storage.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./file-storage.module */ "./src/app/core/file-storage/file-storage.module.ts"), exports);


/***/ }),

/***/ "./src/app/core/file-storage/providers/index.ts":
/*!******************************************************!*\
  !*** ./src/app/core/file-storage/providers/index.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./local.provider */ "./src/app/core/file-storage/providers/local.provider.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./s3.provider */ "./src/app/core/file-storage/providers/s3.provider.ts"), exports);


/***/ }),

/***/ "./src/app/core/file-storage/providers/local.provider.ts":
/*!***************************************************************!*\
  !*** ./src/app/core/file-storage/providers/local.provider.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalProvider = void 0;
const multer = __webpack_require__(/*! multer */ "multer");
const fs = __webpack_require__(/*! fs */ "fs");
const moment = __webpack_require__(/*! moment */ "moment");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const provider_1 = __webpack_require__(/*! ./provider */ "./src/app/core/file-storage/providers/provider.ts");
const path_1 = __webpack_require__(/*! path */ "path");
const context_1 = __webpack_require__(/*! ../../context */ "./src/app/core/context/index.ts");
class LocalProvider extends provider_1.Provider {
    constructor() {
        super(...arguments);
        this.name = 'local';
        this.tenantId = '';
        this.config = {
            rootPath: environment_1.environment.isElectron
                ? path_1.resolve(environment_1.environment.gauzyUserPath, 'public')
                : path_1.resolve(process.cwd(), 'apps', 'api', 'public'),
            baseUrl: environment_1.environment.baseUrl + '/public'
        };
    }
    getInstance() {
        if (!LocalProvider.instance) {
            LocalProvider.instance = new LocalProvider();
        }
        return LocalProvider.instance;
    }
    url(filePath) {
        if (filePath && filePath.startsWith('http')) {
            return filePath;
        }
        return filePath ? `${this.config.baseUrl}/${filePath}` : null;
    }
    path(filePath) {
        return filePath ? `${this.config.rootPath}/${filePath}` : null;
    }
    handler({ dest, filename, prefix }) {
        return multer.diskStorage({
            destination: (_req, file, callback) => {
                let dir;
                if (dest instanceof Function) {
                    dir = dest(file);
                }
                else {
                    dir = dest;
                }
                const user = context_1.RequestContext.currentUser();
                const fullPath = path_1.join(this.config.rootPath, user ? user.tenantId : '', dir);
                fs.mkdirSync(fullPath, {
                    recursive: true
                });
                callback(null, fullPath);
            },
            filename: (_req, file, callback) => {
                let fileNameString = '';
                const ext = file.originalname.split('.').pop();
                if (filename) {
                    if (typeof filename === 'string') {
                        fileNameString = filename;
                    }
                    else {
                        fileNameString = filename(file, ext);
                    }
                }
                else {
                    fileNameString = `${prefix}-${moment().unix()}-${parseInt('' + Math.random() * 1000, 10)}.${ext}`;
                }
                callback(null, fileNameString);
            }
        });
    }
    async getFile(file) {
        return await fs.promises.readFile(this.path(file));
    }
    async deleteFile(file) {
        return await fs.promises.unlink(this.path(file));
    }
    async putFile(fileContent, path = '') {
        return new Promise((putFileResolve, reject) => {
            const fullPath = path_1.join(this.config.rootPath, path);
            fs.writeFile(fullPath, fileContent, (err) => {
                if (err) {
                    reject(err);
                    return;
                }
                const stats = fs.statSync(fullPath);
                const baseName = path_1.basename(path);
                const file = {
                    originalname: baseName,
                    size: stats.size,
                    filename: baseName,
                    path: fullPath
                };
                putFileResolve(this.mapUploadedFile(file));
            });
        });
    }
    mapUploadedFile(file) {
        const saparator = process.platform === 'win32' ? '\\' : '/';
        if (file.path) {
            file.key = file.path.replace(this.config.rootPath + saparator, '');
        }
        file.url = this.url(file.key);
        return file;
    }
}
exports.LocalProvider = LocalProvider;


/***/ }),

/***/ "./src/app/core/file-storage/providers/provider.ts":
/*!*********************************************************!*\
  !*** ./src/app/core/file-storage/providers/provider.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Provider = void 0;
class Provider {
    constructor() { }
    mapUploadedFile(file) {
        return file;
    }
}
exports.Provider = Provider;


/***/ }),

/***/ "./src/app/core/file-storage/providers/s3.provider.ts":
/*!************************************************************!*\
  !*** ./src/app/core/file-storage/providers/s3.provider.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.S3Provider = void 0;
const multerS3 = __webpack_require__(/*! multer-s3 */ "multer-s3");
const path_1 = __webpack_require__(/*! path */ "path");
const moment = __webpack_require__(/*! moment */ "moment");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const AWS = __webpack_require__(/*! aws-sdk */ "aws-sdk");
const provider_1 = __webpack_require__(/*! ./provider */ "./src/app/core/file-storage/providers/provider.ts");
const context_1 = __webpack_require__(/*! ../../context */ "./src/app/core/context/index.ts");
const _ = __webpack_require__(/*! underscore */ "underscore");
class S3Provider extends provider_1.Provider {
    constructor() {
        super();
        this.name = 's3';
        this.fetchSetting = false;
        this.config = this.defaultConfig = {
            rootPath: '',
            aws_access_key_id: environment_1.environment.awsConfig.accessKeyId,
            aws_secret_access_key: environment_1.environment.awsConfig.secretAccessKey,
            aws_default_region: environment_1.environment.awsConfig.region,
            aws_bucket: environment_1.environment.awsConfig.s3.bucket
        };
    }
    getInstance() {
        if (!S3Provider.instance) {
            S3Provider.instance = new S3Provider();
        }
        this.setAwsDetails();
        return S3Provider.instance;
    }
    url(key) {
        const url = this.getS3Instance().getSignedUrl('getObject', {
            Bucket: this.getS3Bucket(),
            Key: key,
            Expires: 3600
        });
        return url;
    }
    setAwsDetails() {
        const request = context_1.RequestContext.currentRequest();
        if (request) {
            const settings = request['tenantSettings'];
            if (settings &&
                settings.aws_access_key_id &&
                !_.isEmpty(settings.aws_access_key_id.trim()) &&
                settings.aws_secret_access_key &&
                !_.isEmpty(settings.aws_secret_access_key.trim())) {
                this.config = Object.assign(Object.assign({}, this.defaultConfig), { aws_access_key_id: settings.aws_access_key_id, aws_secret_access_key: settings.aws_secret_access_key, aws_default_region: settings.aws_default_region, aws_bucket: settings.aws_bucket });
            }
        }
        else {
            this.config = Object.assign({}, this.defaultConfig);
        }
    }
    path(filePath) {
        return filePath ? this.config.rootPath + '/' + filePath : null;
    }
    handler({ dest, filename, prefix }) {
        return multerS3({
            s3: this.getS3Instance(),
            bucket: this.getS3Bucket(),
            metadata: function (_req, file, cb) {
                cb(null, { fieldName: file.fieldname });
            },
            key: (_req, file, callback) => {
                let fileNameString = '';
                const ext = file.originalname.split('.').pop();
                if (filename) {
                    if (typeof filename === 'string') {
                        fileNameString = filename;
                    }
                    else {
                        fileNameString = filename(file, ext);
                    }
                }
                else {
                    fileNameString = `gauzy-${prefix}-${moment().unix()}-${parseInt('' + Math.random() * 1000, 10)}.${ext}`;
                }
                let dir;
                if (dest instanceof Function) {
                    dir = dest(file);
                }
                else {
                    dir = dest;
                }
                const user = context_1.RequestContext.currentUser();
                callback(null, path_1.join(this.config.rootPath, user ? user.tenantId : '', dir, fileNameString));
            }
        });
    }
    async getFile(key) {
        const s3 = this.getS3Instance();
        const params = {
            Bucket: this.getS3Bucket(),
            Key: key
        };
        const data = await s3.getObject(params).promise();
        return data.Body;
    }
    async putFile(fileContent, key = '') {
        return new Promise((putFileResolve, reject) => {
            const fileName = path_1.basename(key);
            const s3 = this.getS3Instance();
            const params = {
                Bucket: this.getS3Bucket(),
                Body: fileContent,
                Key: key,
                ContentDisposition: `inline; ${fileName}`
            };
            s3.putObject(params, async (err) => {
                if (err) {
                    reject(err);
                }
                else {
                    const size = await s3
                        .headObject({ Key: key, Bucket: this.getS3Bucket() })
                        .promise()
                        .then((res) => res.ContentLength);
                    const file = {
                        originalname: fileName,
                        size: size,
                        filename: fileName,
                        path: key,
                        key: key
                    };
                    putFileResolve(this.mapUploadedFile(file));
                }
            });
        });
    }
    deleteFile(key) {
        const s3 = this.getS3Instance();
        const params = {
            Bucket: this.getS3Bucket(),
            Key: key
        };
        return new Promise((deleteFileResolve, reject) => {
            s3.deleteObject(params, function (err) {
                if (err)
                    reject(err);
                else
                    deleteFileResolve();
            });
        });
    }
    getS3Instance() {
        this.setAwsDetails();
        return new AWS.S3({
            accessKeyId: this.config.aws_access_key_id,
            secretAccessKey: this.config.aws_secret_access_key,
            region: this.config.aws_default_region
        });
    }
    getS3Bucket() {
        this.setAwsDetails();
        return this.config.aws_bucket;
    }
    mapUploadedFile(file) {
        file.filename = file.originalname;
        file.url = this.url(file.key);
        return file;
    }
}
exports.S3Provider = S3Provider;


/***/ }),

/***/ "./src/app/core/file-storage/uploaded-file-storage.ts":
/*!************************************************************!*\
  !*** ./src/app/core/file-storage/uploaded-file-storage.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadedFileStorage = void 0;
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const file_storage_1 = __webpack_require__(/*! ./file-storage */ "./src/app/core/file-storage/file-storage.ts");
exports.UploadedFileStorage = common_1.createParamDecorator((data, ctx) => {
    const request = ctx.switchToHttp().getRequest();
    const provider = new file_storage_1.FileStorage().getProvider(data);
    return provider.mapUploadedFile(request.file);
});


/***/ }),

/***/ "./src/app/core/index.ts":
/*!*******************************!*\
  !*** ./src/app/core/index.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./crud */ "./src/app/core/crud/index.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./core.module */ "./src/app/core/core.module.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./utils */ "./src/app/core/utils.ts"), exports);


/***/ }),

/***/ "./src/app/core/moment-extend.ts":
/*!***************************************!*\
  !*** ./src/app/core/moment-extend.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.moment = void 0;
const momentDefault = __webpack_require__(/*! moment */ "moment");
const moment_range_1 = __webpack_require__(/*! moment-range */ "moment-range");
exports.moment = moment_range_1.extendMoment(momentDefault);


/***/ }),

/***/ "./src/app/core/seeds/random-seed-config.ts":
/*!**************************************************!*\
  !*** ./src/app/core/seeds/random-seed-config.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.randomSeedConfig = void 0;
exports.randomSeedConfig = {
    tenants: 5,
    organizationsPerTenant: 2,
    employeesPerOrganization: 5,
    candidatesPerOrganization: 2,
    managersPerOrganization: 2,
    dataEntriesPerOrganization: 4,
    viewersPerOrganization: 4,
    projectsPerOrganization: 30,
    emailsPerOrganization: 30,
    invitePerOrganization: 30,
    requestApprovalPerOrganization: 20,
    employeeTimeOffPerOrganization: 10,
    equipmentPerTenant: 20,
    equipmentSharingPerTenant: 20,
    proposalsSharingPerOrganizations: 30,
    contacts: 50,
    noOfHelpCenterArticle: 10,
    availabilitySlotsPerOrganization: 50,
    noOfTimeLogsPerTimeSheet: 5,
    numberOfOptionPerProduct: 5,
    numberOfVariantPerProduct: 5,
    numberOfInvoicePerOrganization: 50,
    numberOfInvoiceItemPerInvoice: 20,
    noOfRandomContacts: 5
};


/***/ }),

/***/ "./src/app/core/seeds/seed-data.service.ts":
/*!*************************************************!*\
  !*** ./src/app/core/seeds/seed-data.service.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SeedDataService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const rimraf = __webpack_require__(/*! rimraf */ "rimraf");
const path = __webpack_require__(/*! path */ "path");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const chalk_1 = __webpack_require__(/*! chalk */ "chalk");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const role_seed_1 = __webpack_require__(/*! ../../role/role.seed */ "./src/app/role/role.seed.ts");
const skill_seed_1 = __webpack_require__(/*! ../../skills/skill.seed */ "./src/app/skills/skill.seed.ts");
const language_seed_1 = __webpack_require__(/*! ../../language/language.seed */ "./src/app/language/language.seed.ts");
const user_seed_1 = __webpack_require__(/*! ../../user/user.seed */ "./src/app/user/user.seed.ts");
const employee_seed_1 = __webpack_require__(/*! ../../employee/employee.seed */ "./src/app/employee/employee.seed.ts");
const organization_seed_1 = __webpack_require__(/*! ../../organization/organization.seed */ "./src/app/organization/organization.seed.ts");
const income_seed_1 = __webpack_require__(/*! ../../income/income.seed */ "./src/app/income/income.seed.ts");
const expense_seed_1 = __webpack_require__(/*! ../../expense/expense.seed */ "./src/app/expense/expense.seed.ts");
const user_organization_seed_1 = __webpack_require__(/*! ../../user-organization/user-organization.seed */ "./src/app/user-organization/user-organization.seed.ts");
const country_seed_1 = __webpack_require__(/*! ../../country/country.seed */ "./src/app/country/country.seed.ts");
const organization_team_seed_1 = __webpack_require__(/*! ../../organization-team/organization-team.seed */ "./src/app/organization-team/organization-team.seed.ts");
const role_permissions_seed_1 = __webpack_require__(/*! ../../role-permissions/role-permissions.seed */ "./src/app/role-permissions/role-permissions.seed.ts");
const tenant_seed_1 = __webpack_require__(/*! ../../tenant/tenant.seed */ "./src/app/tenant/tenant.seed.ts");
const email_template_seed_1 = __webpack_require__(/*! ../../email-template/email-template.seed */ "./src/app/email-template/email-template.seed.ts");
const organization_employment_type_seed_1 = __webpack_require__(/*! ../../organization-employment-type/organization-employment-type.seed */ "./src/app/organization-employment-type/organization-employment-type.seed.ts");
const organization_employee_level_seed_1 = __webpack_require__(/*! ../../organization_employee-level/organization-employee-level.seed */ "./src/app/organization_employee-level/organization-employee-level.seed.ts");
const time_off_policy_seed_1 = __webpack_require__(/*! ../../time-off-policy/time-off-policy.seed */ "./src/app/time-off-policy/time-off-policy.seed.ts");
const approval_policy_seed_1 = __webpack_require__(/*! ../../approval-policy/approval-policy.seed */ "./src/app/approval-policy/approval-policy.seed.ts");
const expense_categories_seed_1 = __webpack_require__(/*! ../../expense-categories/expense-categories.seed */ "./src/app/expense-categories/expense-categories.seed.ts");
const organization_vendors_seed_1 = __webpack_require__(/*! ../../organization-vendors/organization-vendors.seed */ "./src/app/organization-vendors/organization-vendors.seed.ts");
const candidate_seed_1 = __webpack_require__(/*! ../../candidate/candidate.seed */ "./src/app/candidate/candidate.seed.ts");
const candidate_source_seed_1 = __webpack_require__(/*! ../../candidate-source/candidate-source.seed */ "./src/app/candidate-source/candidate-source.seed.ts");
const integration_type_seed_1 = __webpack_require__(/*! ../../integration/integration-type.seed */ "./src/app/integration/integration-type.seed.ts");
const integration_seed_1 = __webpack_require__(/*! ../../integration/integration.seed */ "./src/app/integration/integration.seed.ts");
const help_center_seed_1 = __webpack_require__(/*! ../../help-center/help-center.seed */ "./src/app/help-center/help-center.seed.ts");
const product_seed_1 = __webpack_require__(/*! ../../product/product.seed */ "./src/app/product/product.seed.ts");
const candidate_documents_seed_1 = __webpack_require__(/*! ../../candidate-documents/candidate-documents.seed */ "./src/app/candidate-documents/candidate-documents.seed.ts");
const candidate_feedbacks_seed_1 = __webpack_require__(/*! ../../candidate-feedbacks/candidate-feedbacks.seed */ "./src/app/candidate-feedbacks/candidate-feedbacks.seed.ts");
const timesheet_seed_1 = __webpack_require__(/*! ../../timesheet/timesheet/timesheet.seed */ "./src/app/timesheet/timesheet/timesheet.seed.ts");
const task_seed_1 = __webpack_require__(/*! ../../tasks/task.seed */ "./src/app/tasks/task.seed.ts");
const organization_projects_seed_1 = __webpack_require__(/*! ../../organization-projects/organization-projects.seed */ "./src/app/organization-projects/organization-projects.seed.ts");
const goal_time_frame_seed_1 = __webpack_require__(/*! ../../goal-time-frame/goal-time-frame.seed */ "./src/app/goal-time-frame/goal-time-frame.seed.ts");
const goal_seed_1 = __webpack_require__(/*! ../../goal/goal.seed */ "./src/app/goal/goal.seed.ts");
const keyresult_seed_1 = __webpack_require__(/*! ../../keyresult/keyresult.seed */ "./src/app/keyresult/keyresult.seed.ts");
const keyresult_update_seed_1 = __webpack_require__(/*! ../../keyresult-update/keyresult-update.seed */ "./src/app/keyresult-update/keyresult-update.seed.ts");
const organization_department_seed_1 = __webpack_require__(/*! ../../organization-department/organization-department.seed */ "./src/app/organization-department/organization-department.seed.ts");
const organization_position_seed_1 = __webpack_require__(/*! ../../organization-positions/organization-position.seed */ "./src/app/organization-positions/organization-position.seed.ts");
const tag_seed_1 = __webpack_require__(/*! ../../tags/tag.seed */ "./src/app/tags/tag.seed.ts");
const email_seed_1 = __webpack_require__(/*! ../../email/email.seed */ "./src/app/email/email.seed.ts");
const invite_seed_1 = __webpack_require__(/*! ../../invite/invite.seed */ "./src/app/invite/invite.seed.ts");
const request_approval_seed_1 = __webpack_require__(/*! ../../request-approval/request-approval.seed */ "./src/app/request-approval/request-approval.seed.ts");
const time_off_request_seed_1 = __webpack_require__(/*! ../../time-off-request/time-off-request.seed */ "./src/app/time-off-request/time-off-request.seed.ts");
const organization_documents_seed_1 = __webpack_require__(/*! ../../organization-documents/organization-documents.seed */ "./src/app/organization-documents/organization-documents.seed.ts");
const equipment_seed_1 = __webpack_require__(/*! ../../equipment/equipment.seed */ "./src/app/equipment/equipment.seed.ts");
const equipment_sharing_seed_1 = __webpack_require__(/*! ../../equipment-sharing/equipment-sharing.seed */ "./src/app/equipment-sharing/equipment-sharing.seed.ts");
const proposal_seed_1 = __webpack_require__(/*! ../../proposal/proposal.seed */ "./src/app/proposal/proposal.seed.ts");
const invoice_item_seed_1 = __webpack_require__(/*! ../../invoice-item/invoice-item.seed */ "./src/app/invoice-item/invoice-item.seed.ts");
const invoice_seed_1 = __webpack_require__(/*! ../../invoice/invoice.seed */ "./src/app/invoice/invoice.seed.ts");
const candidate_skill_seed_1 = __webpack_require__(/*! ../../candidate-skill/candidate-skill.seed */ "./src/app/candidate-skill/candidate-skill.seed.ts");
const candidate_experience_seed_1 = __webpack_require__(/*! ../../candidate-experience/candidate-experience.seed */ "./src/app/candidate-experience/candidate-experience.seed.ts");
const candidate_education_seed_1 = __webpack_require__(/*! ../../candidate-education/candidate-education.seed */ "./src/app/candidate-education/candidate-education.seed.ts");
const contact_seed_1 = __webpack_require__(/*! ../../contact/contact.seed */ "./src/app/contact/contact.seed.ts");
const organization_contact_seed_1 = __webpack_require__(/*! ../../organization-contact/organization-contact.seed */ "./src/app/organization-contact/organization-contact.seed.ts");
const availability_slots_seed_1 = __webpack_require__(/*! ../../availability-slots/availability-slots.seed */ "./src/app/availability-slots/availability-slots.seed.ts");
const candidate_personal_qualities_seed_1 = __webpack_require__(/*! ../../candidate-personal-qualities/candidate-personal-qualities.seed */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.seed.ts");
const candidate_technologies_seed_1 = __webpack_require__(/*! ../../candidate-technologies/candidate-technologies.seed */ "./src/app/candidate-technologies/candidate-technologies.seed.ts");
const candidate_interview_seed_1 = __webpack_require__(/*! ../../candidate-interview/candidate-interview.seed */ "./src/app/candidate-interview/candidate-interview.seed.ts");
const organization_awards_seed_1 = __webpack_require__(/*! ../../organization-awards/organization-awards.seed */ "./src/app/organization-awards/organization-awards.seed.ts");
const goal_general_setting_seed_1 = __webpack_require__(/*! ../../goal-general-setting/goal-general-setting.seed */ "./src/app/goal-general-setting/goal-general-setting.seed.ts");
const candidate_criterion_rating_seed_1 = __webpack_require__(/*! ../../candidate-criterions-rating/candidate-criterion-rating.seed */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.seed.ts");
const goal_kpi_seed_1 = __webpack_require__(/*! ../../goal-kpi/goal-kpi.seed */ "./src/app/goal-kpi/goal-kpi.seed.ts");
const employee_setting_seed_1 = __webpack_require__(/*! ../../employee-setting/employee-setting.seed */ "./src/app/employee-setting/employee-setting.seed.ts");
const employee_recurring_expense_seed_1 = __webpack_require__(/*! ../../employee-recurring-expense/employee-recurring-expense.seed */ "./src/app/employee-recurring-expense/employee-recurring-expense.seed.ts");
const candidate_interviewers_seed_1 = __webpack_require__(/*! ../../candidate-interviewers/candidate-interviewers.seed */ "./src/app/candidate-interviewers/candidate-interviewers.seed.ts");
const pipeline_stage_seed_1 = __webpack_require__(/*! ../../pipeline-stage/pipeline-stage.seed */ "./src/app/pipeline-stage/pipeline-stage.seed.ts");
const pipeline_seed_1 = __webpack_require__(/*! ../../pipeline/pipeline.seed */ "./src/app/pipeline/pipeline.seed.ts");
const organization_recurring_expense_seed_1 = __webpack_require__(/*! ../../organization-recurring-expense/organization-recurring-expense.seed */ "./src/app/organization-recurring-expense/organization-recurring-expense.seed.ts");
const help_center_author_seed_1 = __webpack_require__(/*! ../../help-center-author/help-center-author.seed */ "./src/app/help-center-author/help-center-author.seed.ts");
const help_center_article_seed_1 = __webpack_require__(/*! ../../help-center-article/help-center-article.seed */ "./src/app/help-center-article/help-center-article.seed.ts");
const organization_languages_seed_1 = __webpack_require__(/*! ../../organization-languages/organization-languages.seed */ "./src/app/organization-languages/organization-languages.seed.ts");
const organization_sprint_seed_1 = __webpack_require__(/*! ../../organization-sprint/organization-sprint.seed */ "./src/app/organization-sprint/organization-sprint.seed.ts");
const organization_team_employee_seed_1 = __webpack_require__(/*! ../../organization-team-employee/organization-team-employee.seed */ "./src/app/organization-team-employee/organization-team-employee.seed.ts");
const appointment_employees_seed_1 = __webpack_require__(/*! ../../appointment-employees/appointment-employees.seed */ "./src/app/appointment-employees/appointment-employees.seed.ts");
const employee_appointment_seed_1 = __webpack_require__(/*! ../../employee-appointment/employee-appointment.seed */ "./src/app/employee-appointment/employee-appointment.seed.ts");
const deal_seed_1 = __webpack_require__(/*! ../../deal/deal.seed */ "./src/app/deal/deal.seed.ts");
const integration_setting_seed_1 = __webpack_require__(/*! ../../integration-setting/integration-setting.seed */ "./src/app/integration-setting/integration-setting.seed.ts");
const integration_map_seed_1 = __webpack_require__(/*! ../../integration-map/integration-map.seed */ "./src/app/integration-map/integration-map.seed.ts");
const integration_tenant_seed_1 = __webpack_require__(/*! ../../integration-tenant/integration-tenant.seed */ "./src/app/integration-tenant/integration-tenant.seed.ts");
const integration_entity_setting_seed_1 = __webpack_require__(/*! ../../integration-entity-setting/integration-entity-setting.seed */ "./src/app/integration-entity-setting/integration-entity-setting.seed.ts");
const integration_entity_setting_tied_entity_seed_1 = __webpack_require__(/*! ../../integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.seed */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.seed.ts");
const request_approval_team_seed_1 = __webpack_require__(/*! ../../request-approval-team/request-approval-team.seed */ "./src/app/request-approval-team/request-approval-team.seed.ts");
const request_approval_employee_seed_1 = __webpack_require__(/*! ../../request-approval-employee/request-approval-employee.seed */ "./src/app/request-approval-employee/request-approval-employee.seed.ts");
const payment_seed_1 = __webpack_require__(/*! ../../payment/payment.seed */ "./src/app/payment/payment.seed.ts");
const event_type_seed_1 = __webpack_require__(/*! ../../event-types/event-type.seed */ "./src/app/event-types/event-type.seed.ts");
const equipment_sharing_policy_seed_1 = __webpack_require__(/*! ../../equipment-sharing-policy/equipment-sharing-policy.seed */ "./src/app/equipment-sharing-policy/equipment-sharing-policy.seed.ts");
const product_option_seed_1 = __webpack_require__(/*! ../../product-option/product-option.seed */ "./src/app/product-option/product-option.seed.ts");
const product_settings_seed_1 = __webpack_require__(/*! ../../product-settings/product-settings.seed */ "./src/app/product-settings/product-settings.seed.ts");
const product_variant_seed_1 = __webpack_require__(/*! ../../product-variant/product-variant.seed */ "./src/app/product-variant/product-variant.seed.ts");
const product_variant_price_seed_1 = __webpack_require__(/*! ../../product-variant-price/product-variant-price.seed */ "./src/app/product-variant-price/product-variant-price.seed.ts");
const category_seed_1 = __webpack_require__(/*! ../../product-category/category.seed */ "./src/app/product-category/category.seed.ts");
const type_seed_1 = __webpack_require__(/*! ../../product-type/type.seed */ "./src/app/product-type/type.seed.ts");
const goal_template_seed_1 = __webpack_require__(/*! ../../goal-template/goal-template.seed */ "./src/app/goal-template/goal-template.seed.ts");
const keyresult_template_seed_1 = __webpack_require__(/*! ../../keyresult-template/keyresult-template.seed */ "./src/app/keyresult-template/keyresult-template.seed.ts");
const employee_award_seed_1 = __webpack_require__(/*! ../../employee-award/employee-award.seed */ "./src/app/employee-award/employee-award.seed.ts");
const goal_kpi_template_seed_1 = __webpack_require__(/*! ../../goal-kpi-template/goal-kpi-template.seed */ "./src/app/goal-kpi-template/goal-kpi-template.seed.ts");
const random_seed_config_1 = __webpack_require__(/*! ./random-seed-config */ "./src/app/core/seeds/random-seed-config.ts");
const job_search_category_seed_1 = __webpack_require__(/*! ../../employee-job-preset/job-search-category/job-search-category.seed */ "./src/app/employee-job-preset/job-search-category/job-search-category.seed.ts");
const job_search_occupation_seed_1 = __webpack_require__(/*! ../../employee-job-preset/job-search-occupation/job-search-occupation.seed */ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.seed.ts");
const report_seed_1 = __webpack_require__(/*! ../../reports/report.seed */ "./src/app/reports/report.seed.ts");
const currency_seed_1 = __webpack_require__(/*! ../../currency/currency.seed */ "./src/app/currency/currency.seed.ts");
const feature_seed_1 = __webpack_require__(/*! ../../feature/feature.seed */ "./src/app/feature/feature.seed.ts");
let SeedDataService = class SeedDataService {
    constructor() {
        this.log = console.log;
        this.overrideDbConfig = {
            logging: true,
            logger: 'file'
        };
    }
    async runAllSeed() {
        const isDefault = false;
        try {
            await this.cleanUpPreviousRuns();
            await this.createConnection();
            await this.resetDatabase();
            await this.seedData(isDefault);
            await this.seedJobsData(isDefault);
            await this.seedReportsData(isDefault);
            console.log('Database All Seed Completed');
        }
        catch (error) {
            this.handleError(error);
        }
    }
    async runDefaultSeed() {
        const isDefault = true;
        try {
            await this.cleanUpPreviousRuns();
            await this.createConnection();
            await this.resetDatabase();
            await this.seedData(isDefault);
            console.log('Database Default Seed Completed');
        }
        catch (error) {
            this.handleError(error);
        }
    }
    async runReportsSeed(isDefault = true) {
        try {
            await this.createConnection();
            await this.seedReportsData(isDefault);
            console.log('Database Reports Seed completed');
        }
        catch (error) {
            this.handleError(error);
        }
        return;
    }
    async seedReportsData(isDefault) {
        try {
            this.log(chalk_1.default.green(`🌱 SEEDING ${environment_1.environment.production ? 'PRODUCTION' : ''} REPORTS DATABASE...`));
            if (isDefault) {
                await this.tryExecute('Default Report Category & Report', report_seed_1.createDefaultReport(this.connection));
            }
            this.log(chalk_1.default.green(`✅ SEEDED ${environment_1.environment.production ? 'PRODUCTION' : ''} REPORTS DATABASE`));
        }
        catch (error) {
            this.handleError(error);
        }
    }
    async runJobsSeed() {
        const isDefault = true;
        try {
            await this.createConnection();
            await this.seedJobsData(isDefault);
            console.log('Database Jobs Seed completed');
        }
        catch (error) {
            this.handleError(error);
        }
    }
    async seedJobsData(isDefault) {
        try {
            this.log(chalk_1.default.green(`🌱 SEEDING ${environment_1.environment.production ? 'PRODUCTION' : ''} JOBS DATABASE...`));
            const defaultTenant = await tenant_seed_1.getDefaultTenant(this.connection);
            const defaultBulgarianOrganization = await organization_seed_1.getDefaultBulgarianOrganization(this.connection, defaultTenant);
            await this.tryExecute('Default Job Search Categories', job_search_category_seed_1.createDefaultJobSearchCategories(this.connection, defaultTenant, defaultBulgarianOrganization));
            await this.tryExecute('Default Job Search Occupations', job_search_occupation_seed_1.createDefaultJobSearchOccupations(this.connection, defaultTenant, defaultBulgarianOrganization));
            this.log(chalk_1.default.green(`✅ SEEDED ${environment_1.environment.production ? 'PRODUCTION' : ''} JOBS DATABASE`));
        }
        catch (error) {
            this.handleError(error);
        }
    }
    async seedData(isDefault) {
        try {
            this.log(chalk_1.default.green(`🌱 SEEDING ${environment_1.environment.production ? 'PRODUCTION' : ''} DATABASE...`));
            await this.tryExecute('Countries', country_seed_1.createCountries(this.connection));
            await this.tryExecute('Currencies', currency_seed_1.createCurrencies(this.connection));
            await this.seedBasicDefaultData();
            if (!isDefault) {
                await this.seedDefaultData();
                await this.seedRandomData();
            }
            this.log(chalk_1.default.green(`✅ SEEDED ${environment_1.environment.production ? 'PRODUCTION' : ''} DATABASE`));
        }
        catch (error) {
            this.handleError(error);
        }
    }
    async seedBasicDefaultData() {
        await this.tryExecute('Languages', language_seed_1.createLanguages(this.connection));
        this.tenant = await tenant_seed_1.createDefaultTenants(this.connection);
        this.roles = await role_seed_1.createRoles(this.connection, [this.tenant]);
        await this.runReportsSeed(true);
        await role_permissions_seed_1.createRolePermissions(this.connection, this.roles, [this.tenant]);
        const defaultOrganizations = await organization_seed_1.createDefaultOrganizations(this.connection, this.tenant);
        this.organizations = defaultOrganizations;
        await this.tryExecute('Default Feature Toggle', feature_seed_1.createDefaultFeatureToggle(this.connection, this.tenant));
        await this.tryExecute('Default Email Templates', email_template_seed_1.createDefaultEmailTemplates(this.connection));
        await this.tryExecute('Skills', skill_seed_1.createDefaultSkills(this.connection, this.tenant, this.organizations[0]));
        await this.tryExecute('Contacts', contact_seed_1.createRandomContacts(this.connection, this.tenant, this.organizations, random_seed_config_1.randomSeedConfig.noOfRandomContacts || 5));
        this.superAdminUsers = await user_seed_1.createDefaultSuperAdminUsers(this.connection, this.roles, this.tenant);
        const { adminUsers, defaultEmployeeUsers, defaultCandidateUsers } = await user_seed_1.createDefaultUsers(this.connection, this.roles, this.tenant);
        await user_organization_seed_1.createDefaultUsersOrganizations(this.connection, {
            organizations: this.organizations,
            users: [
                ...defaultEmployeeUsers,
                ...adminUsers,
                ...this.superAdminUsers
            ]
        });
        this.defaultCandidateUsers = defaultCandidateUsers;
        this.defaultEmployees = await employee_seed_1.createDefaultEmployees(this.connection, {
            tenant: this.tenant,
            org: this.organizations[0],
            users: defaultEmployeeUsers
        });
        await this.tryExecute('Default Employee Invite', invite_seed_1.createDefaultEmployeeInviteSent(this.connection, this.tenant, this.organizations, this.superAdminUsers));
        await this.tryExecute('Default General Goal Setting', goal_general_setting_seed_1.createDefaultGeneralGoalSetting(this.connection, this.tenant, this.organizations));
        await this.tryExecute('Default Goal Template', goal_template_seed_1.createDefaultGoalTemplates(this.connection, this.tenant, this.organizations[0]));
        await this.tryExecute('Default Goal KPI Template', goal_kpi_template_seed_1.createDefaultGoalKpiTemplate(this.connection, this.tenant, this.organizations[0]));
        await this.tryExecute('Default Key Result Template', keyresult_template_seed_1.createDefaultKeyResultTemplates(this.connection, this.tenant));
        await this.tryExecute('Default Time Off Policy', time_off_policy_seed_1.createDefaultTimeOffPolicy(this.connection, {
            org: this.organizations[0],
            employees: this.defaultEmployees
        }));
        const integrationTypes = await this.tryExecute('Default Integration Types', integration_type_seed_1.createDefaultIntegrationTypes(this.connection));
        await this.tryExecute('Default Integrations', integration_seed_1.createDefaultIntegrations(this.connection, integrationTypes));
        await this.tryExecute('Default Event Types', event_type_seed_1.createDefaultEventTypes(this.connection, this.tenant, this.organizations));
    }
    async seedDefaultData() {
        const categories = await this.tryExecute('Expense Categories', expense_categories_seed_1.createExpenseCategories(this.connection, this.tenant, this.organizations));
        await this.tryExecute('Employee Levels', organization_employee_level_seed_1.createEmployeeLevels(this.connection, this.organizations));
        await this.tryExecute('Default Categories', category_seed_1.createCategories(this.connection, this.organizations));
        await this.tryExecute('Default Product Types', type_seed_1.createDefaultProductType(this.connection, this.organizations));
        await this.tryExecute('Default Organization Contacts', organization_contact_seed_1.createDefaultOrganizationContact(this.connection));
        await this.tryExecute('Default Teams', organization_team_seed_1.createDefaultTeams(this.connection, this.organizations[0], this.defaultEmployees, this.roles));
        this.defaultProjects = await this.tryExecute('Default Organization Projects', organization_projects_seed_1.createDefaultOrganizationProjects(this.connection, this.organizations));
        await this.tryExecute('Default Projects Task', task_seed_1.createDefaultTask(this.connection, this.tenant, this.organizations[0]));
        await this.tryExecute('Default Organization Departments', organization_department_seed_1.createDefaultOrganizationDepartments(this.connection, this.organizations));
        await this.tryExecute('Default Products', product_seed_1.createDefaultProducts(this.connection, this.tenant, this.organizations[0]));
        await this.tryExecute('Default Time Frames', goal_time_frame_seed_1.createDefaultTimeFrames(this.connection, this.tenant, this.organizations));
        await this.tryExecute('Default Tags', tag_seed_1.createDefaultTags(this.connection, this.tenant, this.organizations));
        await this.tryExecute('Default Equipments', equipment_seed_1.createDefaultEquipments(this.connection, this.tenant, this.organizations[0]));
        const organizationVendors = await this.tryExecute('Default Organization Vendors', organization_vendors_seed_1.createOrganizationVendors(this.connection, this.organizations));
        await this.tryExecute('Help Centers', help_center_seed_1.createHelpCenter(this.connection, {
            tenant: this.tenant,
            org: this.organizations[0]
        }));
        const defaultCandidates = await this.tryExecute('Default Candidates', candidate_seed_1.createDefaultCandidates(this.connection, {
            tenant: this.tenant,
            org: this.organizations[0],
            users: [...this.defaultCandidateUsers]
        }));
        await this.tryExecute('Default Candidate Sources', candidate_source_seed_1.createCandidateSources(this.connection, this.tenant, defaultCandidates, this.organizations[0]));
        await this.tryExecute('Default Candidate Documents', candidate_documents_seed_1.createCandidateDocuments(this.connection, this.tenant, defaultCandidates, this.organizations[0]));
        await this.tryExecute('Default Candidate Interview', candidate_interview_seed_1.createDefaultCandidateInterview(this.connection, this.tenant, this.organizations[0], defaultCandidates));
        await this.tryExecute('Default Candidate Interviewers', candidate_interviewers_seed_1.createDefaultCandidateInterviewers(this.connection, this.tenant, this.organizations[0], this.defaultEmployees, defaultCandidates));
        await this.tryExecute('Default Candidate Feedbacks', candidate_feedbacks_seed_1.createCandidateFeedbacks(this.connection, this.tenant, this.organizations[0], defaultCandidates));
        await this.tryExecute('Default Candidate Educations', candidate_education_seed_1.createCandidateEducations(this.connection, defaultCandidates));
        await this.tryExecute('Default Candidate Skills', candidate_skill_seed_1.createCandidateSkills(this.connection, this.tenant, defaultCandidates, this.organizations[0]));
        await this.tryExecute('Default Incomes', income_seed_1.createDefaultIncomes(this.connection, {
            organizations: this.organizations,
            employees: this.defaultEmployees
        }));
        await this.tryExecute('Default Expenses', expense_seed_1.createDefaultExpenses(this.connection, {
            organizations: this.organizations,
            tenant: this.tenant,
            employees: this.defaultEmployees,
            categories,
            organizationVendors
        }));
        await this.tryExecute('Default Employment Types', organization_employment_type_seed_1.seedDefaultEmploymentTypes(this.connection, this.tenant, this.defaultEmployees, this.organizations[0]));
        await this.tryExecute('Default Goal KPIs', goal_kpi_seed_1.createDefaultGoalKpi(this.connection, this.tenant, this.organizations, this.defaultEmployees));
        const goals = await this.tryExecute('Default Goals', goal_seed_1.createDefaultGoals(this.connection, this.tenant, this.organizations, this.defaultEmployees));
        const keyResults = await this.tryExecute('Default Key Results', keyresult_seed_1.createDefaultKeyResults(this.connection, this.tenant, this.defaultEmployees, goals));
        await this.tryExecute('Default Key Result Updates', keyresult_update_seed_1.createDefaultKeyResultUpdates(this.connection, this.tenant, this.organizations[0], keyResults));
        await this.tryExecute('Default Key Result Progress', keyresult_seed_1.updateDefaultKeyResultProgress(this.connection));
        await this.tryExecute('Default Goal Progress', goal_seed_1.updateDefaultGoalProgress(this.connection));
        await this.tryExecute('Default Approval Policies', approval_policy_seed_1.createDefaultApprovalPolicyForOrg(this.connection, {
            orgs: this.organizations
        }));
        await this.tryExecute('Default Equipment Sharing Policies', equipment_sharing_policy_seed_1.createDefaultEquipmentSharingPolicyForOrg(this.connection, {
            orgs: this.organizations,
            tenant: this.tenant
        }));
        await this.tryExecute('Default TimeSheets', timesheet_seed_1.createDefaultTimeSheet(this.connection, this.tenant, this.defaultEmployees, this.defaultProjects, random_seed_config_1.randomSeedConfig.noOfTimeLogsPerTimeSheet));
        await this.tryExecute('Default Proposals', proposal_seed_1.createDefaultProposals(this.connection, this.tenant, this.defaultEmployees, this.organizations, random_seed_config_1.randomSeedConfig.proposalsSharingPerOrganizations || 30));
        await this.tryExecute('Default Organization Languages', organization_languages_seed_1.createDefaultOrganizationLanguage(this.connection, this.tenant, this.organizations));
        await this.tryExecute('Default Awards', organization_awards_seed_1.createDefaultAwards(this.connection, this.tenant, this.organizations));
        await this.tryExecute('Default Employee Awards', employee_award_seed_1.createDefaultEmployeeAwards(this.connection, this.tenant, this.defaultEmployees[0]));
        await this.tryExecute('Default Invoices', invoice_seed_1.createDefaultInvoice(this.connection, this.tenant, this.organizations, random_seed_config_1.randomSeedConfig.numberOfInvoicePerOrganization || 50));
        await this.tryExecute('Default Invoice Items', invoice_item_seed_1.createDefaultInvoiceItem(this.connection, this.tenant, this.organizations, random_seed_config_1.randomSeedConfig.numberOfInvoiceItemPerInvoice || 5));
        await this.tryExecute('Default Payment', payment_seed_1.createDefaultPayment(this.connection, this.tenant, this.defaultEmployees, this.organizations));
        await this.tryExecute('Default Pipelines', pipeline_seed_1.createDefaultPipeline(this.connection, this.tenant, this.organizations[0]));
        await this.tryExecute('Default Employee Appointment', employee_appointment_seed_1.createDefaultEmployeeAppointment(this.connection, this.tenant, this.defaultEmployees, this.organizations[0]));
        await this.tryExecute('Default Organization Position', organization_position_seed_1.seedDefaultOrganizationPosition(this.connection, this.tenant, this.organizations[0]));
        await this.tryExecute('Default Organization Documents', organization_documents_seed_1.createOrganizationDocuments(this.connection, this.tenant, this.organizations));
        await this.tryExecute('Default Employee TimeOff', time_off_request_seed_1.createDefaultEmployeeTimeOff(this.connection, this.tenant, this.organizations[0], this.defaultEmployees, random_seed_config_1.randomSeedConfig.employeeTimeOffPerOrganization || 20));
        await this.tryExecute('Default Candidate Personal Qualities', candidate_personal_qualities_seed_1.createDefaultCandidatePersonalQualities(this.connection, this.tenant, this.organizations[0], defaultCandidates));
        await this.tryExecute('Default Candidate Technologies', candidate_technologies_seed_1.createDefaultCandidateTechnologies(this.connection, this.tenant, this.organizations[0], defaultCandidates));
        await this.tryExecute('Default Candidate Criterion Rating', candidate_criterion_rating_seed_1.createDefaultCandidateCriterionRating(this.connection, this.tenant, this.organizations[0], defaultCandidates));
        await this.tryExecute('Default Equipment Sharing', equipment_sharing_seed_1.createDefaultEquipmentSharing(this.connection, this.tenant, this.organizations[0], this.defaultEmployees, random_seed_config_1.randomSeedConfig.equipmentSharingPerTenant || 20));
        await this.tryExecute('Default Organization Recurring Expense', organization_recurring_expense_seed_1.createDefaultOrganizationRecurringExpense(this.connection, this.tenant, this.organizations[0]));
        await this.tryExecute('Default Help Center Articles', help_center_article_seed_1.createHelpCenterArticle(this.connection, this.organizations, random_seed_config_1.randomSeedConfig.noOfHelpCenterArticle || 5));
        await this.tryExecute('Default Help Center Author', help_center_author_seed_1.createDefaultHelpCenterAuthor(this.connection, this.defaultEmployees));
        await this.tryExecute('Default Availability Slots', availability_slots_seed_1.createDefaultAvailabilitySlots(this.connection, [this.tenant], this.organizations[0], this.defaultEmployees, random_seed_config_1.randomSeedConfig.availabilitySlotsPerOrganization || 20));
        await this.tryExecute('Default Email Sent', email_seed_1.createDefaultEmailSent(this.connection, this.tenant, this.organizations[0], random_seed_config_1.randomSeedConfig.emailsPerOrganization || 20));
    }
    async seedRandomData() {
        const tenants = await tenant_seed_1.createRandomTenants(this.connection, random_seed_config_1.randomSeedConfig.tenants || 1);
        await this.tryExecute('Random Feature Toggle', feature_seed_1.createRandomFeatureToggle(this.connection, tenants));
        const roles = await role_seed_1.createRoles(this.connection, tenants);
        await role_permissions_seed_1.createRolePermissions(this.connection, roles, tenants);
        const tenantOrganizationsMap = await organization_seed_1.createRandomOrganizations(this.connection, tenants, random_seed_config_1.randomSeedConfig.organizationsPerTenant || 1);
        const tenantSuperAdminsMap = await user_seed_1.createRandomSuperAdminUsers(this.connection, roles, tenants, 1);
        const tenantUsersMap = await user_seed_1.createRandomUsers(this.connection, roles, tenants, random_seed_config_1.randomSeedConfig.organizationsPerTenant || 1, random_seed_config_1.randomSeedConfig.employeesPerOrganization || 1, random_seed_config_1.randomSeedConfig.candidatesPerOrganization || 1, random_seed_config_1.randomSeedConfig.managersPerOrganization || 1, random_seed_config_1.randomSeedConfig.dataEntriesPerOrganization || 1, random_seed_config_1.randomSeedConfig.viewersPerOrganization || 1);
        await user_organization_seed_1.createRandomUsersOrganizations(this.connection, tenants, tenantOrganizationsMap, tenantSuperAdminsMap, tenantUsersMap, random_seed_config_1.randomSeedConfig.employeesPerOrganization || 1);
        const tenantEmployeeMap = await employee_seed_1.createRandomEmployees(this.connection, tenants, tenantOrganizationsMap, tenantUsersMap, random_seed_config_1.randomSeedConfig.employeesPerOrganization || 1);
        await this.tryExecute('Random Categories', category_seed_1.createRandomCategories(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Product Types', type_seed_1.createRandomProductType(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Products', product_seed_1.createRandomProduct(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Organization Documents', organization_documents_seed_1.createRandomOrganizationDocuments(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Product Options', product_option_seed_1.createRandomProductOption(this.connection, tenants, tenantOrganizationsMap, random_seed_config_1.randomSeedConfig.numberOfOptionPerProduct || 5));
        await this.tryExecute('Random Product Variants', product_variant_seed_1.createRandomProductVariant(this.connection, tenants, tenantOrganizationsMap, random_seed_config_1.randomSeedConfig.numberOfVariantPerProduct || 5));
        await this.tryExecute('Random Product Variant Prices', product_variant_price_seed_1.createRandomProductVariantPrice(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Product Variant Settings', product_settings_seed_1.createRandomProductVariantSettings(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Incomes', income_seed_1.createRandomIncomes(this.connection, tenants, tenantEmployeeMap));
        await this.tryExecute('Random Teams', organization_team_seed_1.createRandomTeam(this.connection, tenants, tenantOrganizationsMap, roles));
        const randomGoals = await this.tryExecute('Random Goals', goal_seed_1.createRandomGoal(this.connection, tenants, tenantOrganizationsMap, tenantEmployeeMap));
        await this.tryExecute('Random Key Results', keyresult_seed_1.createRandomKeyResult(this.connection, tenants, tenantEmployeeMap, randomGoals));
        const tenantCandidatesMap = await this.tryExecute('Random Candidates', candidate_seed_1.createRandomCandidates(this.connection, tenants, tenantOrganizationsMap, tenantUsersMap, random_seed_config_1.randomSeedConfig.candidatesPerOrganization || 1));
        await this.tryExecute('Random Candidate Sources', candidate_source_seed_1.createRandomCandidateSources(this.connection, tenants, tenantCandidatesMap));
        await this.tryExecute('Random Candidate Documents', candidate_documents_seed_1.createRandomCandidateDocuments(this.connection, tenants, tenantCandidatesMap));
        await this.tryExecute('Random Candidate Experiences', candidate_experience_seed_1.createRandomCandidateExperience(this.connection, tenants, tenantCandidatesMap));
        await this.tryExecute('Random Candidate Skills', candidate_skill_seed_1.createRandomCandidateSkills(this.connection, tenants, tenantCandidatesMap));
        const organizationVendorsMap = await this.tryExecute('Random Organization Vendors', organization_vendors_seed_1.createRandomOrganizationVendors(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Time Off Policies', time_off_policy_seed_1.createRandomTimeOffPolicies(this.connection, tenants, tenantOrganizationsMap));
        const categoriesMap = await this.tryExecute('Random Expense Categories', expense_categories_seed_1.createRandomExpenseCategories(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Expenses', expense_seed_1.createRandomExpenses(this.connection, tenants, tenantEmployeeMap, organizationVendorsMap, categoriesMap));
        await this.tryExecute('Random Equipments', equipment_seed_1.createRandomEquipments(this.connection, tenants, random_seed_config_1.randomSeedConfig.equipmentPerTenant || 20));
        await this.tryExecute('Random Equipment Sharing', equipment_sharing_seed_1.createRandomEquipmentSharing(this.connection, tenants, tenantEmployeeMap, random_seed_config_1.randomSeedConfig.equipmentSharingPerTenant || 20));
        await this.tryExecute('Random Employment Types', organization_employment_type_seed_1.seedRandomEmploymentTypes(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Organization Departments', organization_department_seed_1.seedRandomOrganizationDepartments(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Employee Invites', invite_seed_1.createRandomEmployeeInviteSent(this.connection, tenants, tenantOrganizationsMap, tenantSuperAdminsMap, random_seed_config_1.randomSeedConfig.invitePerOrganization || 20));
        await this.tryExecute('Random Organization Positions', organization_position_seed_1.seedRandomOrganizationPosition(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Approval Policies', approval_policy_seed_1.createRandomApprovalPolicyForOrg(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Equipment Sharing Policies', equipment_sharing_policy_seed_1.createRandomEquipmentSharingPolicyForOrg(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Request Approvals', request_approval_seed_1.createRandomRequestApproval(this.connection, tenants, tenantEmployeeMap, random_seed_config_1.randomSeedConfig.requestApprovalPerOrganization || 20));
        await this.tryExecute('Tags', tag_seed_1.createTags(this.connection));
        const tags = await this.tryExecute('Random Organization Tags', tag_seed_1.createRandomOrganizationTags(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Organization Projects', organization_projects_seed_1.createRandomOrganizationProjects(this.connection, tenants, tenantOrganizationsMap, tags, random_seed_config_1.randomSeedConfig.projectsPerOrganization || 10));
        await this.tryExecute('Random Employee Time Off', time_off_request_seed_1.createRandomEmployeeTimeOff(this.connection, tenants, tenantOrganizationsMap, tenantEmployeeMap, random_seed_config_1.randomSeedConfig.employeeTimeOffPerOrganization || 20));
        await this.tryExecute('Random Proposals', proposal_seed_1.createRandomProposals(this.connection, tenants, tenantEmployeeMap, tenantOrganizationsMap, random_seed_config_1.randomSeedConfig.proposalsSharingPerOrganizations || 30));
        await this.tryExecute('Random Email Sent', email_seed_1.createRandomEmailSent(this.connection, tenants, tenantOrganizationsMap, random_seed_config_1.randomSeedConfig.emailsPerOrganization || 20));
        await this.tryExecute('Random Tasks', task_seed_1.createRandomTask(this.connection, tenants, this.defaultProjects));
        await this.tryExecute('Random TimeSheets', timesheet_seed_1.createRandomTimesheet(this.connection, this.tenant, this.defaultProjects, random_seed_config_1.randomSeedConfig.noOfTimeLogsPerTimeSheet));
        const noOfContactsPerOrganization = 10;
        await this.tryExecute('Random Organization Contacts', organization_contact_seed_1.createRandomOrganizationContact(this.connection, tenants, tenantEmployeeMap, tenantOrganizationsMap, noOfContactsPerOrganization));
        await this.tryExecute('Random Invoices', invoice_seed_1.createRandomInvoice(this.connection, tenants, tenantOrganizationsMap, random_seed_config_1.randomSeedConfig.numberOfInvoicePerOrganization || 50));
        await this.tryExecute('Random Invoice Items', invoice_item_seed_1.createRandomInvoiceItem(this.connection, tenants, tenantOrganizationsMap, random_seed_config_1.randomSeedConfig.numberOfInvoiceItemPerInvoice || 5));
        await this.tryExecute('Random Availability Slots', availability_slots_seed_1.createRandomAvailabilitySlots(this.connection, tenants, tenantOrganizationsMap, tenantEmployeeMap, random_seed_config_1.randomSeedConfig.availabilitySlotsPerOrganization || 20));
        await this.tryExecute('Random Payments', payment_seed_1.createRandomPayment(this.connection, tenants, tenantEmployeeMap, tenantOrganizationsMap));
        await this.tryExecute('Random Candidate Educations', candidate_education_seed_1.createRandomCandidateEducations(this.connection, tenants, tenantCandidatesMap));
        await this.tryExecute('Random Candidate Interviews', candidate_interview_seed_1.createRandomCandidateInterview(this.connection, tenants, tenantCandidatesMap));
        await this.tryExecute('Random Candidate Technologies', candidate_technologies_seed_1.createRandomCandidateTechnologies(this.connection, tenants, tenantCandidatesMap));
        await this.tryExecute('Random Candidate Personal Qualities', candidate_personal_qualities_seed_1.createRandomCandidatePersonalQualities(this.connection, tenants, tenantCandidatesMap));
        await this.tryExecute('Random Awards', organization_awards_seed_1.createRandomAwards(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Candidate Interviewers', candidate_interviewers_seed_1.createRandomCandidateInterviewers(this.connection, tenants, tenantEmployeeMap, tenantCandidatesMap));
        await this.tryExecute('Random Candidate Feedbacks', candidate_feedbacks_seed_1.createRandomCandidateFeedbacks(this.connection, tenants, tenantCandidatesMap));
        await this.tryExecute('Random Employee Recurring Expenses', employee_recurring_expense_seed_1.createRandomEmployeeRecurringExpense(this.connection, tenants, tenantEmployeeMap));
        await this.tryExecute('Random Employee Settings', employee_setting_seed_1.createRandomEmployeeSetting(this.connection, tenants, tenantEmployeeMap));
        await this.tryExecute('Random Organization Languages', organization_languages_seed_1.createRandomOrganizationLanguage(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Organization Recurring Expenses', organization_recurring_expense_seed_1.createRandomOrganizationRecurringExpense(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Help Center Articles', help_center_article_seed_1.createHelpCenterArticle(this.connection, this.organizations, random_seed_config_1.randomSeedConfig.noOfHelpCenterArticle || 5));
        await this.tryExecute('Random Organization Sprints', organization_sprint_seed_1.createRandomOrganizationSprint(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Organization Team Employees', organization_team_employee_seed_1.createRandomOrganizationTeamEmployee(this.connection, tenants, tenantEmployeeMap, tenantOrganizationsMap));
        await this.tryExecute('Random Help Center Authors', help_center_author_seed_1.createRandomHelpCenterAuthor(this.connection, tenants, tenantEmployeeMap));
        await this.tryExecute('Random Appointment Employees', appointment_employees_seed_1.createRandomAppointmentEmployees(this.connection, tenants, tenantEmployeeMap));
        await this.tryExecute('Random Employee Appointments', employee_appointment_seed_1.createRandomEmployeeAppointment(this.connection, tenants, tenantEmployeeMap, tenantOrganizationsMap));
        await this.tryExecute('Random Pipelines', pipeline_seed_1.createRandomPipeline(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Pipeline Stages', pipeline_stage_seed_1.createRandomPipelineStage(this.connection, tenants, tenantOrganizationsMap));
        await this.tryExecute('Random Deals', deal_seed_1.createRandomDeal(this.connection, tenants, tenantEmployeeMap, tenantOrganizationsMap));
        await this.tryExecute('Random Integrations', integration_tenant_seed_1.createRandomIntegrationTenant(this.connection, tenants));
        await this.tryExecute('Random Integration Settings', integration_setting_seed_1.createRandomIntegrationSetting(this.connection, tenants));
        await this.tryExecute('Random Integration Map', integration_map_seed_1.createRandomIntegrationMap(this.connection, tenants));
        await this.tryExecute('Random Integration Entity Settings', integration_entity_setting_seed_1.createRandomIntegrationEntitySetting(this.connection, tenants));
        await this.tryExecute('Random Integration Entity Settings Tied Entity', integration_entity_setting_tied_entity_seed_1.createRandomIntegrationEntitySettingTiedEntity(this.connection, tenants));
        await this.tryExecute('Random Request Approval Employee', request_approval_employee_seed_1.createRandomRequestApprovalEmployee(this.connection, tenants, tenantEmployeeMap, tenantOrganizationsMap));
        await this.tryExecute('Random Request Approval Team', request_approval_team_seed_1.createRandomRequestApprovalTeam(this.connection, tenants, tenantEmployeeMap, tenantOrganizationsMap));
        await this.tryExecute('Random Candidate Criterion Ratings', candidate_criterion_rating_seed_1.createRandomCandidateCriterionRating(this.connection, tenants, tenantCandidatesMap));
        await this.tryExecute('Random Event Types', event_type_seed_1.createRandomEventType(this.connection, tenants, tenantEmployeeMap, tenantOrganizationsMap));
    }
    async cleanUpPreviousRuns() {
        this.log(chalk_1.default.green(`CLEANING UP FROM PREVIOUS RUNS...`));
        await new Promise((resolve, reject) => {
            const dir = environment_1.environment.isElectron
                ? path.join(path.resolve(environment_1.environment.gauzyUserPath, ...['public']), 'screenshots')
                : path.join(path.resolve('.', ...['apps', 'api', 'public']), 'screenshots');
            rimraf(dir, () => {
                this.log(chalk_1.default.green(`CLEANED UP`));
                resolve();
            });
        });
    }
    async createConnection() {
        try {
            this.connection = typeorm_1.getConnection();
        }
        catch (error) {
            this.log('NOTE: DATABASE CONNECTION DOES NOT EXIST YET. NEW ONE WILL BE CREATED!');
        }
        if (!this.connection || !this.connection.isConnected) {
            try {
                this.log(chalk_1.default.green(`CONNECTING TO DATABASE...`));
                this.connection = await typeorm_1.createConnection(Object.assign(Object.assign(Object.assign({}, environment_1.environment.database), this.overrideDbConfig), { entities: [
                        path.resolve(__dirname, '../../**', '**.entity{.ts,.js}')
                    ] }));
                this.log(chalk_1.default.green(`CONNECTED TO DATABASE`));
            }
            catch (error) {
                this.handleError(error, 'Unable to connect to database');
            }
        }
    }
    tryExecute(name, p) {
        this.log(chalk_1.default.green(`SEEDING ${name}`));
        return p.then((x) => x, (error) => {
            this.log(chalk_1.default.bgRed(`🛑 ERROR: ${error ? error.message : 'unknown'}`));
        });
    }
    async getEntities() {
        const entities = [];
        try {
            this.connection.entityMetadatas.forEach((entity) => entities.push({
                name: entity.name,
                tableName: entity.tableName
            }));
            return entities;
        }
        catch (error) {
            this.handleError(error, 'Unable to retrieve database metadata');
        }
    }
    async cleanAll(entities) {
        try {
            for (const entity of entities) {
                const repository = typeorm_1.getRepository(entity.name);
                let truncateSql;
                switch (environment_1.environment.database.type) {
                    case 'postgres':
                        truncateSql = `TRUNCATE  "${entity.tableName}" RESTART IDENTITY CASCADE;`;
                        break;
                    default:
                        truncateSql = `DELETE FROM  "${entity.tableName}";`;
                        await repository.query('PRAGMA foreign_keys = OFF;');
                }
                await repository.query(truncateSql);
            }
        }
        catch (error) {
            this.handleError(error, 'Unable to clean database');
        }
    }
    async resetDatabase() {
        this.log(chalk_1.default.green(`RESETTING DATABASE`));
        const entities = await this.getEntities();
        await this.cleanAll(entities);
        this.log(chalk_1.default.green(`✅ RESET DATABASE SUCCESSFUL`));
    }
    handleError(error, message) {
        this.log(chalk_1.default.bgRed(`🛑 ERROR: ${message ? message + '-> ' : ''} ${error ? error.message : ''}`));
        throw error;
    }
};
SeedDataService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], SeedDataService);
exports.SeedDataService = SeedDataService;


/***/ }),

/***/ "./src/app/core/utils.ts":
/*!*******************************!*\
  !*** ./src/app/core/utils.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.tempFile = exports.convertToDatetime = exports.unixTimestampToDate = exports.arrayToObject = exports.getLastDayOfMonth = exports.reflect = exports.getUserDummyImage = exports.getDummyImage = void 0;
const lodash_1 = __webpack_require__(/*! lodash */ "lodash");
const moment = __webpack_require__(/*! moment */ "moment");
const path = __webpack_require__(/*! path */ "path");
const fs = __webpack_require__(/*! fs */ "fs");
const os = __webpack_require__(/*! os */ "os");
var Utils;
(function (Utils) {
    function generatedLogoColor() {
        return lodash_1.sample(['#269aff', '#ffaf26', '#8b72ff', '#0ecc9D']).replace('#', '');
    }
    Utils.generatedLogoColor = generatedLogoColor;
})(Utils || (Utils = {}));
exports.getDummyImage = (width, height, letter) => {
    return `https://dummyimage.com/${width}x${height}/${Utils.generatedLogoColor()}/ffffff.jpg&text=${letter}`;
};
exports.getUserDummyImage = (user) => {
    const firstNameLetter = user.firstName
        ? user.firstName.charAt(0).toUpperCase()
        : '';
    if (firstNameLetter) {
        return exports.getDummyImage(330, 300, firstNameLetter);
    }
    else {
        const firstCityLetter = user.email.charAt(0).toUpperCase();
        return exports.getDummyImage(330, 300, firstCityLetter);
    }
};
function reflect(promise) {
    return promise.then((item) => ({ item, status: 'fulfilled' }), (error) => ({ error, status: 'rejected' }));
}
exports.reflect = reflect;
function getLastDayOfMonth(year, month) {
    return new Date(year, month + 1, 0).getDate();
}
exports.getLastDayOfMonth = getLastDayOfMonth;
function arrayToObject(array, key, value) {
    return array.reduce((prev, current) => {
        return Object.assign(Object.assign({}, prev), { [current[key]]: current[value] });
    }, {});
}
exports.arrayToObject = arrayToObject;
function unixTimestampToDate(timestamps, format = 'YYYY-MM-DD HH:mm:ss') {
    const millisecond = 1000;
    return moment.unix(timestamps / millisecond).format(format);
}
exports.unixTimestampToDate = unixTimestampToDate;
function convertToDatetime(datetime, format = 'YYYY-MM-DD HH:mm:ss') {
    if (moment(datetime).isValid()) {
        return moment(datetime).format(format);
    }
    return null;
}
exports.convertToDatetime = convertToDatetime;
async function tempFile(prefix) {
    const tempPath = path.join(os.tmpdir(), prefix);
    const folder = await fs.promises.mkdtemp(tempPath);
    return path.join(folder, prefix + moment().unix() + Math.random() * 10000);
}
exports.tempFile = tempFile;


/***/ }),

/***/ "./src/app/country/country.controller.ts":
/*!***********************************************!*\
  !*** ./src/app/country/country.controller.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CountryController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const country_service_1 = __webpack_require__(/*! ./country.service */ "./src/app/country/country.service.ts");
let CountryController = class CountryController extends crud_controller_1.CrudController {
    constructor(countryService) {
        super(countryService);
        this.countryService = countryService;
    }
};
CountryController = tslib_1.__decorate([
    swagger_1.ApiTags('Country'),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof country_service_1.CountryService !== "undefined" && country_service_1.CountryService) === "function" ? _a : Object])
], CountryController);
exports.CountryController = CountryController;


/***/ }),

/***/ "./src/app/country/country.entity.ts":
/*!*******************************************!*\
  !*** ./src/app/country/country.entity.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Country = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const base_1 = __webpack_require__(/*! ../core/entities/base */ "./src/app/core/entities/base.ts");
let Country = class Country extends base_1.Base {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Index(),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], Country.prototype, "isoCode", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], Country.prototype, "country", void 0);
Country = tslib_1.__decorate([
    typeorm_1.Entity('country')
], Country);
exports.Country = Country;


/***/ }),

/***/ "./src/app/country/country.module.ts":
/*!*******************************************!*\
  !*** ./src/app/country/country.module.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CountryModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const country_entity_1 = __webpack_require__(/*! ./country.entity */ "./src/app/country/country.entity.ts");
const country_controller_1 = __webpack_require__(/*! ./country.controller */ "./src/app/country/country.controller.ts");
const country_service_1 = __webpack_require__(/*! ./country.service */ "./src/app/country/country.service.ts");
let CountryModule = class CountryModule {
};
CountryModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([country_entity_1.Country])],
        controllers: [country_controller_1.CountryController],
        providers: [country_service_1.CountryService],
        exports: [country_service_1.CountryService]
    })
], CountryModule);
exports.CountryModule = CountryModule;


/***/ }),

/***/ "./src/app/country/country.seed.ts":
/*!*****************************************!*\
  !*** ./src/app/country/country.seed.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createCountries = void 0;
const country_entity_1 = __webpack_require__(/*! ./country.entity */ "./src/app/country/country.entity.ts");
const default_countries_1 = __webpack_require__(/*! ./default-countries */ "./src/app/country/default-countries.ts");
exports.createCountries = async (connection) => {
    return await new Promise(async (resolve, reject) => {
        try {
            const countries = [];
            const entries = default_countries_1.DEFAULT_COUNTRIES;
            for (const key of Object.keys(entries)) {
                if (entries.hasOwnProperty(key)) {
                    const country = {
                        isoCode: key,
                        country: entries[key]
                    };
                    countries.push(country);
                }
            }
            await insertCountry(connection, countries);
            resolve(countries);
        }
        catch (err) {
            console.log('Error parsing country:', err);
            reject(null);
            return;
        }
    });
};
const insertCountry = async (connection, countries) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(country_entity_1.Country)
        .values(countries)
        .execute();
};


/***/ }),

/***/ "./src/app/country/country.service.ts":
/*!********************************************!*\
  !*** ./src/app/country/country.service.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CountryService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const country_entity_1 = __webpack_require__(/*! ./country.entity */ "./src/app/country/country.entity.ts");
let CountryService = class CountryService extends crud_service_1.CrudService {
    constructor(countryRepository) {
        super(countryRepository);
        this.countryRepository = countryRepository;
    }
};
CountryService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(country_entity_1.Country)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], CountryService);
exports.CountryService = CountryService;


/***/ }),

/***/ "./src/app/country/default-countries.ts":
/*!**********************************************!*\
  !*** ./src/app/country/default-countries.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_COUNTRIES = void 0;
exports.DEFAULT_COUNTRIES = {
    AF: 'Afghanistan',
    AX: '\u00c5land Islands',
    AL: 'Albania',
    DZ: 'Algeria',
    AS: 'American Samoa',
    AD: 'Andorra',
    AO: 'Angola',
    AI: 'Anguilla',
    AQ: 'Antarctica',
    AG: 'Antigua & Barbuda',
    AR: 'Argentina',
    AM: 'Armenia',
    AW: 'Aruba',
    AU: 'Australia',
    AT: 'Austria',
    AZ: 'Azerbaijan',
    BS: 'Bahamas',
    BH: 'Bahrain',
    BD: 'Bangladesh',
    BB: 'Barbados',
    BY: 'Belarus',
    BE: 'Belgium',
    BZ: 'Belize',
    BJ: 'Benin',
    BM: 'Bermuda',
    BT: 'Bhutan',
    BO: 'Bolivia',
    BA: 'Bosnia & Herzegovina',
    BW: 'Botswana',
    BV: 'Bouvet Island',
    BR: 'Brazil',
    IO: 'British Indian Ocean Territory',
    VG: 'British Virgin Islands',
    BN: 'Brunei',
    BG: 'Bulgaria',
    BF: 'Burkina Faso',
    BI: 'Burundi',
    KH: 'Cambodia',
    CM: 'Cameroon',
    CA: 'Canada',
    CV: 'Cape Verde',
    BQ: 'Caribbean Netherlands',
    KY: 'Cayman Islands',
    CF: 'Central African Republic',
    TD: 'Chad',
    CL: 'Chile',
    CN: 'China',
    CX: 'Christmas Island',
    CC: 'Cocos (Keeling) Islands',
    CO: 'Colombia',
    KM: 'Comoros',
    CG: 'Congo - Brazzaville',
    CD: 'Congo - Kinshasa',
    CK: 'Cook Islands',
    CR: 'Costa Rica',
    CI: 'C\u00f4te d\u2019Ivoire',
    HR: 'Croatia',
    CU: 'Cuba',
    CW: 'Cura\u00e7ao',
    CY: 'Cyprus',
    CZ: 'Czechia',
    DK: 'Denmark',
    DJ: 'Djibouti',
    DM: 'Dominica',
    DO: 'Dominican Republic',
    EC: 'Ecuador',
    EG: 'Egypt',
    SV: 'El Salvador',
    GQ: 'Equatorial Guinea',
    ER: 'Eritrea',
    EE: 'Estonia',
    SZ: 'Eswatini',
    ET: 'Ethiopia',
    FK: 'Falkland Islands',
    FO: 'Faroe Islands',
    FJ: 'Fiji',
    FI: 'Finland',
    FR: 'France',
    GF: 'French Guiana',
    PF: 'French Polynesia',
    TF: 'French Southern Territories',
    GA: 'Gabon',
    GM: 'Gambia',
    GE: 'Georgia',
    DE: 'Germany',
    GH: 'Ghana',
    GI: 'Gibraltar',
    GR: 'Greece',
    GL: 'Greenland',
    GD: 'Grenada',
    GP: 'Guadeloupe',
    GU: 'Guam',
    GT: 'Guatemala',
    GG: 'Guernsey',
    GN: 'Guinea',
    GW: 'Guinea-Bissau',
    GY: 'Guyana',
    HT: 'Haiti',
    HM: 'Heard & McDonald Islands',
    HN: 'Honduras',
    HK: 'Hong Kong SAR China',
    HU: 'Hungary',
    IS: 'Iceland',
    IN: 'India',
    ID: 'Indonesia',
    IR: 'Iran',
    IQ: 'Iraq',
    IE: 'Ireland',
    IM: 'Isle of Man',
    IL: 'Israel',
    IT: 'Italy',
    JM: 'Jamaica',
    JP: 'Japan',
    JE: 'Jersey',
    JO: 'Jordan',
    KZ: 'Kazakhstan',
    KE: 'Kenya',
    KI: 'Kiribati',
    KW: 'Kuwait',
    KG: 'Kyrgyzstan',
    LA: 'Laos',
    LV: 'Latvia',
    LB: 'Lebanon',
    LS: 'Lesotho',
    LR: 'Liberia',
    LY: 'Libya',
    LI: 'Liechtenstein',
    LT: 'Lithuania',
    LU: 'Luxembourg',
    MO: 'Macao SAR China',
    MG: 'Madagascar',
    MW: 'Malawi',
    MY: 'Malaysia',
    MV: 'Maldives',
    ML: 'Mali',
    MT: 'Malta',
    MH: 'Marshall Islands',
    MQ: 'Martinique',
    MR: 'Mauritania',
    MU: 'Mauritius',
    YT: 'Mayotte',
    MX: 'Mexico',
    FM: 'Micronesia',
    MD: 'Moldova',
    MC: 'Monaco',
    MN: 'Mongolia',
    ME: 'Montenegro',
    MS: 'Montserrat',
    MA: 'Morocco',
    MZ: 'Mozambique',
    MM: 'Myanmar (Burma)',
    NA: 'Namibia',
    NR: 'Nauru',
    NP: 'Nepal',
    NL: 'Netherlands',
    NC: 'New Caledonia',
    NZ: 'New Zealand',
    NI: 'Nicaragua',
    NE: 'Niger',
    NG: 'Nigeria',
    NU: 'Niue',
    NF: 'Norfolk Island',
    KP: 'North Korea',
    MK: 'North Macedonia',
    MP: 'Northern Mariana Islands',
    NO: 'Norway',
    OM: 'Oman',
    PK: 'Pakistan',
    PW: 'Palau',
    PS: 'Palestinian Territories',
    PA: 'Panama',
    PG: 'Papua New Guinea',
    PY: 'Paraguay',
    PE: 'Peru',
    PH: 'Philippines',
    PN: 'Pitcairn Islands',
    PL: 'Poland',
    PT: 'Portugal',
    PR: 'Puerto Rico',
    QA: 'Qatar',
    RE: 'R\u00e9union',
    RO: 'Romania',
    RU: 'Russia',
    RW: 'Rwanda',
    WS: 'Samoa',
    SM: 'San Marino',
    ST: 'S\u00e3o Tom\u00e9 & Pr\u00edncipe',
    SA: 'Saudi Arabia',
    SN: 'Senegal',
    RS: 'Serbia',
    SC: 'Seychelles',
    SL: 'Sierra Leone',
    SG: 'Singapore',
    SX: 'Sint Maarten',
    SK: 'Slovakia',
    SI: 'Slovenia',
    SB: 'Solomon Islands',
    SO: 'Somalia',
    ZA: 'South Africa',
    GS: 'South Georgia & South Sandwich Islands',
    KR: 'South Korea',
    SS: 'South Sudan',
    ES: 'Spain',
    LK: 'Sri Lanka',
    BL: 'St. Barth\u00e9lemy',
    SH: 'St. Helena',
    KN: 'St. Kitts & Nevis',
    LC: 'St. Lucia',
    MF: 'St. Martin',
    PM: 'St. Pierre & Miquelon',
    VC: 'St. Vincent & Grenadines',
    SD: 'Sudan',
    SR: 'Suriname',
    SJ: 'Svalbard & Jan Mayen',
    SE: 'Sweden',
    CH: 'Switzerland',
    SY: 'Syria',
    TW: 'Taiwan',
    TJ: 'Tajikistan',
    TZ: 'Tanzania',
    TH: 'Thailand',
    TL: 'Timor-Leste',
    TG: 'Togo',
    TK: 'Tokelau',
    TO: 'Tonga',
    TT: 'Trinidad & Tobago',
    TN: 'Tunisia',
    TR: 'Turkey',
    TM: 'Turkmenistan',
    TC: 'Turks & Caicos Islands',
    TV: 'Tuvalu',
    UM: 'U.S. Outlying Islands',
    VI: 'U.S. Virgin Islands',
    UG: 'Uganda',
    UA: 'Ukraine',
    AE: 'United Arab Emirates',
    GB: 'United Kingdom',
    US: 'United States',
    UY: 'Uruguay',
    UZ: 'Uzbekistan',
    VU: 'Vanuatu',
    VA: 'Vatican City',
    VE: 'Venezuela',
    VN: 'Vietnam',
    WF: 'Wallis & Futuna',
    EH: 'Western Sahara',
    YE: 'Yemen',
    ZM: 'Zambia',
    ZW: 'Zimbabwe'
};


/***/ }),

/***/ "./src/app/country/index.ts":
/*!**********************************!*\
  !*** ./src/app/country/index.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CountryService = exports.Country = exports.CountryModule = void 0;
var country_module_1 = __webpack_require__(/*! ./country.module */ "./src/app/country/country.module.ts");
Object.defineProperty(exports, "CountryModule", { enumerable: true, get: function () { return country_module_1.CountryModule; } });
var country_entity_1 = __webpack_require__(/*! ./country.entity */ "./src/app/country/country.entity.ts");
Object.defineProperty(exports, "Country", { enumerable: true, get: function () { return country_entity_1.Country; } });
var country_service_1 = __webpack_require__(/*! ./country.service */ "./src/app/country/country.service.ts");
Object.defineProperty(exports, "CountryService", { enumerable: true, get: function () { return country_service_1.CountryService; } });


/***/ }),

/***/ "./src/app/currency/currency.controller.ts":
/*!*************************************************!*\
  !*** ./src/app/currency/currency.controller.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CurrencyController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const currency_service_1 = __webpack_require__(/*! ./currency.service */ "./src/app/currency/currency.service.ts");
let CurrencyController = class CurrencyController extends crud_controller_1.CrudController {
    constructor(currencyService) {
        super(currencyService);
        this.currencyService = currencyService;
    }
};
CurrencyController = tslib_1.__decorate([
    swagger_1.ApiTags('Currency'),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof currency_service_1.CurrencyService !== "undefined" && currency_service_1.CurrencyService) === "function" ? _a : Object])
], CurrencyController);
exports.CurrencyController = CurrencyController;


/***/ }),

/***/ "./src/app/currency/currency.entity.ts":
/*!*********************************************!*\
  !*** ./src/app/currency/currency.entity.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Currency = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const base_1 = __webpack_require__(/*! ../core/entities/base */ "./src/app/core/entities/base.ts");
let Currency = class Currency extends base_1.Base {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Index(),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], Currency.prototype, "isoCode", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], Currency.prototype, "currency", void 0);
Currency = tslib_1.__decorate([
    typeorm_1.Entity('currency')
], Currency);
exports.Currency = Currency;


/***/ }),

/***/ "./src/app/currency/currency.module.ts":
/*!*********************************************!*\
  !*** ./src/app/currency/currency.module.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CurrencyModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const currency_entity_1 = __webpack_require__(/*! ./currency.entity */ "./src/app/currency/currency.entity.ts");
const currency_controller_1 = __webpack_require__(/*! ./currency.controller */ "./src/app/currency/currency.controller.ts");
const currency_service_1 = __webpack_require__(/*! ./currency.service */ "./src/app/currency/currency.service.ts");
let CurrencyModule = class CurrencyModule {
};
CurrencyModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([currency_entity_1.Currency])],
        controllers: [currency_controller_1.CurrencyController],
        providers: [currency_service_1.CurrencyService],
        exports: [currency_service_1.CurrencyService]
    })
], CurrencyModule);
exports.CurrencyModule = CurrencyModule;


/***/ }),

/***/ "./src/app/currency/currency.seed.ts":
/*!*******************************************!*\
  !*** ./src/app/currency/currency.seed.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createCurrencies = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const currency_entity_1 = __webpack_require__(/*! ./currency.entity */ "./src/app/currency/currency.entity.ts");
exports.createCurrencies = async (connection) => {
    return await new Promise(async (resolve, reject) => {
        try {
            const currencies = [];
            const entries = models_1.DEFAULT_CURRENCIES;
            for (const key of Object.keys(entries)) {
                if (entries.hasOwnProperty(key)) {
                    const currency = {
                        isoCode: key,
                        currency: entries[key]
                    };
                    currencies.push(currency);
                }
            }
            await insertCurrency(connection, currencies);
            resolve(currencies);
        }
        catch (err) {
            console.log('Error parsing currency:', err);
            reject(null);
            return;
        }
    });
};
const insertCurrency = async (connection, currencies) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(currency_entity_1.Currency)
        .values(currencies)
        .execute();
};


/***/ }),

/***/ "./src/app/currency/currency.service.ts":
/*!**********************************************!*\
  !*** ./src/app/currency/currency.service.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CurrencyService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const currency_entity_1 = __webpack_require__(/*! ./currency.entity */ "./src/app/currency/currency.entity.ts");
let CurrencyService = class CurrencyService extends crud_service_1.CrudService {
    constructor(currencyRepository) {
        super(currencyRepository);
        this.currencyRepository = currencyRepository;
    }
};
CurrencyService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(currency_entity_1.Currency)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], CurrencyService);
exports.CurrencyService = CurrencyService;


/***/ }),

/***/ "./src/app/currency/index.ts":
/*!***********************************!*\
  !*** ./src/app/currency/index.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CurrencyService = exports.Currency = exports.CurrencyModule = void 0;
var currency_module_1 = __webpack_require__(/*! ./currency.module */ "./src/app/currency/currency.module.ts");
Object.defineProperty(exports, "CurrencyModule", { enumerable: true, get: function () { return currency_module_1.CurrencyModule; } });
var currency_entity_1 = __webpack_require__(/*! ./currency.entity */ "./src/app/currency/currency.entity.ts");
Object.defineProperty(exports, "Currency", { enumerable: true, get: function () { return currency_entity_1.Currency; } });
var currency_service_1 = __webpack_require__(/*! ./currency.service */ "./src/app/currency/currency.service.ts");
Object.defineProperty(exports, "CurrencyService", { enumerable: true, get: function () { return currency_service_1.CurrencyService; } });


/***/ }),

/***/ "./src/app/custom-smtp/commands/custom-smtp.create.command.ts":
/*!********************************************************************!*\
  !*** ./src/app/custom-smtp/commands/custom-smtp.create.command.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomSmtpCreateCommand = void 0;
class CustomSmtpCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.CustomSmtpCreateCommand = CustomSmtpCreateCommand;
CustomSmtpCreateCommand.type = '[Custom SMTP] Create';


/***/ }),

/***/ "./src/app/custom-smtp/commands/custom-smtp.update.command.ts":
/*!********************************************************************!*\
  !*** ./src/app/custom-smtp/commands/custom-smtp.update.command.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomSmtpUpdateCommand = void 0;
class CustomSmtpUpdateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.CustomSmtpUpdateCommand = CustomSmtpUpdateCommand;
CustomSmtpUpdateCommand.type = '[Custom SMTP] Update';


/***/ }),

/***/ "./src/app/custom-smtp/commands/handlers/custom-smtp.create.handler.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/custom-smtp/commands/handlers/custom-smtp.create.handler.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomSmtpCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const custom_smtp_service_1 = __webpack_require__(/*! ../../custom-smtp.service */ "./src/app/custom-smtp/custom-smtp.service.ts");
const custom_smtp_create_command_1 = __webpack_require__(/*! ../custom-smtp.create.command */ "./src/app/custom-smtp/commands/custom-smtp.create.command.ts");
let CustomSmtpCreateHandler = class CustomSmtpCreateHandler {
    constructor(customSmtpService) {
        this.customSmtpService = customSmtpService;
    }
    async execute(command) {
        const { input } = command;
        delete input['id'];
        return this.customSmtpService.create(input);
    }
};
CustomSmtpCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(custom_smtp_create_command_1.CustomSmtpCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof custom_smtp_service_1.CustomSmtpService !== "undefined" && custom_smtp_service_1.CustomSmtpService) === "function" ? _a : Object])
], CustomSmtpCreateHandler);
exports.CustomSmtpCreateHandler = CustomSmtpCreateHandler;


/***/ }),

/***/ "./src/app/custom-smtp/commands/handlers/custom-smtp.update.handler.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/custom-smtp/commands/handlers/custom-smtp.update.handler.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomSmtpUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const custom_smtp_service_1 = __webpack_require__(/*! ../../custom-smtp.service */ "./src/app/custom-smtp/custom-smtp.service.ts");
const custom_smtp_update_command_1 = __webpack_require__(/*! ../custom-smtp.update.command */ "./src/app/custom-smtp/commands/custom-smtp.update.command.ts");
let CustomSmtpUpdateHandler = class CustomSmtpUpdateHandler {
    constructor(customSmtpService) {
        this.customSmtpService = customSmtpService;
    }
    async execute(command) {
        const { input } = command;
        const { id } = input;
        return this.customSmtpService.create(Object.assign({ id }, input));
    }
};
CustomSmtpUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(custom_smtp_update_command_1.CustomSmtpUpdateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof custom_smtp_service_1.CustomSmtpService !== "undefined" && custom_smtp_service_1.CustomSmtpService) === "function" ? _a : Object])
], CustomSmtpUpdateHandler);
exports.CustomSmtpUpdateHandler = CustomSmtpUpdateHandler;


/***/ }),

/***/ "./src/app/custom-smtp/commands/index.ts":
/*!***********************************************!*\
  !*** ./src/app/custom-smtp/commands/index.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = exports.CustomSmtpUpdateCommand = exports.CustomSmtpCreateCommand = void 0;
const custom_smtp_create_handler_1 = __webpack_require__(/*! ./handlers/custom-smtp.create.handler */ "./src/app/custom-smtp/commands/handlers/custom-smtp.create.handler.ts");
const custom_smtp_update_handler_1 = __webpack_require__(/*! ./handlers/custom-smtp.update.handler */ "./src/app/custom-smtp/commands/handlers/custom-smtp.update.handler.ts");
var custom_smtp_create_command_1 = __webpack_require__(/*! ./custom-smtp.create.command */ "./src/app/custom-smtp/commands/custom-smtp.create.command.ts");
Object.defineProperty(exports, "CustomSmtpCreateCommand", { enumerable: true, get: function () { return custom_smtp_create_command_1.CustomSmtpCreateCommand; } });
var custom_smtp_update_command_1 = __webpack_require__(/*! ./custom-smtp.update.command */ "./src/app/custom-smtp/commands/custom-smtp.update.command.ts");
Object.defineProperty(exports, "CustomSmtpUpdateCommand", { enumerable: true, get: function () { return custom_smtp_update_command_1.CustomSmtpUpdateCommand; } });
exports.CommandHandlers = [
    custom_smtp_create_handler_1.CustomSmtpCreateHandler,
    custom_smtp_update_handler_1.CustomSmtpUpdateHandler
];


/***/ }),

/***/ "./src/app/custom-smtp/custom-smtp.controller.ts":
/*!*******************************************************!*\
  !*** ./src/app/custom-smtp/custom-smtp.controller.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomSmtpController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const custom_smtp_entity_1 = __webpack_require__(/*! ./custom-smtp.entity */ "./src/app/custom-smtp/custom-smtp.entity.ts");
const custom_smtp_service_1 = __webpack_require__(/*! ./custom-smtp.service */ "./src/app/custom-smtp/custom-smtp.service.ts");
const uuid_validation_pipe_1 = __webpack_require__(/*! ../shared/pipes/uuid-validation.pipe */ "./src/app/shared/pipes/uuid-validation.pipe.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/custom-smtp/commands/index.ts");
let CustomSmtpController = class CustomSmtpController extends core_1.CrudController {
    constructor(customSmtpService, commandBus) {
        super(customSmtpService);
        this.customSmtpService = customSmtpService;
        this.commandBus = commandBus;
    }
    async tenantSmtpSetting(query) {
        return this.customSmtpService.getSmtpSetting(query);
    }
    async createSmtpSetting(entity) {
        return this.commandBus.execute(new commands_1.CustomSmtpCreateCommand(entity));
    }
    async updateSmtpSetting(id, entity) {
        return this.commandBus.execute(new commands_1.CustomSmtpUpdateCommand(Object.assign({ id }, entity)));
    }
    async validateSmtpSetting(entity) {
        return await this.customSmtpService.verifyTransporter(entity);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find smtp setting for tenant.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found tenant setting',
        type: custom_smtp_entity_1.CustomSmtp
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.ICustomSmtpFindInput !== "undefined" && models_1.ICustomSmtpFindInput) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], CustomSmtpController.prototype, "tenantSmtpSetting", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.ICustomSmtpCreateInput !== "undefined" && models_1.ICustomSmtpCreateInput) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], CustomSmtpController.prototype, "createSmtpSetting", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id', uuid_validation_pipe_1.UUIDValidationPipe)),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_e = typeof models_1.ICustomSmtpUpdateInput !== "undefined" && models_1.ICustomSmtpUpdateInput) === "function" ? _e : Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], CustomSmtpController.prototype, "updateSmtpSetting", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Validate new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Post('validate'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_g = typeof models_1.ICustomSmtpCreateInput !== "undefined" && models_1.ICustomSmtpCreateInput) === "function" ? _g : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomSmtpController.prototype, "validateSmtpSetting", null);
CustomSmtpController = tslib_1.__decorate([
    swagger_1.ApiTags('CustomSmtp'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_h = typeof custom_smtp_service_1.CustomSmtpService !== "undefined" && custom_smtp_service_1.CustomSmtpService) === "function" ? _h : Object, typeof (_j = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _j : Object])
], CustomSmtpController);
exports.CustomSmtpController = CustomSmtpController;


/***/ }),

/***/ "./src/app/custom-smtp/custom-smtp.entity.ts":
/*!***************************************************!*\
  !*** ./src/app/custom-smtp/custom-smtp.entity.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomSmtp = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let CustomSmtp = class CustomSmtp extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], CustomSmtp.prototype, "host", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], CustomSmtp.prototype, "port", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Boolean)
], CustomSmtp.prototype, "secure", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], CustomSmtp.prototype, "username", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], CustomSmtp.prototype, "password", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean, default: false }),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], CustomSmtp.prototype, "isValidate", void 0);
CustomSmtp = tslib_1.__decorate([
    typeorm_1.Entity('custom_smtp')
], CustomSmtp);
exports.CustomSmtp = CustomSmtp;


/***/ }),

/***/ "./src/app/custom-smtp/custom-smtp.module.ts":
/*!***************************************************!*\
  !*** ./src/app/custom-smtp/custom-smtp.module.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomSmtpModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const custom_smtp_entity_1 = __webpack_require__(/*! ./custom-smtp.entity */ "./src/app/custom-smtp/custom-smtp.entity.ts");
const custom_smtp_controller_1 = __webpack_require__(/*! ./custom-smtp.controller */ "./src/app/custom-smtp/custom-smtp.controller.ts");
const custom_smtp_service_1 = __webpack_require__(/*! ./custom-smtp.service */ "./src/app/custom-smtp/custom-smtp.service.ts");
const auth_module_1 = __webpack_require__(/*! ../auth/auth.module */ "./src/app/auth/auth.module.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/custom-smtp/commands/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const email_module_1 = __webpack_require__(/*! ../email/email.module */ "./src/app/email/email.module.ts");
const email_service_1 = __webpack_require__(/*! ../email/email.service */ "./src/app/email/email.service.ts");
let CustomSmtpModule = class CustomSmtpModule {
};
CustomSmtpModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([custom_smtp_entity_1.CustomSmtp]),
            auth_module_1.AuthModule,
            tenant_module_1.TenantModule,
            cqrs_1.CqrsModule,
            email_module_1.EmailModule
        ],
        controllers: [custom_smtp_controller_1.CustomSmtpController],
        providers: [custom_smtp_service_1.CustomSmtpService, email_service_1.EmailService, ...commands_1.CommandHandlers]
    })
], CustomSmtpModule);
exports.CustomSmtpModule = CustomSmtpModule;


/***/ }),

/***/ "./src/app/custom-smtp/custom-smtp.service.ts":
/*!****************************************************!*\
  !*** ./src/app/custom-smtp/custom-smtp.service.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomSmtpService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const nodemailer = __webpack_require__(/*! nodemailer */ "nodemailer");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
const custom_smtp_entity_1 = __webpack_require__(/*! ./custom-smtp.entity */ "./src/app/custom-smtp/custom-smtp.entity.ts");
const email_service_1 = __webpack_require__(/*! ../email/email.service */ "./src/app/email/email.service.ts");
let CustomSmtpService = class CustomSmtpService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(customSmtpRepository, emailService) {
        super(customSmtpRepository);
        this.customSmtpRepository = customSmtpRepository;
        this.emailService = emailService;
    }
    async getSmtpSetting(query) {
        const { tenantId, organizationId } = query;
        const globalSmtp = this.emailService.createSMTPTransporter();
        try {
            if (!organizationId) {
                const organizationSmtp = await this.customSmtpRepository.findOne({
                    where: {
                        tenantId,
                        organizationId: typeorm_2.IsNull()
                    }
                });
                return organizationSmtp || globalSmtp;
            }
            const tenantSmtp = await this.customSmtpRepository.findOne({
                where: {
                    tenantId,
                    organizationId: organizationId
                }
            });
            return tenantSmtp || globalSmtp;
        }
        catch (_a) {
            return globalSmtp;
        }
    }
    async verifyTransporter(configuration) {
        return new Promise((resolve, reject) => {
            try {
                const transporter = nodemailer.createTransport({
                    host: configuration.host,
                    port: configuration.port || 587,
                    secure: configuration.secure || false,
                    auth: {
                        user: configuration.username,
                        pass: configuration.password
                    }
                });
                transporter.verify(function (error, success) {
                    if (error) {
                        console.log(error);
                        reject(false);
                    }
                    else {
                        console.log('Server is ready to take our messages');
                        resolve(true);
                    }
                });
            }
            catch (error) {
                reject(false);
            }
        });
    }
};
CustomSmtpService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(custom_smtp_entity_1.CustomSmtp)),
    tslib_1.__param(1, common_1.Inject(common_1.forwardRef(() => email_service_1.EmailService))),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof email_service_1.EmailService !== "undefined" && email_service_1.EmailService) === "function" ? _b : Object])
], CustomSmtpService);
exports.CustomSmtpService = CustomSmtpService;


/***/ }),

/***/ "./src/app/deal/deal.controller.ts":
/*!*****************************************!*\
  !*** ./src/app/deal/deal.controller.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DealController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const crud_1 = __webpack_require__(/*! ../core/crud */ "./src/app/core/crud/index.ts");
const deal_service_1 = __webpack_require__(/*! ./deal.service */ "./src/app/deal/deal.service.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const parse_json_pipe_1 = __webpack_require__(/*! ../shared/pipes/parse-json.pipe */ "./src/app/shared/pipes/parse-json.pipe.ts");
let DealController = class DealController extends crud_1.CrudController {
    constructor(dealService) {
        super(dealService);
        this.dealService = dealService;
    }
    async findAll(data) {
        const { relations = [], findInput: where = null } = data;
        return this.dealService.findAll({
            relations,
            where
        });
    }
    async getOne(id, data) {
        const { relations = [], findInput: where = null } = data;
        return await this.dealService.findOne(id, {
            relations,
            where
        });
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all deals' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found records'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], DealController.prototype, "findAll", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find one deal' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found record'
    }),
    common_1.Get(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], DealController.prototype, "getOne", null);
DealController = tslib_1.__decorate([
    swagger_1.ApiTags('Deal'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof deal_service_1.DealService !== "undefined" && deal_service_1.DealService) === "function" ? _c : Object])
], DealController);
exports.DealController = DealController;


/***/ }),

/***/ "./src/app/deal/deal.entity.ts":
/*!*************************************!*\
  !*** ./src/app/deal/deal.entity.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Deal = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const pipeline_stage_entity_1 = __webpack_require__(/*! ../pipeline-stage/pipeline-stage.entity */ "./src/app/pipeline-stage/pipeline-stage.entity.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let Deal = class Deal extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsNotEmpty(),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Deal.prototype, "createdByUserId", void 0);
tslib_1.__decorate([
    typeorm_1.JoinColumn({ name: 'createdByUserId' }),
    typeorm_1.ManyToOne(() => user_entity_1.User),
    swagger_1.ApiProperty({ type: user_entity_1.User }),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IUser !== "undefined" && models_1.IUser) === "function" ? _a : Object)
], Deal.prototype, "createdBy", void 0);
tslib_1.__decorate([
    typeorm_1.RelationId(({ stage }) => stage),
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsNotEmpty(),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Deal.prototype, "stageId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => pipeline_stage_entity_1.PipelineStage, { onDelete: 'CASCADE' }),
    swagger_1.ApiProperty({ type: pipeline_stage_entity_1.PipelineStage }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof models_1.IPipelineStage !== "undefined" && models_1.IPipelineStage) === "function" ? _b : Object)
], Deal.prototype, "stage", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsOptional(),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Deal.prototype, "clientId", void 0);
tslib_1.__decorate([
    typeorm_1.OneToOne(() => organization_contact_entity_1.OrganizationContact, { onDelete: 'CASCADE' }),
    swagger_1.ApiProperty({ type: organization_contact_entity_1.OrganizationContact }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_c = typeof models_1.IOrganizationContact !== "undefined" && models_1.IOrganizationContact) === "function" ? _c : Object)
], Deal.prototype, "client", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsNotEmpty(),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Deal.prototype, "title", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsOptional(),
    class_validator_1.IsInt(),
    class_validator_1.Min(0),
    class_validator_1.Max(5),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], Deal.prototype, "probability", void 0);
Deal = tslib_1.__decorate([
    typeorm_1.Entity('deal')
], Deal);
exports.Deal = Deal;


/***/ }),

/***/ "./src/app/deal/deal.module.ts":
/*!*************************************!*\
  !*** ./src/app/deal/deal.module.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DealModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const deal_entity_1 = __webpack_require__(/*! ./deal.entity */ "./src/app/deal/deal.entity.ts");
const pipeline_stage_module_1 = __webpack_require__(/*! ../pipeline-stage/pipeline-stage.module */ "./src/app/pipeline-stage/pipeline-stage.module.ts");
const auth_module_1 = __webpack_require__(/*! ../auth/auth.module */ "./src/app/auth/auth.module.ts");
const deal_controller_1 = __webpack_require__(/*! ./deal.controller */ "./src/app/deal/deal.controller.ts");
const deal_service_1 = __webpack_require__(/*! ./deal.service */ "./src/app/deal/deal.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let DealModule = class DealModule {
};
DealModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([deal_entity_1.Deal]),
            pipeline_stage_module_1.StageModule,
            auth_module_1.AuthModule,
            tenant_module_1.TenantModule
        ],
        controllers: [deal_controller_1.DealController],
        providers: [deal_service_1.DealService],
        exports: [deal_service_1.DealService]
    })
], DealModule);
exports.DealModule = DealModule;


/***/ }),

/***/ "./src/app/deal/deal.seed.ts":
/*!***********************************!*\
  !*** ./src/app/deal/deal.seed.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomDeal = void 0;
const deal_entity_1 = __webpack_require__(/*! ./deal.entity */ "./src/app/deal/deal.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const pipeline_entity_1 = __webpack_require__(/*! ../pipeline/pipeline.entity */ "./src/app/pipeline/pipeline.entity.ts");
const pipeline_stage_entity_1 = __webpack_require__(/*! ../pipeline-stage/pipeline-stage.entity */ "./src/app/pipeline-stage/pipeline-stage.entity.ts");
exports.createRandomDeal = async (connection, tenants, tenantEmployeeMap, tenantOrganizationsMap) => {
    if (!tenantEmployeeMap) {
        console.warn('Warning: tenantEmployeeMap not found, deal  will not be created');
        return;
    }
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, deal  will not be created');
        return;
    }
    const deals = [];
    for (const tenant of tenants) {
        const tenantEmployees = tenantEmployeeMap.get(tenant);
        const tenantOrgs = tenantOrganizationsMap.get(tenant);
        for (const tenantEmployee of tenantEmployees) {
            for (const tenantOrg of tenantOrgs) {
                const pipelines = await connection.manager.find(pipeline_entity_1.Pipeline, {
                    where: [{ organization: tenantOrg }]
                });
                for (const pipeline of pipelines) {
                    const pipelineStages = await connection.manager.find(pipeline_stage_entity_1.PipelineStage, {
                        where: [{ pipeline: pipeline }]
                    });
                    for (const pipelineStage of pipelineStages) {
                        const deal = new deal_entity_1.Deal();
                        deal.createdBy = tenantEmployee.user;
                        deal.stage = pipelineStage;
                        deal.title = faker.name.jobTitle();
                        deal.createdByUserId = tenantEmployee.user.id;
                        deal.stageId = pipelineStage.id;
                        deal.organization = tenantOrg;
                        deal.probability = faker.random.number(5);
                        deal.tenant = tenant;
                        deals.push(deal);
                    }
                }
            }
        }
    }
    await connection.manager.save(deals);
};


/***/ }),

/***/ "./src/app/deal/deal.service.ts":
/*!**************************************!*\
  !*** ./src/app/deal/deal.service.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DealService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! @angular/core */ "@angular/core");
const crud_1 = __webpack_require__(/*! ../core/crud */ "./src/app/core/crud/index.ts");
const deal_entity_1 = __webpack_require__(/*! ./deal.entity */ "./src/app/deal/deal.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
let DealService = class DealService extends crud_1.TenantAwareCrudService {
    constructor(dealRepository) {
        super(dealRepository);
    }
};
DealService = tslib_1.__decorate([
    core_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(deal_entity_1.Deal)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], DealService);
exports.DealService = DealService;


/***/ }),

/***/ "./src/app/email-template/commands/email-template.save.command.ts":
/*!************************************************************************!*\
  !*** ./src/app/email-template/commands/email-template.save.command.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailTemplateSaveCommand = void 0;
class EmailTemplateSaveCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.EmailTemplateSaveCommand = EmailTemplateSaveCommand;
EmailTemplateSaveCommand.type = '[EmailTemplate] Save';


/***/ }),

/***/ "./src/app/email-template/commands/handlers/email-template.save.handler.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/email-template/commands/handlers/email-template.save.handler.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailTemplateSaveHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const email_template_save_command_1 = __webpack_require__(/*! ../email-template.save.command */ "./src/app/email-template/commands/email-template.save.command.ts");
const email_template_service_1 = __webpack_require__(/*! ../../email-template.service */ "./src/app/email-template/email-template.service.ts");
const email_template_entity_1 = __webpack_require__(/*! ../../email-template.entity */ "./src/app/email-template/email-template.entity.ts");
const mjml2html = __webpack_require__(/*! mjml */ "mjml");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
let EmailTemplateSaveHandler = class EmailTemplateSaveHandler {
    constructor(emailTemplateService) {
        this.emailTemplateService = emailTemplateService;
    }
    async execute(command) {
        const { input: { languageCode, name, organizationId, tenantId, mjml, subject } } = command;
        try {
            await this._saveTemplate(languageCode, name, organizationId, tenantId, mjml, 'html');
        }
        catch (error) {
            throw new common_1.BadRequestException('Invalid html template');
        }
        return this._saveTemplate(languageCode, name, organizationId, tenantId, subject, 'subject');
    }
    async _saveTemplate(languageCode, name, organizationId, tenantId, content, type) {
        const { success: found, record } = await this.emailTemplateService.findOneOrFail({
            languageCode,
            name: `${name}/${type}`,
            organizationId,
            tenantId
        });
        let entity;
        if (found) {
            switch (type) {
                case 'subject':
                    entity = Object.assign(Object.assign({}, record), { hbs: content });
                    break;
                case 'html':
                    entity = Object.assign(Object.assign({}, record), { mjml: content, hbs: mjml2html(content).html });
                    break;
            }
            await this.emailTemplateService.update(record.id, entity);
        }
        else {
            entity = new email_template_entity_1.EmailTemplate();
            entity.organizationId = organizationId;
            entity.tenantId = tenantId;
            entity.languageCode = languageCode;
            entity.name = `${name}/${type}`;
            switch (type) {
                case 'subject':
                    entity.hbs = content;
                    break;
                case 'html':
                    entity.mjml = content;
                    entity.hbs = mjml2html(content).html;
                    break;
            }
            await this.emailTemplateService.create(entity);
        }
        return entity;
    }
};
EmailTemplateSaveHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(email_template_save_command_1.EmailTemplateSaveCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof email_template_service_1.EmailTemplateService !== "undefined" && email_template_service_1.EmailTemplateService) === "function" ? _a : Object])
], EmailTemplateSaveHandler);
exports.EmailTemplateSaveHandler = EmailTemplateSaveHandler;


/***/ }),

/***/ "./src/app/email-template/commands/handlers/index.ts":
/*!***********************************************************!*\
  !*** ./src/app/email-template/commands/handlers/index.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const email_template_save_handler_1 = __webpack_require__(/*! ./email-template.save.handler */ "./src/app/email-template/commands/handlers/email-template.save.handler.ts");
exports.CommandHandlers = [email_template_save_handler_1.EmailTemplateSaveHandler];


/***/ }),

/***/ "./src/app/email-template/commands/index.ts":
/*!**************************************************!*\
  !*** ./src/app/email-template/commands/index.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailTemplateSaveCommand = void 0;
var email_template_save_command_1 = __webpack_require__(/*! ./email-template.save.command */ "./src/app/email-template/commands/email-template.save.command.ts");
Object.defineProperty(exports, "EmailTemplateSaveCommand", { enumerable: true, get: function () { return email_template_save_command_1.EmailTemplateSaveCommand; } });


/***/ }),

/***/ "./src/app/email-template/email-template.controller.ts":
/*!*************************************************************!*\
  !*** ./src/app/email-template/email-template.controller.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailTemplateController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const email_template_entity_1 = __webpack_require__(/*! ./email-template.entity */ "./src/app/email-template/email-template.entity.ts");
const email_template_service_1 = __webpack_require__(/*! ./email-template.service */ "./src/app/email-template/email-template.service.ts");
const queries_1 = __webpack_require__(/*! ./queries */ "./src/app/email-template/queries/index.ts");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/email-template/commands/index.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let EmailTemplateController = class EmailTemplateController extends crud_controller_1.CrudController {
    constructor(emailTemplateService, queryBus, commandBus) {
        super(emailTemplateService);
        this.emailTemplateService = emailTemplateService;
        this.queryBus = queryBus;
        this.commandBus = commandBus;
    }
    async findEmailTemplate(data) {
        const { findInput } = JSON.parse(data);
        return this.queryBus.execute(new queries_1.FindEmailTemplateQuery(findInput));
    }
    async generateEmailPreview(data) {
        return this.queryBus.execute(new queries_1.EmailTemplateGeneratePreviewQuery(data));
    }
    async saveEmailTemplate(data) {
        return this.commandBus.execute(new commands_1.EmailTemplateSaveCommand(data));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find email template by name and language code for organization'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found email template',
        type: email_template_entity_1.EmailTemplate
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('findTemplate'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], EmailTemplateController.prototype, "findEmailTemplate", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Converts mjml or handlebar text to html for email preview'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'text converted to html',
        type: email_template_entity_1.EmailTemplate
    }),
    common_1.Post('emailPreview'),
    tslib_1.__param(0, common_1.Body('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], EmailTemplateController.prototype, "generateEmailPreview", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Convert mjml or handlebar text to html'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'mjml or handlebar text converted to html',
        type: email_template_entity_1.EmailTemplate
    }),
    common_1.Post('saveTemplate'),
    tslib_1.__param(0, common_1.Body('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.IEmailTemplateSaveInput !== "undefined" && models_1.IEmailTemplateSaveInput) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], EmailTemplateController.prototype, "saveEmailTemplate", null);
EmailTemplateController = tslib_1.__decorate([
    swagger_1.ApiTags('EmailTemplate'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof email_template_service_1.EmailTemplateService !== "undefined" && email_template_service_1.EmailTemplateService) === "function" ? _e : Object, typeof (_f = typeof cqrs_1.QueryBus !== "undefined" && cqrs_1.QueryBus) === "function" ? _f : Object, typeof (_g = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _g : Object])
], EmailTemplateController);
exports.EmailTemplateController = EmailTemplateController;


/***/ }),

/***/ "./src/app/email-template/email-template.entity.ts":
/*!*********************************************************!*\
  !*** ./src/app/email-template/email-template.entity.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailTemplate = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let EmailTemplate = class EmailTemplate extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EmailTemplate.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EmailTemplate.prototype, "languageCode", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", String)
], EmailTemplate.prototype, "mjml", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EmailTemplate.prototype, "hbs", void 0);
EmailTemplate = tslib_1.__decorate([
    typeorm_1.Entity('email_template')
], EmailTemplate);
exports.EmailTemplate = EmailTemplate;


/***/ }),

/***/ "./src/app/email-template/email-template.module.ts":
/*!*********************************************************!*\
  !*** ./src/app/email-template/email-template.module.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailTemplateModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const email_template_entity_1 = __webpack_require__(/*! ./email-template.entity */ "./src/app/email-template/email-template.entity.ts");
const email_template_service_1 = __webpack_require__(/*! ./email-template.service */ "./src/app/email-template/email-template.service.ts");
const email_template_controller_1 = __webpack_require__(/*! ./email-template.controller */ "./src/app/email-template/email-template.controller.ts");
const handlers_1 = __webpack_require__(/*! ./queries/handlers */ "./src/app/email-template/queries/handlers/index.ts");
const handlers_2 = __webpack_require__(/*! ./commands/handlers */ "./src/app/email-template/commands/handlers/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let EmailTemplateModule = class EmailTemplateModule {
};
EmailTemplateModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            common_1.forwardRef(() => typeorm_1.TypeOrmModule.forFeature([email_template_entity_1.EmailTemplate])),
            cqrs_1.CqrsModule,
            common_1.forwardRef(() => tenant_module_1.TenantModule)
        ],
        controllers: [email_template_controller_1.EmailTemplateController],
        providers: [email_template_service_1.EmailTemplateService, ...handlers_1.QueryHandlers, ...handlers_2.CommandHandlers],
        exports: [typeorm_1.TypeOrmModule, email_template_service_1.EmailTemplateService]
    })
], EmailTemplateModule);
exports.EmailTemplateModule = EmailTemplateModule;


/***/ }),

/***/ "./src/app/email-template/email-template.seed.ts":
/*!*******************************************************!*\
  !*** ./src/app/email-template/email-template.seed.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultEmailTemplates = void 0;
const fs = __webpack_require__(/*! fs */ "fs");
const email_template_entity_1 = __webpack_require__(/*! ./email-template.entity */ "./src/app/email-template/email-template.entity.ts");
const mjml2html = __webpack_require__(/*! mjml */ "mjml");
const path = __webpack_require__(/*! path */ "path");
exports.createDefaultEmailTemplates = async (connection) => {
    try {
        const templatePath = [
            'apps',
            'api',
            'src',
            'app',
            'core',
            'seeds',
            'data',
            'default-email-templates'
        ];
        const files = [];
        let FOLDER_PATH = path.resolve('.', ...templatePath);
        FOLDER_PATH = fs.existsSync(FOLDER_PATH)
            ? FOLDER_PATH
            : path.resolve('.', ...templatePath.slice(2));
        findInDir(FOLDER_PATH, files);
        console.log(files);
        await fileToTemplate(connection, files);
    }
    catch (error) {
        console.error(error);
    }
};
function findInDir(dir, fileList = []) {
    const files = fs.readdirSync(dir);
    files.forEach((file) => {
        const filePath = path.join(dir, file);
        const fileStat = fs.lstatSync(filePath);
        if (fileStat.isDirectory()) {
            findInDir(filePath, fileList);
        }
        else {
            fileList.push(filePath);
        }
    });
}
const fileToTemplate = async (connection, files) => {
    for (const file of files) {
        const template = await pathToEmailTemplate(file);
        if (template && template.hbs) {
            await insertTemplate(connection, template);
        }
    }
};
const insertTemplate = async (connection, emailTemplate) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(email_template_entity_1.EmailTemplate)
        .values(emailTemplate)
        .execute();
};
const pathToEmailTemplate = async (fullPath) => {
    try {
        const template = new email_template_entity_1.EmailTemplate();
        const templatePath = fullPath.replace(/\\/g, '/').split('/');
        const fileName = templatePath[templatePath.length - 1].split('.', 2);
        const fileExtension = fileName[1];
        const fileNameWithoutExtension = fileName[0];
        template.languageCode = templatePath[templatePath.length - 2];
        template.name = `${templatePath[templatePath.length - 3]}/${fileNameWithoutExtension}`;
        const fileContent = fs.readFileSync(fullPath, 'utf8');
        switch (fileExtension) {
            case 'mjml':
                template.mjml = fileContent;
                template.hbs = mjml2html(fileContent).html;
                break;
            case 'hbs':
                template.hbs = fileContent;
                break;
            default:
                console.log(`Warning: ${path} Will be ignored. Only .hbs and .mjml files are supported!`);
                break;
        }
        if (!template.hbs) {
            return;
        }
        return template;
    }
    catch (error) {
        console.log('Something went wrong', path, error);
        return;
    }
};


/***/ }),

/***/ "./src/app/email-template/email-template.service.ts":
/*!**********************************************************!*\
  !*** ./src/app/email-template/email-template.service.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailTemplateService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const email_template_entity_1 = __webpack_require__(/*! ./email-template.entity */ "./src/app/email-template/email-template.entity.ts");
let EmailTemplateService = class EmailTemplateService extends core_1.CrudService {
    constructor(emailRepository) {
        super(emailRepository);
        this.emailRepository = emailRepository;
    }
};
EmailTemplateService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(email_template_entity_1.EmailTemplate)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], EmailTemplateService);
exports.EmailTemplateService = EmailTemplateService;


/***/ }),

/***/ "./src/app/email-template/index.ts":
/*!*****************************************!*\
  !*** ./src/app/email-template/index.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailTemplateService = exports.EmailTemplateModule = exports.EmailTemplate = void 0;
var email_template_entity_1 = __webpack_require__(/*! ./email-template.entity */ "./src/app/email-template/email-template.entity.ts");
Object.defineProperty(exports, "EmailTemplate", { enumerable: true, get: function () { return email_template_entity_1.EmailTemplate; } });
var email_template_module_1 = __webpack_require__(/*! ./email-template.module */ "./src/app/email-template/email-template.module.ts");
Object.defineProperty(exports, "EmailTemplateModule", { enumerable: true, get: function () { return email_template_module_1.EmailTemplateModule; } });
var email_template_service_1 = __webpack_require__(/*! ./email-template.service */ "./src/app/email-template/email-template.service.ts");
Object.defineProperty(exports, "EmailTemplateService", { enumerable: true, get: function () { return email_template_service_1.EmailTemplateService; } });


/***/ }),

/***/ "./src/app/email-template/queries/email-template.find.query.ts":
/*!*********************************************************************!*\
  !*** ./src/app/email-template/queries/email-template.find.query.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.FindEmailTemplateQuery = void 0;
class FindEmailTemplateQuery {
    constructor(input) {
        this.input = input;
    }
}
exports.FindEmailTemplateQuery = FindEmailTemplateQuery;
FindEmailTemplateQuery.type = '[EmailTemplate] Find';


/***/ }),

/***/ "./src/app/email-template/queries/email-template.generate-preview.query.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/email-template/queries/email-template.generate-preview.query.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailTemplateGeneratePreviewQuery = void 0;
class EmailTemplateGeneratePreviewQuery {
    constructor(input) {
        this.input = input;
    }
}
exports.EmailTemplateGeneratePreviewQuery = EmailTemplateGeneratePreviewQuery;
EmailTemplateGeneratePreviewQuery.type = '[EmailTemplate] GeneratePreview';


/***/ }),

/***/ "./src/app/email-template/queries/handlers/email-template.find.handler.ts":
/*!********************************************************************************!*\
  !*** ./src/app/email-template/queries/handlers/email-template.find.handler.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FindEmailTemplateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const email_template_service_1 = __webpack_require__(/*! ../../email-template.service */ "./src/app/email-template/email-template.service.ts");
const email_template_find_query_1 = __webpack_require__(/*! ../email-template.find.query */ "./src/app/email-template/queries/email-template.find.query.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
let FindEmailTemplateHandler = class FindEmailTemplateHandler {
    constructor(emailTemplateService) {
        this.emailTemplateService = emailTemplateService;
    }
    async execute(command) {
        const { input: { languageCode, name, organizationId, tenantId } } = command;
        const emailTemplate = {
            subject: '',
            template: ''
        };
        [emailTemplate.subject, emailTemplate.template] = await Promise.all([
            this._fetchTemplate(languageCode, name, organizationId, tenantId, 'subject'),
            this._fetchTemplate(languageCode, name, organizationId, tenantId, 'html')
        ]);
        return emailTemplate;
    }
    async _fetchTemplate(languageCode, name, organizationId, tenantId, type) {
        let subject = '';
        let template = '';
        try {
            const { hbs, mjml } = await this.emailTemplateService.findOne({
                languageCode,
                name: `${name}/${type}`,
                organizationId,
                tenantId
            });
            subject = hbs;
            template = mjml;
        }
        catch (error) {
            const { hbs, mjml } = await this.emailTemplateService.findOne({
                languageCode,
                name: `${name}/${type}`,
                organizationId: typeorm_1.IsNull(),
                tenantId: typeorm_1.IsNull()
            });
            subject = hbs;
            template = mjml;
        }
        switch (type) {
            case 'subject':
                return subject;
            case 'html':
                return template;
        }
    }
};
FindEmailTemplateHandler = tslib_1.__decorate([
    cqrs_1.QueryHandler(email_template_find_query_1.FindEmailTemplateQuery),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof email_template_service_1.EmailTemplateService !== "undefined" && email_template_service_1.EmailTemplateService) === "function" ? _a : Object])
], FindEmailTemplateHandler);
exports.FindEmailTemplateHandler = FindEmailTemplateHandler;


/***/ }),

/***/ "./src/app/email-template/queries/handlers/email-template.generate-preview.handler.ts":
/*!********************************************************************************************!*\
  !*** ./src/app/email-template/queries/handlers/email-template.generate-preview.handler.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailTemplateGeneratePreviewHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const Handlebars = __webpack_require__(/*! handlebars */ "handlebars");
const mjml2html = __webpack_require__(/*! mjml */ "mjml");
const email_template_service_1 = __webpack_require__(/*! ../../email-template.service */ "./src/app/email-template/email-template.service.ts");
const email_template_generate_preview_query_1 = __webpack_require__(/*! ../email-template.generate-preview.query */ "./src/app/email-template/queries/email-template.generate-preview.query.ts");
const moment_extend_1 = __webpack_require__(/*! ../../../core/moment-extend */ "./src/app/core/moment-extend.ts");
let EmailTemplateGeneratePreviewHandler = class EmailTemplateGeneratePreviewHandler {
    constructor(emailTemplateService) {
        this.emailTemplateService = emailTemplateService;
    }
    async execute(command) {
        const { input } = command;
        let textToHtml = input;
        try {
            const mjmlTohtml = mjml2html(input);
            textToHtml = mjmlTohtml.errors.length ? input : mjmlTohtml.html;
        }
        catch (error) {
        }
        const handlebarsTemplate = Handlebars.compile(textToHtml);
        const html = handlebarsTemplate({
            organizationName: 'Organization',
            email: 'user@domain.com',
            name: 'John Doe',
            role: 'USER_ROLE',
            host: 'Alish Meklyov',
            hostEmail: '(alish@ever.com)',
            agenda: 'This booking is for gauzy call',
            description: 'This is a test appointment booking',
            participantEmails: 'kdashora@gmail.com,testmail@hotmail.com',
            location: 'zoom.us',
            duration: 'Fri, Jul 24, 2020 6:00 AM - Fri, Jul 24, 2020 6:15 AM',
            candidateName: 'Alex',
            date: 'Thursday, August 27, 2020',
            interviewerName: 'John Doe',
            total_hours: '16',
            average_activates: '25',
            log_type: 'tracked',
            projects: ['Gauzy Web Site', 'Gauzy Platform(open-source)'],
            project: 'Gauzy Web Site',
            timesheet_action: 'APPROVE/REJECT',
            equipment_status: 'APPROVE/REJECT',
            reason: 'reason for this',
            equipment_name: 'Fiat Freemont',
            equipment_type: 'Car',
            equipment_serial_number: 'CB0950AT',
            manufactured_year: '2015',
            initial_cost: '40000',
            currency: 'BGN',
            max_share_period: '5',
            autoApproveShare: false,
            time_off_policy_requires_approval: 'APPROVE/REJECT',
            time_off_policy_paid_status: true,
            task_update_status: 'Update/Assign',
            task_update_title: 'Bug: Consistency in "Time Off" feature',
            task_update_description: '"Time off" should be called "Time Off" everywhere. \n' +
                'Fix "Request Days Off" and change it to just "Request". \n' +
                'Also, check all popups, etc. that it is called "Time Off" (not "Day off" or anything else) everywhere.\n' +
                '\n' +
                '![Artboard](https://user-images.githubusercontent.com/6750734/88939490-33939180-d2a4-11ea-8d13-3efed87a7846.png)\n',
            task_update_estimate: 'estimate',
            task_update_due_date: moment_extend_1.moment(new Date()).add(10, 'days').toDate(),
            task_status: 'In Progress',
            task_update_project: 'Gauzy Project',
            task_update_assign_by: 'Ruslan Konviser',
            task_update_url: 'https://github.com/ever-co/gauzy/issues/1688'
        });
        return { html };
    }
};
EmailTemplateGeneratePreviewHandler = tslib_1.__decorate([
    cqrs_1.QueryHandler(email_template_generate_preview_query_1.EmailTemplateGeneratePreviewQuery),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof email_template_service_1.EmailTemplateService !== "undefined" && email_template_service_1.EmailTemplateService) === "function" ? _a : Object])
], EmailTemplateGeneratePreviewHandler);
exports.EmailTemplateGeneratePreviewHandler = EmailTemplateGeneratePreviewHandler;


/***/ }),

/***/ "./src/app/email-template/queries/handlers/index.ts":
/*!**********************************************************!*\
  !*** ./src/app/email-template/queries/handlers/index.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryHandlers = void 0;
const email_template_find_handler_1 = __webpack_require__(/*! ./email-template.find.handler */ "./src/app/email-template/queries/handlers/email-template.find.handler.ts");
const email_template_generate_preview_handler_1 = __webpack_require__(/*! ./email-template.generate-preview.handler */ "./src/app/email-template/queries/handlers/email-template.generate-preview.handler.ts");
exports.QueryHandlers = [
    email_template_find_handler_1.FindEmailTemplateHandler,
    email_template_generate_preview_handler_1.EmailTemplateGeneratePreviewHandler
];


/***/ }),

/***/ "./src/app/email-template/queries/index.ts":
/*!*************************************************!*\
  !*** ./src/app/email-template/queries/index.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailTemplateGeneratePreviewQuery = exports.FindEmailTemplateQuery = void 0;
var email_template_find_query_1 = __webpack_require__(/*! ./email-template.find.query */ "./src/app/email-template/queries/email-template.find.query.ts");
Object.defineProperty(exports, "FindEmailTemplateQuery", { enumerable: true, get: function () { return email_template_find_query_1.FindEmailTemplateQuery; } });
var email_template_generate_preview_query_1 = __webpack_require__(/*! ./email-template.generate-preview.query */ "./src/app/email-template/queries/email-template.generate-preview.query.ts");
Object.defineProperty(exports, "EmailTemplateGeneratePreviewQuery", { enumerable: true, get: function () { return email_template_generate_preview_query_1.EmailTemplateGeneratePreviewQuery; } });


/***/ }),

/***/ "./src/app/email/email.controller.ts":
/*!*******************************************!*\
  !*** ./src/app/email/email.controller.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const email_entity_1 = __webpack_require__(/*! ./email.entity */ "./src/app/email/email.entity.ts");
const email_service_1 = __webpack_require__(/*! ./email.service */ "./src/app/email/email.service.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let EmailController = class EmailController extends crud_controller_1.CrudController {
    constructor(emailService) {
        super(emailService);
        this.emailService = emailService;
    }
    async findAllEmails(data) {
        const { relations, findInput, take } = data;
        const response = await this.emailService.findAll({
            where: findInput,
            relations,
            order: {
                createdAt: 'DESC'
            },
            take: take
        });
        response.items.forEach((email) => {
            const name = email.emailTemplate.name;
            email.emailTemplate.name = name.split('/')[0].split('-').join(' ');
        });
        return response;
    }
    async update(id, entity) {
        return this.emailService.update(id, entity);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all emails.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found emails',
        type: email_entity_1.Email
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'No records found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], EmailController.prototype, "findAllEmails", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')), tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_b = typeof email_entity_1.Email !== "undefined" && email_entity_1.Email) === "function" ? _b : Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], EmailController.prototype, "update", null);
EmailController = tslib_1.__decorate([
    swagger_1.ApiTags('Email'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof email_service_1.EmailService !== "undefined" && email_service_1.EmailService) === "function" ? _d : Object])
], EmailController);
exports.EmailController = EmailController;


/***/ }),

/***/ "./src/app/email/email.entity.ts":
/*!***************************************!*\
  !*** ./src/app/email/email.entity.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Email = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const email_template_entity_1 = __webpack_require__(/*! ../email-template/email-template.entity */ "./src/app/email-template/email-template.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let Email = class Email extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: email_template_entity_1.EmailTemplate }),
    typeorm_1.ManyToOne((type) => email_template_entity_1.EmailTemplate, {
        nullable: false,
        cascade: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IEmailTemplate !== "undefined" && models_1.IEmailTemplate) === "function" ? _a : Object)
], Email.prototype, "emailTemplate", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Email.prototype, "emailTemplateId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Email.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Email.prototype, "content", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Email.prototype, "email", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Email.prototype, "isArchived", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: user_entity_1.User }),
    typeorm_1.ManyToOne((type) => user_entity_1.User, {
        nullable: true,
        cascade: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof models_1.IUser !== "undefined" && models_1.IUser) === "function" ? _b : Object)
], Email.prototype, "user", void 0);
Email = tslib_1.__decorate([
    typeorm_1.Entity('email_sent')
], Email);
exports.Email = Email;


/***/ }),

/***/ "./src/app/email/email.module.ts":
/*!***************************************!*\
  !*** ./src/app/email/email.module.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const email_template_1 = __webpack_require__(/*! ../email-template */ "./src/app/email-template/index.ts");
const email_entity_1 = __webpack_require__(/*! ./email.entity */ "./src/app/email/email.entity.ts");
const email_service_1 = __webpack_require__(/*! ./email.service */ "./src/app/email/email.service.ts");
const email_controller_1 = __webpack_require__(/*! ./email.controller */ "./src/app/email/email.controller.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let EmailModule = class EmailModule {
};
EmailModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            common_1.forwardRef(() => typeorm_1.TypeOrmModule.forFeature([email_entity_1.Email, email_template_1.EmailTemplate, organization_entity_1.Organization])),
            common_1.forwardRef(() => tenant_module_1.TenantModule)
        ],
        controllers: [email_controller_1.EmailController],
        providers: [email_service_1.EmailService],
        exports: [typeorm_1.TypeOrmModule]
    })
], EmailModule);
exports.EmailModule = EmailModule;


/***/ }),

/***/ "./src/app/email/email.seed.ts":
/*!*************************************!*\
  !*** ./src/app/email/email.seed.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomEmailSent = exports.createDefaultEmailSent = void 0;
const email_entity_1 = __webpack_require__(/*! ./email.entity */ "./src/app/email/email.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const email_template_entity_1 = __webpack_require__(/*! ../email-template/email-template.entity */ "./src/app/email-template/email-template.entity.ts");
exports.createDefaultEmailSent = async (connection, tenant, organization, noOfEmailsPerOrganization) => {
    const emailTemplates = await connection.getRepository(email_template_entity_1.EmailTemplate).find();
    let sentEmails = [];
    sentEmails = await dataOperation(connection, sentEmails, noOfEmailsPerOrganization, organization, emailTemplates, tenant);
    return sentEmails;
};
exports.createRandomEmailSent = async (connection, tenants, tenantOrganizationsMap, noOfEmailsPerOrganization) => {
    const emailTemplates = await connection.getRepository(email_template_entity_1.EmailTemplate).find();
    let sentEmails = [];
    for (const tenant of tenants) {
        const orgs = tenantOrganizationsMap.get(tenant);
        for (const org of orgs) {
            sentEmails = await dataOperation(connection, sentEmails, noOfEmailsPerOrganization, org, emailTemplates, tenant);
        }
    }
    return sentEmails;
};
const dataOperation = async (connection, sentEmails, noOfEmailsPerOrganization, organization, emailTemplates, tenant) => {
    for (let i = 0; i < noOfEmailsPerOrganization; i++) {
        const sentEmail = new email_entity_1.Email();
        sentEmail.organizationId = organization.id;
        sentEmail.email = faker.internet.email();
        sentEmail.emailTemplate = faker.random.arrayElement(emailTemplates.filter((x) => !x.name.includes('subject')));
        sentEmail.name = sentEmail.emailTemplate.name.split('/')[0];
        sentEmail.content = sentEmail.emailTemplate.hbs;
        sentEmail.tenant = tenant;
        sentEmails.push(sentEmail);
    }
    await connection.manager.save(sentEmails);
    return sentEmails;
};


/***/ }),

/***/ "./src/app/email/email.service.ts":
/*!****************************************!*\
  !*** ./src/app/email/email.service.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const Email = __webpack_require__(/*! email-templates */ "email-templates");
const Handlebars = __webpack_require__(/*! handlebars */ "handlebars");
const nodemailer = __webpack_require__(/*! nodemailer */ "nodemailer");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const email_template_entity_1 = __webpack_require__(/*! ../email-template/email-template.entity */ "./src/app/email-template/email-template.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const email_entity_1 = __webpack_require__(/*! ./email.entity */ "./src/app/email/email.entity.ts");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const environment_2 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
let EmailService = class EmailService extends core_1.CrudService {
    constructor(emailRepository, emailTemplateRepository, organizationRepository) {
        super(emailRepository);
        this.emailRepository = emailRepository;
        this.emailTemplateRepository = emailTemplateRepository;
        this.organizationRepository = organizationRepository;
        this.email = new Email({
            message: {
                from: environment_2.environment.smtpConfig.from || 'Gauzy@Ever.co'
            },
            send: true,
            transport: this.createSMTPTransporter(),
            i18n: {},
            views: {
                options: {
                    extension: 'hbs'
                }
            },
            preview: {
                open: {
                    app: 'firefox',
                    wait: false
                }
            },
            render: (view, locals) => {
                return new Promise(async (resolve, reject) => {
                    view = view.replace('\\', '/');
                    let emailTemplate;
                    const customEmailTemplate = await this.emailTemplateRepository.find({
                        name: view,
                        languageCode: locals.locale || 'en',
                        organizationId: locals.organizationId,
                        tenantId: locals.tenantId
                    });
                    emailTemplate = customEmailTemplate;
                    if (!customEmailTemplate || customEmailTemplate.length < 1) {
                        const defaultEmailTemplate = await this.emailTemplateRepository.find({
                            name: view,
                            languageCode: locals.locale || 'en',
                            organizationId: typeorm_2.IsNull(),
                            tenantId: typeorm_2.IsNull()
                        });
                        emailTemplate = defaultEmailTemplate;
                    }
                    if (!emailTemplate || emailTemplate.length < 1) {
                        return resolve('');
                    }
                    const template = Handlebars.compile(emailTemplate[0].hbs);
                    const html = template(locals);
                    return resolve(html);
                });
            }
        });
    }
    emailInvoice(languageCode, email, base64, invoiceNumber, invoiceId, isEstimate, token, originUrl, tenantId, organizationId) {
        this.email
            .send({
            template: isEstimate ? 'email-estimate' : 'email-invoice',
            message: {
                to: `${email}`,
                attachments: [
                    {
                        filename: `${isEstimate ? 'Estimate' : 'Invoice'}-${invoiceNumber}.pdf`,
                        content: base64,
                        encoding: 'base64'
                    }
                ]
            },
            locals: {
                tenantId,
                organizationId,
                locale: languageCode,
                host: originUrl || environment_1.environment.host,
                acceptUrl: originUrl +
                    `#/auth/estimate/?token=${token}&id=${invoiceId}&action=accept&email=${email}`,
                rejectUrl: originUrl +
                    `#/auth/estimate/?token=${token}&id=${invoiceId}&action=reject&email=${email}`
            }
        })
            .then((res) => {
            this.createEmailRecord({
                templateName: isEstimate
                    ? 'email-estimate'
                    : 'email-invoice',
                email,
                languageCode,
                message: res.originalMessage
            });
        })
            .catch(console.error);
    }
    inviteOrganizationContact(organizationContact, inviterUser, organization, invite, languageCode, originUrl) {
        const sendOptions = {
            template: 'invite-organization-client',
            message: {
                to: `${organizationContact.primaryEmail}`
            },
            locals: {
                locale: languageCode,
                name: organizationContact.name,
                host: originUrl || environment_1.environment.host,
                id: organizationContact.id,
                inviterName: inviterUser
                    ? (inviterUser.firstName || '') +
                        (inviterUser.lastName || '')
                    : '',
                organizationName: organization.name,
                organizationId: organization.id,
                generatedUrl: originUrl +
                    `#/auth/accept-client-invite?email=${organizationContact.primaryEmail}&token=${invite.token}`
            }
        };
        this.email
            .send(sendOptions)
            .then((res) => {
            this.createEmailRecord({
                templateName: sendOptions.template,
                email: organizationContact.primaryEmail,
                languageCode,
                message: res.originalMessage,
                organization
            });
        })
            .catch(console.error);
    }
    inviteUser(inviteUserModel) {
        const { email, role, organization, registerUrl, originUrl, languageCode, invitedBy } = inviteUserModel;
        const sendOptions = {
            template: 'invite-user',
            message: {
                to: `${email}`
            },
            locals: {
                locale: languageCode,
                role: role,
                organizationName: organization.name,
                organizationId: organization.id,
                generatedUrl: registerUrl,
                host: originUrl || environment_1.environment.host
            }
        };
        this.email
            .send(sendOptions)
            .then((res) => {
            this.createEmailRecord({
                templateName: sendOptions.template,
                email,
                languageCode,
                message: res.originalMessage,
                organization,
                user: invitedBy
            });
        })
            .catch(console.error);
    }
    inviteEmployee(inviteEmployeeModel) {
        const { email, registerUrl, projects, organization, originUrl, languageCode, invitedBy } = inviteEmployeeModel;
        const sendOptions = {
            template: 'invite-employee',
            message: {
                to: `${email}`
            },
            locals: {
                locale: languageCode,
                role: projects,
                organizationName: organization.name,
                organizationId: organization.id,
                generatedUrl: registerUrl,
                host: originUrl || environment_1.environment.host
            }
        };
        this.email
            .send(sendOptions)
            .then((res) => {
            this.createEmailRecord({
                templateName: sendOptions.template,
                email,
                languageCode,
                message: res.originalMessage,
                organization,
                user: invitedBy
            });
        })
            .catch(console.error);
    }
    async welcomeUser(user, languageCode, organizationId, originUrl) {
        const sendOptions = {
            template: 'welcome-user',
            message: {
                to: `${user.email}`
            },
            locals: {
                locale: languageCode,
                email: user.email,
                host: originUrl || environment_1.environment.host,
                organizationId: organizationId ? organizationId : typeorm_2.IsNull()
            }
        };
        let organization;
        if (organizationId) {
            organization = await this.organizationRepository.findOne(organizationId);
        }
        this.email
            .send(sendOptions)
            .then((res) => {
            this.createEmailRecord({
                templateName: sendOptions.template,
                email: user.email,
                languageCode,
                message: res.originalMessage,
                organization
            });
        })
            .catch(console.error);
    }
    async requestPassword(user, url, languageCode, organizationId, originUrl) {
        const sendOptions = {
            template: 'password',
            message: {
                to: `${user.email}`,
                subject: 'Forgotten Password'
            },
            locals: {
                locale: languageCode,
                generatedUrl: url,
                host: originUrl || environment_1.environment.host,
                organizationId: organizationId
            }
        };
        const organization = await this.organizationRepository.findOne(organizationId);
        this.email
            .send(sendOptions)
            .then((res) => {
            this.createEmailRecord({
                templateName: sendOptions.template,
                email: user.email,
                languageCode,
                message: res.originalMessage,
                organization
            });
        })
            .catch(console.error);
    }
    async createEmailRecord(createEmailOptions) {
        const emailEntity = new email_entity_1.Email();
        const { templateName: template, email, languageCode, message, organization, user } = createEmailOptions;
        const emailTemplate = await this.emailTemplateRepository.findOne({
            name: template + '/html',
            languageCode
        });
        emailEntity.name = message.subject;
        emailEntity.email = email;
        emailEntity.content = message.html;
        emailEntity.emailTemplate = emailTemplate;
        if (organization) {
            emailEntity.organizationId = organization.id;
        }
        if (user) {
            emailEntity.user = user;
        }
        return this.emailRepository.save(emailEntity);
    }
    async sendAppointmentMail(email, languageCode, organizationId, originUrl) {
        const sendOptions = {
            template: 'email-appointment',
            message: {
                to: email
            },
            locals: {
                locale: languageCode,
                email: email,
                host: originUrl || environment_1.environment.host,
                organizationId: organizationId ? organizationId : typeorm_2.IsNull()
            }
        };
        let organization;
        if (organizationId) {
            organization = await this.organizationRepository.findOne(organizationId);
        }
        this.email
            .send(sendOptions)
            .then((res) => {
            this.createEmailRecord({
                templateName: sendOptions.template,
                email: email,
                languageCode,
                message: res.originalMessage,
                organization
            });
        })
            .catch(console.error);
    }
    async setTimesheetAction(email, timesheet) {
        const languageCode = context_1.RequestContext.getLanguageCode();
        const sendOptions = {
            template: 'timesheet-action',
            message: {
                to: email
            },
            locals: {
                locale: languageCode,
                email: email,
                host: environment_1.environment.host,
                timesheet: timesheet,
                timesheet_action: timesheet.status
            }
        };
        const organization = await this.organizationRepository.findOne(timesheet.employee.organizationId);
        this.email
            .send(sendOptions)
            .then((res) => {
            this.createEmailRecord({
                templateName: sendOptions.template,
                email: email,
                languageCode,
                message: res.originalMessage,
                organization,
                user: timesheet.employee.user
            });
        })
            .catch(console.error);
    }
    async timesheetSubmit(email, timesheet) {
        const languageCode = context_1.RequestContext.getLanguageCode();
        const sendOptions = {
            template: 'timesheet-submit',
            message: {
                to: email
            },
            locals: {
                locale: languageCode,
                email: email,
                host: environment_1.environment.host,
                timesheet: timesheet,
                timesheet_action: timesheet.status
            }
        };
        const organization = await this.organizationRepository.findOne(timesheet.employee.organizationId);
        this.email
            .send(sendOptions)
            .then((res) => {
            this.createEmailRecord({
                templateName: sendOptions.template,
                email: email,
                languageCode,
                message: res.originalMessage,
                organization,
                user: timesheet.employee.user
            });
        })
            .catch(console.error);
    }
    createSMTPTransporter() {
        const smtp = environment_2.environment.smtpConfig;
        return {
            host: smtp.host,
            port: smtp.port,
            secure: smtp.secure,
            auth: {
                user: smtp.auth.user,
                pass: smtp.auth.pass
            }
        };
    }
    async nodemailerSendEmail(user, url) {
        const testAccount = await nodemailer.createTestAccount();
        const transporter = nodemailer.createTransport({
            host: 'smtp.ethereal.email',
            port: 587,
            secure: false,
            auth: {
                user: testAccount.user,
                pass: testAccount.pass
            }
        });
        const info = await transporter.sendMail({
            from: 'Gauzy',
            to: user.email,
            subject: 'Forgotten Password',
            text: 'Forgot Password',
            html: 'Hello! <br><br> We received a password change request.<br><br>If you requested to reset your password<br><br>' +
                '<a href=' +
                url +
                '>Click here</a>'
        });
        console.log('Message sent: %s', info.messageId);
        console.log('Preview URL: %s', nodemailer.getTestMessageUrl(info));
    }
};
EmailService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(email_entity_1.Email)),
    tslib_1.__param(1, typeorm_1.InjectRepository(email_template_entity_1.EmailTemplate)),
    tslib_1.__param(2, typeorm_1.InjectRepository(organization_entity_1.Organization)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object])
], EmailService);
exports.EmailService = EmailService;


/***/ }),

/***/ "./src/app/email/index.ts":
/*!********************************!*\
  !*** ./src/app/email/index.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailService = exports.Email = exports.EmailModule = void 0;
var email_module_1 = __webpack_require__(/*! ./email.module */ "./src/app/email/email.module.ts");
Object.defineProperty(exports, "EmailModule", { enumerable: true, get: function () { return email_module_1.EmailModule; } });
var email_entity_1 = __webpack_require__(/*! ./email.entity */ "./src/app/email/email.entity.ts");
Object.defineProperty(exports, "Email", { enumerable: true, get: function () { return email_entity_1.Email; } });
var email_service_1 = __webpack_require__(/*! ./email.service */ "./src/app/email/email.service.ts");
Object.defineProperty(exports, "EmailService", { enumerable: true, get: function () { return email_service_1.EmailService; } });


/***/ }),

/***/ "./src/app/employee-appointment/commands/employee-appointment.create.command.ts":
/*!**************************************************************************************!*\
  !*** ./src/app/employee-appointment/commands/employee-appointment.create.command.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeAppointmentCreateCommand = void 0;
class EmployeeAppointmentCreateCommand {
    constructor(employeeAppointmentInput, languageCode) {
        this.employeeAppointmentInput = employeeAppointmentInput;
        this.languageCode = languageCode;
    }
}
exports.EmployeeAppointmentCreateCommand = EmployeeAppointmentCreateCommand;
EmployeeAppointmentCreateCommand.type = '[EmployeeAppointment] Register';


/***/ }),

/***/ "./src/app/employee-appointment/commands/employee-appointment.update.command.ts":
/*!**************************************************************************************!*\
  !*** ./src/app/employee-appointment/commands/employee-appointment.update.command.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeAppointmentUpdateCommand = void 0;
class EmployeeAppointmentUpdateCommand {
    constructor(id, employeeAppointmentUpdateRequest) {
        this.id = id;
        this.employeeAppointmentUpdateRequest = employeeAppointmentUpdateRequest;
    }
}
exports.EmployeeAppointmentUpdateCommand = EmployeeAppointmentUpdateCommand;
EmployeeAppointmentUpdateCommand.type = '[EmployeeAppointment] Update';


/***/ }),

/***/ "./src/app/employee-appointment/commands/handlers/employee-appointment.create.handler.ts":
/*!***********************************************************************************************!*\
  !*** ./src/app/employee-appointment/commands/handlers/employee-appointment.create.handler.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeAppointmentCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_appointment_service_1 = __webpack_require__(/*! ../../employee-appointment.service */ "./src/app/employee-appointment/employee-appointment.service.ts");
const employee_appointment_create_command_1 = __webpack_require__(/*! ../employee-appointment.create.command */ "./src/app/employee-appointment/commands/employee-appointment.create.command.ts");
const employee_appointment_entity_1 = __webpack_require__(/*! ../../employee-appointment.entity */ "./src/app/employee-appointment/employee-appointment.entity.ts");
const email_1 = __webpack_require__(/*! ../../../email */ "./src/app/email/index.ts");
const employee_service_1 = __webpack_require__(/*! ../../../employee/employee.service */ "./src/app/employee/employee.service.ts");
const organization_service_1 = __webpack_require__(/*! ../../../organization/organization.service */ "./src/app/organization/organization.service.ts");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
let EmployeeAppointmentCreateHandler = class EmployeeAppointmentCreateHandler {
    constructor(employeeAppointmentService, emailService, employeeService, organizationService) {
        this.employeeAppointmentService = employeeAppointmentService;
        this.emailService = emailService;
        this.employeeService = employeeService;
        this.organizationService = organizationService;
    }
    async execute(command) {
        const { employeeAppointmentInput, languageCode } = command;
        const appointment = new employee_appointment_entity_1.EmployeeAppointment();
        const employee = employeeAppointmentInput.employeeId
            ? await this.employeeService.findOne(employeeAppointmentInput.employeeId)
            : null;
        const organization = await this.organizationService.findOne(employeeAppointmentInput.organizationId);
        appointment.employee = employee;
        appointment.organization = organization;
        appointment.agenda = employeeAppointmentInput.agenda;
        appointment.description = employeeAppointmentInput.description;
        appointment.bufferTimeEnd = employeeAppointmentInput.bufferTimeEnd;
        appointment.bufferTimeInMins =
            employeeAppointmentInput.bufferTimeInMins;
        appointment.breakStartTime = employeeAppointmentInput.breakStartTime;
        appointment.breakTimeInMins = employeeAppointmentInput.breakTimeInMins;
        appointment.bufferTimeStart = employeeAppointmentInput.bufferTimeStart;
        appointment.emails = employeeAppointmentInput.emails;
        appointment.startDateTime = employeeAppointmentInput.startDateTime;
        appointment.endDateTime = employeeAppointmentInput.endDateTime;
        appointment.location = employeeAppointmentInput.location;
        appointment.tenantId = context_1.RequestContext.currentTenantId();
        const createdAppointment = await this.employeeAppointmentService.create(appointment);
        if (appointment.emails) {
            this._sendAppointmentEmail(appointment, languageCode);
        }
        return createdAppointment;
    }
    _sendAppointmentEmail(appointment, languageCode) {
        appointment.emails
            .split(', ')
            .forEach((email) => this.emailService.sendAppointmentMail(email, languageCode));
    }
};
EmployeeAppointmentCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(employee_appointment_create_command_1.EmployeeAppointmentCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof employee_appointment_service_1.EmployeeAppointmentService !== "undefined" && employee_appointment_service_1.EmployeeAppointmentService) === "function" ? _a : Object, typeof (_b = typeof email_1.EmailService !== "undefined" && email_1.EmailService) === "function" ? _b : Object, typeof (_c = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _c : Object, typeof (_d = typeof organization_service_1.OrganizationService !== "undefined" && organization_service_1.OrganizationService) === "function" ? _d : Object])
], EmployeeAppointmentCreateHandler);
exports.EmployeeAppointmentCreateHandler = EmployeeAppointmentCreateHandler;


/***/ }),

/***/ "./src/app/employee-appointment/commands/handlers/employee-appointment.update.handler.ts":
/*!***********************************************************************************************!*\
  !*** ./src/app/employee-appointment/commands/handlers/employee-appointment.update.handler.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeAppointmentUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_appointment_service_1 = __webpack_require__(/*! ../../employee-appointment.service */ "./src/app/employee-appointment/employee-appointment.service.ts");
const employee_appointment_update_command_1 = __webpack_require__(/*! ../employee-appointment.update.command */ "./src/app/employee-appointment/commands/employee-appointment.update.command.ts");
const employee_appointment_entity_1 = __webpack_require__(/*! ../../employee-appointment.entity */ "./src/app/employee-appointment/employee-appointment.entity.ts");
const employee_service_1 = __webpack_require__(/*! ../../../employee/employee.service */ "./src/app/employee/employee.service.ts");
const organization_service_1 = __webpack_require__(/*! ../../../organization/organization.service */ "./src/app/organization/organization.service.ts");
let EmployeeAppointmentUpdateHandler = class EmployeeAppointmentUpdateHandler {
    constructor(employeeAppointmentService, employeeService, organizationService) {
        this.employeeAppointmentService = employeeAppointmentService;
        this.employeeService = employeeService;
        this.organizationService = organizationService;
    }
    async execute(command) {
        const { id, employeeAppointmentUpdateRequest } = command;
        const appointment = new employee_appointment_entity_1.EmployeeAppointment();
        const employee = employeeAppointmentUpdateRequest.employeeId
            ? await this.employeeService.findOne(employeeAppointmentUpdateRequest.employeeId)
            : null;
        const organization = employeeAppointmentUpdateRequest.organizationId
            ? await this.organizationService.findOne(employeeAppointmentUpdateRequest.organizationId)
            : null;
        employee && (appointment.employee = employee);
        organization && (appointment.organization = organization);
        employeeAppointmentUpdateRequest.agenda &&
            (appointment.agenda = employeeAppointmentUpdateRequest.agenda);
        employeeAppointmentUpdateRequest.description &&
            (appointment.description =
                employeeAppointmentUpdateRequest.description);
        employeeAppointmentUpdateRequest.bufferTimeEnd &&
            (appointment.bufferTimeEnd =
                employeeAppointmentUpdateRequest.bufferTimeEnd);
        employeeAppointmentUpdateRequest.bufferTimeInMins &&
            (appointment.bufferTimeInMins =
                employeeAppointmentUpdateRequest.bufferTimeInMins);
        employeeAppointmentUpdateRequest.breakStartTime &&
            (appointment.breakStartTime =
                employeeAppointmentUpdateRequest.breakStartTime);
        employeeAppointmentUpdateRequest.breakTimeInMins &&
            (appointment.breakTimeInMins =
                employeeAppointmentUpdateRequest.breakTimeInMins);
        employeeAppointmentUpdateRequest.bufferTimeStart &&
            (appointment.bufferTimeStart =
                employeeAppointmentUpdateRequest.bufferTimeStart);
        employeeAppointmentUpdateRequest.startDateTime &&
            (appointment.startDateTime =
                employeeAppointmentUpdateRequest.startDateTime);
        employeeAppointmentUpdateRequest.endDateTime &&
            (appointment.endDateTime =
                employeeAppointmentUpdateRequest.endDateTime);
        employeeAppointmentUpdateRequest.location &&
            (appointment.location = employeeAppointmentUpdateRequest.location);
        employeeAppointmentUpdateRequest.status &&
            (appointment.status = employeeAppointmentUpdateRequest.status);
        const updatedAppointment = await this.employeeAppointmentService.update(id, appointment);
        return updatedAppointment;
    }
};
EmployeeAppointmentUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(employee_appointment_update_command_1.EmployeeAppointmentUpdateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof employee_appointment_service_1.EmployeeAppointmentService !== "undefined" && employee_appointment_service_1.EmployeeAppointmentService) === "function" ? _a : Object, typeof (_b = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _b : Object, typeof (_c = typeof organization_service_1.OrganizationService !== "undefined" && organization_service_1.OrganizationService) === "function" ? _c : Object])
], EmployeeAppointmentUpdateHandler);
exports.EmployeeAppointmentUpdateHandler = EmployeeAppointmentUpdateHandler;


/***/ }),

/***/ "./src/app/employee-appointment/default-employee-appointment.ts":
/*!**********************************************************************!*\
  !*** ./src/app/employee-appointment/default-employee-appointment.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.AGENDAS = void 0;
exports.AGENDAS = [
    'Meeting',
    'Knowledge Transfer',
    'Query Solution',
    'Sprint Planning'
];


/***/ }),

/***/ "./src/app/employee-appointment/employee-appointment.controller.ts":
/*!*************************************************************************!*\
  !*** ./src/app/employee-appointment/employee-appointment.controller.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeAppointmentController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const employee_appointment_entity_1 = __webpack_require__(/*! ./employee-appointment.entity */ "./src/app/employee-appointment/employee-appointment.entity.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_appointment_service_1 = __webpack_require__(/*! ./employee-appointment.service */ "./src/app/employee-appointment/employee-appointment.service.ts");
const employee_appointment_create_command_1 = __webpack_require__(/*! ./commands/employee-appointment.create.command */ "./src/app/employee-appointment/commands/employee-appointment.create.command.ts");
const employee_appointment_update_command_1 = __webpack_require__(/*! ./commands/employee-appointment.update.command */ "./src/app/employee-appointment/commands/employee-appointment.update.command.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const nestjs_i18n_1 = __webpack_require__(/*! nestjs-i18n */ "nestjs-i18n");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let EmployeeAppointmentController = class EmployeeAppointmentController extends core_1.CrudController {
    constructor(employeeAppointmentService, commandBus) {
        super(employeeAppointmentService);
        this.employeeAppointmentService = employeeAppointmentService;
        this.commandBus = commandBus;
    }
    async findAllEmployeeAppointments(data) {
        const { relations, findInput } = JSON.parse(data);
        return this.employeeAppointmentService.findAllAppointments({
            where: findInput,
            relations
        });
    }
    async createEmployeeAppointment(entity, languageCode, ...options) {
        return this.commandBus.execute(new employee_appointment_create_command_1.EmployeeAppointmentCreateCommand(entity, languageCode));
    }
    async update(id, entity) {
        return this.commandBus.execute(new employee_appointment_update_command_1.EmployeeAppointmentUpdateCommand(id, entity));
    }
    async findOneById(id) {
        return this.employeeAppointmentService.findOne(id);
    }
    async signAppointment(id) {
        return await this.employeeAppointmentService.signAppointmentId(id);
    }
    async decodeToken(token) {
        const decoded = this.employeeAppointmentService.decode(token);
        return decoded['appointmentId'];
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all employee appointments'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee appointments',
        type: employee_appointment_entity_1.EmployeeAppointment
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], EmployeeAppointmentController.prototype, "findAllEmployeeAppointments", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Post('/create'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__param(1, nestjs_i18n_1.I18nLang()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof models_1.IEmployeeAppointmentCreateInput !== "undefined" && models_1.IEmployeeAppointmentCreateInput) === "function" ? _b : Object, typeof (_c = typeof models_1.LanguagesEnum !== "undefined" && models_1.LanguagesEnum) === "function" ? _c : Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], EmployeeAppointmentController.prototype, "createEmployeeAppointment", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_d = typeof models_1.IEmployeeAppointmentUpdateInput !== "undefined" && models_1.IEmployeeAppointmentUpdateInput) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], EmployeeAppointmentController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find Employee appointment by id.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found one record',
        type: employee_appointment_entity_1.EmployeeAppointment
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Get(':id'),
    tslib_1.__param(0, common_1.Param('id', shared_1.UUIDValidationPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], EmployeeAppointmentController.prototype, "findOneById", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Sign appointment id payload' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Token generated',
        type: String
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.EXPECTATION_FAILED,
        description: 'Token generation failure'
    }),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Get('/sign/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], EmployeeAppointmentController.prototype, "signAppointment", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Verify token' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Token verified',
        type: String
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.EXPECTATION_FAILED,
        description: 'Token verification failure'
    }),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Get('/decode/:token'),
    tslib_1.__param(0, common_1.Param('token')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], EmployeeAppointmentController.prototype, "decodeToken", null);
EmployeeAppointmentController = tslib_1.__decorate([
    swagger_1.ApiTags('EmployeeAppointment'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_j = typeof employee_appointment_service_1.EmployeeAppointmentService !== "undefined" && employee_appointment_service_1.EmployeeAppointmentService) === "function" ? _j : Object, typeof (_k = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _k : Object])
], EmployeeAppointmentController);
exports.EmployeeAppointmentController = EmployeeAppointmentController;


/***/ }),

/***/ "./src/app/employee-appointment/employee-appointment.entity.ts":
/*!*********************************************************************!*\
  !*** ./src/app/employee-appointment/employee-appointment.entity.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeAppointment = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const appointment_employees_entity_1 = __webpack_require__(/*! ../appointment-employees/appointment-employees.entity */ "./src/app/appointment-employees/appointment-employees.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let EmployeeAppointment = class EmployeeAppointment extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.ManyToOne((type) => employee_entity_1.Employee, { nullable: true, onDelete: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof employee_entity_1.Employee !== "undefined" && employee_entity_1.Employee) === "function" ? _a : Object)
], EmployeeAppointment.prototype, "employee", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((employeeAppointment) => employeeAppointment.employee),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EmployeeAppointment.prototype, "employeeId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EmployeeAppointment.prototype, "agenda", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EmployeeAppointment.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EmployeeAppointment.prototype, "location", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    class_validator_1.IsDate(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], EmployeeAppointment.prototype, "startDateTime", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    class_validator_1.IsDate(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], EmployeeAppointment.prototype, "endDateTime", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_d = typeof Boolean !== "undefined" && Boolean) === "function" ? _d : Object)
], EmployeeAppointment.prototype, "bufferTimeStart", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_e = typeof Boolean !== "undefined" && Boolean) === "function" ? _e : Object)
], EmployeeAppointment.prototype, "bufferTimeEnd", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_f = typeof Number !== "undefined" && Number) === "function" ? _f : Object)
], EmployeeAppointment.prototype, "bufferTimeInMins", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_g = typeof Number !== "undefined" && Number) === "function" ? _g : Object)
], EmployeeAppointment.prototype, "breakTimeInMins", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    class_validator_1.IsDate(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_h = typeof Date !== "undefined" && Date) === "function" ? _h : Object)
], EmployeeAppointment.prototype, "breakStartTime", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EmployeeAppointment.prototype, "emails", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EmployeeAppointment.prototype, "status", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: appointment_employees_entity_1.AppointmentEmployee, isArray: true }),
    typeorm_1.OneToMany((type) => appointment_employees_entity_1.AppointmentEmployee, (entity) => entity.employeeAppointment, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], EmployeeAppointment.prototype, "invitees", void 0);
EmployeeAppointment = tslib_1.__decorate([
    typeorm_1.Entity('employee_appointment')
], EmployeeAppointment);
exports.EmployeeAppointment = EmployeeAppointment;


/***/ }),

/***/ "./src/app/employee-appointment/employee-appointment.module.ts":
/*!*********************************************************************!*\
  !*** ./src/app/employee-appointment/employee-appointment.module.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeAppointmentModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const employee_appointment_entity_1 = __webpack_require__(/*! ./employee-appointment.entity */ "./src/app/employee-appointment/employee-appointment.entity.ts");
const employee_appointment_controller_1 = __webpack_require__(/*! ./employee-appointment.controller */ "./src/app/employee-appointment/employee-appointment.controller.ts");
const employee_appointment_service_1 = __webpack_require__(/*! ./employee-appointment.service */ "./src/app/employee-appointment/employee-appointment.service.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_appointment_create_handler_1 = __webpack_require__(/*! ./commands/handlers/employee-appointment.create.handler */ "./src/app/employee-appointment/commands/handlers/employee-appointment.create.handler.ts");
const employee_appointment_update_handler_1 = __webpack_require__(/*! ./commands/handlers/employee-appointment.update.handler */ "./src/app/employee-appointment/commands/handlers/employee-appointment.update.handler.ts");
const email_1 = __webpack_require__(/*! ../email */ "./src/app/email/index.ts");
const organization_service_1 = __webpack_require__(/*! ../organization/organization.service */ "./src/app/organization/organization.service.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const employee_module_1 = __webpack_require__(/*! ../employee/employee.module */ "./src/app/employee/employee.module.ts");
const organization_module_1 = __webpack_require__(/*! ../organization/organization.module */ "./src/app/organization/organization.module.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let EmployeeAppointmentModule = class EmployeeAppointmentModule {
};
EmployeeAppointmentModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([employee_appointment_entity_1.EmployeeAppointment]),
            email_1.EmailModule,
            employee_module_1.EmployeeModule,
            organization_module_1.OrganizationModule,
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [employee_appointment_controller_1.EmployeeAppointmentController],
        providers: [
            email_1.EmailService,
            employee_service_1.EmployeeService,
            organization_service_1.OrganizationService,
            employee_appointment_service_1.EmployeeAppointmentService,
            employee_appointment_create_handler_1.EmployeeAppointmentCreateHandler,
            employee_appointment_update_handler_1.EmployeeAppointmentUpdateHandler
        ],
        exports: [employee_appointment_service_1.EmployeeAppointmentService]
    })
], EmployeeAppointmentModule);
exports.EmployeeAppointmentModule = EmployeeAppointmentModule;


/***/ }),

/***/ "./src/app/employee-appointment/employee-appointment.seed.ts":
/*!*******************************************************************!*\
  !*** ./src/app/employee-appointment/employee-appointment.seed.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomEmployeeAppointment = exports.createDefaultEmployeeAppointment = void 0;
const employee_appointment_entity_1 = __webpack_require__(/*! ./employee-appointment.entity */ "./src/app/employee-appointment/employee-appointment.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const moment = __webpack_require__(/*! moment */ "moment");
const appointment_employees_entity_1 = __webpack_require__(/*! ../appointment-employees/appointment-employees.entity */ "./src/app/appointment-employees/appointment-employees.entity.ts");
const default_employee_appointment_1 = __webpack_require__(/*! ./default-employee-appointment */ "./src/app/employee-appointment/default-employee-appointment.ts");
exports.createDefaultEmployeeAppointment = async (connection, tenant, employees, organizations) => {
    if (!employees) {
        console.warn('Warning: Employees not found, Default Employee Appointment  will not be created');
        return;
    }
    if (!organizations) {
        console.warn('Warning: tenantOrganizations not found, Default Employee Appointment  will not be created');
        return;
    }
    let employeesAppointments = [];
    for (const employee of employees) {
        employeesAppointments = await dataOperation(connection, employeesAppointments, employee, [organizations], tenant);
    }
    await connection.manager.save(employeesAppointments);
};
exports.createRandomEmployeeAppointment = async (connection, tenants, tenantEmployeeMap, tenantOrganizationsMap) => {
    if (!tenantEmployeeMap) {
        console.warn('Warning: tenantEmployeeMap not found, Employee Appointment  will not be created');
        return;
    }
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, Employee Appointment  will not be created');
        return;
    }
    let employeesAppointments = [];
    for (const tenant of tenants) {
        const tenantEmployees = tenantEmployeeMap.get(tenant);
        const tenantOrgs = tenantOrganizationsMap.get(tenant);
        for (const tenantEmployee of tenantEmployees) {
            employeesAppointments = await dataOperation(connection, employeesAppointments, tenantEmployee, tenantOrgs, tenant);
        }
    }
};
const dataOperation = async (connection, employeesAppointments, tenantEmployee, organizations, tenant) => {
    for (const organization of organizations) {
        const employeesAppointment = new employee_appointment_entity_1.EmployeeAppointment();
        const invitees = await connection.manager.find(appointment_employees_entity_1.AppointmentEmployee, {
            where: [{ employeeId: tenantEmployee.id }]
        });
        employeesAppointment.employee = tenantEmployee;
        employeesAppointment.organization = organization;
        employeesAppointment.description = faker.name.jobDescriptor();
        employeesAppointment.location = faker.address.city();
        employeesAppointment.startDateTime = faker.date.between(new Date(), moment(new Date()).add(2, 'months').toDate());
        employeesAppointment.endDateTime = moment(employeesAppointment.startDateTime)
            .add(1, 'hours')
            .toDate();
        employeesAppointment.invitees = invitees;
        employeesAppointment.agenda = faker.random.arrayElement(default_employee_appointment_1.AGENDAS);
        employeesAppointment.tenant = tenant;
        employeesAppointments.push(employeesAppointment);
    }
    await connection.manager.save(employeesAppointments);
    return employeesAppointments;
};


/***/ }),

/***/ "./src/app/employee-appointment/employee-appointment.service.ts":
/*!**********************************************************************!*\
  !*** ./src/app/employee-appointment/employee-appointment.service.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeAppointmentService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const employee_appointment_entity_1 = __webpack_require__(/*! ./employee-appointment.entity */ "./src/app/employee-appointment/employee-appointment.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const jsonwebtoken_1 = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");
let EmployeeAppointmentService = class EmployeeAppointmentService extends core_1.CrudService {
    constructor(employeeAppointmentRepository) {
        super(employeeAppointmentRepository);
        this.employeeAppointmentRepository = employeeAppointmentRepository;
    }
    async findAllAppointments(filter) {
        const total = await this.employeeAppointmentRepository.count(filter);
        const items = await this.employeeAppointmentRepository.find(filter);
        return { items, total };
    }
    async saveAppointment(employeeAppointmentRequest) {
        return await this.employeeAppointmentRepository.save(employeeAppointmentRequest);
    }
    signAppointmentId(id) {
        return jsonwebtoken_1.sign({
            appointmentId: id
        }, environment_1.environment.JWT_SECRET, {});
    }
    decode(token) {
        return jsonwebtoken_1.decode(token);
    }
};
EmployeeAppointmentService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(employee_appointment_entity_1.EmployeeAppointment)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], EmployeeAppointmentService);
exports.EmployeeAppointmentService = EmployeeAppointmentService;


/***/ }),

/***/ "./src/app/employee-appointment/index.ts":
/*!***********************************************!*\
  !*** ./src/app/employee-appointment/index.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeAppointmentService = exports.EmployeeAppointment = exports.EmployeeAppointmentModule = void 0;
var employee_appointment_module_1 = __webpack_require__(/*! ./employee-appointment.module */ "./src/app/employee-appointment/employee-appointment.module.ts");
Object.defineProperty(exports, "EmployeeAppointmentModule", { enumerable: true, get: function () { return employee_appointment_module_1.EmployeeAppointmentModule; } });
var employee_appointment_entity_1 = __webpack_require__(/*! ./employee-appointment.entity */ "./src/app/employee-appointment/employee-appointment.entity.ts");
Object.defineProperty(exports, "EmployeeAppointment", { enumerable: true, get: function () { return employee_appointment_entity_1.EmployeeAppointment; } });
var employee_appointment_service_1 = __webpack_require__(/*! ./employee-appointment.service */ "./src/app/employee-appointment/employee-appointment.service.ts");
Object.defineProperty(exports, "EmployeeAppointmentService", { enumerable: true, get: function () { return employee_appointment_service_1.EmployeeAppointmentService; } });


/***/ }),

/***/ "./src/app/employee-award/default-employee-awards.ts":
/*!***********************************************************!*\
  !*** ./src/app/employee-award/default-employee-awards.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_EMPLOYEE_AWARDS = void 0;
exports.DEFAULT_EMPLOYEE_AWARDS = [
    { name: 'Microsoft Most Valuable Professional (MVP)', year: '2015' },
    { name: 'Google Developer Expert (GDE)', year: '2019' },
    { name: 'Hackatoon Winner', year: '2018' }
];


/***/ }),

/***/ "./src/app/employee-award/employee-award.controller.ts":
/*!*************************************************************!*\
  !*** ./src/app/employee-award/employee-award.controller.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeAwardController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const employee_award_entity_1 = __webpack_require__(/*! ./employee-award.entity */ "./src/app/employee-award/employee-award.entity.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const QueryPartialEntity_1 = __webpack_require__(/*! typeorm/query-builder/QueryPartialEntity */ "typeorm/query-builder/QueryPartialEntity");
const employee_award_service_1 = __webpack_require__(/*! ./employee-award.service */ "./src/app/employee-award/employee-award.service.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let EmployeeAwardController = class EmployeeAwardController extends core_1.CrudController {
    constructor(employeeAwardService) {
        super(employeeAwardService);
        this.employeeAwardService = employeeAwardService;
    }
    async create(entity) {
        return this.employeeAwardService.create(entity);
    }
    async update(id, entity) {
        return this.employeeAwardService.update(id, entity);
    }
    async delete(id) {
        return this.employeeAwardService.delete(id);
    }
    async findAwardsByEmployeeId(data) {
        const { findInput } = JSON.parse(data);
        return this.employeeAwardService.findAll({
            where: findInput
        });
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.CREATED),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.DeepPartial !== "undefined" && typeorm_1.DeepPartial) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], EmployeeAwardController.prototype, "create", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_c = typeof QueryPartialEntity_1.QueryDeepPartialEntity !== "undefined" && QueryPartialEntity_1.QueryDeepPartialEntity) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], EmployeeAwardController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Delete record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NO_CONTENT,
        description: 'The record has been successfully deleted'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], EmployeeAwardController.prototype, "delete", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find Employee Awards.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found Employee Awards',
        type: employee_award_entity_1.EmployeeAward
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], EmployeeAwardController.prototype, "findAwardsByEmployeeId", null);
EmployeeAwardController = tslib_1.__decorate([
    swagger_1.ApiTags('EmployeeAward'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_g = typeof employee_award_service_1.EmployeeAwardService !== "undefined" && employee_award_service_1.EmployeeAwardService) === "function" ? _g : Object])
], EmployeeAwardController);
exports.EmployeeAwardController = EmployeeAwardController;


/***/ }),

/***/ "./src/app/employee-award/employee-award.entity.ts":
/*!*********************************************************!*\
  !*** ./src/app/employee-award/employee-award.entity.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeAward = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let EmployeeAward = class EmployeeAward extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EmployeeAward.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EmployeeAward.prototype, "year", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EmployeeAward.prototype, "employeeId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => employee_entity_1.Employee, (employee) => employee.id),
    tslib_1.__metadata("design:type", typeof (_a = typeof employee_entity_1.Employee !== "undefined" && employee_entity_1.Employee) === "function" ? _a : Object)
], EmployeeAward.prototype, "employee", void 0);
EmployeeAward = tslib_1.__decorate([
    typeorm_1.Entity('employee_award')
], EmployeeAward);
exports.EmployeeAward = EmployeeAward;


/***/ }),

/***/ "./src/app/employee-award/employee-award.module.ts":
/*!*********************************************************!*\
  !*** ./src/app/employee-award/employee-award.module.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeAwardModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const employee_award_entity_1 = __webpack_require__(/*! ./employee-award.entity */ "./src/app/employee-award/employee-award.entity.ts");
const employee_award_controller_1 = __webpack_require__(/*! ./employee-award.controller */ "./src/app/employee-award/employee-award.controller.ts");
const employee_award_service_1 = __webpack_require__(/*! ./employee-award.service */ "./src/app/employee-award/employee-award.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let EmployeeAwardModule = class EmployeeAwardModule {
};
EmployeeAwardModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([employee_award_entity_1.EmployeeAward]), tenant_module_1.TenantModule],
        controllers: [employee_award_controller_1.EmployeeAwardController],
        providers: [employee_award_service_1.EmployeeAwardService]
    })
], EmployeeAwardModule);
exports.EmployeeAwardModule = EmployeeAwardModule;


/***/ }),

/***/ "./src/app/employee-award/employee-award.seed.ts":
/*!*******************************************************!*\
  !*** ./src/app/employee-award/employee-award.seed.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultEmployeeAwards = void 0;
const employee_award_entity_1 = __webpack_require__(/*! ./employee-award.entity */ "./src/app/employee-award/employee-award.entity.ts");
const default_employee_awards_1 = __webpack_require__(/*! ./default-employee-awards */ "./src/app/employee-award/default-employee-awards.ts");
exports.createDefaultEmployeeAwards = async (connection, tenant, employee) => {
    const awards = default_employee_awards_1.DEFAULT_EMPLOYEE_AWARDS.map(({ name, year }) => {
        const award = new employee_award_entity_1.EmployeeAward();
        award.name = name;
        award.year = year;
        award.employee = employee;
        award.employeeId = employee.id;
        award.tenant = tenant;
        award.organization = employee.organization;
        return award;
    });
    return await connection.manager.save(awards);
};


/***/ }),

/***/ "./src/app/employee-award/employee-award.service.ts":
/*!**********************************************************!*\
  !*** ./src/app/employee-award/employee-award.service.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeAwardService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const employee_award_entity_1 = __webpack_require__(/*! ./employee-award.entity */ "./src/app/employee-award/employee-award.entity.ts");
let EmployeeAwardService = class EmployeeAwardService extends crud_service_1.CrudService {
    constructor(employeeAwardRepository) {
        super(employeeAwardRepository);
        this.employeeAwardRepository = employeeAwardRepository;
    }
};
EmployeeAwardService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(employee_award_entity_1.EmployeeAward)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], EmployeeAwardService);
exports.EmployeeAwardService = EmployeeAwardService;


/***/ }),

/***/ "./src/app/employee-job-preset/commands/create-job-preset.command.ts":
/*!***************************************************************************!*\
  !*** ./src/app/employee-job-preset/commands/create-job-preset.command.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateJobPresetCommand = void 0;
class CreateJobPresetCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.CreateJobPresetCommand = CreateJobPresetCommand;
CreateJobPresetCommand.type = '[JobPreset] Create';


/***/ }),

/***/ "./src/app/employee-job-preset/commands/handlers/create-job-preset.handler.ts":
/*!************************************************************************************!*\
  !*** ./src/app/employee-job-preset/commands/handlers/create-job-preset.handler.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateJobPresetHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const request_context_1 = __webpack_require__(/*! ../../../core/context/request-context */ "./src/app/core/context/request-context.ts");
const employee_entity_1 = __webpack_require__(/*! ../../../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const job_preset_upwork_job_search_criterion_entity_1 = __webpack_require__(/*! ../../job-preset-upwork-job-search-criterion.entity */ "./src/app/employee-job-preset/job-preset-upwork-job-search-criterion.entity.ts");
const job_preset_entity_1 = __webpack_require__(/*! ../../job-preset.entity */ "./src/app/employee-job-preset/job-preset.entity.ts");
const create_job_preset_command_1 = __webpack_require__(/*! ../create-job-preset.command */ "./src/app/employee-job-preset/commands/create-job-preset.command.ts");
let CreateJobPresetHandler = class CreateJobPresetHandler {
    constructor(jobPresetRepository, employeeRepository, jobPresetUpworkJobSearchCriterionRepository) {
        this.jobPresetRepository = jobPresetRepository;
        this.employeeRepository = employeeRepository;
        this.jobPresetUpworkJobSearchCriterionRepository = jobPresetUpworkJobSearchCriterionRepository;
    }
    async execute(command) {
        const { input } = command;
        if (!input.organizationId) {
            const user = request_context_1.RequestContext.currentUser();
            const employee = await this.employeeRepository.findOne(user.employeeId);
            input.organizationId = employee.organizationId;
        }
        input.tenantId = request_context_1.RequestContext.currentTenantId();
        const jobPreset = new job_preset_entity_1.JobPreset(input);
        delete jobPreset.jobPresetCriterions;
        await this.jobPresetRepository.save(jobPreset);
        let jobPresetCriterion = [];
        if (input.jobPresetCriterions && input.jobPresetCriterions.length > 0) {
            jobPresetCriterion = input.jobPresetCriterions.map((criterion) => new job_preset_upwork_job_search_criterion_entity_1.JobPresetUpworkJobSearchCriterion(Object.assign(Object.assign({}, criterion), { jobPresetId: jobPreset.id })));
            await this.jobPresetUpworkJobSearchCriterionRepository.delete({
                jobPresetId: jobPreset.id
            });
            await this.jobPresetUpworkJobSearchCriterionRepository.save(jobPresetCriterion);
            jobPreset.jobPresetCriterions = jobPresetCriterion;
        }
        return jobPreset;
    }
};
CreateJobPresetHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(create_job_preset_command_1.CreateJobPresetCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(job_preset_entity_1.JobPreset)),
    tslib_1.__param(1, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__param(2, typeorm_1.InjectRepository(job_preset_upwork_job_search_criterion_entity_1.JobPresetUpworkJobSearchCriterion)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object])
], CreateJobPresetHandler);
exports.CreateJobPresetHandler = CreateJobPresetHandler;


/***/ }),

/***/ "./src/app/employee-job-preset/commands/handlers/index.ts":
/*!****************************************************************!*\
  !*** ./src/app/employee-job-preset/commands/handlers/index.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Handlers = void 0;
const create_job_preset_handler_1 = __webpack_require__(/*! ./create-job-preset.handler */ "./src/app/employee-job-preset/commands/handlers/create-job-preset.handler.ts");
const save_employee_criterion_handler_1 = __webpack_require__(/*! ./save-employee-criterion.handler */ "./src/app/employee-job-preset/commands/handlers/save-employee-criterion.handler.ts");
const save_employee_preset_handler_1 = __webpack_require__(/*! ./save-employee-preset.handler */ "./src/app/employee-job-preset/commands/handlers/save-employee-preset.handler.ts");
const save_preset_criterion_handler_1 = __webpack_require__(/*! ./save-preset-criterion.handler */ "./src/app/employee-job-preset/commands/handlers/save-preset-criterion.handler.ts");
exports.Handlers = [
    create_job_preset_handler_1.CreateJobPresetHandler,
    save_preset_criterion_handler_1.SavePresetCriterionHandler,
    save_employee_preset_handler_1.SaveEmployeePresetHandler,
    save_employee_criterion_handler_1.SaveEmployeeCriterionHandler
];


/***/ }),

/***/ "./src/app/employee-job-preset/commands/handlers/save-employee-criterion.handler.ts":
/*!******************************************************************************************!*\
  !*** ./src/app/employee-job-preset/commands/handlers/save-employee-criterion.handler.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveEmployeeCriterionHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const integration_ai_1 = __webpack_require__(/*! @gauzy/integration-ai */ "./libs/integration-ai/src/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const request_context_1 = __webpack_require__(/*! ../../../core/context/request-context */ "./src/app/core/context/request-context.ts");
const employee_entity_1 = __webpack_require__(/*! ../../../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const employee_upwork_jobs_search_criterion_entity_1 = __webpack_require__(/*! ../../employee-upwork-jobs-search-criterion.entity */ "./src/app/employee-job-preset/employee-upwork-jobs-search-criterion.entity.ts");
const job_preset_upwork_job_search_criterion_entity_1 = __webpack_require__(/*! ../../job-preset-upwork-job-search-criterion.entity */ "./src/app/employee-job-preset/job-preset-upwork-job-search-criterion.entity.ts");
const save_employee_criterion_command_1 = __webpack_require__(/*! ../save-employee-criterion.command */ "./src/app/employee-job-preset/commands/save-employee-criterion.command.ts");
let SaveEmployeeCriterionHandler = class SaveEmployeeCriterionHandler {
    constructor(employeeRepository, employeeUpworkJobsSearchCriterionRepository, jobPresetUpworkJobSearchCriterionRepository, gauzyAIService) {
        this.employeeRepository = employeeRepository;
        this.employeeUpworkJobsSearchCriterionRepository = employeeUpworkJobsSearchCriterionRepository;
        this.jobPresetUpworkJobSearchCriterionRepository = jobPresetUpworkJobSearchCriterionRepository;
        this.gauzyAIService = gauzyAIService;
    }
    async execute(command) {
        const { input } = command;
        input.tenantId = request_context_1.RequestContext.currentTenantId();
        if (!input.organizationId) {
            const user = request_context_1.RequestContext.currentUser();
            const employee = await this.employeeRepository.findOne(input.employeeId || user.employeeId);
            input.organizationId = employee.organizationId;
        }
        const creation = new employee_upwork_jobs_search_criterion_entity_1.EmployeeUpworkJobsSearchCriterion(input);
        await this.employeeUpworkJobsSearchCriterionRepository.save(creation);
        const employee = await this.employeeRepository.findOne(input.employeeId, { relations: ['user'] });
        const criteria = await this.employeeUpworkJobsSearchCriterionRepository.find({
            employeeId: input.employeeId,
            jobPresetId: input.jobPresetId
        });
        this.gauzyAIService.syncGauzyEmployeeJobSearchCriteria(employee, criteria);
        return creation;
    }
};
SaveEmployeeCriterionHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(save_employee_criterion_command_1.SaveEmployeeCriterionCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__param(1, typeorm_1.InjectRepository(employee_upwork_jobs_search_criterion_entity_1.EmployeeUpworkJobsSearchCriterion)),
    tslib_1.__param(2, typeorm_1.InjectRepository(job_preset_upwork_job_search_criterion_entity_1.JobPresetUpworkJobSearchCriterion)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof integration_ai_1.GauzyAIService !== "undefined" && integration_ai_1.GauzyAIService) === "function" ? _d : Object])
], SaveEmployeeCriterionHandler);
exports.SaveEmployeeCriterionHandler = SaveEmployeeCriterionHandler;


/***/ }),

/***/ "./src/app/employee-job-preset/commands/handlers/save-employee-preset.handler.ts":
/*!***************************************************************************************!*\
  !*** ./src/app/employee-job-preset/commands/handlers/save-employee-preset.handler.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveEmployeePresetHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const integration_ai_1 = __webpack_require__(/*! @gauzy/integration-ai */ "./libs/integration-ai/src/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const employee_entity_1 = __webpack_require__(/*! ../../../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const employee_upwork_jobs_search_criterion_entity_1 = __webpack_require__(/*! ../../employee-upwork-jobs-search-criterion.entity */ "./src/app/employee-job-preset/employee-upwork-jobs-search-criterion.entity.ts");
const job_preset_entity_1 = __webpack_require__(/*! ../../job-preset.entity */ "./src/app/employee-job-preset/job-preset.entity.ts");
const save_employee_preset_command_1 = __webpack_require__(/*! ../save-employee-preset.command */ "./src/app/employee-job-preset/commands/save-employee-preset.command.ts");
let SaveEmployeePresetHandler = class SaveEmployeePresetHandler {
    constructor(gauzyAIService, jobPresetRepository, employeeRepository, employeeUpworkJobsSearchCriterionRepository) {
        this.gauzyAIService = gauzyAIService;
        this.jobPresetRepository = jobPresetRepository;
        this.employeeRepository = employeeRepository;
        this.employeeUpworkJobsSearchCriterionRepository = employeeUpworkJobsSearchCriterionRepository;
    }
    async execute(command) {
        const { input } = command;
        const employee = await this.employeeRepository.findOne(input.employeeId, {
            relations: ['jobPresets']
        });
        const jobPreset = await this.jobPresetRepository.findOne({
            id: typeorm_2.In(input.jobPresetIds)
        }, {
            relations: ['jobPresetCriterions']
        });
        const employeeCriterions = jobPreset.jobPresetCriterions.map((item) => {
            return new employee_upwork_jobs_search_criterion_entity_1.EmployeeUpworkJobsSearchCriterion(Object.assign(Object.assign({}, item), { employeeId: input.employeeId }));
        });
        employee.jobPresets = input.jobPresetIds.map((id) => new job_preset_entity_1.JobPreset({ id }));
        this.employeeRepository.save(employee);
        await this.employeeUpworkJobsSearchCriterionRepository.delete({
            employeeId: input.employeeId
        });
        await this.employeeUpworkJobsSearchCriterionRepository.save(employeeCriterions);
        this.gauzyAIService.syncGauzyEmployeeJobSearchCriteria(employee, employeeCriterions);
        return employeeCriterions;
    }
};
SaveEmployeePresetHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(save_employee_preset_command_1.SaveEmployeePresetCommand),
    tslib_1.__param(1, typeorm_1.InjectRepository(job_preset_entity_1.JobPreset)),
    tslib_1.__param(2, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__param(3, typeorm_1.InjectRepository(employee_upwork_jobs_search_criterion_entity_1.EmployeeUpworkJobsSearchCriterion)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof integration_ai_1.GauzyAIService !== "undefined" && integration_ai_1.GauzyAIService) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _d : Object])
], SaveEmployeePresetHandler);
exports.SaveEmployeePresetHandler = SaveEmployeePresetHandler;


/***/ }),

/***/ "./src/app/employee-job-preset/commands/handlers/save-preset-criterion.handler.ts":
/*!****************************************************************************************!*\
  !*** ./src/app/employee-job-preset/commands/handlers/save-preset-criterion.handler.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SavePresetCriterionHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const request_context_1 = __webpack_require__(/*! ../../../core/context/request-context */ "./src/app/core/context/request-context.ts");
const employee_entity_1 = __webpack_require__(/*! ../../../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const job_preset_upwork_job_search_criterion_entity_1 = __webpack_require__(/*! ../../job-preset-upwork-job-search-criterion.entity */ "./src/app/employee-job-preset/job-preset-upwork-job-search-criterion.entity.ts");
const save_preset_criterion_command_1 = __webpack_require__(/*! ../save-preset-criterion.command */ "./src/app/employee-job-preset/commands/save-preset-criterion.command.ts");
let SavePresetCriterionHandler = class SavePresetCriterionHandler {
    constructor(employeeRepository, jobPresetUpworkJobSearchCriterionRepository) {
        this.employeeRepository = employeeRepository;
        this.jobPresetUpworkJobSearchCriterionRepository = jobPresetUpworkJobSearchCriterionRepository;
    }
    async execute(command) {
        const { input } = command;
        if (!input.organizationId) {
            const user = request_context_1.RequestContext.currentUser();
            const employee = await this.employeeRepository.findOne(user.employeeId);
            input.organizationId = employee.organizationId;
        }
        input.tenantId = request_context_1.RequestContext.currentTenantId();
        const creation = new job_preset_upwork_job_search_criterion_entity_1.JobPresetUpworkJobSearchCriterion(input);
        await this.jobPresetUpworkJobSearchCriterionRepository.save(creation);
        return creation;
    }
};
SavePresetCriterionHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(save_preset_criterion_command_1.SavePresetCriterionCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__param(1, typeorm_1.InjectRepository(job_preset_upwork_job_search_criterion_entity_1.JobPresetUpworkJobSearchCriterion)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], SavePresetCriterionHandler);
exports.SavePresetCriterionHandler = SavePresetCriterionHandler;


/***/ }),

/***/ "./src/app/employee-job-preset/commands/save-employee-criterion.command.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/employee-job-preset/commands/save-employee-criterion.command.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveEmployeeCriterionCommand = void 0;
class SaveEmployeeCriterionCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.SaveEmployeeCriterionCommand = SaveEmployeeCriterionCommand;
SaveEmployeeCriterionCommand.type = '[EmployeeCriterion] Create';


/***/ }),

/***/ "./src/app/employee-job-preset/commands/save-employee-preset.command.ts":
/*!******************************************************************************!*\
  !*** ./src/app/employee-job-preset/commands/save-employee-preset.command.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveEmployeePresetCommand = void 0;
class SaveEmployeePresetCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.SaveEmployeePresetCommand = SaveEmployeePresetCommand;
SaveEmployeePresetCommand.type = '[EmployeePreset] Create';


/***/ }),

/***/ "./src/app/employee-job-preset/commands/save-preset-criterion.command.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/employee-job-preset/commands/save-preset-criterion.command.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SavePresetCriterionCommand = void 0;
class SavePresetCriterionCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.SavePresetCriterionCommand = SavePresetCriterionCommand;
SavePresetCriterionCommand.type = '[JobPresetCriterion] Create';


/***/ }),

/***/ "./src/app/employee-job-preset/employee-job-preset.module.ts":
/*!*******************************************************************!*\
  !*** ./src/app/employee-job-preset/employee-job-preset.module.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeJobPresetModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const integration_ai_1 = __webpack_require__(/*! @gauzy/integration-ai */ "./libs/integration-ai/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/employee-job-preset/commands/handlers/index.ts");
const employee_preset_controller_1 = __webpack_require__(/*! ./employee-preset.controller */ "./src/app/employee-job-preset/employee-preset.controller.ts");
const employee_upwork_jobs_search_criterion_entity_1 = __webpack_require__(/*! ./employee-upwork-jobs-search-criterion.entity */ "./src/app/employee-job-preset/employee-upwork-jobs-search-criterion.entity.ts");
const job_preset_upwork_job_search_criterion_entity_1 = __webpack_require__(/*! ./job-preset-upwork-job-search-criterion.entity */ "./src/app/employee-job-preset/job-preset-upwork-job-search-criterion.entity.ts");
const job_preset_entity_1 = __webpack_require__(/*! ./job-preset.entity */ "./src/app/employee-job-preset/job-preset.entity.ts");
const job_preset_service_1 = __webpack_require__(/*! ./job-preset.service */ "./src/app/employee-job-preset/job-preset.service.ts");
const job_search_category_controller_1 = __webpack_require__(/*! ./job-search-category/job-search-category.controller */ "./src/app/employee-job-preset/job-search-category/job-search-category.controller.ts");
const job_search_category_entity_1 = __webpack_require__(/*! ./job-search-category/job-search-category.entity */ "./src/app/employee-job-preset/job-search-category/job-search-category.entity.ts");
const job_search_category_service_1 = __webpack_require__(/*! ./job-search-category/job-search-category.service */ "./src/app/employee-job-preset/job-search-category/job-search-category.service.ts");
const job_search_occupation_controller_1 = __webpack_require__(/*! ./job-search-occupation/job-search-occupation.controller */ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.controller.ts");
const job_search_occupation_entity_1 = __webpack_require__(/*! ./job-search-occupation/job-search-occupation.entity */ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.entity.ts");
const job_search_occupation_service_1 = __webpack_require__(/*! ./job-search-occupation/job-search-occupation.service */ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.service.ts");
const job_search_preset_controller_1 = __webpack_require__(/*! ./job-search-preset.controller */ "./src/app/employee-job-preset/job-search-preset.controller.ts");
let EmployeeJobPresetModule = class EmployeeJobPresetModule {
};
EmployeeJobPresetModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([
                job_preset_entity_1.JobPreset,
                job_preset_upwork_job_search_criterion_entity_1.JobPresetUpworkJobSearchCriterion,
                employee_upwork_jobs_search_criterion_entity_1.EmployeeUpworkJobsSearchCriterion,
                job_search_occupation_entity_1.JobSearchOccupation,
                job_search_category_entity_1.JobSearchCategory,
                employee_entity_1.Employee
            ]),
            cqrs_1.CqrsModule
        ],
        controllers: [
            job_search_occupation_controller_1.JobSearchOccupationController,
            job_search_category_controller_1.JobSearchCategoryController,
            employee_preset_controller_1.EmployeePresetController,
            job_search_preset_controller_1.JobSearchPresetController
        ],
        providers: [
            ...handlers_1.Handlers,
            employee_service_1.EmployeeService,
            job_preset_service_1.JobPresetService,
            job_search_category_service_1.JobSearchCategoryService,
            job_search_occupation_service_1.JobSearchOccupationService,
            integration_ai_1.GauzyAIService
        ],
        exports: [
            job_preset_service_1.JobPresetService,
            job_search_category_service_1.JobSearchCategoryService,
            job_search_occupation_service_1.JobSearchOccupationService
        ]
    })
], EmployeeJobPresetModule);
exports.EmployeeJobPresetModule = EmployeeJobPresetModule;


/***/ }),

/***/ "./src/app/employee-job-preset/employee-preset.controller.ts":
/*!*******************************************************************!*\
  !*** ./src/app/employee-job-preset/employee-preset.controller.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeePresetController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const job_preset_service_1 = __webpack_require__(/*! ./job-preset.service */ "./src/app/employee-job-preset/job-preset.service.ts");
const job_preset_entity_1 = __webpack_require__(/*! ./job-preset.entity */ "./src/app/employee-job-preset/job-preset.entity.ts");
let EmployeePresetController = class EmployeePresetController {
    constructor(jobPresetService) {
        this.jobPresetService = jobPresetService;
    }
    async getEmployeePreset(employeeId) {
        return this.jobPresetService.getEmployeePreset(employeeId);
    }
    async getEmployeeCriterion(employeeId, request) {
        return this.jobPresetService.getEmployeeCriterion(Object.assign(Object.assign({}, request), { employeeId }));
    }
    async saveUpdateEmployeeCriterion(employeeId, request) {
        return this.jobPresetService.saveEmployeeCriterion(Object.assign(Object.assign({}, request), { employeeId }));
    }
    async saveEmployeePreset(request) {
        return this.jobPresetService.saveEmployeePreset(request);
    }
    async deleteEmployeeCriterion(criterionId, employeeId) {
        return this.jobPresetService.deleteEmployeeCriterion(criterionId, employeeId);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Save Employee preset' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee job preset',
        type: job_preset_entity_1.JobPreset
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(':employeeId'),
    tslib_1.__param(0, common_1.Param('employeeId')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", Promise)
], EmployeePresetController.prototype, "getEmployeePreset", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all employee job posts' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee job preset',
        type: job_preset_entity_1.JobPreset
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(':employeeId/criterion'),
    tslib_1.__param(0, common_1.Param('employeeId')),
    tslib_1.__param(1, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_a = typeof models_1.IGetMatchingCriterions !== "undefined" && models_1.IGetMatchingCriterions) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], EmployeePresetController.prototype, "getEmployeeCriterion", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all employee job posts' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee job preset',
        type: job_preset_entity_1.JobPreset
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Post(':employeeId/criterion'),
    tslib_1.__param(0, common_1.Param('employeeId')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_b = typeof models_1.IMatchingCriterions !== "undefined" && models_1.IMatchingCriterions) === "function" ? _b : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], EmployeePresetController.prototype, "saveUpdateEmployeeCriterion", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Save Employee preset' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee job preset',
        type: job_preset_entity_1.JobPreset
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.IEmployeePresetInput !== "undefined" && models_1.IEmployeePresetInput) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], EmployeePresetController.prototype, "saveEmployeePreset", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all employee job posts' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee job preset',
        type: job_preset_entity_1.JobPreset
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Delete(':employeeId/criterion/:criterionId'),
    tslib_1.__param(0, common_1.Param('criterionId')),
    tslib_1.__param(1, common_1.Param('employeeId')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, String]),
    tslib_1.__metadata("design:returntype", Promise)
], EmployeePresetController.prototype, "deleteEmployeeCriterion", null);
EmployeePresetController = tslib_1.__decorate([
    swagger_1.ApiTags('EmployeeJobPreset'),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Controller('employee'),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof job_preset_service_1.JobPresetService !== "undefined" && job_preset_service_1.JobPresetService) === "function" ? _d : Object])
], EmployeePresetController);
exports.EmployeePresetController = EmployeePresetController;


/***/ }),

/***/ "./src/app/employee-job-preset/employee-upwork-jobs-search-criterion.entity.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/employee-job-preset/employee-upwork-jobs-search-criterion.entity.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeUpworkJobsSearchCriterion = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
const job_preset_entity_1 = __webpack_require__(/*! ./job-preset.entity */ "./src/app/employee-job-preset/job-preset.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const job_search_occupation_entity_1 = __webpack_require__(/*! ./job-search-occupation/job-search-occupation.entity */ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.entity.ts");
const job_search_category_entity_1 = __webpack_require__(/*! ./job-search-category/job-search-category.entity */ "./src/app/employee-job-preset/job-search-category/job-search-category.entity.ts");
let EmployeeUpworkJobsSearchCriterion = class EmployeeUpworkJobsSearchCriterion extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EmployeeUpworkJobsSearchCriterion.prototype, "jobPresetId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => job_preset_entity_1.JobPreset, (jobPreset) => jobPreset.employeeCriterions),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IJobPreset !== "undefined" && models_1.IJobPreset) === "function" ? _a : Object)
], EmployeeUpworkJobsSearchCriterion.prototype, "jobPreset", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EmployeeUpworkJobsSearchCriterion.prototype, "employeeId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => employee_entity_1.Employee, (employee) => employee.id),
    tslib_1.__metadata("design:type", typeof (_b = typeof models_1.IEmployee !== "undefined" && models_1.IEmployee) === "function" ? _b : Object)
], EmployeeUpworkJobsSearchCriterion.prototype, "employee", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EmployeeUpworkJobsSearchCriterion.prototype, "occupationId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => job_search_occupation_entity_1.JobSearchOccupation, (occupation) => occupation.employeeCriterions),
    tslib_1.__metadata("design:type", typeof (_c = typeof models_1.IJobSearchOccupation !== "undefined" && models_1.IJobSearchOccupation) === "function" ? _c : Object)
], EmployeeUpworkJobsSearchCriterion.prototype, "occupation", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EmployeeUpworkJobsSearchCriterion.prototype, "categoryId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => job_search_category_entity_1.JobSearchCategory, (category) => category.employeeCriterions),
    tslib_1.__metadata("design:type", typeof (_d = typeof models_1.IJobSearchCategory !== "undefined" && models_1.IJobSearchCategory) === "function" ? _d : Object)
], EmployeeUpworkJobsSearchCriterion.prototype, "category", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EmployeeUpworkJobsSearchCriterion.prototype, "keyword", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ type: 'text', nullable: true }),
    tslib_1.__metadata("design:type", typeof (_e = typeof models_1.JobPostTypeEnum !== "undefined" && models_1.JobPostTypeEnum) === "function" ? _e : Object)
], EmployeeUpworkJobsSearchCriterion.prototype, "jobType", void 0);
EmployeeUpworkJobsSearchCriterion = tslib_1.__decorate([
    typeorm_1.Entity('employee_upwork_job_search_criterion')
], EmployeeUpworkJobsSearchCriterion);
exports.EmployeeUpworkJobsSearchCriterion = EmployeeUpworkJobsSearchCriterion;


/***/ }),

/***/ "./src/app/employee-job-preset/job-preset-upwork-job-search-criterion.entity.ts":
/*!**************************************************************************************!*\
  !*** ./src/app/employee-job-preset/job-preset-upwork-job-search-criterion.entity.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobPresetUpworkJobSearchCriterion = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
const job_preset_entity_1 = __webpack_require__(/*! ./job-preset.entity */ "./src/app/employee-job-preset/job-preset.entity.ts");
const job_search_category_entity_1 = __webpack_require__(/*! ./job-search-category/job-search-category.entity */ "./src/app/employee-job-preset/job-search-category/job-search-category.entity.ts");
const job_search_occupation_entity_1 = __webpack_require__(/*! ./job-search-occupation/job-search-occupation.entity */ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.entity.ts");
let JobPresetUpworkJobSearchCriterion = class JobPresetUpworkJobSearchCriterion extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], JobPresetUpworkJobSearchCriterion.prototype, "jobPresetId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => job_preset_entity_1.JobPreset, (jobPreset) => jobPreset.jobPresetCriterions),
    tslib_1.__metadata("design:type", typeof (_a = typeof job_preset_entity_1.JobPreset !== "undefined" && job_preset_entity_1.JobPreset) === "function" ? _a : Object)
], JobPresetUpworkJobSearchCriterion.prototype, "jobPreset", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], JobPresetUpworkJobSearchCriterion.prototype, "occupationId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => job_search_occupation_entity_1.JobSearchOccupation, (occupation) => occupation.jobPresetCriterions),
    tslib_1.__metadata("design:type", typeof (_b = typeof job_search_occupation_entity_1.JobSearchOccupation !== "undefined" && job_search_occupation_entity_1.JobSearchOccupation) === "function" ? _b : Object)
], JobPresetUpworkJobSearchCriterion.prototype, "occupation", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], JobPresetUpworkJobSearchCriterion.prototype, "categoryId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => job_search_category_entity_1.JobSearchCategory, (category) => category.jobPresetCriterions),
    tslib_1.__metadata("design:type", typeof (_c = typeof job_search_category_entity_1.JobSearchCategory !== "undefined" && job_search_category_entity_1.JobSearchCategory) === "function" ? _c : Object)
], JobPresetUpworkJobSearchCriterion.prototype, "category", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], JobPresetUpworkJobSearchCriterion.prototype, "keyword", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ type: 'text', nullable: true }),
    tslib_1.__metadata("design:type", typeof (_d = typeof models_1.JobPostTypeEnum !== "undefined" && models_1.JobPostTypeEnum) === "function" ? _d : Object)
], JobPresetUpworkJobSearchCriterion.prototype, "jobType", void 0);
JobPresetUpworkJobSearchCriterion = tslib_1.__decorate([
    typeorm_1.Entity('job_preset_upwork_job_search_criterion')
], JobPresetUpworkJobSearchCriterion);
exports.JobPresetUpworkJobSearchCriterion = JobPresetUpworkJobSearchCriterion;


/***/ }),

/***/ "./src/app/employee-job-preset/job-preset.entity.ts":
/*!**********************************************************!*\
  !*** ./src/app/employee-job-preset/job-preset.entity.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.JobPreset = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const job_preset_upwork_job_search_criterion_entity_1 = __webpack_require__(/*! ./job-preset-upwork-job-search-criterion.entity */ "./src/app/employee-job-preset/job-preset-upwork-job-search-criterion.entity.ts");
const employee_upwork_jobs_search_criterion_entity_1 = __webpack_require__(/*! ./employee-upwork-jobs-search-criterion.entity */ "./src/app/employee-job-preset/employee-upwork-jobs-search-criterion.entity.ts");
let JobPreset = class JobPreset extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], JobPreset.prototype, "name", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany(() => employee_entity_1.Employee, (employee) => employee.jobPresets, {
        cascade: true
    }),
    typeorm_1.JoinTable({
        name: 'employee_job_preset'
    }),
    tslib_1.__metadata("design:type", Array)
], JobPreset.prototype, "employees", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany(() => employee_upwork_jobs_search_criterion_entity_1.EmployeeUpworkJobsSearchCriterion, (employeeUpworkJobsSearchCriterion) => employeeUpworkJobsSearchCriterion.jobPreset, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", Array)
], JobPreset.prototype, "employeeCriterions", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany(() => job_preset_upwork_job_search_criterion_entity_1.JobPresetUpworkJobSearchCriterion, (jobPresetUpworkJobSearchCriterion) => jobPresetUpworkJobSearchCriterion.jobPreset, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", Array)
], JobPreset.prototype, "jobPresetCriterions", void 0);
JobPreset = tslib_1.__decorate([
    typeorm_1.Entity('job_preset')
], JobPreset);
exports.JobPreset = JobPreset;


/***/ }),

/***/ "./src/app/employee-job-preset/job-preset.service.ts":
/*!***********************************************************!*\
  !*** ./src/app/employee-job-preset/job-preset.service.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobPresetService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const job_preset_entity_1 = __webpack_require__(/*! ./job-preset.entity */ "./src/app/employee-job-preset/job-preset.entity.ts");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const job_preset_upwork_job_search_criterion_entity_1 = __webpack_require__(/*! ./job-preset-upwork-job-search-criterion.entity */ "./src/app/employee-job-preset/job-preset-upwork-job-search-criterion.entity.ts");
const employee_upwork_jobs_search_criterion_entity_1 = __webpack_require__(/*! ./employee-upwork-jobs-search-criterion.entity */ "./src/app/employee-job-preset/employee-upwork-jobs-search-criterion.entity.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const create_job_preset_command_1 = __webpack_require__(/*! ./commands/create-job-preset.command */ "./src/app/employee-job-preset/commands/create-job-preset.command.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const save_preset_criterion_command_1 = __webpack_require__(/*! ./commands/save-preset-criterion.command */ "./src/app/employee-job-preset/commands/save-preset-criterion.command.ts");
const save_employee_preset_command_1 = __webpack_require__(/*! ./commands/save-employee-preset.command */ "./src/app/employee-job-preset/commands/save-employee-preset.command.ts");
const save_employee_criterion_command_1 = __webpack_require__(/*! ./commands/save-employee-criterion.command */ "./src/app/employee-job-preset/commands/save-employee-criterion.command.ts");
let JobPresetService = class JobPresetService extends crud_service_1.CrudService {
    constructor(commandBus, jobPresetRepository, jobPresetUpworkJobSearchCriterionRepository, employeeUpworkJobsSearchCriterionRepository, employeeRepository) {
        super(jobPresetRepository);
        this.commandBus = commandBus;
        this.jobPresetRepository = jobPresetRepository;
        this.jobPresetUpworkJobSearchCriterionRepository = jobPresetUpworkJobSearchCriterionRepository;
        this.employeeUpworkJobsSearchCriterionRepository = employeeUpworkJobsSearchCriterionRepository;
        this.employeeRepository = employeeRepository;
    }
    async getAll(request) {
        const data = await this.jobPresetRepository.find({
            join: {
                alias: 'job_preset',
                leftJoin: {
                    employees: 'job_preset.employees'
                }
            },
            relations: ['jobPresetCriterions'],
            order: {
                name: 'ASC'
            },
            where: (qb) => {
                if (request.search) {
                    qb.andWhere('name LIKE :search', {
                        search: request.search
                    });
                }
                if (request.organizationId) {
                    qb.andWhere(`"${qb.alias}"."organizationId" = :organizationId`, {
                        organizationId: request.organizationId
                    });
                }
                if (request.employeeId) {
                    qb.andWhere(`"employees"."id" = :employeeId`, {
                        employeeId: request.employeeId
                    });
                }
            }
        });
        return data;
    }
    async get(id, request) {
        const query = this.jobPresetRepository.createQueryBuilder();
        query.leftJoinAndSelect(`${query.alias}.jobPresetCriterions`, 'jobPresetCriterions');
        if (request.employeeId) {
            query.leftJoinAndSelect(`${query.alias}.employeeCriterions`, 'employeeCriterions', 'employeeCriterions.employeeId = :employeeId', { employeeId: request.employeeId });
        }
        query.andWhere(`${query.alias}.id = :id`, { id });
        return query.getOne();
    }
    getJobPresetCriterion(presetId) {
        return this.jobPresetUpworkJobSearchCriterionRepository.find({
            where: {
                presetId: presetId
            }
        });
    }
    getEmployeeCriterion(input) {
        return this.employeeUpworkJobsSearchCriterionRepository.find({
            where: Object.assign(Object.assign({}, (input.jobPresetId ? { presetId: input.jobPresetId } : {})), { employeeId: input.employeeId })
        });
    }
    async createJobPreset(request) {
        return this.commandBus.execute(new create_job_preset_command_1.CreateJobPresetCommand(request));
    }
    async saveJobPresetCriterion(request) {
        return this.commandBus.execute(new save_preset_criterion_command_1.SavePresetCriterionCommand(request));
    }
    async saveEmployeeCriterion(request) {
        return this.commandBus.execute(new save_employee_criterion_command_1.SaveEmployeeCriterionCommand(request));
    }
    async getEmployeePreset(employeeId) {
        const employee = await this.employeeRepository.findOne(employeeId, {
            relations: ['jobPresets']
        });
        return employee.jobPresets;
    }
    async saveEmployeePreset(request) {
        return this.commandBus.execute(new save_employee_preset_command_1.SaveEmployeePresetCommand(request));
    }
    deleteEmployeeCriterion(creationId, employeeId) {
        return this.employeeUpworkJobsSearchCriterionRepository.delete({
            id: creationId,
            employeeId: employeeId
        });
    }
    deleteJobPresetCriterion(creationId) {
        return this.jobPresetUpworkJobSearchCriterionRepository.delete(creationId);
    }
};
JobPresetService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(1, typeorm_1.InjectRepository(job_preset_entity_1.JobPreset)),
    tslib_1.__param(2, typeorm_1.InjectRepository(job_preset_upwork_job_search_criterion_entity_1.JobPresetUpworkJobSearchCriterion)),
    tslib_1.__param(3, typeorm_1.InjectRepository(employee_upwork_jobs_search_criterion_entity_1.EmployeeUpworkJobsSearchCriterion)),
    tslib_1.__param(4, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _d : Object, typeof (_e = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _e : Object])
], JobPresetService);
exports.JobPresetService = JobPresetService;


/***/ }),

/***/ "./src/app/employee-job-preset/job-search-category/job-search-category.controller.ts":
/*!*******************************************************************************************!*\
  !*** ./src/app/employee-job-preset/job-search-category/job-search-category.controller.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobSearchCategoryController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const crud_controller_1 = __webpack_require__(/*! ../../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const job_search_category_service_1 = __webpack_require__(/*! ./job-search-category.service */ "./src/app/employee-job-preset/job-search-category/job-search-category.service.ts");
let JobSearchCategoryController = class JobSearchCategoryController extends crud_controller_1.CrudController {
    constructor(categoryService) {
        super(categoryService);
    }
};
JobSearchCategoryController = tslib_1.__decorate([
    swagger_1.ApiTags('JobSearchCategory'),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Controller('job-search-category'),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof job_search_category_service_1.JobSearchCategoryService !== "undefined" && job_search_category_service_1.JobSearchCategoryService) === "function" ? _a : Object])
], JobSearchCategoryController);
exports.JobSearchCategoryController = JobSearchCategoryController;


/***/ }),

/***/ "./src/app/employee-job-preset/job-search-category/job-search-category.entity.ts":
/*!***************************************************************************************!*\
  !*** ./src/app/employee-job-preset/job-search-category/job-search-category.entity.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobSearchCategory = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
const job_preset_upwork_job_search_criterion_entity_1 = __webpack_require__(/*! ../job-preset-upwork-job-search-criterion.entity */ "./src/app/employee-job-preset/job-preset-upwork-job-search-criterion.entity.ts");
const employee_upwork_jobs_search_criterion_entity_1 = __webpack_require__(/*! ../employee-upwork-jobs-search-criterion.entity */ "./src/app/employee-job-preset/employee-upwork-jobs-search-criterion.entity.ts");
let JobSearchCategory = class JobSearchCategory extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], JobSearchCategory.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Index(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], JobSearchCategory.prototype, "jobSourceCategoryId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column({ type: 'text', default: models_1.JobPostSourceEnum.UPWORK }),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.JobPostSourceEnum !== "undefined" && models_1.JobPostSourceEnum) === "function" ? _a : Object)
], JobSearchCategory.prototype, "jobSource", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany(() => employee_upwork_jobs_search_criterion_entity_1.EmployeeUpworkJobsSearchCriterion, (employeeUpworkJobsSearchCriterion) => employeeUpworkJobsSearchCriterion.jobPreset, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", Array)
], JobSearchCategory.prototype, "employeeCriterions", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany(() => job_preset_upwork_job_search_criterion_entity_1.JobPresetUpworkJobSearchCriterion, (jobPresetUpworkJobSearchCriterion) => jobPresetUpworkJobSearchCriterion.jobPreset, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", Array)
], JobSearchCategory.prototype, "jobPresetCriterions", void 0);
JobSearchCategory = tslib_1.__decorate([
    typeorm_1.Entity('job_search_category')
], JobSearchCategory);
exports.JobSearchCategory = JobSearchCategory;


/***/ }),

/***/ "./src/app/employee-job-preset/job-search-category/job-search-category.seed.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/employee-job-preset/job-search-category/job-search-category.seed.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultJobSearchCategories = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const job_search_category_entity_1 = __webpack_require__(/*! ./job-search-category.entity */ "./src/app/employee-job-preset/job-search-category/job-search-category.entity.ts");
exports.createDefaultJobSearchCategories = async (connection, tenant, organization) => {
    const categories = [];
    const upworkCategories = [
        {
            name: 'IT & Networking',
            jobSourceCategoryId: '531770282580668419'
        },
        {
            name: 'Web, Mobile & Software Dev',
            jobSourceCategoryId: '531770282580668418'
        }
    ];
    upworkCategories.forEach((category) => {
        const cat = new job_search_category_entity_1.JobSearchCategory();
        cat.jobSource = models_1.JobPostSourceEnum.UPWORK;
        cat.organizationId = organization.id;
        cat.tenantId = tenant.id;
        cat.name = category.name;
        cat.jobSourceCategoryId = category.jobSourceCategoryId;
        categories.push(cat);
    });
    await insertCategories(connection, categories);
    return categories;
};
const insertCategories = async (connection, categories) => {
    await connection.manager.save(categories);
};


/***/ }),

/***/ "./src/app/employee-job-preset/job-search-category/job-search-category.service.ts":
/*!****************************************************************************************!*\
  !*** ./src/app/employee-job-preset/job-search-category/job-search-category.service.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobSearchCategoryService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const job_search_category_entity_1 = __webpack_require__(/*! ./job-search-category.entity */ "./src/app/employee-job-preset/job-search-category/job-search-category.entity.ts");
let JobSearchCategoryService = class JobSearchCategoryService extends crud_service_1.CrudService {
    constructor(categoryRepository) {
        super(categoryRepository);
    }
};
JobSearchCategoryService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(job_search_category_entity_1.JobSearchCategory)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], JobSearchCategoryService);
exports.JobSearchCategoryService = JobSearchCategoryService;


/***/ }),

/***/ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.controller.ts":
/*!***********************************************************************************************!*\
  !*** ./src/app/employee-job-preset/job-search-occupation/job-search-occupation.controller.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobSearchOccupationController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const job_search_occupation_service_1 = __webpack_require__(/*! ./job-search-occupation.service */ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.service.ts");
const crud_controller_1 = __webpack_require__(/*! ../../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
let JobSearchOccupationController = class JobSearchOccupationController extends crud_controller_1.CrudController {
    constructor(occupationService) {
        super(occupationService);
    }
};
JobSearchOccupationController = tslib_1.__decorate([
    swagger_1.ApiTags('JobSearchOccupation'),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Controller('job-search-occupation'),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof job_search_occupation_service_1.JobSearchOccupationService !== "undefined" && job_search_occupation_service_1.JobSearchOccupationService) === "function" ? _a : Object])
], JobSearchOccupationController);
exports.JobSearchOccupationController = JobSearchOccupationController;


/***/ }),

/***/ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.entity.ts":
/*!*******************************************************************************************!*\
  !*** ./src/app/employee-job-preset/job-search-occupation/job-search-occupation.entity.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobSearchOccupation = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
const job_preset_upwork_job_search_criterion_entity_1 = __webpack_require__(/*! ../job-preset-upwork-job-search-criterion.entity */ "./src/app/employee-job-preset/job-preset-upwork-job-search-criterion.entity.ts");
const employee_upwork_jobs_search_criterion_entity_1 = __webpack_require__(/*! ../employee-upwork-jobs-search-criterion.entity */ "./src/app/employee-job-preset/employee-upwork-jobs-search-criterion.entity.ts");
let JobSearchOccupation = class JobSearchOccupation extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], JobSearchOccupation.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Index(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], JobSearchOccupation.prototype, "jobSourceOccupationId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column({ type: 'text', default: models_1.JobPostSourceEnum.UPWORK }),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.JobPostSourceEnum !== "undefined" && models_1.JobPostSourceEnum) === "function" ? _a : Object)
], JobSearchOccupation.prototype, "jobSource", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany(() => employee_upwork_jobs_search_criterion_entity_1.EmployeeUpworkJobsSearchCriterion, (employeeUpworkJobsSearchCriterion) => employeeUpworkJobsSearchCriterion.jobPreset, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", Array)
], JobSearchOccupation.prototype, "employeeCriterions", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany(() => job_preset_upwork_job_search_criterion_entity_1.JobPresetUpworkJobSearchCriterion, (jobPresetUpworkJobSearchCriterion) => jobPresetUpworkJobSearchCriterion.jobPreset, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", Array)
], JobSearchOccupation.prototype, "jobPresetCriterions", void 0);
JobSearchOccupation = tslib_1.__decorate([
    typeorm_1.Entity('job_search_occupation')
], JobSearchOccupation);
exports.JobSearchOccupation = JobSearchOccupation;


/***/ }),

/***/ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.seed.ts":
/*!*****************************************************************************************!*\
  !*** ./src/app/employee-job-preset/job-search-occupation/job-search-occupation.seed.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultJobSearchOccupations = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const job_search_occupation_entity_1 = __webpack_require__(/*! ./job-search-occupation.entity */ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.entity.ts");
exports.createDefaultJobSearchOccupations = async (connection, tenant, organization) => {
    const occupations = [];
    const upworkOccupations = [
        {
            name: 'DevOps Engineering',
            jobSourceOccupationId: '1110580753140797440'
        },
        {
            name: 'Project Management',
            jobSourceOccupationId: '1017484851352698979'
        }
    ];
    upworkOccupations.forEach((occupation) => {
        const occ = new job_search_occupation_entity_1.JobSearchOccupation();
        occ.jobSource = models_1.JobPostSourceEnum.UPWORK;
        occ.organizationId = organization.id;
        occ.tenantId = tenant.id;
        occ.name = occupation.name;
        occ.jobSourceOccupationId = occupation.jobSourceOccupationId;
        occupations.push(occ);
    });
    await insertOccupations(connection, occupations);
    return occupations;
};
const insertOccupations = async (connection, occupations) => {
    await connection.manager.save(occupations);
};


/***/ }),

/***/ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.service.ts":
/*!********************************************************************************************!*\
  !*** ./src/app/employee-job-preset/job-search-occupation/job-search-occupation.service.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobSearchOccupationService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const job_search_occupation_entity_1 = __webpack_require__(/*! ./job-search-occupation.entity */ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.entity.ts");
let JobSearchOccupationService = class JobSearchOccupationService extends crud_service_1.CrudService {
    constructor(candidateSourceRepository) {
        super(candidateSourceRepository);
    }
};
JobSearchOccupationService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(job_search_occupation_entity_1.JobSearchOccupation)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], JobSearchOccupationService);
exports.JobSearchOccupationService = JobSearchOccupationService;


/***/ }),

/***/ "./src/app/employee-job-preset/job-search-preset.controller.ts":
/*!*********************************************************************!*\
  !*** ./src/app/employee-job-preset/job-search-preset.controller.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobSearchPresetController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const job_preset_service_1 = __webpack_require__(/*! ./job-preset.service */ "./src/app/employee-job-preset/job-preset.service.ts");
const job_preset_entity_1 = __webpack_require__(/*! ./job-preset.entity */ "./src/app/employee-job-preset/job-preset.entity.ts");
const job_preset_upwork_job_search_criterion_entity_1 = __webpack_require__(/*! ./job-preset-upwork-job-search-criterion.entity */ "./src/app/employee-job-preset/job-preset-upwork-job-search-criterion.entity.ts");
const employee_upwork_jobs_search_criterion_entity_1 = __webpack_require__(/*! ./employee-upwork-jobs-search-criterion.entity */ "./src/app/employee-job-preset/employee-upwork-jobs-search-criterion.entity.ts");
const integration_ai_1 = __webpack_require__(/*! @gauzy/integration-ai */ "./libs/integration-ai/src/index.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
let JobSearchPresetController = class JobSearchPresetController {
    constructor(jobPresetService, employeeService, gauzyAIService) {
        this.jobPresetService = jobPresetService;
        this.employeeService = employeeService;
        this.gauzyAIService = gauzyAIService;
    }
    async getAll(data) {
        console.log('GetAll Presets called. We will sync all employees now');
        const employees = await this.employeeService.findAllActive();
        await this.gauzyAIService.syncEmployees(employees);
        return this.jobPresetService.getAll(data);
    }
    async get(presetId, request) {
        return this.jobPresetService.get(presetId, request);
    }
    async getJobPresetCriterion(presetId) {
        return this.jobPresetService.getJobPresetCriterion(presetId);
    }
    async createJobPreset(request) {
        return this.jobPresetService.createJobPreset(request);
    }
    async saveUpdate(jobPresetId, request) {
        return this.jobPresetService.saveJobPresetCriterion(Object.assign(Object.assign({}, request), { jobPresetId }));
    }
    async deleteJobPresetCriterion(creationId) {
        return this.jobPresetService.deleteJobPresetCriterion(creationId);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all employee job posts' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee job preset',
        type: job_preset_entity_1.JobPreset
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.IGetJobPresetInput !== "undefined" && models_1.IGetJobPresetInput) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], JobSearchPresetController.prototype, "getAll", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all employee job posts' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee job preset',
        type: job_preset_entity_1.JobPreset
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_b = typeof models_1.IGetJobPresetCriterionInput !== "undefined" && models_1.IGetJobPresetCriterionInput) === "function" ? _b : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], JobSearchPresetController.prototype, "get", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all employee job posts' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee job preset',
        type: job_preset_upwork_job_search_criterion_entity_1.JobPresetUpworkJobSearchCriterion
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(':id/criterion'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", Promise)
], JobSearchPresetController.prototype, "getJobPresetCriterion", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all employee job posts' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee job preset',
        type: employee_upwork_jobs_search_criterion_entity_1.EmployeeUpworkJobsSearchCriterion
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.IJobPreset !== "undefined" && models_1.IJobPreset) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], JobSearchPresetController.prototype, "createJobPreset", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all employee job posts' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee job preset',
        type: job_preset_entity_1.JobPreset
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Post(':jobPresetId/criterion'),
    tslib_1.__param(0, common_1.Param('jobPresetId')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_d = typeof models_1.IMatchingCriterions !== "undefined" && models_1.IMatchingCriterions) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], JobSearchPresetController.prototype, "saveUpdate", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all employee job posts' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee job preset',
        type: job_preset_entity_1.JobPreset
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Delete('criterion/:criterionId'),
    tslib_1.__param(0, common_1.Param('criterionId')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", Promise)
], JobSearchPresetController.prototype, "deleteJobPresetCriterion", null);
JobSearchPresetController = tslib_1.__decorate([
    swagger_1.ApiTags('JobSearchPreset'),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof job_preset_service_1.JobPresetService !== "undefined" && job_preset_service_1.JobPresetService) === "function" ? _e : Object, typeof (_f = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _f : Object, typeof (_g = typeof integration_ai_1.GauzyAIService !== "undefined" && integration_ai_1.GauzyAIService) === "function" ? _g : Object])
], JobSearchPresetController);
exports.JobSearchPresetController = JobSearchPresetController;


/***/ }),

/***/ "./src/app/employee-job/employee-job.controller.ts":
/*!*********************************************************!*\
  !*** ./src/app/employee-job/employee-job.controller.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeJobPostController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const employee_job_service_1 = __webpack_require__(/*! ./employee-job.service */ "./src/app/employee-job/employee-job.service.ts");
const employee_job_entity_1 = __webpack_require__(/*! ./employee-job.entity */ "./src/app/employee-job/employee-job.entity.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
let EmployeeJobPostController = class EmployeeJobPostController {
    constructor(employeeJobPostService) {
        this.employeeJobPostService = employeeJobPostService;
    }
    async findAllEmployeesJobs(data) {
        return this.employeeJobPostService.findAll(data);
    }
    async updateApplied(data) {
        return this.employeeJobPostService.updateApplied(data);
    }
    async updateVisibility(data) {
        return this.employeeJobPostService.updateVisibility(data);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all employee job posts' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee job posts',
        type: employee_job_entity_1.EmployeeJobPost
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.IGetEmployeeJobPostInput !== "undefined" && models_1.IGetEmployeeJobPostInput) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], EmployeeJobPostController.prototype, "findAllEmployeesJobs", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Apply on job' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee job posts',
        type: employee_job_entity_1.EmployeeJobPost
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Post('applied'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.IApplyJobPostInput !== "undefined" && models_1.IApplyJobPostInput) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], EmployeeJobPostController.prototype, "updateApplied", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Hide job' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee job posts',
        type: employee_job_entity_1.EmployeeJobPost
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Post('hide'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof models_1.IVisibilityJobPostInput !== "undefined" && models_1.IVisibilityJobPostInput) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], EmployeeJobPostController.prototype, "updateVisibility", null);
EmployeeJobPostController = tslib_1.__decorate([
    swagger_1.ApiTags('EmployeeJobPost'),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof employee_job_service_1.EmployeeJobPostService !== "undefined" && employee_job_service_1.EmployeeJobPostService) === "function" ? _e : Object])
], EmployeeJobPostController);
exports.EmployeeJobPostController = EmployeeJobPostController;


/***/ }),

/***/ "./src/app/employee-job/employee-job.entity.ts":
/*!*****************************************************!*\
  !*** ./src/app/employee-job/employee-job.entity.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeJobPost = void 0;
const base_1 = __webpack_require__(/*! ../core/entities/base */ "./src/app/core/entities/base.ts");
class EmployeeJobPost extends base_1.Model {
}
exports.EmployeeJobPost = EmployeeJobPost;


/***/ }),

/***/ "./src/app/employee-job/employee-job.module.ts":
/*!*****************************************************!*\
  !*** ./src/app/employee-job/employee-job.module.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeJobPostModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const employee_job_service_1 = __webpack_require__(/*! ./employee-job.service */ "./src/app/employee-job/employee-job.service.ts");
const employee_job_controller_1 = __webpack_require__(/*! ./employee-job.controller */ "./src/app/employee-job/employee-job.controller.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const integration_ai_1 = __webpack_require__(/*! @gauzy/integration-ai */ "./libs/integration-ai/src/index.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
let EmployeeJobPostModule = class EmployeeJobPostModule {
};
EmployeeJobPostModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([employee_entity_1.Employee])],
        controllers: [employee_job_controller_1.EmployeeJobPostController],
        providers: [employee_job_service_1.EmployeeJobPostService, employee_service_1.EmployeeService, integration_ai_1.GauzyAIService],
        exports: [employee_job_service_1.EmployeeJobPostService]
    })
], EmployeeJobPostModule);
exports.EmployeeJobPostModule = EmployeeJobPostModule;


/***/ }),

/***/ "./src/app/employee-job/employee-job.seed.ts":
/*!***************************************************!*\
  !*** ./src/app/employee-job/employee-job.seed.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getRandomEmployeeJobPosts = void 0;
const employee_job_entity_1 = __webpack_require__(/*! ./employee-job.entity */ "./src/app/employee-job/employee-job.entity.ts");
const jobPost_entity_1 = __webpack_require__(/*! ./jobPost.entity */ "./src/app/employee-job/jobPost.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const country_1 = __webpack_require__(/*! ../country */ "./src/app/country/index.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
exports.getRandomEmployeeJobPosts = async (employees, page = 0, limit = 10) => {
    const countries = await typeorm_1.getConnection().manager.find(country_1.Country);
    const employeesJobs = [];
    for (let i = 0; i < limit; i++) {
        const employee = faker.random.arrayElement(employees);
        const jobPostEmployee = new employee_job_entity_1.EmployeeJobPost({
            employeeId: employee ? employee.id : null,
            employee: employee
        });
        const job = new jobPost_entity_1.JobPost({
            country: faker.random.arrayElement(countries).isoCode,
            category: faker.name.jobTitle(),
            title: faker.lorem.sentence(),
            description: faker.lorem.sentences(3),
            jobDateCreated: faker.date.past(0.1),
            jobStatus: faker.random.arrayElement(Object.values(models_1.JobPostStatusEnum)),
            jobSource: faker.random.arrayElement(Object.values(models_1.JobPostSourceEnum)),
            jobType: faker.random.arrayElement(Object.values(models_1.JobPostTypeEnum))
        });
        jobPostEmployee.jobPost = job;
        employeesJobs.push(jobPostEmployee);
    }
    return {
        items: employeesJobs,
        total: 100
    };
};


/***/ }),

/***/ "./src/app/employee-job/employee-job.service.ts":
/*!******************************************************!*\
  !*** ./src/app/employee-job/employee-job.service.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeJobPostService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const employee_job_seed_1 = __webpack_require__(/*! ./employee-job.seed */ "./src/app/employee-job/employee-job.seed.ts");
const integration_ai_1 = __webpack_require__(/*! @gauzy/integration-ai */ "./libs/integration-ai/src/index.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
let EmployeeJobPostService = class EmployeeJobPostService {
    constructor(employeeService, gauzyAIService) {
        this.employeeService = employeeService;
        this.gauzyAIService = gauzyAIService;
    }
    async updateVisibility(input) {
        return await this.gauzyAIService.updateVisibility(input);
    }
    async updateApplied(input) {
        return await this.gauzyAIService.updateApplied(input);
    }
    async findAll(data) {
        const employees = await this.employeeService.findAllActive();
        let jobs;
        if (environment_1.environment.gauzyAIGraphQLEndpoint) {
            const result = await this.gauzyAIService.getEmployeesJobPosts(data);
            if (result === null) {
                if (environment_1.environment.production) {
                    jobs = {
                        items: [],
                        total: 0
                    };
                }
                else {
                    jobs = await employee_job_seed_1.getRandomEmployeeJobPosts(employees, data.page, data.limit);
                }
            }
            else {
                const jobsConverted = result.items.map((jo) => {
                    if (jo.employeeId) {
                        const employee = employees.find((emp) => emp.id === jo.employeeId);
                        jo.employee = employee;
                    }
                    return jo;
                });
                jobs = {
                    items: jobsConverted,
                    total: result.total
                };
            }
        }
        else {
            if (environment_1.environment.production === false) {
                jobs = await employee_job_seed_1.getRandomEmployeeJobPosts(employees, data.page, data.limit);
            }
            else {
                jobs = {
                    items: [],
                    total: 0
                };
            }
        }
        return jobs;
    }
};
EmployeeJobPostService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _a : Object, typeof (_b = typeof integration_ai_1.GauzyAIService !== "undefined" && integration_ai_1.GauzyAIService) === "function" ? _b : Object])
], EmployeeJobPostService);
exports.EmployeeJobPostService = EmployeeJobPostService;


/***/ }),

/***/ "./src/app/employee-job/index.ts":
/*!***************************************!*\
  !*** ./src/app/employee-job/index.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeJobPostService = exports.EmployeeJobPost = exports.EmployeeJobPostModule = void 0;
var employee_job_module_1 = __webpack_require__(/*! ./employee-job.module */ "./src/app/employee-job/employee-job.module.ts");
Object.defineProperty(exports, "EmployeeJobPostModule", { enumerable: true, get: function () { return employee_job_module_1.EmployeeJobPostModule; } });
var employee_job_entity_1 = __webpack_require__(/*! ./employee-job.entity */ "./src/app/employee-job/employee-job.entity.ts");
Object.defineProperty(exports, "EmployeeJobPost", { enumerable: true, get: function () { return employee_job_entity_1.EmployeeJobPost; } });
var employee_job_service_1 = __webpack_require__(/*! ./employee-job.service */ "./src/app/employee-job/employee-job.service.ts");
Object.defineProperty(exports, "EmployeeJobPostService", { enumerable: true, get: function () { return employee_job_service_1.EmployeeJobPostService; } });


/***/ }),

/***/ "./src/app/employee-job/jobPost.entity.ts":
/*!************************************************!*\
  !*** ./src/app/employee-job/jobPost.entity.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.JobPost = void 0;
const base_1 = __webpack_require__(/*! ../core/entities/base */ "./src/app/core/entities/base.ts");
class JobPost extends base_1.Model {
}
exports.JobPost = JobPost;


/***/ }),

/***/ "./src/app/employee-proposal-template/employee-proposal-template.controller.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/employee-proposal-template/employee-proposal-template.controller.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeProposalTemplateController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const employee_proposal_template_service_1 = __webpack_require__(/*! ./employee-proposal-template.service */ "./src/app/employee-proposal-template/employee-proposal-template.service.ts");
let EmployeeProposalTemplateController = class EmployeeProposalTemplateController extends core_1.CrudController {
    constructor(employeeProposalTemplateService) {
        super(employeeProposalTemplateService);
        this.employeeProposalTemplateService = employeeProposalTemplateService;
    }
    async getAll(filter) {
        return this.employeeProposalTemplateService.findAll(filter);
    }
    async makeDefault(employeeProposalTemplate) {
        return this.employeeProposalTemplateService.makeDefault(employeeProposalTemplate);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'find all' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found records'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.FindManyOptions !== "undefined" && typeorm_1.FindManyOptions) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], EmployeeProposalTemplateController.prototype, "getAll", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Make Default' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Record Updated'
    }),
    common_1.Post(':id/make-default'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], EmployeeProposalTemplateController.prototype, "makeDefault", null);
EmployeeProposalTemplateController = tslib_1.__decorate([
    common_1.Controller('employee-proposal-template'),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof employee_proposal_template_service_1.EmployeeProposalTemplateService !== "undefined" && employee_proposal_template_service_1.EmployeeProposalTemplateService) === "function" ? _d : Object])
], EmployeeProposalTemplateController);
exports.EmployeeProposalTemplateController = EmployeeProposalTemplateController;


/***/ }),

/***/ "./src/app/employee-proposal-template/employee-proposal-template.entity.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/employee-proposal-template/employee-proposal-template.entity.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeProposalTemplate = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
let EmployeeProposalTemplate = class EmployeeProposalTemplate extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EmployeeProposalTemplate.prototype, "employeeId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => employee_entity_1.Employee, (employee) => employee.id),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IEmployee !== "undefined" && models_1.IEmployee) === "function" ? _a : Object)
], EmployeeProposalTemplate.prototype, "employee", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EmployeeProposalTemplate.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EmployeeProposalTemplate.prototype, "content", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], EmployeeProposalTemplate.prototype, "isDefault", void 0);
EmployeeProposalTemplate = tslib_1.__decorate([
    typeorm_1.Entity('employee_proposal_template')
], EmployeeProposalTemplate);
exports.EmployeeProposalTemplate = EmployeeProposalTemplate;


/***/ }),

/***/ "./src/app/employee-proposal-template/employee-proposal-template.module.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/employee-proposal-template/employee-proposal-template.module.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeProposalTemplateModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const employee_proposal_template_controller_1 = __webpack_require__(/*! ./employee-proposal-template.controller */ "./src/app/employee-proposal-template/employee-proposal-template.controller.ts");
const employee_proposal_template_entity_1 = __webpack_require__(/*! ./employee-proposal-template.entity */ "./src/app/employee-proposal-template/employee-proposal-template.entity.ts");
const employee_proposal_template_service_1 = __webpack_require__(/*! ./employee-proposal-template.service */ "./src/app/employee-proposal-template/employee-proposal-template.service.ts");
let EmployeeProposalTemplateModule = class EmployeeProposalTemplateModule {
};
EmployeeProposalTemplateModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([employee_proposal_template_entity_1.EmployeeProposalTemplate]), cqrs_1.CqrsModule],
        controllers: [employee_proposal_template_controller_1.EmployeeProposalTemplateController],
        providers: [employee_proposal_template_service_1.EmployeeProposalTemplateService]
    })
], EmployeeProposalTemplateModule);
exports.EmployeeProposalTemplateModule = EmployeeProposalTemplateModule;


/***/ }),

/***/ "./src/app/employee-proposal-template/employee-proposal-template.service.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/employee-proposal-template/employee-proposal-template.service.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeProposalTemplateService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const employee_proposal_template_entity_1 = __webpack_require__(/*! ./employee-proposal-template.entity */ "./src/app/employee-proposal-template/employee-proposal-template.entity.ts");
let EmployeeProposalTemplateService = class EmployeeProposalTemplateService extends core_1.CrudService {
    constructor(employeeProposalTemplateRepository) {
        super(employeeProposalTemplateRepository);
        this.employeeProposalTemplateRepository = employeeProposalTemplateRepository;
    }
    async makeDefault(id) {
        const proposalTemplate = await this.employeeProposalTemplateRepository.findOne(id);
        proposalTemplate.isDefault = true;
        await this.employeeProposalTemplateRepository.update({
            employeeId: proposalTemplate.employeeId
        }, {
            isDefault: false
        });
        await this.employeeProposalTemplateRepository.save(proposalTemplate);
        return proposalTemplate;
    }
};
EmployeeProposalTemplateService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(employee_proposal_template_entity_1.EmployeeProposalTemplate)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], EmployeeProposalTemplateService);
exports.EmployeeProposalTemplateService = EmployeeProposalTemplateService;


/***/ }),

/***/ "./src/app/employee-recurring-expense/commands/employee-recurring-expense.create.command.ts":
/*!**************************************************************************************************!*\
  !*** ./src/app/employee-recurring-expense/commands/employee-recurring-expense.create.command.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeRecurringExpenseCreateCommand = void 0;
class EmployeeRecurringExpenseCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.EmployeeRecurringExpenseCreateCommand = EmployeeRecurringExpenseCreateCommand;
EmployeeRecurringExpenseCreateCommand.type = '[EmployeeRecurringExpense] Create';


/***/ }),

/***/ "./src/app/employee-recurring-expense/commands/employee-recurring-expense.delete.command.ts":
/*!**************************************************************************************************!*\
  !*** ./src/app/employee-recurring-expense/commands/employee-recurring-expense.delete.command.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeRecurringExpenseDeleteCommand = void 0;
class EmployeeRecurringExpenseDeleteCommand {
    constructor(id, deleteInput) {
        this.id = id;
        this.deleteInput = deleteInput;
    }
}
exports.EmployeeRecurringExpenseDeleteCommand = EmployeeRecurringExpenseDeleteCommand;
EmployeeRecurringExpenseDeleteCommand.type = '[EmployeeRecurringExpense] Delete';


/***/ }),

/***/ "./src/app/employee-recurring-expense/commands/employee-recurring-expense.edit.command.ts":
/*!************************************************************************************************!*\
  !*** ./src/app/employee-recurring-expense/commands/employee-recurring-expense.edit.command.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeRecurringExpenseEditCommand = void 0;
class EmployeeRecurringExpenseEditCommand {
    constructor(id, input) {
        this.id = id;
        this.input = input;
    }
}
exports.EmployeeRecurringExpenseEditCommand = EmployeeRecurringExpenseEditCommand;
EmployeeRecurringExpenseEditCommand.type = '[EmployeeRecurringExpense] Edit';


/***/ }),

/***/ "./src/app/employee-recurring-expense/commands/handlers/employee-recurring-expense.create.handler.ts":
/*!***********************************************************************************************************!*\
  !*** ./src/app/employee-recurring-expense/commands/handlers/employee-recurring-expense.create.handler.ts ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeRecurringExpenseCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_recurring_expense_service_1 = __webpack_require__(/*! ../../employee-recurring-expense.service */ "./src/app/employee-recurring-expense/employee-recurring-expense.service.ts");
const employee_recurring_expense_create_command_1 = __webpack_require__(/*! ../employee-recurring-expense.create.command */ "./src/app/employee-recurring-expense/commands/employee-recurring-expense.create.command.ts");
let EmployeeRecurringExpenseCreateHandler = class EmployeeRecurringExpenseCreateHandler {
    constructor(employeeRecurringExpenseService) {
        this.employeeRecurringExpenseService = employeeRecurringExpenseService;
    }
    async execute(command) {
        const { input } = command;
        const createdExpense = await this.employeeRecurringExpenseService.create(input);
        await this.employeeRecurringExpenseService.update(createdExpense.id, {
            parentRecurringExpenseId: createdExpense.id
        });
        return Object.assign(Object.assign({}, createdExpense), { parentRecurringExpenseId: createdExpense.id });
    }
};
EmployeeRecurringExpenseCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(employee_recurring_expense_create_command_1.EmployeeRecurringExpenseCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof employee_recurring_expense_service_1.EmployeeRecurringExpenseService !== "undefined" && employee_recurring_expense_service_1.EmployeeRecurringExpenseService) === "function" ? _a : Object])
], EmployeeRecurringExpenseCreateHandler);
exports.EmployeeRecurringExpenseCreateHandler = EmployeeRecurringExpenseCreateHandler;


/***/ }),

/***/ "./src/app/employee-recurring-expense/commands/handlers/employee-recurring-expense.delete.handler.ts":
/*!***********************************************************************************************************!*\
  !*** ./src/app/employee-recurring-expense/commands/handlers/employee-recurring-expense.delete.handler.ts ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeRecurringExpenseDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const shared_1 = __webpack_require__(/*! ../../../shared */ "./src/app/shared/index.ts");
const employee_recurring_expense_service_1 = __webpack_require__(/*! ../../employee-recurring-expense.service */ "./src/app/employee-recurring-expense/employee-recurring-expense.service.ts");
const employee_recurring_expense_delete_command_1 = __webpack_require__(/*! ../employee-recurring-expense.delete.command */ "./src/app/employee-recurring-expense/commands/employee-recurring-expense.delete.command.ts");
let EmployeeRecurringExpenseDeleteHandler = class EmployeeRecurringExpenseDeleteHandler extends shared_1.RecurringExpenseDeleteHandler {
    constructor(employeeRecurringExpenseService) {
        super(employeeRecurringExpenseService);
        this.employeeRecurringExpenseService = employeeRecurringExpenseService;
    }
    async execute(command) {
        const { id, deleteInput } = command;
        return await this.executeCommand(id, deleteInput);
    }
};
EmployeeRecurringExpenseDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(employee_recurring_expense_delete_command_1.EmployeeRecurringExpenseDeleteCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof employee_recurring_expense_service_1.EmployeeRecurringExpenseService !== "undefined" && employee_recurring_expense_service_1.EmployeeRecurringExpenseService) === "function" ? _a : Object])
], EmployeeRecurringExpenseDeleteHandler);
exports.EmployeeRecurringExpenseDeleteHandler = EmployeeRecurringExpenseDeleteHandler;


/***/ }),

/***/ "./src/app/employee-recurring-expense/commands/handlers/employee-recurring-expense.edit.handler.ts":
/*!*********************************************************************************************************!*\
  !*** ./src/app/employee-recurring-expense/commands/handlers/employee-recurring-expense.edit.handler.ts ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeRecurringExpenseEditHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const shared_1 = __webpack_require__(/*! ../../../shared */ "./src/app/shared/index.ts");
const employee_recurring_expense_service_1 = __webpack_require__(/*! ../../employee-recurring-expense.service */ "./src/app/employee-recurring-expense/employee-recurring-expense.service.ts");
const employee_recurring_expense_update_type_query_1 = __webpack_require__(/*! ../../queries/employee-recurring-expense.update-type.query */ "./src/app/employee-recurring-expense/queries/employee-recurring-expense.update-type.query.ts");
const employee_recurring_expense_edit_command_1 = __webpack_require__(/*! ../employee-recurring-expense.edit.command */ "./src/app/employee-recurring-expense/commands/employee-recurring-expense.edit.command.ts");
let EmployeeRecurringExpenseEditHandler = class EmployeeRecurringExpenseEditHandler extends shared_1.RecurringExpenseEditHandler {
    constructor(employeeRecurringExpenseService, queryBus) {
        super(employeeRecurringExpenseService);
        this.employeeRecurringExpenseService = employeeRecurringExpenseService;
        this.queryBus = queryBus;
    }
    async execute(command) {
        const { id, input } = command;
        const updateType = await this.queryBus.execute(new employee_recurring_expense_update_type_query_1.EmployeeRecurringExpenseStartDateUpdateTypeQuery({
            newStartDate: new Date(input.startYear, input.startMonth, input.startDay),
            recurringExpenseId: id
        }));
        return await this.executeCommand(id, Object.assign(Object.assign({}, input), { startDateUpdateType: updateType.value }));
    }
};
EmployeeRecurringExpenseEditHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(employee_recurring_expense_edit_command_1.EmployeeRecurringExpenseEditCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof employee_recurring_expense_service_1.EmployeeRecurringExpenseService !== "undefined" && employee_recurring_expense_service_1.EmployeeRecurringExpenseService) === "function" ? _a : Object, typeof (_b = typeof cqrs_1.QueryBus !== "undefined" && cqrs_1.QueryBus) === "function" ? _b : Object])
], EmployeeRecurringExpenseEditHandler);
exports.EmployeeRecurringExpenseEditHandler = EmployeeRecurringExpenseEditHandler;


/***/ }),

/***/ "./src/app/employee-recurring-expense/commands/handlers/index.ts":
/*!***********************************************************************!*\
  !*** ./src/app/employee-recurring-expense/commands/handlers/index.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const employee_recurring_expense_delete_handler_1 = __webpack_require__(/*! ./employee-recurring-expense.delete.handler */ "./src/app/employee-recurring-expense/commands/handlers/employee-recurring-expense.delete.handler.ts");
const employee_recurring_expense_edit_handler_1 = __webpack_require__(/*! ./employee-recurring-expense.edit.handler */ "./src/app/employee-recurring-expense/commands/handlers/employee-recurring-expense.edit.handler.ts");
const employee_recurring_expense_create_handler_1 = __webpack_require__(/*! ./employee-recurring-expense.create.handler */ "./src/app/employee-recurring-expense/commands/handlers/employee-recurring-expense.create.handler.ts");
exports.CommandHandlers = [
    employee_recurring_expense_edit_handler_1.EmployeeRecurringExpenseEditHandler,
    employee_recurring_expense_delete_handler_1.EmployeeRecurringExpenseDeleteHandler,
    employee_recurring_expense_create_handler_1.EmployeeRecurringExpenseCreateHandler
];


/***/ }),

/***/ "./src/app/employee-recurring-expense/employee-recurring-expense.controller.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/employee-recurring-expense/employee-recurring-expense.controller.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeRecurringExpenseController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const parse_json_pipe_1 = __webpack_require__(/*! ../shared/pipes/parse-json.pipe */ "./src/app/shared/pipes/parse-json.pipe.ts");
const employee_recurring_expense_create_command_1 = __webpack_require__(/*! ./commands/employee-recurring-expense.create.command */ "./src/app/employee-recurring-expense/commands/employee-recurring-expense.create.command.ts");
const employee_recurring_expense_delete_command_1 = __webpack_require__(/*! ./commands/employee-recurring-expense.delete.command */ "./src/app/employee-recurring-expense/commands/employee-recurring-expense.delete.command.ts");
const employee_recurring_expense_edit_command_1 = __webpack_require__(/*! ./commands/employee-recurring-expense.edit.command */ "./src/app/employee-recurring-expense/commands/employee-recurring-expense.edit.command.ts");
const employee_recurring_expense_entity_1 = __webpack_require__(/*! ./employee-recurring-expense.entity */ "./src/app/employee-recurring-expense/employee-recurring-expense.entity.ts");
const employee_recurring_expense_service_1 = __webpack_require__(/*! ./employee-recurring-expense.service */ "./src/app/employee-recurring-expense/employee-recurring-expense.service.ts");
const employee_recurring_expense_by_month_query_1 = __webpack_require__(/*! ./queries/employee-recurring-expense.by-month.query */ "./src/app/employee-recurring-expense/queries/employee-recurring-expense.by-month.query.ts");
const employee_recurring_expense_update_type_query_1 = __webpack_require__(/*! ./queries/employee-recurring-expense.update-type.query */ "./src/app/employee-recurring-expense/queries/employee-recurring-expense.update-type.query.ts");
let EmployeeRecurringExpenseController = class EmployeeRecurringExpenseController extends crud_controller_1.CrudController {
    constructor(employeeRecurringExpenseService, queryBus, commandBus) {
        super(employeeRecurringExpenseService);
        this.employeeRecurringExpenseService = employeeRecurringExpenseService;
        this.queryBus = queryBus;
        this.commandBus = commandBus;
    }
    async create(entity) {
        return this.commandBus.execute(new employee_recurring_expense_create_command_1.EmployeeRecurringExpenseCreateCommand(entity));
    }
    async delete(id, data) {
        const { deleteInput } = JSON.parse(data);
        return this.commandBus.execute(new employee_recurring_expense_delete_command_1.EmployeeRecurringExpenseDeleteCommand(id, deleteInput));
    }
    async update(id, entity) {
        return this.commandBus.execute(new employee_recurring_expense_edit_command_1.EmployeeRecurringExpenseEditCommand(id, entity));
    }
    async findAllEmployees(data) {
        const { findInput, relations } = data;
        return this.queryBus.execute(new employee_recurring_expense_by_month_query_1.EmployeeRecurringExpenseByMonthQuery(findInput, relations));
    }
    async findAllRecurringExpenses(data) {
        const { findInput, order = {}, relations = [] } = data;
        return this.employeeRecurringExpenseService.findAll({
            where: findInput,
            order: order,
            relations
        });
    }
    async findStartDateUpdateType(data) {
        const { findInput } = JSON.parse(data);
        return this.queryBus.execute(new employee_recurring_expense_update_type_query_1.EmployeeRecurringExpenseStartDateUpdateTypeQuery(findInput));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new expense' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The expense has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.CREATED),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof employee_recurring_expense_entity_1.EmployeeRecurringExpense !== "undefined" && employee_recurring_expense_entity_1.EmployeeRecurringExpense) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], EmployeeRecurringExpenseController.prototype, "create", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Delete record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'The record has been successfully deleted'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_EMPLOYEES_EDIT),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, String]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], EmployeeRecurringExpenseController.prototype, "delete", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_d = typeof models_1.IRecurringExpenseEditInput !== "undefined" && models_1.IRecurringExpenseEditInput) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], EmployeeRecurringExpenseController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all employee recurring expense.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee recurring expense',
        type: employee_recurring_expense_entity_1.EmployeeRecurringExpense
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('/month'),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], EmployeeRecurringExpenseController.prototype, "findAllEmployees", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all employee recurring expenses.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee recurring expense',
        type: employee_recurring_expense_entity_1.EmployeeRecurringExpense
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], EmployeeRecurringExpenseController.prototype, "findAllRecurringExpenses", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find the start date update type for a recurring expense.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found start date update type'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('/date-update-type'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], EmployeeRecurringExpenseController.prototype, "findStartDateUpdateType", null);
EmployeeRecurringExpenseController = tslib_1.__decorate([
    swagger_1.ApiTags('EmployeeRecurringExpense'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_j = typeof employee_recurring_expense_service_1.EmployeeRecurringExpenseService !== "undefined" && employee_recurring_expense_service_1.EmployeeRecurringExpenseService) === "function" ? _j : Object, typeof (_k = typeof cqrs_1.QueryBus !== "undefined" && cqrs_1.QueryBus) === "function" ? _k : Object, typeof (_l = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _l : Object])
], EmployeeRecurringExpenseController);
exports.EmployeeRecurringExpenseController = EmployeeRecurringExpenseController;


/***/ }),

/***/ "./src/app/employee-recurring-expense/employee-recurring-expense.entity.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/employee-recurring-expense/employee-recurring-expense.entity.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeRecurringExpense = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let EmployeeRecurringExpense = class EmployeeRecurringExpense extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EmployeeRecurringExpense.prototype, "employeeId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number, minimum: 1, maximum: 31 }),
    class_validator_1.IsNumber(),
    class_validator_1.IsNotEmpty(),
    class_validator_1.Min(1),
    class_validator_1.Max(31),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], EmployeeRecurringExpense.prototype, "startDay", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number, minimum: 1, maximum: 12 }),
    class_validator_1.IsNumber(),
    class_validator_1.IsNotEmpty(),
    class_validator_1.Min(1),
    class_validator_1.Max(12),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], EmployeeRecurringExpense.prototype, "startMonth", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number, minimum: 1 }),
    class_validator_1.IsNumber(),
    class_validator_1.IsNotEmpty(),
    class_validator_1.Min(0),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], EmployeeRecurringExpense.prototype, "startYear", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    class_validator_1.IsDate(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", typeof (_a = typeof Date !== "undefined" && Date) === "function" ? _a : Object)
], EmployeeRecurringExpense.prototype, "startDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number, minimum: 1, maximum: 31 }),
    class_validator_1.IsNumber(),
    common_1.Optional(),
    class_validator_1.Min(1),
    class_validator_1.Max(31),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], EmployeeRecurringExpense.prototype, "endDay", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number, minimum: 1, maximum: 12 }),
    class_validator_1.IsNumber(),
    common_1.Optional(),
    class_validator_1.Min(1),
    class_validator_1.Max(12),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], EmployeeRecurringExpense.prototype, "endMonth", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number, minimum: 1 }),
    class_validator_1.IsNumber(),
    common_1.Optional(),
    class_validator_1.Min(0),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], EmployeeRecurringExpense.prototype, "endYear", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], EmployeeRecurringExpense.prototype, "endDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EmployeeRecurringExpense.prototype, "categoryName", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], EmployeeRecurringExpense.prototype, "value", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.CurrenciesEnum }),
    class_validator_1.IsEnum(models_1.CurrenciesEnum),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EmployeeRecurringExpense.prototype, "currency", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Index(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EmployeeRecurringExpense.prototype, "parentRecurringExpenseId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => employee_entity_1.Employee, (employee) => employee.id),
    tslib_1.__metadata("design:type", typeof (_c = typeof employee_entity_1.Employee !== "undefined" && employee_entity_1.Employee) === "function" ? _c : Object)
], EmployeeRecurringExpense.prototype, "employee", void 0);
EmployeeRecurringExpense = tslib_1.__decorate([
    typeorm_1.Entity('employee_recurring_expense')
], EmployeeRecurringExpense);
exports.EmployeeRecurringExpense = EmployeeRecurringExpense;


/***/ }),

/***/ "./src/app/employee-recurring-expense/employee-recurring-expense.module.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/employee-recurring-expense/employee-recurring-expense.module.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeRecurringExpenseModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/employee-recurring-expense/commands/handlers/index.ts");
const employee_recurring_expense_controller_1 = __webpack_require__(/*! ./employee-recurring-expense.controller */ "./src/app/employee-recurring-expense/employee-recurring-expense.controller.ts");
const employee_recurring_expense_entity_1 = __webpack_require__(/*! ./employee-recurring-expense.entity */ "./src/app/employee-recurring-expense/employee-recurring-expense.entity.ts");
const employee_recurring_expense_service_1 = __webpack_require__(/*! ./employee-recurring-expense.service */ "./src/app/employee-recurring-expense/employee-recurring-expense.service.ts");
const handlers_2 = __webpack_require__(/*! ./queries/handlers */ "./src/app/employee-recurring-expense/queries/handlers/index.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let EmployeeRecurringExpenseModule = class EmployeeRecurringExpenseModule {
};
EmployeeRecurringExpenseModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([employee_recurring_expense_entity_1.EmployeeRecurringExpense, user_entity_1.User]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [employee_recurring_expense_controller_1.EmployeeRecurringExpenseController],
        providers: [
            employee_recurring_expense_service_1.EmployeeRecurringExpenseService,
            ...handlers_2.QueryHandlers,
            user_service_1.UserService,
            ...handlers_1.CommandHandlers
        ],
        exports: [employee_recurring_expense_service_1.EmployeeRecurringExpenseService]
    })
], EmployeeRecurringExpenseModule);
exports.EmployeeRecurringExpenseModule = EmployeeRecurringExpenseModule;


/***/ }),

/***/ "./src/app/employee-recurring-expense/employee-recurring-expense.seed.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/employee-recurring-expense/employee-recurring-expense.seed.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomEmployeeRecurringExpense = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const employee_recurring_expense_entity_1 = __webpack_require__(/*! ./employee-recurring-expense.entity */ "./src/app/employee-recurring-expense/employee-recurring-expense.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const moment = __webpack_require__(/*! moment */ "moment");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
exports.createRandomEmployeeRecurringExpense = async (connection, tenants, tenantEmployeeMap) => {
    if (!tenantEmployeeMap) {
        console.warn('Warning: tenantCandidatesMap not found, Employee Recurring Expense  will not be created');
        return;
    }
    const employees = [];
    for (const tenant of tenants) {
        const organizations = await connection.manager.find(organization_entity_1.Organization, {
            where: [{ tenant: tenant }]
        });
        const tenantEmployees = tenantEmployeeMap.get(tenant);
        for (const [index, tenantEmployee] of tenantEmployees.entries()) {
            const employee = new employee_recurring_expense_entity_1.EmployeeRecurringExpense();
            employee.employeeId = tenantEmployee.id;
            const startDate = faker.date.past();
            employee.startDay = startDate.getDate();
            employee.startMonth = startDate.getMonth() + 1;
            employee.startYear = startDate.getFullYear();
            employee.startDate = startDate;
            if (index % 2 === 0) {
                const endDate = faker.date.between(new Date(startDate), moment(startDate).add(4, 'months').toDate());
                employee.endDay = endDate.getDate();
                employee.endMonth = endDate.getMonth();
                employee.endYear = endDate.getFullYear();
                employee.endDate = endDate;
            }
            employee.categoryName =
                models_1.RecurringExpenseDefaultCategoriesEnum.SALARY;
            employee.value = faker.random.number(999);
            employee.currency = environment_1.environment.defaultCurrency;
            employee.parentRecurringExpenseId = null;
            employee.employee = tenantEmployee;
            employee.tenant = tenant;
            employee.organization = faker.random.arrayElement(organizations);
            employees.push(employee);
        }
    }
    await insertRandomEmployeeRecurringExpense(connection, employees);
    return employees;
};
const insertRandomEmployeeRecurringExpense = async (connection, Employees) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(employee_recurring_expense_entity_1.EmployeeRecurringExpense)
        .values(Employees)
        .execute();
};


/***/ }),

/***/ "./src/app/employee-recurring-expense/employee-recurring-expense.service.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/employee-recurring-expense/employee-recurring-expense.service.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeRecurringExpenseService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
const employee_recurring_expense_entity_1 = __webpack_require__(/*! ./employee-recurring-expense.entity */ "./src/app/employee-recurring-expense/employee-recurring-expense.entity.ts");
let EmployeeRecurringExpenseService = class EmployeeRecurringExpenseService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(employeeRecurringExpense) {
        super(employeeRecurringExpense);
        this.employeeRecurringExpense = employeeRecurringExpense;
    }
};
EmployeeRecurringExpenseService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(employee_recurring_expense_entity_1.EmployeeRecurringExpense)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], EmployeeRecurringExpenseService);
exports.EmployeeRecurringExpenseService = EmployeeRecurringExpenseService;


/***/ }),

/***/ "./src/app/employee-recurring-expense/index.ts":
/*!*****************************************************!*\
  !*** ./src/app/employee-recurring-expense/index.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeRecurringExpenseService = exports.EmployeeRecurringExpense = exports.EmployeeRecurringExpenseModule = void 0;
var employee_recurring_expense_module_1 = __webpack_require__(/*! ./employee-recurring-expense.module */ "./src/app/employee-recurring-expense/employee-recurring-expense.module.ts");
Object.defineProperty(exports, "EmployeeRecurringExpenseModule", { enumerable: true, get: function () { return employee_recurring_expense_module_1.EmployeeRecurringExpenseModule; } });
var employee_recurring_expense_entity_1 = __webpack_require__(/*! ./employee-recurring-expense.entity */ "./src/app/employee-recurring-expense/employee-recurring-expense.entity.ts");
Object.defineProperty(exports, "EmployeeRecurringExpense", { enumerable: true, get: function () { return employee_recurring_expense_entity_1.EmployeeRecurringExpense; } });
var employee_recurring_expense_service_1 = __webpack_require__(/*! ./employee-recurring-expense.service */ "./src/app/employee-recurring-expense/employee-recurring-expense.service.ts");
Object.defineProperty(exports, "EmployeeRecurringExpenseService", { enumerable: true, get: function () { return employee_recurring_expense_service_1.EmployeeRecurringExpenseService; } });


/***/ }),

/***/ "./src/app/employee-recurring-expense/queries/employee-recurring-expense.by-month.query.ts":
/*!*************************************************************************************************!*\
  !*** ./src/app/employee-recurring-expense/queries/employee-recurring-expense.by-month.query.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeRecurringExpenseByMonthQuery = void 0;
class EmployeeRecurringExpenseByMonthQuery {
    constructor(input, relations) {
        this.input = input;
        this.relations = relations;
    }
}
exports.EmployeeRecurringExpenseByMonthQuery = EmployeeRecurringExpenseByMonthQuery;
EmployeeRecurringExpenseByMonthQuery.type = '[EmployeeRecurringExpense] By Month';


/***/ }),

/***/ "./src/app/employee-recurring-expense/queries/employee-recurring-expense.update-type.query.ts":
/*!****************************************************************************************************!*\
  !*** ./src/app/employee-recurring-expense/queries/employee-recurring-expense.update-type.query.ts ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeRecurringExpenseStartDateUpdateTypeQuery = void 0;
class EmployeeRecurringExpenseStartDateUpdateTypeQuery {
    constructor(input) {
        this.input = input;
    }
}
exports.EmployeeRecurringExpenseStartDateUpdateTypeQuery = EmployeeRecurringExpenseStartDateUpdateTypeQuery;
EmployeeRecurringExpenseStartDateUpdateTypeQuery.type = '[EmployeeRecurringExpense] Start Date Update Type';


/***/ }),

/***/ "./src/app/employee-recurring-expense/queries/handlers/employee-recurring-expense.by-month.handler.ts":
/*!************************************************************************************************************!*\
  !*** ./src/app/employee-recurring-expense/queries/handlers/employee-recurring-expense.by-month.handler.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeRecurringExpenseByMonthHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const shared_1 = __webpack_require__(/*! ../../../shared */ "./src/app/shared/index.ts");
const employee_recurring_expense_service_1 = __webpack_require__(/*! ../../employee-recurring-expense.service */ "./src/app/employee-recurring-expense/employee-recurring-expense.service.ts");
const employee_recurring_expense_by_month_query_1 = __webpack_require__(/*! ../employee-recurring-expense.by-month.query */ "./src/app/employee-recurring-expense/queries/employee-recurring-expense.by-month.query.ts");
let EmployeeRecurringExpenseByMonthHandler = class EmployeeRecurringExpenseByMonthHandler extends shared_1.FindRecurringExpenseByMonthHandler {
    constructor(employeeRecurringExpenseService) {
        super(employeeRecurringExpenseService);
        this.employeeRecurringExpenseService = employeeRecurringExpenseService;
    }
    async execute(command) {
        const { input, relations = [] } = command;
        return await this.executeCommand(input, relations);
    }
};
EmployeeRecurringExpenseByMonthHandler = tslib_1.__decorate([
    cqrs_1.QueryHandler(employee_recurring_expense_by_month_query_1.EmployeeRecurringExpenseByMonthQuery),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof employee_recurring_expense_service_1.EmployeeRecurringExpenseService !== "undefined" && employee_recurring_expense_service_1.EmployeeRecurringExpenseService) === "function" ? _a : Object])
], EmployeeRecurringExpenseByMonthHandler);
exports.EmployeeRecurringExpenseByMonthHandler = EmployeeRecurringExpenseByMonthHandler;


/***/ }),

/***/ "./src/app/employee-recurring-expense/queries/handlers/employee-recurring-expense.start-date-update-type.handler.ts":
/*!**************************************************************************************************************************!*\
  !*** ./src/app/employee-recurring-expense/queries/handlers/employee-recurring-expense.start-date-update-type.handler.ts ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeRecurringExpenseUpdateTypeHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const recurring_expense_find_update_type_handler_1 = __webpack_require__(/*! ../../../shared/handlers/recurring-expense.find-update-type.handler */ "./src/app/shared/handlers/recurring-expense.find-update-type.handler.ts");
const employee_recurring_expense_service_1 = __webpack_require__(/*! ../../employee-recurring-expense.service */ "./src/app/employee-recurring-expense/employee-recurring-expense.service.ts");
const employee_recurring_expense_update_type_query_1 = __webpack_require__(/*! ../employee-recurring-expense.update-type.query */ "./src/app/employee-recurring-expense/queries/employee-recurring-expense.update-type.query.ts");
let EmployeeRecurringExpenseUpdateTypeHandler = class EmployeeRecurringExpenseUpdateTypeHandler extends recurring_expense_find_update_type_handler_1.FindRecurringExpenseStartDateUpdateTypeHandler {
    constructor(employeeRecurringExpenseService) {
        super(employeeRecurringExpenseService);
        this.employeeRecurringExpenseService = employeeRecurringExpenseService;
    }
    async execute(command) {
        return await this.executeQuery(command.input);
    }
};
EmployeeRecurringExpenseUpdateTypeHandler = tslib_1.__decorate([
    cqrs_1.QueryHandler(employee_recurring_expense_update_type_query_1.EmployeeRecurringExpenseStartDateUpdateTypeQuery),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof employee_recurring_expense_service_1.EmployeeRecurringExpenseService !== "undefined" && employee_recurring_expense_service_1.EmployeeRecurringExpenseService) === "function" ? _a : Object])
], EmployeeRecurringExpenseUpdateTypeHandler);
exports.EmployeeRecurringExpenseUpdateTypeHandler = EmployeeRecurringExpenseUpdateTypeHandler;


/***/ }),

/***/ "./src/app/employee-recurring-expense/queries/handlers/index.ts":
/*!**********************************************************************!*\
  !*** ./src/app/employee-recurring-expense/queries/handlers/index.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryHandlers = void 0;
const employee_recurring_expense_by_month_handler_1 = __webpack_require__(/*! ./employee-recurring-expense.by-month.handler */ "./src/app/employee-recurring-expense/queries/handlers/employee-recurring-expense.by-month.handler.ts");
const employee_recurring_expense_start_date_update_type_handler_1 = __webpack_require__(/*! ./employee-recurring-expense.start-date-update-type.handler */ "./src/app/employee-recurring-expense/queries/handlers/employee-recurring-expense.start-date-update-type.handler.ts");
exports.QueryHandlers = [
    employee_recurring_expense_by_month_handler_1.EmployeeRecurringExpenseByMonthHandler,
    employee_recurring_expense_start_date_update_type_handler_1.EmployeeRecurringExpenseUpdateTypeHandler
];


/***/ }),

/***/ "./src/app/employee-setting/employee-setting.controller.ts":
/*!*****************************************************************!*\
  !*** ./src/app/employee-setting/employee-setting.controller.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeSettingController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const employee_setting_service_1 = __webpack_require__(/*! ./employee-setting.service */ "./src/app/employee-setting/employee-setting.service.ts");
const employee_setting_entity_1 = __webpack_require__(/*! ./employee-setting.entity */ "./src/app/employee-setting/employee-setting.entity.ts");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let EmployeeSettingController = class EmployeeSettingController extends crud_controller_1.CrudController {
    constructor(employeeSettingService) {
        super(employeeSettingService);
        this.employeeSettingService = employeeSettingService;
    }
    async findAllEmployees(data) {
        const { relations, findInput } = JSON.parse(data);
        return this.employeeSettingService.findAll({
            where: findInput,
            relations
        });
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all employee settings.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee settings',
        type: employee_setting_entity_1.EmployeeSetting
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], EmployeeSettingController.prototype, "findAllEmployees", null);
EmployeeSettingController = tslib_1.__decorate([
    swagger_1.ApiTags('EmployeeSetting'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof employee_setting_service_1.EmployeeSettingService !== "undefined" && employee_setting_service_1.EmployeeSettingService) === "function" ? _b : Object])
], EmployeeSettingController);
exports.EmployeeSettingController = EmployeeSettingController;


/***/ }),

/***/ "./src/app/employee-setting/employee-setting.entity.ts":
/*!*************************************************************!*\
  !*** ./src/app/employee-setting/employee-setting.entity.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeSetting = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let EmployeeSetting = class EmployeeSetting extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EmployeeSetting.prototype, "employeeId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number, minimum: 1, maximum: 12 }),
    class_validator_1.IsNumber(),
    class_validator_1.IsNotEmpty(),
    class_validator_1.Min(1),
    class_validator_1.Max(12),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], EmployeeSetting.prototype, "month", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number, minimum: 1 }),
    class_validator_1.IsNumber(),
    class_validator_1.IsNotEmpty(),
    class_validator_1.Min(0),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], EmployeeSetting.prototype, "year", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EmployeeSetting.prototype, "settingType", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], EmployeeSetting.prototype, "value", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.CurrenciesEnum }),
    class_validator_1.IsEnum(models_1.CurrenciesEnum),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EmployeeSetting.prototype, "currency", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => employee_entity_1.Employee, (employee) => employee.id),
    tslib_1.__metadata("design:type", typeof (_a = typeof employee_entity_1.Employee !== "undefined" && employee_entity_1.Employee) === "function" ? _a : Object)
], EmployeeSetting.prototype, "employee", void 0);
EmployeeSetting = tslib_1.__decorate([
    typeorm_1.Entity('employee_setting')
], EmployeeSetting);
exports.EmployeeSetting = EmployeeSetting;


/***/ }),

/***/ "./src/app/employee-setting/employee-setting.module.ts":
/*!*************************************************************!*\
  !*** ./src/app/employee-setting/employee-setting.module.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeSettingModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const employee_setting_entity_1 = __webpack_require__(/*! ./employee-setting.entity */ "./src/app/employee-setting/employee-setting.entity.ts");
const employee_setting_service_1 = __webpack_require__(/*! ./employee-setting.service */ "./src/app/employee-setting/employee-setting.service.ts");
const employee_setting_controller_1 = __webpack_require__(/*! ./employee-setting.controller */ "./src/app/employee-setting/employee-setting.controller.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let EmployeeSettingModule = class EmployeeSettingModule {
};
EmployeeSettingModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([employee_setting_entity_1.EmployeeSetting]), tenant_module_1.TenantModule],
        controllers: [employee_setting_controller_1.EmployeeSettingController],
        providers: [employee_setting_service_1.EmployeeSettingService],
        exports: [employee_setting_service_1.EmployeeSettingService]
    })
], EmployeeSettingModule);
exports.EmployeeSettingModule = EmployeeSettingModule;


/***/ }),

/***/ "./src/app/employee-setting/employee-setting.seed.ts":
/*!***********************************************************!*\
  !*** ./src/app/employee-setting/employee-setting.seed.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomEmployeeSetting = void 0;
const employee_setting_entity_1 = __webpack_require__(/*! ./employee-setting.entity */ "./src/app/employee-setting/employee-setting.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
exports.createRandomEmployeeSetting = async (connection, tenants, tenantEmployeeMap) => {
    if (!tenantEmployeeMap) {
        console.warn('Warning: tenantCandidatesMap not found, Employee settings  will not be created');
        return;
    }
    const employees = [];
    const currency = ['USD', 'BGN', 'ILS'];
    const setting = ['Normal', 'Custom'];
    for (const tenant of tenants) {
        const organizations = await connection.manager.find(organization_entity_1.Organization, {
            where: [{ tenant: tenant }]
        });
        const tenantEmployees = tenantEmployeeMap.get(tenant);
        for (const tenantEmployee of tenantEmployees) {
            const employee = new employee_setting_entity_1.EmployeeSetting();
            const startDate = faker.date.past();
            employee.employeeId = tenantEmployee.id;
            employee.month = startDate.getMonth() + 1;
            employee.year = startDate.getFullYear();
            employee.settingType = setting[Math.random() > 0.5 ? 1 : 0];
            employee.value = Math.floor(Math.random() * 999) + 1;
            employee.currency = currency[Math.floor(Math.random() * 2)];
            employee.employee = tenantEmployee;
            employee.organization = faker.random.arrayElement(organizations);
            employee.tenant = tenant;
            employees.push(employee);
        }
    }
    await insertRandomEmployeeSetting(connection, employees);
    return employees;
};
const insertRandomEmployeeSetting = async (connection, Employees) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(employee_setting_entity_1.EmployeeSetting)
        .values(Employees)
        .execute();
};


/***/ }),

/***/ "./src/app/employee-setting/employee-setting.service.ts":
/*!**************************************************************!*\
  !*** ./src/app/employee-setting/employee-setting.service.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeSettingService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const employee_setting_entity_1 = __webpack_require__(/*! ./employee-setting.entity */ "./src/app/employee-setting/employee-setting.entity.ts");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
let EmployeeSettingService = class EmployeeSettingService extends crud_service_1.CrudService {
    constructor(employeeSettingRepository) {
        super(employeeSettingRepository);
        this.employeeSettingRepository = employeeSettingRepository;
    }
};
EmployeeSettingService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(employee_setting_entity_1.EmployeeSetting)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], EmployeeSettingService);
exports.EmployeeSettingService = EmployeeSettingService;


/***/ }),

/***/ "./src/app/employee-setting/index.ts":
/*!*******************************************!*\
  !*** ./src/app/employee-setting/index.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeSettingService = exports.EmployeeSetting = exports.EmployeeSettingModule = void 0;
var employee_setting_module_1 = __webpack_require__(/*! ./employee-setting.module */ "./src/app/employee-setting/employee-setting.module.ts");
Object.defineProperty(exports, "EmployeeSettingModule", { enumerable: true, get: function () { return employee_setting_module_1.EmployeeSettingModule; } });
var employee_setting_entity_1 = __webpack_require__(/*! ./employee-setting.entity */ "./src/app/employee-setting/employee-setting.entity.ts");
Object.defineProperty(exports, "EmployeeSetting", { enumerable: true, get: function () { return employee_setting_entity_1.EmployeeSetting; } });
var employee_setting_service_1 = __webpack_require__(/*! ./employee-setting.service */ "./src/app/employee-setting/employee-setting.service.ts");
Object.defineProperty(exports, "EmployeeSettingService", { enumerable: true, get: function () { return employee_setting_service_1.EmployeeSettingService; } });


/***/ }),

/***/ "./src/app/employee-statistics/employee-statistics.controller.ts":
/*!***********************************************************************!*\
  !*** ./src/app/employee-statistics/employee-statistics.controller.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeStatisticsController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const date_fns_1 = __webpack_require__(/*! date-fns */ "date-fns");
const employee_statistics_service_1 = __webpack_require__(/*! ./employee-statistics.service */ "./src/app/employee-statistics/employee-statistics.service.ts");
const aggregate_employee_statistic_query_1 = __webpack_require__(/*! ./queries/aggregate-employee-statistic.query */ "./src/app/employee-statistics/queries/aggregate-employee-statistic.query.ts");
const month_aggregated_employee_statistics_query_1 = __webpack_require__(/*! ./queries/month-aggregated-employee-statistics.query */ "./src/app/employee-statistics/queries/month-aggregated-employee-statistics.query.ts");
const employee_statistics_history_query_1 = __webpack_require__(/*! ./queries/employee-statistics-history.query */ "./src/app/employee-statistics/queries/employee-statistics-history.query.ts");
const parse_json_pipe_1 = __webpack_require__(/*! ../shared/pipes/parse-json.pipe */ "./src/app/shared/pipes/parse-json.pipe.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let EmployeeStatisticsController = class EmployeeStatisticsController {
    constructor(employeeStatisticsService, queryBus) {
        this.employeeStatisticsService = employeeStatisticsService;
        this.queryBus = queryBus;
    }
    async findAggregatedByOrganizationId(data) {
        const { findInput } = data;
        findInput.filterDate = findInput.filterDate
            ? date_fns_1.parseISO(findInput.filterDate)
            : null;
        return this.queryBus.execute(new aggregate_employee_statistic_query_1.AggregatedEmployeeStatisticQuery(findInput));
    }
    async findAllByEmloyeeId(id, data) {
        const { findInput } = data;
        return this.employeeStatisticsService.getStatisticsByEmployeeId(id, findInput);
    }
    async findAggregatedStatisticsByEmployeeId(data) {
        const { findInput } = data;
        findInput.valueDate = date_fns_1.parseISO(findInput.valueDate);
        return this.queryBus.execute(new month_aggregated_employee_statistics_query_1.MonthAggregatedEmployeeStatisticsQuery(findInput));
    }
    async findEmployeeStatisticsHistory(data) {
        const { findInput } = data;
        findInput.valueDate = date_fns_1.parseISO(findInput.valueDate);
        return this.queryBus.execute(new employee_statistics_history_query_1.EmployeeStatisticsHistoryQuery(findInput));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find aggregate for all employees by organization id'
    }),
    swagger_1.ApiResponse({ status: common_1.HttpStatus.OK, description: 'Found records' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'No records found'
    }),
    common_1.Get('/aggregate'),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], EmployeeStatisticsController.prototype, "findAggregatedByOrganizationId", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find by id' }),
    swagger_1.ApiResponse({ status: common_1.HttpStatus.OK, description: 'Found one record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('/months/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], EmployeeStatisticsController.prototype, "findAllByEmloyeeId", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find Aggregated Statistics by Employee id, valueDate and past N months'
    }),
    swagger_1.ApiResponse({ status: common_1.HttpStatus.OK, description: 'Found one record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('/months'),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], EmployeeStatisticsController.prototype, "findAggregatedStatisticsByEmployeeId", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find Statistics History by Employee id, valueDate and past N months'
    }),
    swagger_1.ApiResponse({ status: common_1.HttpStatus.OK, description: 'Found one record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('/history'),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], EmployeeStatisticsController.prototype, "findEmployeeStatisticsHistory", null);
EmployeeStatisticsController = tslib_1.__decorate([
    swagger_1.ApiTags('EmployeeStatistics'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof employee_statistics_service_1.EmployeeStatisticsService !== "undefined" && employee_statistics_service_1.EmployeeStatisticsService) === "function" ? _e : Object, typeof (_f = typeof cqrs_1.QueryBus !== "undefined" && cqrs_1.QueryBus) === "function" ? _f : Object])
], EmployeeStatisticsController);
exports.EmployeeStatisticsController = EmployeeStatisticsController;


/***/ }),

/***/ "./src/app/employee-statistics/employee-statistics.module.ts":
/*!*******************************************************************!*\
  !*** ./src/app/employee-statistics/employee-statistics.module.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeStatisticsModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const employee_recurring_expense_entity_1 = __webpack_require__(/*! ../employee-recurring-expense/employee-recurring-expense.entity */ "./src/app/employee-recurring-expense/employee-recurring-expense.entity.ts");
const employee_recurring_expense_service_1 = __webpack_require__(/*! ../employee-recurring-expense/employee-recurring-expense.service */ "./src/app/employee-recurring-expense/employee-recurring-expense.service.ts");
const expense_entity_1 = __webpack_require__(/*! ../expense/expense.entity */ "./src/app/expense/expense.entity.ts");
const expense_service_1 = __webpack_require__(/*! ../expense/expense.service */ "./src/app/expense/expense.service.ts");
const income_entity_1 = __webpack_require__(/*! ../income/income.entity */ "./src/app/income/income.entity.ts");
const income_service_1 = __webpack_require__(/*! ../income/income.service */ "./src/app/income/income.service.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const organization_service_1 = __webpack_require__(/*! ../organization/organization.service */ "./src/app/organization/organization.service.ts");
const employee_statistics_controller_1 = __webpack_require__(/*! ./employee-statistics.controller */ "./src/app/employee-statistics/employee-statistics.controller.ts");
const employee_statistics_service_1 = __webpack_require__(/*! ./employee-statistics.service */ "./src/app/employee-statistics/employee-statistics.service.ts");
const handlers_1 = __webpack_require__(/*! ./queries/handlers */ "./src/app/employee-statistics/queries/handlers/index.ts");
const organization_recurring_expense_entity_1 = __webpack_require__(/*! ../organization-recurring-expense/organization-recurring-expense.entity */ "./src/app/organization-recurring-expense/organization-recurring-expense.entity.ts");
const organization_recurring_expense_service_1 = __webpack_require__(/*! ../organization-recurring-expense/organization-recurring-expense.service */ "./src/app/organization-recurring-expense/organization-recurring-expense.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let EmployeeStatisticsModule = class EmployeeStatisticsModule {
};
EmployeeStatisticsModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([
                income_entity_1.Income,
                expense_entity_1.Expense,
                employee_entity_1.Employee,
                organization_entity_1.Organization,
                employee_recurring_expense_entity_1.EmployeeRecurringExpense,
                organization_recurring_expense_entity_1.OrganizationRecurringExpense
            ]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [employee_statistics_controller_1.EmployeeStatisticsController],
        providers: [
            employee_statistics_service_1.EmployeeStatisticsService,
            income_service_1.IncomeService,
            expense_service_1.ExpenseService,
            employee_service_1.EmployeeService,
            organization_service_1.OrganizationService,
            employee_recurring_expense_service_1.EmployeeRecurringExpenseService,
            organization_recurring_expense_service_1.OrganizationRecurringExpenseService,
            ...handlers_1.QueryHandlers
        ],
        exports: [employee_statistics_service_1.EmployeeStatisticsService]
    })
], EmployeeStatisticsModule);
exports.EmployeeStatisticsModule = EmployeeStatisticsModule;


/***/ }),

/***/ "./src/app/employee-statistics/employee-statistics.service.ts":
/*!********************************************************************!*\
  !*** ./src/app/employee-statistics/employee-statistics.service.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeStatisticsService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const expense_service_1 = __webpack_require__(/*! ../expense/expense.service */ "./src/app/expense/expense.service.ts");
const income_service_1 = __webpack_require__(/*! ../income/income.service */ "./src/app/income/income.service.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const date_fns_1 = __webpack_require__(/*! date-fns */ "date-fns");
const employee_recurring_expense_service_1 = __webpack_require__(/*! ../employee-recurring-expense/employee-recurring-expense.service */ "./src/app/employee-recurring-expense/employee-recurring-expense.service.ts");
const organization_recurring_expense_service_1 = __webpack_require__(/*! ../organization-recurring-expense/organization-recurring-expense.service */ "./src/app/organization-recurring-expense/organization-recurring-expense.service.ts");
let EmployeeStatisticsService = class EmployeeStatisticsService {
    constructor(incomeService, expenseService, employeeRecurringExpenseService, employeeService, organizationRecurringExpenseService) {
        this.incomeService = incomeService;
        this.expenseService = expenseService;
        this.employeeRecurringExpenseService = employeeRecurringExpenseService;
        this.employeeService = employeeService;
        this.organizationRecurringExpenseService = organizationRecurringExpenseService;
        this._monthNames = [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December'
        ];
        this.calculateEmployeeBonus = (bonusType, bonusPercentage, income, profit) => {
            bonusType = bonusType ? bonusType : models_1.BonusTypeEnum.PROFIT_BASED_BONUS;
            switch (bonusType) {
                case models_1.BonusTypeEnum.PROFIT_BASED_BONUS:
                    return ((profit * (bonusPercentage || models_1.DEFAULT_PROFIT_BASED_BONUS)) /
                        100);
                case models_1.BonusTypeEnum.REVENUE_BASED_BONUS:
                    return ((income *
                        (bonusPercentage || models_1.DEFAULT_REVENUE_BASED_BONUS)) /
                        100);
                default:
                    return 0;
            }
        };
        this._beforeDateFilter = (date, lastNMonths) => typeorm_1.Between(date_fns_1.subMonths(date_fns_1.startOfMonth(date), lastNMonths - 1), date_fns_1.endOfMonth(date));
        this.employeeIncomeInNMonths = async (employeeIds, searchMonth, lastNMonths, organizationId) => await this.incomeService.findAll({
            select: [
                'employeeId',
                'valueDate',
                'clientName',
                'amount',
                'currency',
                'notes',
                'isBonus'
            ],
            where: {
                organizationId,
                employee: {
                    id: typeorm_1.In(employeeIds)
                },
                valueDate: this._beforeDateFilter(searchMonth, lastNMonths)
            },
            order: {
                valueDate: 'DESC'
            }
        });
        this.employeeExpenseInNMonths = async (employeeIds, searchMonth, lastNMonths, organizationId) => await this.expenseService.findAll({
            select: [
                'employeeId',
                'valueDate',
                'amount',
                'currency',
                'notes',
                'vendor',
                'category'
            ],
            where: {
                organizationId,
                employee: {
                    id: typeorm_1.In(employeeIds)
                },
                splitExpense: false,
                valueDate: this._beforeDateFilter(searchMonth, lastNMonths)
            },
            order: {
                valueDate: 'DESC'
            },
            relations: ['vendor', 'category']
        });
        this.employeeRecurringExpenses = async (employeeIds, organizationId) => await this.employeeRecurringExpenseService.findAll({
            select: [
                'employeeId',
                'currency',
                'value',
                'categoryName',
                'startDate',
                'endDate'
            ],
            where: {
                employeeId: typeorm_1.In(employeeIds),
                organizationId
            }
        });
        this.employeeSplitExpenseInNMonths = async (employeeId, searchMonth, lastNMonths, organizationId) => {
            const employee = await this.employeeService.findOne({
                where: {
                    id: employeeId,
                    organizationId
                },
                relations: ['organization']
            });
            const { items } = await this.expenseService.findAll({
                select: ['valueDate', 'amount', 'currency', 'notes', 'category'],
                where: {
                    organization: { id: employee.organization.id },
                    splitExpense: true,
                    valueDate: this._beforeDateFilter(searchMonth, lastNMonths)
                },
                relations: ['category']
            });
            const monthlySplitExpenseMap = new Map();
            for (const expense of items) {
                const key = `${expense.valueDate.getMonth()}-${expense.valueDate.getFullYear()}`;
                const amount = Number(expense.amount);
                if (monthlySplitExpenseMap.has(key)) {
                    const stat = monthlySplitExpenseMap.get(key);
                    const splitAmount = amount / stat.splitAmong;
                    stat.splitExpense = Number((splitAmount + stat.splitExpense).toFixed(2));
                    stat.expense.push(expense);
                }
                else {
                    const { total: splitAmong } = await this.employeeService.findWorkingEmployees(employee.organization.id, employee.organization.tenantId, expense.valueDate, false);
                    const newStat = {
                        month: expense.valueDate.getMonth(),
                        year: expense.valueDate.getFullYear(),
                        splitExpense: Number((amount / splitAmong).toFixed(2)),
                        splitAmong,
                        expense: [expense]
                    };
                    monthlySplitExpenseMap.set(key, newStat);
                }
            }
            return monthlySplitExpenseMap;
        };
        this.organizationRecurringSplitExpenses = async (employeeId, searchMonth, lastNMonths, organizationId) => {
            const employee = await this.employeeService.findOne({
                where: {
                    id: employeeId,
                    organizationId
                },
                relations: ['organization']
            });
            const { items } = await this.organizationRecurringExpenseService.findAll({
                select: [
                    'currency',
                    'value',
                    'categoryName',
                    'startDate',
                    'endDate'
                ],
                where: [
                    {
                        organizationId: employee.organization.id,
                        splitExpense: true,
                        startDate: typeorm_1.LessThanOrEqual(date_fns_1.endOfMonth(searchMonth)),
                        endDate: typeorm_1.MoreThanOrEqual(date_fns_1.subMonths(date_fns_1.startOfMonth(searchMonth), lastNMonths - 1))
                    },
                    {
                        organizationId: employee.organization.id,
                        splitExpense: true,
                        startDate: typeorm_1.LessThanOrEqual(date_fns_1.endOfMonth(searchMonth)),
                        endDate: typeorm_1.IsNull()
                    }
                ]
            });
            const monthlySplitExpenseMap = new Map();
            for (const expense of items) {
                const inputStartDate = date_fns_1.subMonths(date_fns_1.startOfMonth(searchMonth), lastNMonths - 1);
                const requiredStartDate = expense.startDate > inputStartDate
                    ? expense.startDate
                    : inputStartDate;
                for (const date = requiredStartDate; date <= date_fns_1.endOfMonth(searchMonth); date.setMonth(date.getMonth() + 1)) {
                    if (expense.endDate && date > expense.endDate)
                        break;
                    const key = `${date.getMonth()}-${date.getFullYear()}`;
                    const amount = Number(expense.value);
                    if (monthlySplitExpenseMap.has(key)) {
                        const stat = monthlySplitExpenseMap.get(key);
                        const splitExpense = amount / stat.splitAmong;
                        stat.splitExpense = Number((splitExpense + stat.splitExpense).toFixed(2));
                        stat.recurringExpense.push(expense);
                        stat.valueDate = date;
                    }
                    else {
                        const { total: splitAmong } = await this.employeeService.findWorkingEmployees(employee.organization.id, employee.organization.tenantId, date, false);
                        const newStat = {
                            month: date.getMonth(),
                            year: date.getFullYear(),
                            splitExpense: Number((amount / splitAmong).toFixed(2)),
                            splitAmong,
                            recurringExpense: [expense],
                            valueDate: date
                        };
                        monthlySplitExpenseMap.set(key, newStat);
                    }
                }
            }
            return monthlySplitExpenseMap;
        };
    }
    async getStatisticsByEmployeeId(employeeId, findInput) {
        const mappedEmployeeIncome = (await this.incomeService.findAllIncomes({
            where: {
                employee: {
                    id: employeeId
                }
            }
        }, findInput ? findInput.valueDate.toString() : null)).items.map((e) => {
            const obj = {};
            const formattedDate = this._formatDate(e.valueDate);
            obj[formattedDate] = +e.amount;
            return obj;
        });
        const mappedEmployeeExpenses = (await this.expenseService.findAllExpenses({
            where: {
                employee: {
                    id: employeeId
                }
            }
        }, findInput ? findInput.valueDate.toString() : null)).items.map((e) => {
            const obj = {};
            const formattedDate = this._formatDate(e.valueDate);
            obj[formattedDate] = +e.amount;
            return obj;
        });
        const sortedEmployeeExpenses = [];
        mappedEmployeeExpenses.forEach((obj) => {
            for (const key in obj) {
                const foundObject = sortedEmployeeExpenses.find((o) => o.hasOwnProperty(key));
                if (foundObject) {
                    foundObject[key] += obj[key];
                }
                else {
                    sortedEmployeeExpenses.push(obj);
                }
            }
        });
        const sortedEmployeeIncome = [];
        mappedEmployeeIncome.forEach((obj) => {
            for (const key in obj) {
                const foundObject = sortedEmployeeIncome.find((o) => o.hasOwnProperty(key));
                if (foundObject) {
                    foundObject[key] += obj[key];
                }
                else {
                    sortedEmployeeIncome.push(obj);
                }
            }
        });
        let incomeStatistics = [];
        let expenseStatistics = [];
        this._getLast12months().forEach((month) => {
            const incomeStatForTheMonth = sortedEmployeeIncome.find((incomeStat) => incomeStat.hasOwnProperty(month));
            incomeStatForTheMonth
                ? incomeStatistics.push(incomeStatForTheMonth[month])
                : incomeStatistics.push(0);
            const expenseStatForTheMonth = sortedEmployeeExpenses.find((expenseStat) => expenseStat.hasOwnProperty(month));
            expenseStatForTheMonth
                ? expenseStatistics.push(expenseStatForTheMonth[month])
                : expenseStatistics.push(0);
        });
        const { organization: { bonusType, bonusPercentage } } = await this.employeeService.findOne(employeeId, {
            relations: ['organization']
        });
        let profitStatistics = [];
        let bonusStatistics = [];
        expenseStatistics.forEach((expenseStat, index) => {
            const income = incomeStatistics[index];
            const profit = income - expenseStat;
            const bonus = this.calculateEmployeeBonus(bonusType, bonusPercentage, income, profit);
            profitStatistics.push(profit);
            bonusStatistics.push(bonus);
        });
        if (findInput && findInput.valueDate) {
            expenseStatistics = expenseStatistics.filter(Number);
            incomeStatistics = incomeStatistics.filter(Number);
            profitStatistics = profitStatistics.filter(Number);
            bonusStatistics = bonusStatistics.filter(Number);
        }
        return {
            expenseStatistics,
            incomeStatistics,
            profitStatistics,
            bonusStatistics
        };
    }
    _getLast12months() {
        const start = new Date(Date.now()).getMonth() + 1;
        const end = start + 11;
        const currentYear = new Date(Date.now()).getFullYear() - 2000;
        const monthsNeeded = [];
        for (let i = start; i <= end; i++) {
            if (i > 11) {
                monthsNeeded.push(this._monthNames[i - 12] + ` '${currentYear}`);
            }
            else {
                monthsNeeded.push(this._monthNames[i] + ` '${currentYear - 1}`);
            }
        }
        return monthsNeeded.reverse();
    }
    _formatDate(date) {
        return `${this._monthNames[date.getMonth()]} '${date.getFullYear() - 2000}`;
    }
};
EmployeeStatisticsService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof income_service_1.IncomeService !== "undefined" && income_service_1.IncomeService) === "function" ? _a : Object, typeof (_b = typeof expense_service_1.ExpenseService !== "undefined" && expense_service_1.ExpenseService) === "function" ? _b : Object, typeof (_c = typeof employee_recurring_expense_service_1.EmployeeRecurringExpenseService !== "undefined" && employee_recurring_expense_service_1.EmployeeRecurringExpenseService) === "function" ? _c : Object, typeof (_d = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _d : Object, typeof (_e = typeof organization_recurring_expense_service_1.OrganizationRecurringExpenseService !== "undefined" && organization_recurring_expense_service_1.OrganizationRecurringExpenseService) === "function" ? _e : Object])
], EmployeeStatisticsService);
exports.EmployeeStatisticsService = EmployeeStatisticsService;


/***/ }),

/***/ "./src/app/employee-statistics/index.ts":
/*!**********************************************!*\
  !*** ./src/app/employee-statistics/index.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeStatisticsController = exports.EmployeeStatisticsModule = exports.EmployeeStatisticsService = void 0;
var employee_statistics_service_1 = __webpack_require__(/*! ./employee-statistics.service */ "./src/app/employee-statistics/employee-statistics.service.ts");
Object.defineProperty(exports, "EmployeeStatisticsService", { enumerable: true, get: function () { return employee_statistics_service_1.EmployeeStatisticsService; } });
var employee_statistics_module_1 = __webpack_require__(/*! ./employee-statistics.module */ "./src/app/employee-statistics/employee-statistics.module.ts");
Object.defineProperty(exports, "EmployeeStatisticsModule", { enumerable: true, get: function () { return employee_statistics_module_1.EmployeeStatisticsModule; } });
var employee_statistics_controller_1 = __webpack_require__(/*! ./employee-statistics.controller */ "./src/app/employee-statistics/employee-statistics.controller.ts");
Object.defineProperty(exports, "EmployeeStatisticsController", { enumerable: true, get: function () { return employee_statistics_controller_1.EmployeeStatisticsController; } });


/***/ }),

/***/ "./src/app/employee-statistics/queries/aggregate-employee-statistic.query.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/employee-statistics/queries/aggregate-employee-statistic.query.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregatedEmployeeStatisticQuery = void 0;
class AggregatedEmployeeStatisticQuery {
    constructor(input) {
        this.input = input;
    }
}
exports.AggregatedEmployeeStatisticQuery = AggregatedEmployeeStatisticQuery;
AggregatedEmployeeStatisticQuery.type = '[EmployeeStatistic] Aggregated Employee Statistic';


/***/ }),

/***/ "./src/app/employee-statistics/queries/employee-statistics-history.query.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/employee-statistics/queries/employee-statistics-history.query.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeStatisticsHistoryQuery = void 0;
class EmployeeStatisticsHistoryQuery {
    constructor(input) {
        this.input = input;
    }
}
exports.EmployeeStatisticsHistoryQuery = EmployeeStatisticsHistoryQuery;
EmployeeStatisticsHistoryQuery.type = '[EmployeeStatistics] History';


/***/ }),

/***/ "./src/app/employee-statistics/queries/handlers/aggregate-employee-statistic.handler.ts":
/*!**********************************************************************************************!*\
  !*** ./src/app/employee-statistics/queries/handlers/aggregate-employee-statistic.handler.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregateOrganizationQueryHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const date_fns_1 = __webpack_require__(/*! date-fns */ "date-fns");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
const employee_service_1 = __webpack_require__(/*! ../../../employee/employee.service */ "./src/app/employee/employee.service.ts");
const aggregate_employee_statistic_query_1 = __webpack_require__(/*! ../aggregate-employee-statistic.query */ "./src/app/employee-statistics/queries/aggregate-employee-statistic.query.ts");
const employee_statistics_service_1 = __webpack_require__(/*! ./../../employee-statistics.service */ "./src/app/employee-statistics/employee-statistics.service.ts");
let AggregateOrganizationQueryHandler = class AggregateOrganizationQueryHandler {
    constructor(employeeService, employeeStatisticsService) {
        this.employeeService = employeeService;
        this.employeeStatisticsService = employeeStatisticsService;
    }
    async execute(command) {
        const { input: { filterDate, organizationId } } = command;
        const tenantId = context_1.RequestContext.currentTenantId();
        const searchInput = {
            months: 1,
            valueDate: filterDate ? filterDate : new Date()
        };
        const { items: employees } = await this.employeeService.findWorkingEmployees(organizationId, tenantId, filterDate, true);
        const employeeMap = new Map();
        employees.forEach((employee) => {
            employee.user.hash = '';
            employeeMap.set(employee.id, {
                income: 0,
                expense: 0,
                bonus: 0,
                profit: 0,
                employee: {
                    id: employee.id,
                    user: employee.user
                }
            });
        });
        if (employees.length > 0) {
            await this._loadIncomeAndDirectBonus(searchInput, employeeMap, organizationId);
            await this._loadEmployeeExpenses(searchInput, employeeMap, organizationId);
            await this._loadEmployeeRecurringExpenses(searchInput, employeeMap, organizationId);
            await this._loadOrganizationSplitExpenses(searchInput, employeeMap, organizationId);
            await this._loadOrganizationRecurringSplitExpenses(searchInput, employeeMap, organizationId);
            this._calculateProfit(employeeMap);
            await this._loadEmployeeBonus(employeeMap);
        }
        const employeeStats = [...employeeMap.values()];
        const total = employeeStats.reduce(this._aggregateEmployeeStats, { income: 0, expense: 0, bonus: 0, profit: 0 });
        return {
            total,
            employees: employeeStats
        };
    }
    async _loadIncomeAndDirectBonus(searchInput, employeeMap, organizationId) {
        const { items: incomes } = await this.employeeStatisticsService.employeeIncomeInNMonths([...employeeMap.keys()], searchInput.valueDate, searchInput.months, organizationId);
        incomes.forEach((income) => {
            const stat = employeeMap.get(income.employeeId);
            const amount = Number(income.amount);
            stat.income = Number((stat.income + amount).toFixed(2));
            stat.bonus = income.isBonus
                ? Number((stat.bonus + amount).toFixed(2))
                : stat.bonus;
        });
    }
    async _loadEmployeeExpenses(searchInput, employeeMap, organizationId) {
        const { items: expenses } = await this.employeeStatisticsService.employeeExpenseInNMonths([...employeeMap.keys()], searchInput.valueDate, searchInput.months, organizationId);
        expenses.forEach((expense) => {
            const stat = employeeMap.get(expense.employeeId);
            const amount = Number(expense.amount);
            stat.expense = Number((amount + stat.expense).toFixed(2));
        });
    }
    async _loadEmployeeRecurringExpenses(searchInput, employeeMap, organizationId) {
        const { items: employeeRecurringExpenses } = await this.employeeStatisticsService.employeeRecurringExpenses([...employeeMap.keys()], organizationId);
        employeeRecurringExpenses.forEach((expense) => {
            const inputStartDate = date_fns_1.subMonths(date_fns_1.startOfMonth(searchInput.valueDate), searchInput.months - 1);
            const requiredStartDate = expense.startDate > inputStartDate
                ? expense.startDate
                : inputStartDate;
            for (const date = requiredStartDate; date <= searchInput.valueDate; date.setMonth(date.getMonth() + 1)) {
                if (expense.endDate && date > expense.endDate)
                    break;
                const amount = Number(expense.value);
                const stat = employeeMap.get(expense.employeeId);
                stat.expense = Number((amount + stat.expense).toFixed(2));
            }
        });
    }
    async _loadOrganizationSplitExpenses(searchInput, employeeMap, organizationId) {
        const employeeIds = [...employeeMap.keys()];
        const expenses = await this.employeeStatisticsService.employeeSplitExpenseInNMonths(employeeIds[0], searchInput.valueDate, searchInput.months, organizationId);
        const monthSplitExpense = expenses
            .values()
            .next().value;
        if (monthSplitExpense) {
            employeeMap.forEach((emp) => {
                emp.expense = Number((emp.expense + monthSplitExpense.splitExpense).toFixed(2));
            });
        }
    }
    async _loadOrganizationRecurringSplitExpenses(searchInput, employeeMap, organizationId) {
        const employeeIds = [...employeeMap.keys()];
        const organizationRecurringSplitExpenses = await this.employeeStatisticsService.organizationRecurringSplitExpenses(employeeIds[0], searchInput.valueDate, searchInput.months, organizationId);
        const monthSplitExpense = organizationRecurringSplitExpenses
            .values()
            .next().value;
        if (monthSplitExpense) {
            employeeMap.forEach((emp) => (emp.expense = Number((emp.expense + monthSplitExpense.splitExpense).toFixed(2))));
        }
    }
    _calculateProfit(employeeMap) {
        employeeMap.forEach((emp) => {
            emp.profit = Number((emp.income - emp.expense).toFixed(2));
        });
    }
    async _loadEmployeeBonus(employeeMap) {
        const employeeIds = [...employeeMap.keys()];
        const { organization: { bonusType, bonusPercentage } } = await this.employeeService.findOne(employeeIds[0], {
            relations: ['organization']
        });
        employeeMap.forEach((emp) => {
            const bonus = this.employeeStatisticsService.calculateEmployeeBonus(bonusType, bonusPercentage, emp.income, emp.profit);
            emp.bonus = Number((emp.bonus + bonus).toFixed(2));
        });
    }
    _aggregateEmployeeStats(accumulator, value) {
        accumulator.income = Number((accumulator.income + value.income).toFixed(2));
        accumulator.expense = Number((accumulator.expense + value.expense).toFixed(2));
        accumulator.profit = Number((accumulator.profit + value.profit).toFixed(2));
        accumulator.bonus = Number((accumulator.bonus + value.bonus).toFixed(2));
        return accumulator;
    }
};
AggregateOrganizationQueryHandler = tslib_1.__decorate([
    cqrs_1.QueryHandler(aggregate_employee_statistic_query_1.AggregatedEmployeeStatisticQuery),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _a : Object, typeof (_b = typeof employee_statistics_service_1.EmployeeStatisticsService !== "undefined" && employee_statistics_service_1.EmployeeStatisticsService) === "function" ? _b : Object])
], AggregateOrganizationQueryHandler);
exports.AggregateOrganizationQueryHandler = AggregateOrganizationQueryHandler;


/***/ }),

/***/ "./src/app/employee-statistics/queries/handlers/employee-statistics-history.handler.ts":
/*!*********************************************************************************************!*\
  !*** ./src/app/employee-statistics/queries/handlers/employee-statistics-history.handler.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeStatisticsHistoryQueryHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_statistics_service_1 = __webpack_require__(/*! ../../employee-statistics.service */ "./src/app/employee-statistics/employee-statistics.service.ts");
const date_fns_1 = __webpack_require__(/*! date-fns */ "date-fns");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const employee_statistics_history_query_1 = __webpack_require__(/*! ../employee-statistics-history.query */ "./src/app/employee-statistics/queries/employee-statistics-history.query.ts");
let EmployeeStatisticsHistoryQueryHandler = class EmployeeStatisticsHistoryQueryHandler {
    constructor(employeeStatisticsService) {
        this.employeeStatisticsService = employeeStatisticsService;
    }
    async execute(command) {
        const { input } = command;
        switch (input.type) {
            case models_1.EmployeeStatisticsHistoryEnum.INCOME:
            case models_1.EmployeeStatisticsHistoryEnum.BONUS_INCOME:
            case models_1.EmployeeStatisticsHistoryEnum.NON_BONUS_INCOME:
                return this._incomeHistory(input);
            case models_1.EmployeeStatisticsHistoryEnum.EXPENSES:
            case models_1.EmployeeStatisticsHistoryEnum.EXPENSES_WITHOUT_SALARY:
                return this._expenseHistory(input);
            default:
                return [];
        }
    }
    async _incomeHistory(input) {
        const { items: incomes } = await this.employeeStatisticsService.employeeIncomeInNMonths([input.employeeId], input.valueDate, input.months, input.organizationId);
        const history = [];
        incomes.forEach(({ amount, clientName, valueDate, notes, isBonus }) => {
            history.push({ valueDate, amount, notes, clientName, isBonus });
        });
        switch (input.type) {
            case models_1.EmployeeStatisticsHistoryEnum.BONUS_INCOME:
                return history.filter((income) => income.isBonus);
            case models_1.EmployeeStatisticsHistoryEnum.NON_BONUS_INCOME:
                return history.filter((income) => !income.isBonus);
            default:
                return history;
        }
    }
    async _expenseHistory(input) {
        const history = [];
        await this._loadEmployeeExpenses(input, history);
        await this._loadEmployeeRecurringExpenses(input, history);
        await this._loadOrganizationSplitExpenses(input, history);
        await this._loadOrganizationRecurringSplitExpenses(input, history);
        return input.type ===
            models_1.EmployeeStatisticsHistoryEnum.EXPENSES_WITHOUT_SALARY
            ? history.filter((stat) => !stat.isSalary)
            : history;
    }
    async _loadEmployeeExpenses(input, history) {
        const { items: expenses } = await this.employeeStatisticsService.employeeExpenseInNMonths([input.employeeId], input.valueDate, input.months, input.organizationId);
        expenses.forEach(({ valueDate, amount, notes, vendor, category }) => {
            history.push({
                valueDate,
                amount,
                notes,
                vendorName: vendor.name,
                categoryName: category.name,
                isSalary: false,
                source: 'employee'
            });
        });
    }
    async _loadEmployeeRecurringExpenses(input, history) {
        const { items: employeeRecurringExpenses } = await this.employeeStatisticsService.employeeRecurringExpenses([input.employeeId], input.organizationId);
        employeeRecurringExpenses.forEach((expense) => {
            const inputStartDate = date_fns_1.subMonths(date_fns_1.startOfMonth(input.valueDate), input.months - 1);
            const requiredStartDate = expense.startDate > inputStartDate
                ? expense.startDate
                : inputStartDate;
            for (const date = requiredStartDate; date <= input.valueDate; date.setMonth(date.getMonth() + 1)) {
                if (expense.endDate && date > expense.endDate)
                    break;
                history.push({
                    valueDate: date,
                    amount: expense.value,
                    isRecurring: true,
                    categoryName: expense.categoryName,
                    isSalary: expense.categoryName ===
                        models_1.RecurringExpenseDefaultCategoriesEnum.SALARY
                });
            }
        });
    }
    async _loadOrganizationSplitExpenses(input, history) {
        const splitExpensesMap = await this.employeeStatisticsService.employeeSplitExpenseInNMonths(input.employeeId, input.valueDate, input.months, input.organizationId);
        splitExpensesMap.forEach((value) => {
            value.expense.forEach(({ amount, category, valueDate }) => {
                history.push({
                    amount: Number((amount / value.splitAmong).toFixed(2)),
                    valueDate,
                    categoryName: category.name,
                    splitExpense: {
                        originalValue: amount,
                        employeeCount: value.splitAmong
                    },
                    source: 'org'
                });
            });
        });
    }
    async _loadOrganizationRecurringSplitExpenses(input, history) {
        const splitExpensesMap = await this.employeeStatisticsService.organizationRecurringSplitExpenses(input.employeeId, input.valueDate, input.months, input.organizationId);
        splitExpensesMap.forEach((mapValue) => {
            mapValue.recurringExpense.forEach(({ value, categoryName }) => {
                history.push({
                    amount: Number((value / mapValue.splitAmong).toFixed(2)),
                    valueDate: mapValue.valueDate,
                    categoryName,
                    splitExpense: {
                        originalValue: value,
                        employeeCount: mapValue.splitAmong
                    },
                    source: 'org',
                    isRecurring: true
                });
            });
        });
    }
};
EmployeeStatisticsHistoryQueryHandler = tslib_1.__decorate([
    cqrs_1.QueryHandler(employee_statistics_history_query_1.EmployeeStatisticsHistoryQuery),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof employee_statistics_service_1.EmployeeStatisticsService !== "undefined" && employee_statistics_service_1.EmployeeStatisticsService) === "function" ? _a : Object])
], EmployeeStatisticsHistoryQueryHandler);
exports.EmployeeStatisticsHistoryQueryHandler = EmployeeStatisticsHistoryQueryHandler;


/***/ }),

/***/ "./src/app/employee-statistics/queries/handlers/index.ts":
/*!***************************************************************!*\
  !*** ./src/app/employee-statistics/queries/handlers/index.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryHandlers = void 0;
const aggregate_employee_statistic_handler_1 = __webpack_require__(/*! ./aggregate-employee-statistic.handler */ "./src/app/employee-statistics/queries/handlers/aggregate-employee-statistic.handler.ts");
const month_aggregated_employee_statistics_handler_1 = __webpack_require__(/*! ./month-aggregated-employee-statistics.handler */ "./src/app/employee-statistics/queries/handlers/month-aggregated-employee-statistics.handler.ts");
const employee_statistics_history_handler_1 = __webpack_require__(/*! ./employee-statistics-history.handler */ "./src/app/employee-statistics/queries/handlers/employee-statistics-history.handler.ts");
exports.QueryHandlers = [
    aggregate_employee_statistic_handler_1.AggregateOrganizationQueryHandler,
    month_aggregated_employee_statistics_handler_1.MonthAggregatedEmployeeStatisticsQueryHandler,
    employee_statistics_history_handler_1.EmployeeStatisticsHistoryQueryHandler
];


/***/ }),

/***/ "./src/app/employee-statistics/queries/handlers/month-aggregated-employee-statistics.handler.ts":
/*!******************************************************************************************************!*\
  !*** ./src/app/employee-statistics/queries/handlers/month-aggregated-employee-statistics.handler.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonthAggregatedEmployeeStatisticsQueryHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_service_1 = __webpack_require__(/*! ../../../employee/employee.service */ "./src/app/employee/employee.service.ts");
const employee_statistics_service_1 = __webpack_require__(/*! ../../employee-statistics.service */ "./src/app/employee-statistics/employee-statistics.service.ts");
const month_aggregated_employee_statistics_query_1 = __webpack_require__(/*! ../month-aggregated-employee-statistics.query */ "./src/app/employee-statistics/queries/month-aggregated-employee-statistics.query.ts");
const date_fns_1 = __webpack_require__(/*! date-fns */ "date-fns");
let MonthAggregatedEmployeeStatisticsQueryHandler = class MonthAggregatedEmployeeStatisticsQueryHandler {
    constructor(employeeStatisticsService, employeeService) {
        this.employeeStatisticsService = employeeStatisticsService;
        this.employeeService = employeeService;
    }
    async execute(command) {
        const { input } = command;
        const statisticsMap = new Map();
        await this._loadEmployeeIncomeAndDirectBonus(input, statisticsMap);
        await this._loadEmployeeExpenses(input, statisticsMap);
        await this._loadEmployeeRecurringExpenses(input, statisticsMap);
        await this._loadOrganizationSplitExpenses(input, statisticsMap);
        await this._loadOrganizationRecurringSplitExpenses(input, statisticsMap);
        this._calculateProfit(statisticsMap);
        await this._loadEmployeeBonus(input, statisticsMap);
        const response = [...statisticsMap.values()].sort((a, b) => a.year === b.year ? b.month - a.month : b.year - a.year);
        return response;
    }
    async _loadEmployeeIncomeAndDirectBonus(input, statisticsMap) {
        const { items: incomes } = await this.employeeStatisticsService.employeeIncomeInNMonths([input.employeeId], input.valueDate, input.months, input.organizationId);
        incomes.forEach((income) => {
            const key = `${income.valueDate.getMonth()}-${income.valueDate.getFullYear()}`;
            const amount = Number(income.amount);
            if (statisticsMap.has(key)) {
                const stat = statisticsMap.get(key);
                stat.income = Number((stat.income + amount).toFixed(2));
                stat.bonus = income.isBonus
                    ? Number((stat.bonus + amount).toFixed(2))
                    : stat.bonus;
                stat.directIncomeBonus = income.isBonus
                    ? Number((stat.directIncomeBonus + amount).toFixed(2))
                    : stat.directIncomeBonus;
            }
            else {
                const newStat = {
                    month: income.valueDate.getMonth(),
                    year: income.valueDate.getFullYear(),
                    income: Number(amount.toFixed(2)),
                    expense: 0,
                    expenseWithoutSalary: 0,
                    profit: 0,
                    directIncomeBonus: income.isBonus
                        ? Number(amount.toFixed(2))
                        : 0,
                    bonus: income.isBonus ? Number(amount.toFixed(2)) : 0
                };
                statisticsMap.set(key, newStat);
            }
        });
    }
    async _loadEmployeeExpenses(input, statisticsMap) {
        const { items: expenses } = await this.employeeStatisticsService.employeeExpenseInNMonths([input.employeeId], input.valueDate, input.months, input.organizationId);
        expenses.forEach((expense) => {
            const key = `${expense.valueDate.getMonth()}-${expense.valueDate.getFullYear()}`;
            const amount = Number(expense.amount);
            if (statisticsMap.has(key)) {
                const stat = statisticsMap.get(key);
                stat.expense = Number((amount + stat.expense).toFixed(2));
                stat.expenseWithoutSalary = Number((amount + stat.expenseWithoutSalary).toFixed(2));
            }
            else {
                const newStat = {
                    month: expense.valueDate.getMonth(),
                    year: expense.valueDate.getFullYear(),
                    income: 0,
                    expense: Number(amount.toFixed(2)),
                    expenseWithoutSalary: Number(amount.toFixed(2)),
                    profit: 0,
                    bonus: 0,
                    directIncomeBonus: 0
                };
                statisticsMap.set(key, newStat);
            }
        });
    }
    async _loadEmployeeRecurringExpenses(input, statisticsMap) {
        const { items: employeeRecurringExpenses } = await this.employeeStatisticsService.employeeRecurringExpenses([input.employeeId], input.organizationId);
        employeeRecurringExpenses.forEach((expense) => {
            const inputStartDate = date_fns_1.subMonths(date_fns_1.startOfMonth(input.valueDate), input.months - 1);
            const requiredStartDate = expense.startDate > inputStartDate
                ? expense.startDate
                : inputStartDate;
            for (const date = requiredStartDate; date <= input.valueDate; date.setMonth(date.getMonth() + 1)) {
                if (expense.endDate && date > expense.endDate)
                    break;
                const key = `${date.getMonth()}-${date.getFullYear()}`;
                const amount = Number(expense.value);
                const salaryExpense = expense.categoryName ===
                    models_1.RecurringExpenseDefaultCategoriesEnum.SALARY;
                if (statisticsMap.has(key)) {
                    const stat = statisticsMap.get(key);
                    stat.expense = Number((amount + stat.expense).toFixed(2));
                    stat.expenseWithoutSalary = salaryExpense
                        ? stat.expenseWithoutSalary
                        : Number((amount + stat.expenseWithoutSalary).toFixed(2));
                }
                else {
                    const newStat = {
                        month: date.getMonth(),
                        year: date.getFullYear(),
                        income: 0,
                        expense: Number(amount.toFixed(2)),
                        expenseWithoutSalary: salaryExpense
                            ? 0
                            : Number(amount.toFixed(2)),
                        profit: 0,
                        bonus: 0,
                        directIncomeBonus: 0
                    };
                    statisticsMap.set(key, newStat);
                }
            }
        });
    }
    async _loadOrganizationSplitExpenses(input, statisticsMap) {
        const splitExpensesMap = await this.employeeStatisticsService.employeeSplitExpenseInNMonths(input.employeeId, input.valueDate, input.months, input.organizationId);
        splitExpensesMap.forEach((value, key) => {
            if (statisticsMap.has(key)) {
                const stat = statisticsMap.get(key);
                stat.expense = Number((value.splitExpense + stat.expense).toFixed(2));
                stat.expenseWithoutSalary = Number((value.splitExpense + stat.expenseWithoutSalary).toFixed(2));
            }
            else {
                const newStat = {
                    month: value.month,
                    year: value.year,
                    income: 0,
                    expense: Number(value.splitExpense.toFixed(2)),
                    expenseWithoutSalary: Number(value.splitExpense.toFixed(2)),
                    profit: 0,
                    bonus: 0,
                    directIncomeBonus: 0
                };
                statisticsMap.set(key, newStat);
            }
        });
    }
    async _loadOrganizationRecurringSplitExpenses(input, statisticsMap) {
        const splitExpensesMap = await this.employeeStatisticsService.organizationRecurringSplitExpenses(input.employeeId, input.valueDate, input.months, input.organizationId);
        splitExpensesMap.forEach((value, key) => {
            if (statisticsMap.has(key)) {
                const stat = statisticsMap.get(key);
                stat.expense = Number((value.splitExpense + stat.expense).toFixed(2));
                stat.expenseWithoutSalary = Number((value.splitExpense + stat.expenseWithoutSalary).toFixed(2));
            }
            else {
                const newStat = {
                    month: value.month,
                    year: value.year,
                    income: 0,
                    expense: Number(value.splitExpense.toFixed(2)),
                    expenseWithoutSalary: Number(value.splitExpense.toFixed(2)),
                    profit: 0,
                    directIncomeBonus: 0,
                    bonus: 0
                };
                statisticsMap.set(key, newStat);
            }
        });
    }
    _calculateProfit(statisticsMap) {
        statisticsMap.forEach((stat) => {
            stat.profit = Number((stat.income - stat.expense).toFixed(2));
        });
    }
    async _loadEmployeeBonus(input, statisticsMap) {
        const { organization: { bonusType, bonusPercentage } } = await this.employeeService.findOne(input.employeeId, {
            relations: ['organization']
        });
        statisticsMap.forEach((stat) => {
            const bonus = this.employeeStatisticsService.calculateEmployeeBonus(bonusType, bonusPercentage, stat.income, stat.profit);
            stat.bonus = Number((stat.bonus + bonus).toFixed(2));
        });
    }
};
MonthAggregatedEmployeeStatisticsQueryHandler = tslib_1.__decorate([
    cqrs_1.QueryHandler(month_aggregated_employee_statistics_query_1.MonthAggregatedEmployeeStatisticsQuery),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof employee_statistics_service_1.EmployeeStatisticsService !== "undefined" && employee_statistics_service_1.EmployeeStatisticsService) === "function" ? _a : Object, typeof (_b = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _b : Object])
], MonthAggregatedEmployeeStatisticsQueryHandler);
exports.MonthAggregatedEmployeeStatisticsQueryHandler = MonthAggregatedEmployeeStatisticsQueryHandler;


/***/ }),

/***/ "./src/app/employee-statistics/queries/month-aggregated-employee-statistics.query.ts":
/*!*******************************************************************************************!*\
  !*** ./src/app/employee-statistics/queries/month-aggregated-employee-statistics.query.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MonthAggregatedEmployeeStatisticsQuery = void 0;
class MonthAggregatedEmployeeStatisticsQuery {
    constructor(input) {
        this.input = input;
    }
}
exports.MonthAggregatedEmployeeStatisticsQuery = MonthAggregatedEmployeeStatisticsQuery;
MonthAggregatedEmployeeStatisticsQuery.type = '[MonthAggregatedEmployeeStatistics] Employee Statistics';


/***/ }),

/***/ "./src/app/employee/commands/employee.bulk.create.command.ts":
/*!*******************************************************************!*\
  !*** ./src/app/employee/commands/employee.bulk.create.command.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeBulkCreateCommand = void 0;
class EmployeeBulkCreateCommand {
    constructor(input, languageCode) {
        this.input = input;
        this.languageCode = languageCode;
    }
}
exports.EmployeeBulkCreateCommand = EmployeeBulkCreateCommand;
EmployeeBulkCreateCommand.type = '[Employee] Register';


/***/ }),

/***/ "./src/app/employee/commands/employee.create.command.ts":
/*!**************************************************************!*\
  !*** ./src/app/employee/commands/employee.create.command.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeCreateCommand = void 0;
class EmployeeCreateCommand {
    constructor(input, languageCode) {
        this.input = input;
        this.languageCode = languageCode;
    }
}
exports.EmployeeCreateCommand = EmployeeCreateCommand;
EmployeeCreateCommand.type = '[Employee] Register';


/***/ }),

/***/ "./src/app/employee/commands/employee.get.command.ts":
/*!***********************************************************!*\
  !*** ./src/app/employee/commands/employee.get.command.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeGetCommand = void 0;
class EmployeeGetCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.EmployeeGetCommand = EmployeeGetCommand;
EmployeeGetCommand.type = '[Employee] Get';


/***/ }),

/***/ "./src/app/employee/commands/get-employee-job-statistics.command.ts":
/*!**************************************************************************!*\
  !*** ./src/app/employee/commands/get-employee-job-statistics.command.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GetEmployeeJobStatisticsCommand = void 0;
class GetEmployeeJobStatisticsCommand {
    constructor(request) {
        this.request = request;
    }
}
exports.GetEmployeeJobStatisticsCommand = GetEmployeeJobStatisticsCommand;
GetEmployeeJobStatisticsCommand.type = '[EmployeeJobStatistics] Get';


/***/ }),

/***/ "./src/app/employee/commands/handlers/employee.bulk.create.handler.ts":
/*!****************************************************************************!*\
  !*** ./src/app/employee/commands/handlers/employee.bulk.create.handler.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeBulkCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_service_1 = __webpack_require__(/*! ../../employee.service */ "./src/app/employee/employee.service.ts");
const employee_bulk_create_command_1 = __webpack_require__(/*! ../employee.bulk.create.command */ "./src/app/employee/commands/employee.bulk.create.command.ts");
const auth_service_1 = __webpack_require__(/*! ../../../auth/auth.service */ "./src/app/auth/auth.service.ts");
const email_1 = __webpack_require__(/*! ../../../email */ "./src/app/email/index.ts");
const user_organization_services_1 = __webpack_require__(/*! ../../../user-organization/user-organization.services */ "./src/app/user-organization/user-organization.services.ts");
let EmployeeBulkCreateHandler = class EmployeeBulkCreateHandler {
    constructor(employeeService, authService, emailService, userOrganizationService) {
        this.employeeService = employeeService;
        this.authService = authService;
        this.emailService = emailService;
        this.userOrganizationService = userOrganizationService;
    }
    async execute(command) {
        const { input, languageCode } = command;
        const inputWithHash = await this._loadPasswordHash(input);
        const createdEmployees = await this.employeeService.createBulk(inputWithHash);
        const usersWithOrganizations = createdEmployees.map((employee) => this.userOrganizationService.addUserToOrganization(employee.user, employee.organizationId));
        await Promise.all(usersWithOrganizations);
        this._sendWelcomeEmail(createdEmployees, languageCode);
        return createdEmployees;
    }
    _sendWelcomeEmail(employees, languageCode) {
        employees.forEach((employee) => this.emailService.welcomeUser(employee.user, languageCode, employee.organization.id));
    }
    async _loadPasswordHash(input) {
        const mappedInput = input.map(async (entity) => {
            entity.user.hash = await this.authService.getPasswordHash(entity.password);
            return entity;
        });
        return Promise.all(mappedInput);
    }
};
EmployeeBulkCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(employee_bulk_create_command_1.EmployeeBulkCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _a : Object, typeof (_b = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _b : Object, typeof (_c = typeof email_1.EmailService !== "undefined" && email_1.EmailService) === "function" ? _c : Object, typeof (_d = typeof user_organization_services_1.UserOrganizationService !== "undefined" && user_organization_services_1.UserOrganizationService) === "function" ? _d : Object])
], EmployeeBulkCreateHandler);
exports.EmployeeBulkCreateHandler = EmployeeBulkCreateHandler;


/***/ }),

/***/ "./src/app/employee/commands/handlers/employee.create.handler.ts":
/*!***********************************************************************!*\
  !*** ./src/app/employee/commands/handlers/employee.create.handler.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const auth_service_1 = __webpack_require__(/*! ../../../auth/auth.service */ "./src/app/auth/auth.service.ts");
const user_organization_services_1 = __webpack_require__(/*! ../../../user-organization/user-organization.services */ "./src/app/user-organization/user-organization.services.ts");
const employee_service_1 = __webpack_require__(/*! ../../employee.service */ "./src/app/employee/employee.service.ts");
const employee_create_command_1 = __webpack_require__(/*! ../employee.create.command */ "./src/app/employee/commands/employee.create.command.ts");
const email_service_1 = __webpack_require__(/*! ../../../email/email.service */ "./src/app/email/email.service.ts");
let EmployeeCreateHandler = class EmployeeCreateHandler {
    constructor(employeeService, userOrganizationService, authService, emailService) {
        this.employeeService = employeeService;
        this.userOrganizationService = userOrganizationService;
        this.authService = authService;
        this.emailService = emailService;
    }
    async execute(command) {
        const { input } = command;
        const languageCode = command.languageCode || models_1.LanguagesEnum.ENGLISH;
        const inputWithHash = await this._addHashAndLanguage(input, languageCode);
        const employee = await this.employeeService.create(inputWithHash);
        await this.userOrganizationService.addUserToOrganization(employee.user, input.organization.id);
        this.emailService.welcomeUser(employee.user, languageCode, employee.organization.id);
        return employee;
    }
    async _addHashAndLanguage(input, languageCode) {
        input.user.hash = await this.authService.getPasswordHash(input.password);
        input.user.preferredLanguage = languageCode;
        return input;
    }
};
EmployeeCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(employee_create_command_1.EmployeeCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _a : Object, typeof (_b = typeof user_organization_services_1.UserOrganizationService !== "undefined" && user_organization_services_1.UserOrganizationService) === "function" ? _b : Object, typeof (_c = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _c : Object, typeof (_d = typeof email_service_1.EmailService !== "undefined" && email_service_1.EmailService) === "function" ? _d : Object])
], EmployeeCreateHandler);
exports.EmployeeCreateHandler = EmployeeCreateHandler;


/***/ }),

/***/ "./src/app/employee/commands/handlers/employee.get.handler.ts":
/*!********************************************************************!*\
  !*** ./src/app/employee/commands/handlers/employee.get.handler.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeGetHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_service_1 = __webpack_require__(/*! ../../employee.service */ "./src/app/employee/employee.service.ts");
const employee_get_command_1 = __webpack_require__(/*! ../employee.get.command */ "./src/app/employee/commands/employee.get.command.ts");
let EmployeeGetHandler = class EmployeeGetHandler {
    constructor(employeeService) {
        this.employeeService = employeeService;
    }
    async execute(command) {
        const { input } = command;
        return await this.employeeService.findOne(input);
    }
};
EmployeeGetHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(employee_get_command_1.EmployeeGetCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _a : Object])
], EmployeeGetHandler);
exports.EmployeeGetHandler = EmployeeGetHandler;


/***/ }),

/***/ "./src/app/employee/commands/handlers/get-employee-job-statistics.handler.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/employee/commands/handlers/get-employee-job-statistics.handler.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetEmployeeJobStatisticsHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_service_1 = __webpack_require__(/*! ../../employee.service */ "./src/app/employee/employee.service.ts");
const integration_ai_1 = __webpack_require__(/*! @gauzy/integration-ai */ "./libs/integration-ai/src/index.ts");
const get_employee_job_statistics_command_1 = __webpack_require__(/*! ../get-employee-job-statistics.command */ "./src/app/employee/commands/get-employee-job-statistics.command.ts");
const underscore_1 = __webpack_require__(/*! underscore */ "underscore");
let GetEmployeeJobStatisticsHandler = class GetEmployeeJobStatisticsHandler {
    constructor(employeeService, gauzyAIService) {
        this.employeeService = employeeService;
        this.gauzyAIService = gauzyAIService;
    }
    async execute(command) {
        const { request } = command;
        let { items, total } = await this.employeeService.findAll(request);
        const employeesStatistics = await this.gauzyAIService.getEmployeesStatistics();
        const employeesStatisticsById = underscore_1.indexBy(employeesStatistics, 'employeeId');
        items = items.map((employee) => {
            const employeesStatistic = employeesStatisticsById[employee.id];
            return Object.assign(Object.assign({}, employee), employeesStatistic);
        });
        return { items, total };
    }
};
GetEmployeeJobStatisticsHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(get_employee_job_statistics_command_1.GetEmployeeJobStatisticsCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _a : Object, typeof (_b = typeof integration_ai_1.GauzyAIService !== "undefined" && integration_ai_1.GauzyAIService) === "function" ? _b : Object])
], GetEmployeeJobStatisticsHandler);
exports.GetEmployeeJobStatisticsHandler = GetEmployeeJobStatisticsHandler;


/***/ }),

/***/ "./src/app/employee/commands/handlers/index.ts":
/*!*****************************************************!*\
  !*** ./src/app/employee/commands/handlers/index.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const employee_bulk_create_handler_1 = __webpack_require__(/*! ./employee.bulk.create.handler */ "./src/app/employee/commands/handlers/employee.bulk.create.handler.ts");
const employee_create_handler_1 = __webpack_require__(/*! ./employee.create.handler */ "./src/app/employee/commands/handlers/employee.create.handler.ts");
const employee_get_handler_1 = __webpack_require__(/*! ./employee.get.handler */ "./src/app/employee/commands/handlers/employee.get.handler.ts");
const get_employee_job_statistics_handler_1 = __webpack_require__(/*! ./get-employee-job-statistics.handler */ "./src/app/employee/commands/handlers/get-employee-job-statistics.handler.ts");
const update_employee_job_search_status_handler_1 = __webpack_require__(/*! ./update-employee-job-search-status.handler */ "./src/app/employee/commands/handlers/update-employee-job-search-status.handler.ts");
const update_employee_total_worked_hours_handler_1 = __webpack_require__(/*! ./update-employee-total-worked-hours.handler */ "./src/app/employee/commands/handlers/update-employee-total-worked-hours.handler.ts");
exports.CommandHandlers = [
    employee_create_handler_1.EmployeeCreateHandler,
    employee_bulk_create_handler_1.EmployeeBulkCreateHandler,
    employee_get_handler_1.EmployeeGetHandler,
    update_employee_total_worked_hours_handler_1.UpdateEmployeeTotalWorkedHoursHandler,
    update_employee_job_search_status_handler_1.UpdateEmployeeJobSearchStatusHandler,
    get_employee_job_statistics_handler_1.GetEmployeeJobStatisticsHandler
];


/***/ }),

/***/ "./src/app/employee/commands/handlers/update-employee-job-search-status.handler.ts":
/*!*****************************************************************************************!*\
  !*** ./src/app/employee/commands/handlers/update-employee-job-search-status.handler.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateEmployeeJobSearchStatusHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_service_1 = __webpack_require__(/*! ../../employee.service */ "./src/app/employee/employee.service.ts");
const update_employee_job_search_status_command_1 = __webpack_require__(/*! ../update-employee-job-search-status.command */ "./src/app/employee/commands/update-employee-job-search-status.command.ts");
const integration_ai_1 = __webpack_require__(/*! @gauzy/integration-ai */ "./libs/integration-ai/src/index.ts");
let UpdateEmployeeJobSearchStatusHandler = class UpdateEmployeeJobSearchStatusHandler {
    constructor(employeeService, gauzyAIService) {
        this.employeeService = employeeService;
        this.gauzyAIService = gauzyAIService;
    }
    async execute(command) {
        const { employeeId, request } = command;
        this.gauzyAIService.updateEmployeeStatus(employeeId, request.isJobSearchActive);
        return this.employeeService.update(employeeId, request);
    }
};
UpdateEmployeeJobSearchStatusHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(update_employee_job_search_status_command_1.UpdateEmployeeJobSearchStatusCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _a : Object, typeof (_b = typeof integration_ai_1.GauzyAIService !== "undefined" && integration_ai_1.GauzyAIService) === "function" ? _b : Object])
], UpdateEmployeeJobSearchStatusHandler);
exports.UpdateEmployeeJobSearchStatusHandler = UpdateEmployeeJobSearchStatusHandler;


/***/ }),

/***/ "./src/app/employee/commands/handlers/update-employee-total-worked-hours.handler.ts":
/*!******************************************************************************************!*\
  !*** ./src/app/employee/commands/handlers/update-employee-total-worked-hours.handler.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateEmployeeTotalWorkedHoursHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_service_1 = __webpack_require__(/*! ../../employee.service */ "./src/app/employee/employee.service.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const update_employee_total_worked_hours_command_1 = __webpack_require__(/*! ../update-employee-total-worked-hours.command */ "./src/app/employee/commands/update-employee-total-worked-hours.command.ts");
const time_log_entity_1 = __webpack_require__(/*! ../../../timesheet/time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
let UpdateEmployeeTotalWorkedHoursHandler = class UpdateEmployeeTotalWorkedHoursHandler {
    constructor(employeeService, timeLogRepository) {
        this.employeeService = employeeService;
        this.timeLogRepository = timeLogRepository;
    }
    async execute(command) {
        const { employeeId, hours } = command;
        let totalWorkHours;
        if (hours) {
            totalWorkHours = hours;
        }
        else {
            const logs = await this.timeLogRepository
                .createQueryBuilder()
                .select(`${environment_1.environment.database.type === 'sqlite'
                ? 'SUM((julianday("stoppedAt") - julianday("startedAt")) * 86400)'
                : 'SUM(extract(epoch from ("stoppedAt" - "startedAt")))'}`, `duration`)
                .where({
                employeeId
            })
                .getRawOne();
            totalWorkHours = (logs.duration || 0) / 3600;
        }
        await this.employeeService.update(employeeId, {
            totalWorkHours: parseInt(totalWorkHours + '', 10)
        });
    }
};
UpdateEmployeeTotalWorkedHoursHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(update_employee_total_worked_hours_command_1.UpdateEmployeeTotalWorkedHoursCommand),
    tslib_1.__param(1, typeorm_1.InjectRepository(time_log_entity_1.TimeLog)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], UpdateEmployeeTotalWorkedHoursHandler);
exports.UpdateEmployeeTotalWorkedHoursHandler = UpdateEmployeeTotalWorkedHoursHandler;


/***/ }),

/***/ "./src/app/employee/commands/index.ts":
/*!********************************************!*\
  !*** ./src/app/employee/commands/index.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateEmployeeTotalWorkedHoursCommand = exports.EmployeeBulkCreateCommand = exports.EmployeeCreateCommand = void 0;
var employee_create_command_1 = __webpack_require__(/*! ./employee.create.command */ "./src/app/employee/commands/employee.create.command.ts");
Object.defineProperty(exports, "EmployeeCreateCommand", { enumerable: true, get: function () { return employee_create_command_1.EmployeeCreateCommand; } });
var employee_bulk_create_command_1 = __webpack_require__(/*! ./employee.bulk.create.command */ "./src/app/employee/commands/employee.bulk.create.command.ts");
Object.defineProperty(exports, "EmployeeBulkCreateCommand", { enumerable: true, get: function () { return employee_bulk_create_command_1.EmployeeBulkCreateCommand; } });
var update_employee_total_worked_hours_command_1 = __webpack_require__(/*! ./update-employee-total-worked-hours.command */ "./src/app/employee/commands/update-employee-total-worked-hours.command.ts");
Object.defineProperty(exports, "UpdateEmployeeTotalWorkedHoursCommand", { enumerable: true, get: function () { return update_employee_total_worked_hours_command_1.UpdateEmployeeTotalWorkedHoursCommand; } });


/***/ }),

/***/ "./src/app/employee/commands/update-employee-job-search-status.command.ts":
/*!********************************************************************************!*\
  !*** ./src/app/employee/commands/update-employee-job-search-status.command.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateEmployeeJobSearchStatusCommand = void 0;
class UpdateEmployeeJobSearchStatusCommand {
    constructor(employeeId, request) {
        this.employeeId = employeeId;
        this.request = request;
    }
}
exports.UpdateEmployeeJobSearchStatusCommand = UpdateEmployeeJobSearchStatusCommand;
UpdateEmployeeJobSearchStatusCommand.type = '[Employee] Get';


/***/ }),

/***/ "./src/app/employee/commands/update-employee-total-worked-hours.command.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/employee/commands/update-employee-total-worked-hours.command.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateEmployeeTotalWorkedHoursCommand = void 0;
class UpdateEmployeeTotalWorkedHoursCommand {
    constructor(employeeId, hours) {
        this.employeeId = employeeId;
        this.hours = hours;
    }
}
exports.UpdateEmployeeTotalWorkedHoursCommand = UpdateEmployeeTotalWorkedHoursCommand;
UpdateEmployeeTotalWorkedHoursCommand.type = '[Employee] Update Total Worked Hours';


/***/ }),

/***/ "./src/app/employee/default-employees.ts":
/*!***********************************************!*\
  !*** ./src/app/employee/default-employees.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_EMPLOYEES = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
exports.DEFAULT_EMPLOYEES = [
    {
        email: 'ruslan@ever.co',
        password: '123456',
        firstName: 'Ruslan',
        lastName: 'Konviser',
        imageUrl: 'assets/images/avatars/ruslan.jpg',
        employeeLevel: 'A',
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'alish@ever.co',
        password: '123456',
        firstName: 'Alish',
        lastName: 'Meklyov',
        imageUrl: 'assets/images/avatars/alish.jpg',
        startedWorkOn: '2018-03-20',
        endWork: null,
        employeeLevel: 'D',
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'blagovest@ever.co',
        password: '123456',
        firstName: 'Blagovest',
        lastName: 'Gerov',
        imageUrl: 'assets/images/avatars/blagovest.jpg',
        startedWorkOn: '2018-03-19',
        endWork: null,
        employeeLevel: 'C',
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'elvis@ever.co',
        password: '123456',
        firstName: 'Elvis',
        lastName: 'Arabadjiiski',
        imageUrl: 'assets/images/avatars/elvis.jpg',
        startedWorkOn: '2018-05-25',
        endWork: null,
        employeeLevel: 'C',
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'hristo@ever.co',
        password: '123456',
        firstName: 'Hristo',
        lastName: 'Hristov',
        imageUrl: 'assets/images/avatars/hristo.jpg',
        startedWorkOn: '2019-06-17',
        endWork: null,
        employeeLevel: 'B',
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'alex@ever.co',
        password: '123456',
        firstName: 'Aleksandar',
        lastName: 'Tasev',
        imageUrl: 'assets/images/avatars/alexander.jpg',
        startedWorkOn: '2019-08-01',
        endWork: null,
        employeeLevel: 'B',
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'rachit@ever.co',
        password: '123456',
        firstName: 'Rachit',
        lastName: 'Magon',
        imageUrl: 'assets/images/avatars/rachit.png',
        startedWorkOn: '2019-11-27',
        endWork: null,
        employeeLevel: null,
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'dimana@ever.co',
        password: '123456',
        firstName: 'Dimana',
        lastName: 'Tsvetkova',
        imageUrl: 'assets/images/avatars/dimana.jpeg',
        startedWorkOn: '2019-11-26',
        endWork: null,
        employeeLevel: null,
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'pavel@ever.co',
        password: '123456',
        firstName: 'Pavel',
        lastName: 'Denchev',
        imageUrl: 'assets/images/avatars/pavel.jpg',
        startedWorkOn: '2020-03-16',
        endWork: null,
        employeeLevel: 'A',
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'yavor@ever.co',
        password: '123456',
        firstName: 'Yavor',
        lastName: 'Grancharov',
        imageUrl: 'assets/images/avatars/yavor.jpg',
        startedWorkOn: '2020-02-05',
        endWork: null,
        employeeLevel: 'A',
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'tsvetelina@ever.co',
        password: '123456',
        firstName: 'Tsvetelina',
        lastName: 'Yordanova',
        imageUrl: 'assets/images/avatars/tsvetelina.jpg',
        startedWorkOn: '2020-03-02',
        endWork: null,
        employeeLevel: 'A',
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'muiz@smooper.xyz',
        password: '123456',
        firstName: 'Muiz',
        lastName: 'Nadeem',
        imageUrl: 'assets/images/avatars/muiz.jpg',
        startedWorkOn: '2019-11-27',
        endWork: null,
        employeeLevel: null,
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'deko898@hotmail.com',
        password: '123456',
        firstName: 'Dejan',
        lastName: 'Obradovikj',
        imageUrl: 'assets/images/avatars/dejan.jpg',
        startedWorkOn: '2020-03-07',
        endWork: null,
        employeeLevel: null,
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'ckhandla94@gmail.com',
        password: '123456',
        firstName: 'Chetan',
        lastName: 'Khandla',
        imageUrl: 'assets/images/avatars/chetan.png',
        startedWorkOn: '2020-03-07',
        endWork: null,
        employeeLevel: null,
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'julia@ever.co',
        password: '123456',
        firstName: 'Julia',
        lastName: 'Konviser',
        imageUrl: 'assets/images/avatars/julia.png',
        startedWorkOn: '2018-08-01',
        endWork: null,
        employeeLevel: 'C',
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    },
    {
        email: 'yordan@ever.co',
        password: '123456',
        firstName: 'Yordan ',
        lastName: 'Genovski',
        imageUrl: 'assets/images/avatars/yordan.jpg',
        startedWorkOn: '2018-08-01',
        endWork: null,
        employeeLevel: 'C',
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    }
];


/***/ }),

/***/ "./src/app/employee/employee.controller.ts":
/*!*************************************************!*\
  !*** ./src/app/employee/employee.controller.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/employee/commands/index.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const employee_entity_1 = __webpack_require__(/*! ./employee.entity */ "./src/app/employee/employee.entity.ts");
const employee_service_1 = __webpack_require__(/*! ./employee.service */ "./src/app/employee/employee.service.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const nestjs_i18n_1 = __webpack_require__(/*! nestjs-i18n */ "nestjs-i18n");
const express_1 = __webpack_require__(/*! express */ "express");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const update_employee_job_search_status_command_1 = __webpack_require__(/*! ./commands/update-employee-job-search-status.command */ "./src/app/employee/commands/update-employee-job-search-status.command.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const get_employee_job_statistics_command_1 = __webpack_require__(/*! ./commands/get-employee-job-statistics.command */ "./src/app/employee/commands/get-employee-job-statistics.command.ts");
let EmployeeController = class EmployeeController extends crud_controller_1.CrudController {
    constructor(employeeService, commandBus) {
        super(employeeService);
        this.employeeService = employeeService;
        this.commandBus = commandBus;
    }
    async getEmployeeJobsStatistics(request) {
        return this.commandBus.execute(new get_employee_job_statistics_command_1.GetEmployeeJobStatisticsCommand(request));
    }
    async update(id, entity) {
        try {
            return await this.employeeService.create(Object.assign({ id }, entity));
        }
        catch (error) {
            console.log(error);
            return;
        }
    }
    async findAllEmployees(data) {
        const { relations, findInput } = data;
        return this.employeeService.findAll({
            where: findInput,
            relations
        });
    }
    async findAllEmployeesPublicData(data) {
        const { relations, findInput } = JSON.parse(data);
        return this.employeeService.findAll({ where: findInput, relations });
    }
    async findEmployeePublicData(id, data) {
        const { relations } = JSON.parse(data);
        return this.employeeService.findOne(id, {
            relations
        });
    }
    async findAllWorkingEmployees(data) {
        const { findInput } = data;
        const { organizationId, forMonth = new Date(), withUser } = findInput;
        const tenantId = context_1.RequestContext.currentTenantId();
        return this.employeeService.findWorkingEmployees(organizationId, tenantId, new Date(forMonth), withUser);
    }
    async findById(id, data) {
        const { relations = [], useTenant } = data;
        if (useTenant) {
            return this.employeeService.findOne(id, {
                relations
            });
        }
        else {
            return this.employeeService.findWithoutTenant(id, {
                relations
            });
        }
    }
    async findByUserId(userId, data) {
        const { relations = [] } = data;
        const tenantId = context_1.RequestContext.currentTenantId();
        return this.employeeService.findOneOrFail({
            where: {
                userId,
                tenantId
            },
            relations
        });
    }
    async create(entity, request, languageCode, ...options) {
        if (!entity.user.imageUrl) {
            entity.user.imageUrl = core_1.getUserDummyImage(entity.user);
        }
        entity.originalUrl = request.get('Origin');
        return this.commandBus.execute(new commands_1.EmployeeCreateCommand(entity, languageCode));
    }
    async createBulk(input, languageCode, ...options) {
        input
            .filter((entity) => !entity.user.imageUrl)
            .forEach((entity) => (entity.user.imageUrl = core_1.getUserDummyImage(entity.user)));
        return this.commandBus.execute(new commands_1.EmployeeBulkCreateCommand(input, languageCode));
    }
    async updateJobSearchStatus(employeeId, request) {
        return this.commandBus.execute(new update_employee_job_search_status_command_1.UpdateEmployeeJobSearchStatusCommand(employeeId, request));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get Employee Jobs Statistics' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Found employee'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_EMPLOYEES_EDIT),
    common_1.Get('/job-statistics'),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.FindManyOptions !== "undefined" && typeorm_1.FindManyOptions) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], EmployeeController.prototype, "getEmployeeJobsStatistics", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_b = typeof employee_entity_1.Employee !== "undefined" && employee_entity_1.Employee) === "function" ? _b : Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], EmployeeController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all employees in the same tenant.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employees in the tenant',
        type: employee_entity_1.Employee
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], EmployeeController.prototype, "findAllEmployees", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all public information employees in the same tenant.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employees in the tenant',
        type: employee_entity_1.Employee
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('public'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], EmployeeController.prototype, "findAllEmployeesPublicData", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all public information employee in the same tenant.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee in the tenant',
        type: employee_entity_1.Employee
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('public/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, String]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], EmployeeController.prototype, "findEmployeePublicData", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all working employees.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found working employees',
        type: employee_entity_1.Employee
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('/working'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], EmployeeController.prototype, "findAllWorkingEmployees", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find employee by id in the same tenant.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee in the same tenant',
        type: employee_entity_1.Employee
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(':id'),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], EmployeeController.prototype, "findById", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find employee by user id in the same tenant.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employee in the same tenant',
        type: employee_entity_1.Employee
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('/user/:userId'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    tslib_1.__param(0, common_1.Param('userId')),
    tslib_1.__param(1, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], EmployeeController.prototype, "findByUserId", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_EMPLOYEES_EDIT),
    common_1.Post('/create'),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__param(1, common_1.Req()),
    tslib_1.__param(2, nestjs_i18n_1.I18nLang()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_k = typeof models_1.IEmployeeCreateInput !== "undefined" && models_1.IEmployeeCreateInput) === "function" ? _k : Object, typeof (_l = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _l : Object, typeof (_m = typeof models_1.LanguagesEnum !== "undefined" && models_1.LanguagesEnum) === "function" ? _m : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_o = typeof Promise !== "undefined" && Promise) === "function" ? _o : Object)
], EmployeeController.prototype, "create", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create records in Bulk' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Records have been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_EMPLOYEES_EDIT),
    common_1.Post('/createBulk'),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__param(1, nestjs_i18n_1.I18nLang()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Array, typeof (_p = typeof models_1.LanguagesEnum !== "undefined" && models_1.LanguagesEnum) === "function" ? _p : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_q = typeof Promise !== "undefined" && Promise) === "function" ? _q : Object)
], EmployeeController.prototype, "createBulk", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update Job Search Status' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Records have been successfully updated.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_EMPLOYEES_EDIT),
    common_1.Put('/:id/job-search-status'),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_r = typeof models_1.UpdateEmployeeJobsStatistics !== "undefined" && models_1.UpdateEmployeeJobsStatistics) === "function" ? _r : Object]),
    tslib_1.__metadata("design:returntype", typeof (_s = typeof Promise !== "undefined" && Promise) === "function" ? _s : Object)
], EmployeeController.prototype, "updateJobSearchStatus", null);
EmployeeController = tslib_1.__decorate([
    swagger_1.ApiTags('Employee'),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_t = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _t : Object, typeof (_u = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _u : Object])
], EmployeeController);
exports.EmployeeController = EmployeeController;


/***/ }),

/***/ "./src/app/employee/employee.entity.ts":
/*!*********************************************!*\
  !*** ./src/app/employee/employee.entity.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Employee = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const organization_department_entity_1 = __webpack_require__(/*! ../organization-department/organization-department.entity */ "./src/app/organization-department/organization-department.entity.ts");
const organization_employment_type_entity_1 = __webpack_require__(/*! ../organization-employment-type/organization-employment-type.entity */ "./src/app/organization-employment-type/organization-employment-type.entity.ts");
const organization_positions_entity_1 = __webpack_require__(/*! ../organization-positions/organization-positions.entity */ "./src/app/organization-positions/organization-positions.entity.ts");
const organization_team_employee_entity_1 = __webpack_require__(/*! ../organization-team-employee/organization-team-employee.entity */ "./src/app/organization-team-employee/organization-team-employee.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const invoice_item_entity_1 = __webpack_require__(/*! ../invoice-item/invoice-item.entity */ "./src/app/invoice-item/invoice-item.entity.ts");
const request_approval_employee_entity_1 = __webpack_require__(/*! ../request-approval-employee/request-approval-employee.entity */ "./src/app/request-approval-employee/request-approval-employee.entity.ts");
const skill_entity_1 = __webpack_require__(/*! ../skills/skill.entity */ "./src/app/skills/skill.entity.ts");
const contact_entity_1 = __webpack_require__(/*! ../contact/contact.entity */ "./src/app/contact/contact.entity.ts");
const time_log_entity_1 = __webpack_require__(/*! ../timesheet/time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
const payment_entity_1 = __webpack_require__(/*! ../payment/payment.entity */ "./src/app/payment/payment.entity.ts");
const job_preset_entity_1 = __webpack_require__(/*! ../employee-job-preset/job-preset.entity */ "./src/app/employee-job-preset/job-preset.entity.ts");
let Employee = class Employee extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.employee),
    typeorm_1.JoinTable({
        name: 'tag_employee'
    }),
    tslib_1.__metadata("design:type", Array)
], Employee.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: contact_entity_1.Contact }),
    typeorm_1.ManyToOne(() => contact_entity_1.Contact, (contact) => contact.employees, {
        nullable: true,
        cascade: true,
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IContact !== "undefined" && models_1.IContact) === "function" ? _a : Object)
], Employee.prototype, "contact", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((employee) => employee.contact),
    tslib_1.__metadata("design:type", String)
], Employee.prototype, "contactId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => skill_entity_1.Skill, (skill) => skill.employees),
    typeorm_1.JoinTable({
        name: 'skill_employee'
    }),
    tslib_1.__metadata("design:type", Array)
], Employee.prototype, "skills", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: user_entity_1.User }),
    typeorm_1.OneToOne((type) => user_entity_1.User, {
        nullable: false,
        cascade: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof models_1.IUser !== "undefined" && models_1.IUser) === "function" ? _b : Object)
], Employee.prototype, "user", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((employee) => employee.user),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Employee.prototype, "userId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: organization_positions_entity_1.OrganizationPositions }),
    typeorm_1.ManyToOne((type) => organization_positions_entity_1.OrganizationPositions, { nullable: true }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_c = typeof models_1.IOrganizationPosition !== "undefined" && models_1.IOrganizationPosition) === "function" ? _c : Object)
], Employee.prototype, "organizationPosition", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((employee) => employee.organizationPosition),
    tslib_1.__metadata("design:type", String)
], Employee.prototype, "organizationPositionId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], Employee.prototype, "valueDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean, default: true }),
    typeorm_1.Column({ nullable: true, default: true }),
    tslib_1.__metadata("design:type", Boolean)
], Employee.prototype, "isActive", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String, maxLength: 200 }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ length: 200, nullable: true }),
    tslib_1.__metadata("design:type", String)
], Employee.prototype, "short_description", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Employee.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object)
], Employee.prototype, "startedWorkOn", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_f = typeof Date !== "undefined" && Date) === "function" ? _f : Object)
], Employee.prototype, "endWork", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.PayPeriodEnum }),
    class_validator_1.IsEnum(models_1.PayPeriodEnum),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Employee.prototype, "payPeriod", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ type: 'numeric', nullable: true }),
    tslib_1.__metadata("design:type", Number)
], Employee.prototype, "billRateValue", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.CurrenciesEnum }),
    class_validator_1.IsEnum(models_1.CurrenciesEnum),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Employee.prototype, "billRateCurrency", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], Employee.prototype, "reWeeklyLimit", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany((type) => organization_team_employee_entity_1.OrganizationTeamEmployee, (organizationTeamEmployee) => organizationTeamEmployee.employee),
    tslib_1.__metadata("design:type", Array)
], Employee.prototype, "teams", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany((type) => time_log_entity_1.TimeLog, (timeLog) => timeLog.employee),
    tslib_1.__metadata("design:type", Array)
], Employee.prototype, "timeLogs", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_g = typeof Date !== "undefined" && Date) === "function" ? _g : Object)
], Employee.prototype, "offerDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_h = typeof Date !== "undefined" && Date) === "function" ? _h : Object)
], Employee.prototype, "acceptDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_j = typeof Date !== "undefined" && Date) === "function" ? _j : Object)
], Employee.prototype, "rejectDate", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => organization_department_entity_1.OrganizationDepartment, (organizationDepartment) => organizationDepartment.members, { cascade: true }),
    tslib_1.__metadata("design:type", Array)
], Employee.prototype, "organizationDepartments", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => organization_employment_type_entity_1.OrganizationEmploymentType, (organizationEmploymentType) => organizationEmploymentType.members, { cascade: true }),
    tslib_1.__metadata("design:type", Array)
], Employee.prototype, "organizationEmploymentTypes", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany(() => job_preset_entity_1.JobPreset, (jobPreset) => jobPreset.employees),
    tslib_1.__metadata("design:type", Array)
], Employee.prototype, "jobPresets", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String, maxLength: 500 }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ length: 500, nullable: true }),
    tslib_1.__metadata("design:type", String)
], Employee.prototype, "employeeLevel", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Employee.prototype, "anonymousBonus", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: invoice_item_entity_1.InvoiceItem, isArray: true }),
    typeorm_1.OneToMany((type) => invoice_item_entity_1.InvoiceItem, (invoiceItem) => invoiceItem.employee, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Employee.prototype, "invoiceItems", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: payment_entity_1.Payment, isArray: true }),
    typeorm_1.OneToMany((type) => payment_entity_1.Payment, (payments) => payments.recordedBy),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Employee.prototype, "payments", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany((type) => request_approval_employee_entity_1.RequestApprovalEmployee, (requestApprovals) => requestApprovals.employee),
    tslib_1.__metadata("design:type", Array)
], Employee.prototype, "requestApprovals", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ type: 'numeric', nullable: true }),
    tslib_1.__metadata("design:type", Number)
], Employee.prototype, "averageIncome", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ type: 'numeric', nullable: true }),
    tslib_1.__metadata("design:type", Number)
], Employee.prototype, "averageBonus", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ type: 'numeric', default: 0 }),
    tslib_1.__metadata("design:type", Number)
], Employee.prototype, "totalWorkHours", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ type: 'numeric', nullable: true }),
    tslib_1.__metadata("design:type", Number)
], Employee.prototype, "averageExpenses", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Employee.prototype, "show_anonymous_bonus", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Employee.prototype, "show_average_bonus", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Employee.prototype, "show_average_expenses", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Employee.prototype, "show_average_income", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Employee.prototype, "show_billrate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Employee.prototype, "show_payperiod", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Employee.prototype, "show_start_work_on", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Employee.prototype, "isJobSearchActive", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Employee.prototype, "linkedInUrl", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Employee.prototype, "facebookUrl", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Employee.prototype, "instagramUrl", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Employee.prototype, "twitterUrl", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Employee.prototype, "githubUrl", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Employee.prototype, "gitlabUrl", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Employee.prototype, "upworkUrl", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Employee.prototype, "isVerified", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Employee.prototype, "isVetted", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ type: 'numeric', nullable: true }),
    tslib_1.__metadata("design:type", Number)
], Employee.prototype, "totalJobs", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ type: 'numeric', nullable: true }),
    tslib_1.__metadata("design:type", Number)
], Employee.prototype, "jobSuccess", void 0);
Employee = tslib_1.__decorate([
    typeorm_1.Entity('employee')
], Employee);
exports.Employee = Employee;


/***/ }),

/***/ "./src/app/employee/employee.module.ts":
/*!*********************************************!*\
  !*** ./src/app/employee/employee.module.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/employee/commands/handlers/index.ts");
const employee_controller_1 = __webpack_require__(/*! ./employee.controller */ "./src/app/employee/employee.controller.ts");
const employee_entity_1 = __webpack_require__(/*! ./employee.entity */ "./src/app/employee/employee.entity.ts");
const employee_service_1 = __webpack_require__(/*! ./employee.service */ "./src/app/employee/employee.service.ts");
const auth_service_1 = __webpack_require__(/*! ../auth/auth.service */ "./src/app/auth/auth.service.ts");
const email_1 = __webpack_require__(/*! ../email */ "./src/app/email/index.ts");
const user_organization_module_1 = __webpack_require__(/*! ../user-organization/user-organization.module */ "./src/app/user-organization/user-organization.module.ts");
const time_log_entity_1 = __webpack_require__(/*! ../timesheet/time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
const integration_ai_1 = __webpack_require__(/*! @gauzy/integration-ai */ "./libs/integration-ai/src/index.ts");
let EmployeeModule = class EmployeeModule {
};
EmployeeModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([employee_entity_1.Employee, user_entity_1.User, time_log_entity_1.TimeLog]),
            email_1.EmailModule,
            user_organization_module_1.UserOrganizationModule,
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [employee_controller_1.EmployeeController],
        providers: [
            employee_service_1.EmployeeService,
            user_service_1.UserService,
            auth_service_1.AuthService,
            email_1.EmailService,
            integration_ai_1.GauzyAIService,
            ...handlers_1.CommandHandlers
        ],
        exports: [typeorm_1.TypeOrmModule, employee_service_1.EmployeeService]
    })
], EmployeeModule);
exports.EmployeeModule = EmployeeModule;


/***/ }),

/***/ "./src/app/employee/employee.seed.ts":
/*!*******************************************!*\
  !*** ./src/app/employee/employee.seed.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomEmployees = exports.createDefaultEmployees = void 0;
const employee_entity_1 = __webpack_require__(/*! ./employee.entity */ "./src/app/employee/employee.entity.ts");
const faker_1 = __webpack_require__(/*! faker */ "faker");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const default_employees_1 = __webpack_require__(/*! ./default-employees */ "./src/app/employee/default-employees.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
exports.createDefaultEmployees = async (connection, defaultData) => {
    const defaultEmployees = default_employees_1.DEFAULT_EMPLOYEES;
    const defaultUsers = defaultData.users;
    const defaultOrg = defaultData.org;
    const defaultTenant = defaultData.tenant;
    const employees = [];
    for (const user of defaultUsers) {
        const employee = new employee_entity_1.Employee();
        employee.organization = defaultOrg;
        employee.user = user;
        employee.employeeLevel = defaultEmployees.find((e) => e.email === employee.user.email).employeeLevel;
        employee.startedWorkOn = getDate(defaultEmployees.find((e) => e.email === employee.user.email)
            .startedWorkOn);
        employee.endWork = getDate(defaultEmployees.find((e) => e.email === employee.user.email)
            .endWork);
        employee.payPeriod = faker.random.arrayElement(Object.keys(models_1.PayPeriodEnum));
        employee.billRateValue = faker.random.number(100);
        employee.billRateCurrency = defaultOrg.currency || environment_1.environment.defaultCurrency;
        employee.reWeeklyLimit = faker.random.number(40);
        employee.tenant = defaultTenant;
        employees.push(employee);
    }
    await insertEmployees(connection, employees);
    return employees;
};
exports.createRandomEmployees = async (connection, tenants, tenantOrganizationsMap, tenantUsersMap, employeesPerOrganization) => {
    const employeeMap = new Map();
    for (const tenant of tenants) {
        const employees = [];
        const randomUsers = tenantUsersMap.get(tenant).employeeUsers;
        const randomOrgs = tenantOrganizationsMap.get(tenant);
        for (const organization of randomOrgs) {
            if (randomUsers.length) {
                for (let index = 0; index < employeesPerOrganization; index++) {
                    const employee = new employee_entity_1.Employee();
                    employee.organization = organization;
                    employee.user = randomUsers.pop();
                    employee.isActive = true;
                    employee.endWork = null;
                    employee.startedWorkOn = new Date(moment(faker_1.date.past(index % 5)).format('YYYY-MM-DD hh:mm:ss'));
                    employee.payPeriod = faker.random.arrayElement(Object.keys(models_1.PayPeriodEnum));
                    employee.billRateValue = faker.random.number(100);
                    employee.billRateCurrency =
                        organization.currency || environment_1.environment.defaultCurrency;
                    employee.reWeeklyLimit = faker.random.number(40);
                    employee.tenant = tenant;
                    if (employee.user) {
                        employees.push(employee);
                    }
                }
            }
        }
        employeeMap.set(tenant, employees);
        await insertEmployees(connection, employees);
    }
    return employeeMap;
};
const insertEmployees = async (connection, employees) => {
    return await connection.manager.save(employees);
};
const getDate = (dateString) => {
    if (dateString) {
        const date = new Date(dateString);
        return date;
    }
    return null;
};


/***/ }),

/***/ "./src/app/employee/employee.service.ts":
/*!**********************************************!*\
  !*** ./src/app/employee/employee.service.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const moment = __webpack_require__(/*! moment */ "moment");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
const employee_entity_1 = __webpack_require__(/*! ./employee.entity */ "./src/app/employee/employee.entity.ts");
let EmployeeService = class EmployeeService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(employeeRepository) {
        super(employeeRepository);
        this.employeeRepository = employeeRepository;
    }
    async createBulk(input) {
        return Promise.all(input.map((emp) => {
            emp.user.tenant = {
                id: emp.organization.tenantId
            };
            return this.create(emp);
        }));
    }
    async findAllActive() {
        const user = context_1.RequestContext.currentUser();
        if (user && user.tenantId) {
            return await this.repository.find({
                where: { isActive: true, tenantId: user.tenantId },
                relations: ['user']
            });
        }
    }
    async findWorkingEmployees(organizationId, tenantId, forMonth, withUser) {
        const query = this.employeeRepository.createQueryBuilder('employee');
        query
            .where(`${query.alias}."organizationId" = :organizationId`, {
            organizationId
        })
            .andWhere(`${query.alias}."tenantId" = :tenantId`, {
            tenantId
        })
            .andWhere(`${query.alias}."startedWorkOn" <= :startedWorkOnCondition`, {
            startedWorkOnCondition: moment(forMonth)
                .endOf('month')
                .format('YYYY-MM-DD hh:mm:ss')
        })
            .andWhere(new typeorm_2.Brackets((notEndedCondition) => {
            notEndedCondition
                .where(`${query.alias}."endWork" IS NULL`)
                .orWhere(`${query.alias}."endWork" >= :endWorkOnCondition`, {
                endWorkOnCondition: moment(forMonth)
                    .startOf('month')
                    .format('YYYY-MM-DD hh:mm:ss')
            });
        }));
        if (withUser) {
            query.leftJoinAndSelect(`${query.alias}.user`, 'user');
        }
        const [items, total] = await query.getManyAndCount();
        return {
            total,
            items
        };
    }
    async findWithoutTenant(id, relations) {
        return await this.repository.findOne(id, relations);
    }
};
EmployeeService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], EmployeeService);
exports.EmployeeService = EmployeeService;


/***/ }),

/***/ "./src/app/equipment-sharing-policy/equipment-sharing-policy.controller.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/equipment-sharing-policy/equipment-sharing-policy.controller.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentSharingPolicyController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const equipment_sharing_policy_entity_1 = __webpack_require__(/*! ./equipment-sharing-policy.entity */ "./src/app/equipment-sharing-policy/equipment-sharing-policy.entity.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const equipment_sharing_policy_service_1 = __webpack_require__(/*! ./equipment-sharing-policy.service */ "./src/app/equipment-sharing-policy/equipment-sharing-policy.service.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let EquipmentSharingPolicyController = class EquipmentSharingPolicyController extends core_1.CrudController {
    constructor(equipmentSharingPolicyService) {
        super(equipmentSharingPolicyService);
        this.equipmentSharingPolicyService = equipmentSharingPolicyService;
    }
    findAllEquipmentSharingPolicies(data) {
        const { findInput, relations } = JSON.parse(data);
        return this.equipmentSharingPolicyService.findAllPolicies({
            where: findInput,
            relations
        });
    }
    async createEquipmentSharingPolicy(entity) {
        return this.equipmentSharingPolicyService.create(entity);
    }
    async updateEquipmentSharingPolicy(id, entity) {
        return this.equipmentSharingPolicyService.update(id, entity);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all policies.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found policies',
        type: equipment_sharing_policy_entity_1.EquipmentSharingPolicy
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", Object)
], EquipmentSharingPolicyController.prototype, "findAllEquipmentSharingPolicies", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    common_1.Post(''),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.IEquipmentSharingPolicy !== "undefined" && models_1.IEquipmentSharingPolicy) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], EquipmentSharingPolicyController.prototype, "createEquipmentSharingPolicy", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_c = typeof models_1.IEquipmentSharingPolicy !== "undefined" && models_1.IEquipmentSharingPolicy) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], EquipmentSharingPolicyController.prototype, "updateEquipmentSharingPolicy", null);
EquipmentSharingPolicyController = tslib_1.__decorate([
    swagger_1.ApiTags('EquipmentSharingPolicy'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof equipment_sharing_policy_service_1.EquipmentSharingPolicyService !== "undefined" && equipment_sharing_policy_service_1.EquipmentSharingPolicyService) === "function" ? _e : Object])
], EquipmentSharingPolicyController);
exports.EquipmentSharingPolicyController = EquipmentSharingPolicyController;


/***/ }),

/***/ "./src/app/equipment-sharing-policy/equipment-sharing-policy.entity.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/equipment-sharing-policy/equipment-sharing-policy.entity.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentSharingPolicy = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let EquipmentSharingPolicy = class EquipmentSharingPolicy extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EquipmentSharingPolicy.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EquipmentSharingPolicy.prototype, "description", void 0);
EquipmentSharingPolicy = tslib_1.__decorate([
    typeorm_1.Entity('equipment_sharing_policy')
], EquipmentSharingPolicy);
exports.EquipmentSharingPolicy = EquipmentSharingPolicy;


/***/ }),

/***/ "./src/app/equipment-sharing-policy/equipment-sharing-policy.module.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/equipment-sharing-policy/equipment-sharing-policy.module.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentSharingPolicyModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const equipment_sharing_policy_controller_1 = __webpack_require__(/*! ./equipment-sharing-policy.controller */ "./src/app/equipment-sharing-policy/equipment-sharing-policy.controller.ts");
const equipment_sharing_policy_service_1 = __webpack_require__(/*! ./equipment-sharing-policy.service */ "./src/app/equipment-sharing-policy/equipment-sharing-policy.service.ts");
const equipment_sharing_policy_entity_1 = __webpack_require__(/*! ./equipment-sharing-policy.entity */ "./src/app/equipment-sharing-policy/equipment-sharing-policy.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let EquipmentSharingPolicyModule = class EquipmentSharingPolicyModule {
};
EquipmentSharingPolicyModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([user_entity_1.User, equipment_sharing_policy_entity_1.EquipmentSharingPolicy]),
            tenant_module_1.TenantModule
        ],
        controllers: [equipment_sharing_policy_controller_1.EquipmentSharingPolicyController],
        providers: [equipment_sharing_policy_service_1.EquipmentSharingPolicyService, user_service_1.UserService],
        exports: [typeorm_1.TypeOrmModule, equipment_sharing_policy_service_1.EquipmentSharingPolicyService]
    })
], EquipmentSharingPolicyModule);
exports.EquipmentSharingPolicyModule = EquipmentSharingPolicyModule;


/***/ }),

/***/ "./src/app/equipment-sharing-policy/equipment-sharing-policy.seed.ts":
/*!***************************************************************************!*\
  !*** ./src/app/equipment-sharing-policy/equipment-sharing-policy.seed.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomEquipmentSharingPolicyForOrg = exports.createDefaultEquipmentSharingPolicyForOrg = void 0;
const equipment_sharing_policy_entity_1 = __webpack_require__(/*! ./equipment-sharing-policy.entity */ "./src/app/equipment-sharing-policy/equipment-sharing-policy.entity.ts");
exports.createDefaultEquipmentSharingPolicyForOrg = async (connection, defaultData) => {
    const promises = [];
    defaultData.orgs.forEach((org) => {
        const defaultEquipmentSharingPolicy = new equipment_sharing_policy_entity_1.EquipmentSharingPolicy();
        defaultEquipmentSharingPolicy.name = 'Default Approval Policy';
        defaultEquipmentSharingPolicy.organization = org;
        defaultEquipmentSharingPolicy.tenant = org.tenant;
        defaultEquipmentSharingPolicy.description = 'Default approval policy';
        promises.push(insertDefaultPolicy(connection, defaultEquipmentSharingPolicy));
    });
    await Promise.all(promises);
};
const insertDefaultPolicy = async (connection, defaultPolicy) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(equipment_sharing_policy_entity_1.EquipmentSharingPolicy)
        .values(defaultPolicy)
        .execute();
};
exports.createRandomEquipmentSharingPolicyForOrg = async (connection, tenants, tenantOrganizationsMap) => {
    const policies = [];
    const policyArray = ['Equipment Sharing Policy'];
    for (const tenant of tenants) {
        const orgs = tenantOrganizationsMap.get(tenant);
        orgs.forEach((org) => {
            policyArray.forEach((name) => {
                const policy = new equipment_sharing_policy_entity_1.EquipmentSharingPolicy();
                policy.description = name;
                policy.name = name;
                policy.organization = org;
                policy.tenant = tenant;
                policies.push(policy);
            });
        });
    }
    await connection
        .createQueryBuilder()
        .insert()
        .into(equipment_sharing_policy_entity_1.EquipmentSharingPolicy)
        .values(policies)
        .execute();
    return policies;
};


/***/ }),

/***/ "./src/app/equipment-sharing-policy/equipment-sharing-policy.service.ts":
/*!******************************************************************************!*\
  !*** ./src/app/equipment-sharing-policy/equipment-sharing-policy.service.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentSharingPolicyService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const equipment_sharing_policy_entity_1 = __webpack_require__(/*! ./equipment-sharing-policy.entity */ "./src/app/equipment-sharing-policy/equipment-sharing-policy.entity.ts");
let EquipmentSharingPolicyService = class EquipmentSharingPolicyService extends core_1.CrudService {
    constructor(equipmentSharingRepository) {
        super(equipmentSharingRepository);
        this.equipmentSharingRepository = equipmentSharingRepository;
    }
    async findAllPolicies(filter) {
        const total = await this.equipmentSharingRepository.count(filter);
        const items = await this.equipmentSharingRepository.find(filter);
        return { items, total };
    }
    async create(entity) {
        try {
            const policy = new equipment_sharing_policy_entity_1.EquipmentSharingPolicy();
            policy.name = entity.name;
            policy.organizationId = entity.organizationId;
            policy.tenantId = entity.tenantId;
            policy.description = entity.description;
            return this.equipmentSharingRepository.save(policy);
        }
        catch (error) {
            throw new common_1.BadRequestException(error);
        }
    }
    async update(id, entity) {
        try {
            const policy = await this.equipmentSharingRepository.findOne(id);
            policy.name = entity.name;
            policy.organizationId = entity.organizationId;
            policy.description = entity.description;
            return this.equipmentSharingRepository.save(policy);
        }
        catch (err) {
            throw new common_1.BadRequestException(err);
        }
    }
};
EquipmentSharingPolicyService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(equipment_sharing_policy_entity_1.EquipmentSharingPolicy)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], EquipmentSharingPolicyService);
exports.EquipmentSharingPolicyService = EquipmentSharingPolicyService;


/***/ }),

/***/ "./src/app/equipment-sharing/commands/equipment-sharing.create.command.ts":
/*!********************************************************************************!*\
  !*** ./src/app/equipment-sharing/commands/equipment-sharing.create.command.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentSharingCreateCommand = void 0;
class EquipmentSharingCreateCommand {
    constructor(orgId, equipmentSharing) {
        this.orgId = orgId;
        this.equipmentSharing = equipmentSharing;
    }
}
exports.EquipmentSharingCreateCommand = EquipmentSharingCreateCommand;
EquipmentSharingCreateCommand.type = '[EquipmentSharing] Create';


/***/ }),

/***/ "./src/app/equipment-sharing/commands/equipment-sharing.status.command.ts":
/*!********************************************************************************!*\
  !*** ./src/app/equipment-sharing/commands/equipment-sharing.status.command.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentSharingStatusCommand = void 0;
class EquipmentSharingStatusCommand {
    constructor(id, status) {
        this.id = id;
        this.status = status;
    }
}
exports.EquipmentSharingStatusCommand = EquipmentSharingStatusCommand;
EquipmentSharingStatusCommand.type = '[EquipmentSharing] Status';


/***/ }),

/***/ "./src/app/equipment-sharing/commands/equipment-sharing.update.command.ts":
/*!********************************************************************************!*\
  !*** ./src/app/equipment-sharing/commands/equipment-sharing.update.command.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentSharingUpdateCommand = void 0;
class EquipmentSharingUpdateCommand {
    constructor(id, equipmentSharing) {
        this.id = id;
        this.equipmentSharing = equipmentSharing;
    }
}
exports.EquipmentSharingUpdateCommand = EquipmentSharingUpdateCommand;
EquipmentSharingUpdateCommand.type = '[EquipmentSharing] Update';


/***/ }),

/***/ "./src/app/equipment-sharing/commands/handlers/equipment-sharing.create.handler.ts":
/*!*****************************************************************************************!*\
  !*** ./src/app/equipment-sharing/commands/handlers/equipment-sharing.create.handler.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentSharingCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const equipment_sharing_entity_1 = __webpack_require__(/*! ../../equipment-sharing.entity */ "./src/app/equipment-sharing/equipment-sharing.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const equipment_sharing_create_command_1 = __webpack_require__(/*! ../equipment-sharing.create.command */ "./src/app/equipment-sharing/commands/equipment-sharing.create.command.ts");
const request_approval_entity_1 = __webpack_require__(/*! ../../../request-approval/request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
let EquipmentSharingCreateHandler = class EquipmentSharingCreateHandler {
    constructor(equipmentSharingRepository, requestApprovalRepository) {
        this.equipmentSharingRepository = equipmentSharingRepository;
        this.requestApprovalRepository = requestApprovalRepository;
    }
    async execute(command) {
        const { orgId, equipmentSharing } = command;
        equipmentSharing.createdBy = context_1.RequestContext.currentUser().id;
        equipmentSharing.createdByName = context_1.RequestContext.currentUser().name;
        equipmentSharing.organizationId = orgId;
        const equipmentSharingSaved = await this.equipmentSharingRepository.save(equipmentSharing);
        const requestApproval = new request_approval_entity_1.RequestApproval();
        requestApproval.requestId = equipmentSharingSaved.id;
        requestApproval.requestType =
            models_1.ApprovalPolicyTypesStringEnum.EQUIPMENT_SHARING;
        requestApproval.status = equipmentSharingSaved.status
            ? equipmentSharingSaved.status
            : models_1.RequestApprovalStatusTypesEnum.REQUESTED;
        requestApproval.createdBy = context_1.RequestContext.currentUser().id;
        requestApproval.createdByName = context_1.RequestContext.currentUser().name;
        requestApproval.name = equipmentSharing.name;
        requestApproval.min_count = 1;
        await this.requestApprovalRepository.save(requestApproval);
        return equipmentSharingSaved;
    }
};
EquipmentSharingCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(equipment_sharing_create_command_1.EquipmentSharingCreateCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(equipment_sharing_entity_1.EquipmentSharing)),
    tslib_1.__param(1, typeorm_1.InjectRepository(request_approval_entity_1.RequestApproval)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], EquipmentSharingCreateHandler);
exports.EquipmentSharingCreateHandler = EquipmentSharingCreateHandler;


/***/ }),

/***/ "./src/app/equipment-sharing/commands/handlers/equipment-sharing.status.handler.ts":
/*!*****************************************************************************************!*\
  !*** ./src/app/equipment-sharing/commands/handlers/equipment-sharing.status.handler.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentSharingStatusHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const equipment_sharing_status_command_1 = __webpack_require__(/*! ../equipment-sharing.status.command */ "./src/app/equipment-sharing/commands/equipment-sharing.status.command.ts");
const equipment_sharing_entity_1 = __webpack_require__(/*! ../../equipment-sharing.entity */ "./src/app/equipment-sharing/equipment-sharing.entity.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const request_approval_entity_1 = __webpack_require__(/*! ../../../request-approval/request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const typeorm_2 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
let EquipmentSharingStatusHandler = class EquipmentSharingStatusHandler {
    constructor(equipmentSharingRepository, requestApprovalRepository) {
        this.equipmentSharingRepository = equipmentSharingRepository;
        this.requestApprovalRepository = requestApprovalRepository;
    }
    async execute(command) {
        const { id, status } = command;
        const [equipmentSharing, requestApproval] = await Promise.all([
            await this.equipmentSharingRepository.findOne(id),
            await this.requestApprovalRepository.findOne({
                requestId: id
            })
        ]);
        if (!equipmentSharing) {
            throw new common_1.NotFoundException('Equiment Sharing not found');
        }
        if (equipmentSharing.status === models_1.RequestApprovalStatusTypesEnum.REQUESTED) {
            equipmentSharing.status = status;
            if (requestApproval) {
                requestApproval.status = status;
                await this.requestApprovalRepository.save(requestApproval);
            }
        }
        else {
            throw new common_1.ConflictException('Equiment Sharing is Conflict');
        }
        return await this.equipmentSharingRepository.save(equipmentSharing);
    }
};
EquipmentSharingStatusHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(equipment_sharing_status_command_1.EquipmentSharingStatusCommand),
    tslib_1.__param(0, typeorm_2.InjectRepository(equipment_sharing_entity_1.EquipmentSharing)),
    tslib_1.__param(1, typeorm_2.InjectRepository(request_approval_entity_1.RequestApproval)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _b : Object])
], EquipmentSharingStatusHandler);
exports.EquipmentSharingStatusHandler = EquipmentSharingStatusHandler;


/***/ }),

/***/ "./src/app/equipment-sharing/commands/handlers/equipment-sharing.update.handler.ts":
/*!*****************************************************************************************!*\
  !*** ./src/app/equipment-sharing/commands/handlers/equipment-sharing.update.handler.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentSharingUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const equipment_sharing_entity_1 = __webpack_require__(/*! ../../equipment-sharing.entity */ "./src/app/equipment-sharing/equipment-sharing.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const request_approval_entity_1 = __webpack_require__(/*! ../../../request-approval/request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
const equipment_sharing_update_command_1 = __webpack_require__(/*! ../equipment-sharing.update.command */ "./src/app/equipment-sharing/commands/equipment-sharing.update.command.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
let EquipmentSharingUpdateHandler = class EquipmentSharingUpdateHandler {
    constructor(equipmentSharingRepository, requestApprovalRepository) {
        this.equipmentSharingRepository = equipmentSharingRepository;
        this.requestApprovalRepository = requestApprovalRepository;
    }
    async execute(command) {
        const { id, equipmentSharing } = command;
        await this.equipmentSharingRepository.delete(id);
        const equipmentSharingSaved = await this.equipmentSharingRepository.save(equipmentSharing);
        await this.requestApprovalRepository.delete({
            requestId: id
        });
        const requestApproval = new request_approval_entity_1.RequestApproval();
        requestApproval.requestId = equipmentSharingSaved.id;
        requestApproval.status = equipmentSharingSaved.status
            ? equipmentSharingSaved.status
            : models_1.RequestApprovalStatusTypesEnum.REQUESTED;
        requestApproval.createdBy = context_1.RequestContext.currentUser().id;
        requestApproval.createdByName = context_1.RequestContext.currentUser().name;
        requestApproval.name = equipmentSharing.name;
        requestApproval.min_count = 1;
        await this.requestApprovalRepository.save(requestApproval);
        return equipmentSharingSaved;
    }
};
EquipmentSharingUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(equipment_sharing_update_command_1.EquipmentSharingUpdateCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(equipment_sharing_entity_1.EquipmentSharing)),
    tslib_1.__param(1, typeorm_1.InjectRepository(request_approval_entity_1.RequestApproval)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], EquipmentSharingUpdateHandler);
exports.EquipmentSharingUpdateHandler = EquipmentSharingUpdateHandler;


/***/ }),

/***/ "./src/app/equipment-sharing/commands/handlers/index.ts":
/*!**************************************************************!*\
  !*** ./src/app/equipment-sharing/commands/handlers/index.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const equipment_sharing_status_handler_1 = __webpack_require__(/*! ./equipment-sharing.status.handler */ "./src/app/equipment-sharing/commands/handlers/equipment-sharing.status.handler.ts");
const equipment_sharing_create_handler_1 = __webpack_require__(/*! ./equipment-sharing.create.handler */ "./src/app/equipment-sharing/commands/handlers/equipment-sharing.create.handler.ts");
const equipment_sharing_update_handler_1 = __webpack_require__(/*! ./equipment-sharing.update.handler */ "./src/app/equipment-sharing/commands/handlers/equipment-sharing.update.handler.ts");
exports.CommandHandlers = [
    equipment_sharing_status_handler_1.EquipmentSharingStatusHandler,
    equipment_sharing_create_handler_1.EquipmentSharingCreateHandler,
    equipment_sharing_update_handler_1.EquipmentSharingUpdateHandler
];


/***/ }),

/***/ "./src/app/equipment-sharing/commands/index.ts":
/*!*****************************************************!*\
  !*** ./src/app/equipment-sharing/commands/index.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentSharingUpdateCommand = exports.EquipmentSharingCreateCommand = exports.EquipmentSharingStatusCommand = void 0;
var equipment_sharing_status_command_1 = __webpack_require__(/*! ./equipment-sharing.status.command */ "./src/app/equipment-sharing/commands/equipment-sharing.status.command.ts");
Object.defineProperty(exports, "EquipmentSharingStatusCommand", { enumerable: true, get: function () { return equipment_sharing_status_command_1.EquipmentSharingStatusCommand; } });
var equipment_sharing_create_command_1 = __webpack_require__(/*! ./equipment-sharing.create.command */ "./src/app/equipment-sharing/commands/equipment-sharing.create.command.ts");
Object.defineProperty(exports, "EquipmentSharingCreateCommand", { enumerable: true, get: function () { return equipment_sharing_create_command_1.EquipmentSharingCreateCommand; } });
var equipment_sharing_update_command_1 = __webpack_require__(/*! ./equipment-sharing.update.command */ "./src/app/equipment-sharing/commands/equipment-sharing.update.command.ts");
Object.defineProperty(exports, "EquipmentSharingUpdateCommand", { enumerable: true, get: function () { return equipment_sharing_update_command_1.EquipmentSharingUpdateCommand; } });


/***/ }),

/***/ "./src/app/equipment-sharing/equipment-sharing.controller.ts":
/*!*******************************************************************!*\
  !*** ./src/app/equipment-sharing/equipment-sharing.controller.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentSharingController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const equipment_sharing_entity_1 = __webpack_require__(/*! ./equipment-sharing.entity */ "./src/app/equipment-sharing/equipment-sharing.entity.ts");
const equipment_sharing_service_1 = __webpack_require__(/*! ./equipment-sharing.service */ "./src/app/equipment-sharing/equipment-sharing.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_2 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/equipment-sharing/commands/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let EquipmentSharingController = class EquipmentSharingController extends core_1.CrudController {
    constructor(equipmentSharingService, commandBus) {
        super(equipmentSharingService);
        this.equipmentSharingService = equipmentSharingService;
        this.commandBus = commandBus;
    }
    async findAllEquipmentSharings() {
        return this.equipmentSharingService.findAllEquipmentSharings();
    }
    async findEquipmentSharingsByOrgId(orgId) {
        return this.equipmentSharingService.findEquipmentSharingsByOrgId(orgId);
    }
    async findEquipmentSharingsByEmployeeId(empId) {
        return this.equipmentSharingService.findRequestApprovalsByEmployeeId(empId);
    }
    async createEquipmentSharing(orgId, equipmentSharing) {
        return this.commandBus.execute(new commands_1.EquipmentSharingCreateCommand(orgId, equipmentSharing));
    }
    async update(id, equipmentSharing) {
        return this.commandBus.execute(new commands_1.EquipmentSharingUpdateCommand(id, equipmentSharing));
    }
    async equipmentSharingsRequestApproval(id) {
        return this.commandBus.execute(new commands_1.EquipmentSharingStatusCommand(id, models_1.RequestApprovalStatusTypesEnum.APPROVED));
    }
    async equipmentSharingsRequestRefuse(id) {
        return this.commandBus.execute(new commands_1.EquipmentSharingStatusCommand(id, models_1.RequestApprovalStatusTypesEnum.REFUSED));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all equipment sharings'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found equipment sharings',
        type: equipment_sharing_entity_1.EquipmentSharing
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], EquipmentSharingController.prototype, "findAllEquipmentSharings", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find equipment sharings By Orgization Id'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found equipment sharings',
        type: equipment_sharing_entity_1.EquipmentSharing
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('/organization/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], EquipmentSharingController.prototype, "findEquipmentSharingsByOrgId", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find equipment sharings By Employee Id'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found equipment sharings',
        type: equipment_sharing_entity_1.EquipmentSharing
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('employee/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], EquipmentSharingController.prototype, "findEquipmentSharingsByEmployeeId", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_2.Post('organization/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_d = typeof equipment_sharing_entity_1.EquipmentSharing !== "undefined" && equipment_sharing_entity_1.EquipmentSharing) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], EquipmentSharingController.prototype, "createEquipmentSharing", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_f = typeof equipment_sharing_entity_1.EquipmentSharing !== "undefined" && equipment_sharing_entity_1.EquipmentSharing) === "function" ? _f : Object]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], EquipmentSharingController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'equipment sharings request approval' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found equipment sharings',
        type: equipment_sharing_entity_1.EquipmentSharing
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put('approval/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], EquipmentSharingController.prototype, "equipmentSharingsRequestApproval", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'equipment sharings request refuse' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found equipment sharings',
        type: equipment_sharing_entity_1.EquipmentSharing
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put('refuse/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], EquipmentSharingController.prototype, "equipmentSharingsRequestRefuse", null);
EquipmentSharingController = tslib_1.__decorate([
    swagger_1.ApiTags('EquipmentSharing'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_k = typeof equipment_sharing_service_1.EquipmentSharingService !== "undefined" && equipment_sharing_service_1.EquipmentSharingService) === "function" ? _k : Object, typeof (_l = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _l : Object])
], EquipmentSharingController);
exports.EquipmentSharingController = EquipmentSharingController;


/***/ }),

/***/ "./src/app/equipment-sharing/equipment-sharing.entity.ts":
/*!***************************************************************!*\
  !*** ./src/app/equipment-sharing/equipment-sharing.entity.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentSharing = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const equipment_entity_1 = __webpack_require__(/*! ../equipment/equipment.entity */ "./src/app/equipment/equipment.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const organization_team_entity_1 = __webpack_require__(/*! ../organization-team/organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const equipment_sharing_policy_entity_1 = __webpack_require__(/*! ../equipment-sharing-policy/equipment-sharing-policy.entity */ "./src/app/equipment-sharing-policy/equipment-sharing-policy.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let EquipmentSharing = class EquipmentSharing extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EquipmentSharing.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: equipment_entity_1.Equipment }),
    typeorm_1.ManyToOne((type) => equipment_entity_1.Equipment, (equipment) => equipment.equipmentSharings),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof equipment_entity_1.Equipment !== "undefined" && equipment_entity_1.Equipment) === "function" ? _a : Object)
], EquipmentSharing.prototype, "equipment", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.RelationId((equipmentSharing) => equipmentSharing.equipment),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EquipmentSharing.prototype, "equipmentId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    class_validator_1.IsDate(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], EquipmentSharing.prototype, "shareRequestDay", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    class_validator_1.IsDate(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], EquipmentSharing.prototype, "shareStartDay", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    class_validator_1.IsDate(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], EquipmentSharing.prototype, "shareEndDay", void 0);
tslib_1.__decorate([
    class_validator_1.IsEnum(models_1.RequestApprovalStatusTypesEnum),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], EquipmentSharing.prototype, "status", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => employee_entity_1.Employee, { cascade: true }),
    typeorm_1.JoinTable({
        name: 'equipment_shares_employees'
    }),
    tslib_1.__metadata("design:type", Array)
], EquipmentSharing.prototype, "employees", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => organization_team_entity_1.OrganizationTeam, { cascade: true }),
    typeorm_1.JoinTable({
        name: 'equipment_shares_teams'
    }),
    tslib_1.__metadata("design:type", Array)
], EquipmentSharing.prototype, "teams", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EquipmentSharing.prototype, "createdBy", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EquipmentSharing.prototype, "createdByName", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: equipment_sharing_policy_entity_1.EquipmentSharingPolicy }),
    typeorm_1.ManyToOne((type) => equipment_sharing_policy_entity_1.EquipmentSharingPolicy, {
        nullable: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_e = typeof equipment_sharing_policy_entity_1.EquipmentSharingPolicy !== "undefined" && equipment_sharing_policy_entity_1.EquipmentSharingPolicy) === "function" ? _e : Object)
], EquipmentSharing.prototype, "equipmentSharingPolicy", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((policy) => policy.equipmentSharingPolicy),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EquipmentSharing.prototype, "equipmentSharingPolicyId", void 0);
EquipmentSharing = tslib_1.__decorate([
    typeorm_1.Entity('equipment_sharing')
], EquipmentSharing);
exports.EquipmentSharing = EquipmentSharing;


/***/ }),

/***/ "./src/app/equipment-sharing/equipment-sharing.module.ts":
/*!***************************************************************!*\
  !*** ./src/app/equipment-sharing/equipment-sharing.module.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentSharingModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const equipment_sharing_entity_1 = __webpack_require__(/*! ./equipment-sharing.entity */ "./src/app/equipment-sharing/equipment-sharing.entity.ts");
const equipment_sharing_controller_1 = __webpack_require__(/*! ./equipment-sharing.controller */ "./src/app/equipment-sharing/equipment-sharing.controller.ts");
const equipment_sharing_service_1 = __webpack_require__(/*! ./equipment-sharing.service */ "./src/app/equipment-sharing/equipment-sharing.service.ts");
const request_approval_entity_1 = __webpack_require__(/*! ../request-approval/request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/equipment-sharing/commands/handlers/index.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let EquipmentSharingModule = class EquipmentSharingModule {
};
EquipmentSharingModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([request_approval_entity_1.RequestApproval, equipment_sharing_entity_1.EquipmentSharing]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [equipment_sharing_controller_1.EquipmentSharingController],
        providers: [equipment_sharing_service_1.EquipmentSharingService, ...handlers_1.CommandHandlers],
        exports: [equipment_sharing_service_1.EquipmentSharingService]
    })
], EquipmentSharingModule);
exports.EquipmentSharingModule = EquipmentSharingModule;


/***/ }),

/***/ "./src/app/equipment-sharing/equipment-sharing.seed.ts":
/*!*************************************************************!*\
  !*** ./src/app/equipment-sharing/equipment-sharing.seed.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomEquipmentSharing = exports.createDefaultEquipmentSharing = void 0;
const equipment_entity_1 = __webpack_require__(/*! ../equipment/equipment.entity */ "./src/app/equipment/equipment.entity.ts");
const equipment_sharing_entity_1 = __webpack_require__(/*! ./equipment-sharing.entity */ "./src/app/equipment-sharing/equipment-sharing.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const date_fns_1 = __webpack_require__(/*! date-fns */ "date-fns");
exports.createDefaultEquipmentSharing = async (connection, tenant, organization, defaultEmployees, noOfEquipmentSharingPerTenant) => {
    let equipmentSharings = [];
    const equipments = await connection.manager.find(equipment_entity_1.Equipment, {
        where: [{ tenant: tenant }]
    });
    equipmentSharings = await dataOperation(connection, equipmentSharings, noOfEquipmentSharingPerTenant, equipments, defaultEmployees, tenant, organization);
    return await connection.manager.save(equipmentSharings);
};
exports.createRandomEquipmentSharing = async (connection, tenants, tenantEmployeeMap, noOfEquipmentSharingPerTenant) => {
    let equipmentSharings = [];
    for (const tenant of tenants) {
        const equipments = await connection.manager.find(equipment_entity_1.Equipment, {
            where: [{ tenant: tenant }]
        });
        const employees = tenantEmployeeMap.get(tenant);
        equipmentSharings = await dataOperation(connection, equipmentSharings, noOfEquipmentSharingPerTenant, equipments, employees, tenant, null);
    }
    return equipmentSharings;
};
const dataOperation = async (connection, equipmentSharings, noOfEquipmentSharingPerTenant, equipments, employees, tenant, organization) => {
    for (let i = 0; i < noOfEquipmentSharingPerTenant; i++) {
        const sharing = new equipment_sharing_entity_1.EquipmentSharing();
        sharing.equipment = faker.random.arrayElement(equipments);
        sharing.equipmentId = sharing.equipment.id;
        sharing.shareRequestDay = faker.date.recent(30);
        sharing.shareStartDay = faker.date.future(0.5);
        sharing.shareEndDay = date_fns_1.addDays(sharing.shareStartDay, faker.random.number(15));
        sharing.status = faker.random.number({ min: 1, max: 3 });
        sharing.employees = [faker.random.arrayElement(employees)];
        sharing.organization = organization;
        sharing.tenant = tenant;
        equipmentSharings.push(sharing);
    }
    await connection.manager.save(equipmentSharings);
    return equipmentSharings;
};


/***/ }),

/***/ "./src/app/equipment-sharing/equipment-sharing.service.ts":
/*!****************************************************************!*\
  !*** ./src/app/equipment-sharing/equipment-sharing.service.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentSharingService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const equipment_sharing_entity_1 = __webpack_require__(/*! ./equipment-sharing.entity */ "./src/app/equipment-sharing/equipment-sharing.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const request_approval_entity_1 = __webpack_require__(/*! ../request-approval/request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
let EquipmentSharingService = class EquipmentSharingService extends core_1.CrudService {
    constructor(equipmentSharingRepository, requestApprovalRepository) {
        super(equipmentSharingRepository);
        this.equipmentSharingRepository = equipmentSharingRepository;
        this.requestApprovalRepository = requestApprovalRepository;
    }
    async findEquipmentSharingsByOrgId(organizationId) {
        try {
            const query = this.equipmentSharingRepository.createQueryBuilder('equipment_sharing');
            query
                .leftJoinAndSelect(`${query.alias}.employees`, 'employees')
                .leftJoinAndSelect(`${query.alias}.teams`, 'teams')
                .innerJoinAndSelect(`${query.alias}.equipment`, 'equipment')
                .leftJoinAndSelect(`${query.alias}.equipmentSharingPolicy`, 'equipmentSharingPolicy');
            if (environment_1.environment.database.type === 'sqlite') {
                query.leftJoinAndSelect('request_approval', 'request_approval', '"equipment_sharing"."id" = "request_approval"."requestId"');
            }
            else {
                query.leftJoinAndSelect('request_approval', 'request_approval', '"equipment_sharing"."id"::"varchar" = "request_approval"."requestId"');
            }
            return await query
                .leftJoinAndSelect('request_approval.approvalPolicy', 'approvalPolicy')
                .where('equipmentSharingPolicy.organizationId =:organizationId', {
                organizationId
            })
                .getMany();
        }
        catch (err) {
            throw new common_1.BadRequestException(err);
        }
    }
    async findRequestApprovalsByEmployeeId(id) {
        try {
            return await this.equipmentSharingRepository.find({
                where: {
                    createdBy: id
                },
                relations: ['equipment', 'employees', 'teams']
            });
        }
        catch (error) {
            throw new common_1.BadRequestException(error);
        }
    }
    async findAllEquipmentSharings() {
        return await this.equipmentSharingRepository.find({
            relations: ['equipment', 'employees', 'teams']
        });
    }
    async createEquipmentSharing(equipmentSharing) {
        try {
            equipmentSharing.createdBy = context_1.RequestContext.currentUser().id;
            equipmentSharing.createdByName = context_1.RequestContext.currentUser().name;
            const equipmentSharingSaved = await this.equipmentSharingRepository.save(equipmentSharing);
            return equipmentSharingSaved;
        }
        catch (err) {
            console.log('err', err);
            throw new common_1.BadRequestException(err);
        }
    }
    async update(id, equipmentSharing) {
        try {
            await this.equipmentSharingRepository.delete(id);
            const equipmentSharingSaved = await this.equipmentSharingRepository.save(equipmentSharing);
            return equipmentSharingSaved;
        }
        catch (err) {
            throw new common_1.BadRequestException(err);
        }
    }
    async delete(id) {
        try {
            const [equipmentSharing] = await Promise.all([
                await this.equipmentSharingRepository.delete(id),
                await this.requestApprovalRepository.delete({
                    requestId: id
                })
            ]);
            return equipmentSharing;
        }
        catch (error) {
            throw new common_1.BadRequestException(error);
        }
    }
    async updateStatusEquipmentSharingByAdmin(id, status) {
        try {
            const equipmentSharing = await this.equipmentSharingRepository.findOne(id);
            if (!equipmentSharing) {
                throw new common_1.NotFoundException('Equiment Sharing not found');
            }
            if (equipmentSharing.status ===
                models_1.RequestApprovalStatusTypesEnum.REQUESTED) {
                equipmentSharing.status = status;
            }
            else {
                throw new common_1.ConflictException('Equiment Sharing is Conflict');
            }
            return await this.equipmentSharingRepository.save(equipmentSharing);
        }
        catch (err) {
            throw new common_1.BadRequestException(err);
        }
    }
};
EquipmentSharingService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(equipment_sharing_entity_1.EquipmentSharing)),
    tslib_1.__param(1, typeorm_1.InjectRepository(request_approval_entity_1.RequestApproval)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], EquipmentSharingService);
exports.EquipmentSharingService = EquipmentSharingService;


/***/ }),

/***/ "./src/app/equipment-sharing/index.ts":
/*!********************************************!*\
  !*** ./src/app/equipment-sharing/index.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentSharingService = exports.EquipmentSharing = exports.EquipmentSharingModule = void 0;
var equipment_sharing_module_1 = __webpack_require__(/*! ./equipment-sharing.module */ "./src/app/equipment-sharing/equipment-sharing.module.ts");
Object.defineProperty(exports, "EquipmentSharingModule", { enumerable: true, get: function () { return equipment_sharing_module_1.EquipmentSharingModule; } });
var equipment_sharing_entity_1 = __webpack_require__(/*! ./equipment-sharing.entity */ "./src/app/equipment-sharing/equipment-sharing.entity.ts");
Object.defineProperty(exports, "EquipmentSharing", { enumerable: true, get: function () { return equipment_sharing_entity_1.EquipmentSharing; } });
var equipment_sharing_service_1 = __webpack_require__(/*! ./equipment-sharing.service */ "./src/app/equipment-sharing/equipment-sharing.service.ts");
Object.defineProperty(exports, "EquipmentSharingService", { enumerable: true, get: function () { return equipment_sharing_service_1.EquipmentSharingService; } });


/***/ }),

/***/ "./src/app/equipment/default-equipments.ts":
/*!*************************************************!*\
  !*** ./src/app/equipment/default-equipments.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_RANDOM_EQUIPMENTS = void 0;
exports.DEFAULT_RANDOM_EQUIPMENTS = [
    {
        key: 'Car',
        value: [
            'Audi A6',
            'Audi A8',
            'Audi Q8',
            'BMW X1',
            'BMW X5',
            'Maruti Dzire',
            'Kia Telluride',
            'Chevrolet Corvette',
            'Jeep Gladiator',
            'Hyundai Palisade',
            'Toyota GR Supra',
            'Subaru Outback',
            'Ford Explorer'
        ]
    },
    {
        key: 'Laptop',
        value: [
            'Apple MacBook Pro 16-inch',
            'Lenovo ThinkPad E590 Notebook',
            'Dell XPS15',
            'Acer Aspire E15',
            'Microsoft Surface Pro (Intel Core i7)',
            'ASUS P-Series P2440UQ-XS71',
            'HP Notebook 15-ay011nr',
            'Apple 13″ MacBook Air',
            'Asus VivoBook M580VD-EB54',
            'Lenovo 320-15',
            'Dell Alienware',
            'HP Spectre x360',
            'AORUS 15-X9-RT4BD 15'
        ]
    },
    {
        key: 'Monitor',
        value: [
            'Dell P2720DC',
            ' Acer Predator XB272',
            'Samsung 27″ SF354',
            'Dell Ultrasharp U2720Q',
            'LG 34WK95U',
            'Samsung CF791',
            'BenQ EX3203R'
        ]
    },
    {
        key: 'Printer',
        value: [
            'HP DeskJet Ink Advantage',
            'HP DeskJet 4535',
            'Canon Pixma MG2577s',
            'HP LaserJet M1005',
            ' Samsung SCX-3401',
            'Epson L361 ',
            'Brother DCP-T300 ',
            'Xerox WorkCentre 6515 printer',
            'Canon Pixma TR8550 printer',
            'HP LaserJet Pro MFP M227fdw printer'
        ]
    },
    {
        key: 'Camera',
        value: [
            'Nikon Z6',
            'Fujifilm X-T4',
            'Sony A7 III ',
            'Nikon Z50 ',
            'Sony A6100',
            'Olympus OM-D E-M5 Mark III',
            'Sony ZV-1'
        ]
    },
    {
        key: 'Mobile',
        value: [
            'Iphone 7',
            'Iphone 8',
            'Iphone 11 pro',
            'Samsung s10',
            'Samsumg s11',
            'Blackberry',
            'Nokia'
        ]
    }
];


/***/ }),

/***/ "./src/app/equipment/equipment.controller.ts":
/*!***************************************************!*\
  !*** ./src/app/equipment/equipment.controller.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const equipment_entity_1 = __webpack_require__(/*! ./equipment.entity */ "./src/app/equipment/equipment.entity.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const equipment_service_1 = __webpack_require__(/*! ./equipment.service */ "./src/app/equipment/equipment.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let EquipmentController = class EquipmentController extends core_1.CrudController {
    constructor(equipmentService) {
        super(equipmentService);
        this.equipmentService = equipmentService;
    }
    async findAllEquipmentSharings(data) {
        const { relations, findInput } = JSON.parse(data);
        return await this.equipmentService.findAll({
            where: Object.assign({}, findInput),
            relations
        });
    }
    async update(id, entity, ...options) {
        return this.equipmentService.create(Object.assign({ id }, entity));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all equipment sharings'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found equipment sharings',
        type: equipment_entity_1.Equipment
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], EquipmentController.prototype, "findAllEquipmentSharings", null);
tslib_1.__decorate([
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_b = typeof equipment_entity_1.Equipment !== "undefined" && equipment_entity_1.Equipment) === "function" ? _b : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], EquipmentController.prototype, "update", null);
EquipmentController = tslib_1.__decorate([
    swagger_1.ApiTags('Equipment'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof equipment_service_1.EquipmentService !== "undefined" && equipment_service_1.EquipmentService) === "function" ? _d : Object])
], EquipmentController);
exports.EquipmentController = EquipmentController;


/***/ }),

/***/ "./src/app/equipment/equipment.entity.ts":
/*!***********************************************!*\
  !*** ./src/app/equipment/equipment.entity.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Equipment = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const equipment_sharing_entity_1 = __webpack_require__(/*! ../equipment-sharing/equipment-sharing.entity */ "./src/app/equipment-sharing/equipment-sharing.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let Equipment = class Equipment extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty(),
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.equipment),
    typeorm_1.JoinTable({ name: 'tag_equipment' }),
    tslib_1.__metadata("design:type", Array)
], Equipment.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Equipment.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Equipment.prototype, "type", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsOptional(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Equipment.prototype, "serialNumber", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true, type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], Equipment.prototype, "manufacturedYear", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true, type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], Equipment.prototype, "initialCost", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.CurrenciesEnum }),
    class_validator_1.IsEnum(models_1.CurrenciesEnum),
    class_validator_1.IsOptional(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Equipment.prototype, "currency", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true, type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], Equipment.prototype, "maxSharePeriod", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    class_validator_1.IsOptional(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Boolean)
], Equipment.prototype, "autoApproveShare", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany((type) => equipment_sharing_entity_1.EquipmentSharing, (equipmentSharing) => equipmentSharing.equipment),
    tslib_1.__metadata("design:type", Array)
], Equipment.prototype, "equipmentSharings", void 0);
Equipment = tslib_1.__decorate([
    typeorm_1.Entity('equipment')
], Equipment);
exports.Equipment = Equipment;


/***/ }),

/***/ "./src/app/equipment/equipment.module.ts":
/*!***********************************************!*\
  !*** ./src/app/equipment/equipment.module.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const equipment_entity_1 = __webpack_require__(/*! ./equipment.entity */ "./src/app/equipment/equipment.entity.ts");
const equipment_controller_1 = __webpack_require__(/*! ./equipment.controller */ "./src/app/equipment/equipment.controller.ts");
const equipment_service_1 = __webpack_require__(/*! ./equipment.service */ "./src/app/equipment/equipment.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let EquipmentModule = class EquipmentModule {
};
EquipmentModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([equipment_entity_1.Equipment]), tenant_module_1.TenantModule],
        controllers: [equipment_controller_1.EquipmentController],
        providers: [equipment_service_1.EquipmentService],
        exports: [equipment_service_1.EquipmentService]
    })
], EquipmentModule);
exports.EquipmentModule = EquipmentModule;


/***/ }),

/***/ "./src/app/equipment/equipment.seed.ts":
/*!*********************************************!*\
  !*** ./src/app/equipment/equipment.seed.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomEquipments = exports.createDefaultEquipments = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const equipment_entity_1 = __webpack_require__(/*! ./equipment.entity */ "./src/app/equipment/equipment.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const default_equipments_1 = __webpack_require__(/*! ./default-equipments */ "./src/app/equipment/default-equipments.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
exports.createDefaultEquipments = async (connection, tenant, organization) => {
    const tags = await connection
        .getRepository(tag_entity_1.Tag)
        .createQueryBuilder()
        .getMany();
    const equipments = [];
    const equipment = new equipment_entity_1.Equipment();
    equipment.name = 'Fiat Freemont';
    equipment.type = 'Car';
    equipment.serialNumber = 'CB0950AT';
    equipment.manufacturedYear = 2015;
    equipment.initialCost = 40000;
    equipment.currency = environment_1.environment.defaultCurrency;
    equipment.maxSharePeriod = 7;
    equipment.tags = [faker.random.arrayElement(tags)];
    equipment.tenant = tenant;
    equipment.organization = organization;
    equipment.autoApproveShare = true;
    equipments.push(equipment);
    await insertEquipment(connection, equipments);
    return equipments;
};
const insertEquipment = async (connection, equipment) => {
    await connection.manager.save(equipment);
};
exports.createRandomEquipments = async (connection, tenants, noOfEquipmentsPerTenant) => {
    var e_1, _a;
    const equipments = [];
    const tags = await connection
        .getRepository(tag_entity_1.Tag)
        .createQueryBuilder()
        .getMany();
    try {
        for (var _b = tslib_1.__asyncValues(tenants || []), _c; _c = await _b.next(), !_c.done;) {
            const tenant = _c.value;
            const organizations = await connection.manager.find(organization_entity_1.Organization, {
                where: [{ tenant: tenant }]
            });
            for (let i = 0; i < noOfEquipmentsPerTenant; i++) {
                const equipment = new equipment_entity_1.Equipment();
                const randomElement = faker.random.arrayElement(default_equipments_1.DEFAULT_RANDOM_EQUIPMENTS);
                equipment.type = randomElement.key;
                equipment.name = faker.random.arrayElement(randomElement.value);
                equipment.serialNumber = faker.random.uuid();
                equipment.manufacturedYear = faker.random.number({
                    min: 2000,
                    max: 2020
                });
                equipment.initialCost = faker.random.number({
                    min: 10000,
                    max: 50000
                });
                equipment.currency = environment_1.environment.defaultCurrency;
                equipment.maxSharePeriod = faker.random.number({ min: 1, max: 15 });
                equipment.tags = [faker.random.arrayElement(tags)];
                equipment.tenant = tenant;
                (equipment.organization = faker.random.arrayElement(organizations)),
                    (equipment.autoApproveShare = faker.random.boolean());
                equipments.push(equipment);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) await _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    await insertEquipment(connection, equipments);
    return equipments;
};


/***/ }),

/***/ "./src/app/equipment/equipment.service.ts":
/*!************************************************!*\
  !*** ./src/app/equipment/equipment.service.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EquipmentService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const equipment_entity_1 = __webpack_require__(/*! ./equipment.entity */ "./src/app/equipment/equipment.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
let EquipmentService = class EquipmentService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(equipmentRepository) {
        super(equipmentRepository);
        this.equipmentRepository = equipmentRepository;
    }
    async getAll() {
        return await this.findAll({
            relations: ['equipmentSharings', 'tags']
        });
    }
};
EquipmentService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(equipment_entity_1.Equipment)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], EquipmentService);
exports.EquipmentService = EquipmentService;


/***/ }),

/***/ "./src/app/estimate-email/estimate-email.controller.ts":
/*!*************************************************************!*\
  !*** ./src/app/estimate-email/estimate-email.controller.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EstimateEmailController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const estimate_email_service_1 = __webpack_require__(/*! ./estimate-email.service */ "./src/app/estimate-email/estimate-email.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let EstimateEmailController = class EstimateEmailController extends core_1.CrudController {
    constructor(estimateEmailService) {
        super(estimateEmailService);
        this.estimateEmailService = estimateEmailService;
    }
    async validateEstimateEmail(data) {
        const { relations, findInput: { email, token } } = JSON.parse(data);
        if (!email && !token) {
            throw new common_1.BadRequestException('Email & Token Mandatory');
        }
        return this.estimateEmailService.validate(relations, email, token);
    }
};
tslib_1.__decorate([
    common_1.Get('validate'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], EstimateEmailController.prototype, "validateEstimateEmail", null);
EstimateEmailController = tslib_1.__decorate([
    swagger_1.ApiTags('EstimateEmail'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof estimate_email_service_1.EstimateEmailService !== "undefined" && estimate_email_service_1.EstimateEmailService) === "function" ? _b : Object])
], EstimateEmailController);
exports.EstimateEmailController = EstimateEmailController;


/***/ }),

/***/ "./src/app/estimate-email/estimate-email.entity.ts":
/*!*********************************************************!*\
  !*** ./src/app/estimate-email/estimate-email.entity.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EstimateEmail = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let EstimateEmail = class EstimateEmail extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EstimateEmail.prototype, "token", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsEmail(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EstimateEmail.prototype, "email", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", typeof (_a = typeof Date !== "undefined" && Date) === "function" ? _a : Object)
], EstimateEmail.prototype, "expireDate", void 0);
EstimateEmail = tslib_1.__decorate([
    typeorm_1.Entity('estimate_email')
], EstimateEmail);
exports.EstimateEmail = EstimateEmail;


/***/ }),

/***/ "./src/app/estimate-email/estimate-email.module.ts":
/*!*********************************************************!*\
  !*** ./src/app/estimate-email/estimate-email.module.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EstimateEmailModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const estimate_email_controller_1 = __webpack_require__(/*! ./estimate-email.controller */ "./src/app/estimate-email/estimate-email.controller.ts");
const estimate_email_service_1 = __webpack_require__(/*! ./estimate-email.service */ "./src/app/estimate-email/estimate-email.service.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const invoice_entity_1 = __webpack_require__(/*! ../invoice/invoice.entity */ "./src/app/invoice/invoice.entity.ts");
const estimate_email_entity_1 = __webpack_require__(/*! ./estimate-email.entity */ "./src/app/estimate-email/estimate-email.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let EstimateEmailModule = class EstimateEmailModule {
};
EstimateEmailModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([user_entity_1.User, estimate_email_entity_1.EstimateEmail, invoice_entity_1.Invoice, organization_entity_1.Organization]),
            tenant_module_1.TenantModule
        ],
        controllers: [estimate_email_controller_1.EstimateEmailController],
        providers: [estimate_email_service_1.EstimateEmailService, user_service_1.UserService],
        exports: [estimate_email_service_1.EstimateEmailService, user_service_1.UserService]
    })
], EstimateEmailModule);
exports.EstimateEmailModule = EstimateEmailModule;


/***/ }),

/***/ "./src/app/estimate-email/estimate-email.service.ts":
/*!**********************************************************!*\
  !*** ./src/app/estimate-email/estimate-email.service.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EstimateEmailService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const estimate_email_entity_1 = __webpack_require__(/*! ./estimate-email.entity */ "./src/app/estimate-email/estimate-email.entity.ts");
const date_fns_1 = __webpack_require__(/*! date-fns */ "date-fns");
const invoice_entity_1 = __webpack_require__(/*! ../invoice/invoice.entity */ "./src/app/invoice/invoice.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
let EstimateEmailService = class EstimateEmailService extends core_1.CrudService {
    constructor(estimateEmailRepository, invoiceRepository, organizationRepository) {
        super(estimateEmailRepository);
        this.estimateEmailRepository = estimateEmailRepository;
        this.invoiceRepository = invoiceRepository;
        this.organizationRepository = organizationRepository;
    }
    async createEstimateEmail(id, email, token) {
        const invoice = await this.invoiceRepository.findOne(id);
        const organization = await this.organizationRepository.findOne(invoice.organizationId);
        const tokenExpiryPeriod = organization && organization.inviteExpiryPeriod
            ? organization.inviteExpiryPeriod
            : 7;
        const expireDate = date_fns_1.addDays(new Date(), tokenExpiryPeriod);
        const estimateEmail = new estimate_email_entity_1.EstimateEmail();
        estimateEmail.email = email;
        estimateEmail.token = token;
        estimateEmail.expireDate = expireDate;
        await this.repository.save(estimateEmail);
    }
    async validate(relations, email, token) {
        return this.findOne({
            relations,
            where: {
                email,
                token,
                expireDate: typeorm_2.MoreThanOrEqual(new Date())
            }
        });
    }
};
EstimateEmailService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(estimate_email_entity_1.EstimateEmail)),
    tslib_1.__param(1, typeorm_1.InjectRepository(invoice_entity_1.Invoice)),
    tslib_1.__param(2, typeorm_1.InjectRepository(organization_entity_1.Organization)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object])
], EstimateEmailService);
exports.EstimateEmailService = EstimateEmailService;


/***/ }),

/***/ "./src/app/event-types/commands/event-type.create.command.ts":
/*!*******************************************************************!*\
  !*** ./src/app/event-types/commands/event-type.create.command.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EventTypeCreateCommand = void 0;
class EventTypeCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.EventTypeCreateCommand = EventTypeCreateCommand;
EventTypeCreateCommand.type = '[EventType] Create';


/***/ }),

/***/ "./src/app/event-types/commands/handlers/event-type.create.handler.ts":
/*!****************************************************************************!*\
  !*** ./src/app/event-types/commands/handlers/event-type.create.handler.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventTypeCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const event_type_create_command_1 = __webpack_require__(/*! ../event-type.create.command */ "./src/app/event-types/commands/event-type.create.command.ts");
const event_type_entity_1 = __webpack_require__(/*! ../../event-type.entity */ "./src/app/event-types/event-type.entity.ts");
const event_type_service_1 = __webpack_require__(/*! ../../event-type.service */ "./src/app/event-types/event-type.service.ts");
const employee_service_1 = __webpack_require__(/*! ../../../employee/employee.service */ "./src/app/employee/employee.service.ts");
const organization_service_1 = __webpack_require__(/*! ../../../organization/organization.service */ "./src/app/organization/organization.service.ts");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
let EventTypeCreateHandler = class EventTypeCreateHandler {
    constructor(eventTypeService, employeeService, organizationService) {
        this.eventTypeService = eventTypeService;
        this.employeeService = employeeService;
        this.organizationService = organizationService;
    }
    async execute(command) {
        const { input } = command;
        const eventType = new event_type_entity_1.EventType();
        const employee = input.employeeId
            ? await this.employeeService.findOne(input.employeeId)
            : null;
        const organization = await this.organizationService.findOne(input.organizationId);
        eventType.employee = employee;
        eventType.organization = organization;
        eventType.isActive = input.isActive || false;
        eventType.description = input.description;
        eventType.title = input.title;
        eventType.durationUnit = input.durationUnit;
        eventType.duration = input.duration;
        eventType.tags = input.tags;
        eventType.tenantId = context_1.RequestContext.currentTenantId();
        return await this.eventTypeService.create(eventType);
    }
};
EventTypeCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(event_type_create_command_1.EventTypeCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof event_type_service_1.EventTypeService !== "undefined" && event_type_service_1.EventTypeService) === "function" ? _a : Object, typeof (_b = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _b : Object, typeof (_c = typeof organization_service_1.OrganizationService !== "undefined" && organization_service_1.OrganizationService) === "function" ? _c : Object])
], EventTypeCreateHandler);
exports.EventTypeCreateHandler = EventTypeCreateHandler;


/***/ }),

/***/ "./src/app/event-types/commands/handlers/index.ts":
/*!********************************************************!*\
  !*** ./src/app/event-types/commands/handlers/index.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const event_type_create_handler_1 = __webpack_require__(/*! ./event-type.create.handler */ "./src/app/event-types/commands/handlers/event-type.create.handler.ts");
exports.CommandHandlers = [event_type_create_handler_1.EventTypeCreateHandler];


/***/ }),

/***/ "./src/app/event-types/event-type.controller.ts":
/*!******************************************************!*\
  !*** ./src/app/event-types/event-type.controller.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventTypeController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const event_type_create_command_1 = __webpack_require__(/*! ./commands/event-type.create.command */ "./src/app/event-types/commands/event-type.create.command.ts");
const event_type_entity_1 = __webpack_require__(/*! ./event-type.entity */ "./src/app/event-types/event-type.entity.ts");
const event_type_service_1 = __webpack_require__(/*! ./event-type.service */ "./src/app/event-types/event-type.service.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let EventTypeController = class EventTypeController extends crud_controller_1.CrudController {
    constructor(eventTypeService, commandBus) {
        super(eventTypeService);
        this.eventTypeService = eventTypeService;
        this.commandBus = commandBus;
    }
    async findAllEventTypes(data) {
        const { relations, findInput } = JSON.parse(data);
        return this.eventTypeService.findAll({ where: findInput, relations });
    }
    async update(id, entity, ...options) {
        return this.eventTypeService.create(Object.assign({ id }, entity));
    }
    async findById(id, data) {
        const { relations = [] } = data;
        return this.eventTypeService.findOne(id, {
            relations
        });
    }
    async create(entity, ...options) {
        return this.commandBus.execute(new event_type_create_command_1.EventTypeCreateCommand(entity));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all event types' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found expense',
        type: event_type_entity_1.EventType
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], EventTypeController.prototype, "findAllEventTypes", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully updated.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_b = typeof event_type_entity_1.EventType !== "undefined" && event_type_entity_1.EventType) === "function" ? _b : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], EventTypeController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find event type by id.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Find Event type',
        type: event_type_entity_1.EventType
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], EventTypeController.prototype, "findById", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof models_1.IEventTypeCreateInput !== "undefined" && models_1.IEventTypeCreateInput) === "function" ? _e : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], EventTypeController.prototype, "create", null);
EventTypeController = tslib_1.__decorate([
    swagger_1.ApiTags('EventType'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_g = typeof event_type_service_1.EventTypeService !== "undefined" && event_type_service_1.EventTypeService) === "function" ? _g : Object, typeof (_h = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _h : Object])
], EventTypeController);
exports.EventTypeController = EventTypeController;


/***/ }),

/***/ "./src/app/event-types/event-type.entity.ts":
/*!**************************************************!*\
  !*** ./src/app/event-types/event-type.entity.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventType = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let EventType = class EventType extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: tag_entity_1.Tag }),
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.eventType),
    typeorm_1.JoinTable({ name: 'tag_event_type' }),
    tslib_1.__metadata("design:type", Array)
], EventType.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.ManyToOne((type) => employee_entity_1.Employee, { nullable: true, onDelete: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof employee_entity_1.Employee !== "undefined" && employee_entity_1.Employee) === "function" ? _a : Object)
], EventType.prototype, "employee", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((eventType) => eventType.employee),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EventType.prototype, "employeeId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column({ type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], EventType.prototype, "duration", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Index(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EventType.prototype, "durationUnit", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Index(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EventType.prototype, "title", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], EventType.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], EventType.prototype, "isActive", void 0);
EventType = tslib_1.__decorate([
    typeorm_1.Entity('event_type')
], EventType);
exports.EventType = EventType;


/***/ }),

/***/ "./src/app/event-types/event-type.module.ts":
/*!**************************************************!*\
  !*** ./src/app/event-types/event-type.module.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EventTypeModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const event_type_entity_1 = __webpack_require__(/*! ./event-type.entity */ "./src/app/event-types/event-type.entity.ts");
const event_type_service_1 = __webpack_require__(/*! ./event-type.service */ "./src/app/event-types/event-type.service.ts");
const event_type_controller_1 = __webpack_require__(/*! ./event-type.controller */ "./src/app/event-types/event-type.controller.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/event-types/commands/handlers/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const organization_service_1 = __webpack_require__(/*! ../organization/organization.service */ "./src/app/organization/organization.service.ts");
const user_module_1 = __webpack_require__(/*! ../user/user.module */ "./src/app/user/user.module.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let EventTypeModule = class EventTypeModule {
};
EventTypeModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            user_module_1.UserModule,
            typeorm_1.TypeOrmModule.forFeature([event_type_entity_1.EventType, employee_entity_1.Employee, organization_entity_1.Organization]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [event_type_controller_1.EventTypeController],
        providers: [
            event_type_service_1.EventTypeService,
            employee_service_1.EmployeeService,
            organization_service_1.OrganizationService,
            ...handlers_1.CommandHandlers
        ],
        exports: [event_type_service_1.EventTypeService]
    })
], EventTypeModule);
exports.EventTypeModule = EventTypeModule;


/***/ }),

/***/ "./src/app/event-types/event-type.seed.ts":
/*!************************************************!*\
  !*** ./src/app/event-types/event-type.seed.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultEventTypes = exports.createRandomEventType = void 0;
const event_type_entity_1 = __webpack_require__(/*! ./event-type.entity */ "./src/app/event-types/event-type.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
exports.createRandomEventType = async (connection, tenants, tenantEmployeeMap, tenantOrganizationsMap) => {
    if (!tenantEmployeeMap) {
        console.warn('Warning: tenantEmployeeMap not found, deal  will not be created');
        return;
    }
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, deal  will not be created');
        return;
    }
    for (const tenant of tenants) {
        const tenantEmployees = tenantEmployeeMap.get(tenant);
        const tenantOrgs = tenantOrganizationsMap.get(tenant);
        for (const tenantEmployee of tenantEmployees) {
            const eventTypes = [];
            for (const tenantOrg of tenantOrgs) {
                const tags = await connection.manager.find(tag_entity_1.Tag, {
                    where: [{ organization: tenantOrg }]
                });
                const event = new event_type_entity_1.EventType();
                event.isActive = faker.random.boolean();
                event.description = faker.name.jobDescriptor();
                event.title = faker.name.jobTitle();
                event.durationUnit = 'minutes';
                event.duration = faker.random.number(50);
                event.organization = tenantOrg;
                event.employee = tenantEmployee;
                event.tags = tags;
                event.tenant = tenant;
                eventTypes.push(event);
            }
            await connection.manager.save(eventTypes);
        }
    }
};
exports.createDefaultEventTypes = async (connection, tenant, orgs) => {
    const eventTypes = [];
    orgs.forEach((org) => {
        const eventType = new event_type_entity_1.EventType();
        eventType.title = '15 Minutes Event';
        eventType.description = 'This is a default event type.';
        eventType.duration = 15;
        eventType.durationUnit = 'Minute(s)';
        eventType.isActive = true;
        eventType.organization = org;
        eventType.tenant = tenant;
        eventTypes.push(eventType);
        const eventTypeOne = new event_type_entity_1.EventType();
        eventTypeOne.title = '30 Minutes Event';
        eventTypeOne.description = 'This is a default event type.';
        eventTypeOne.duration = 30;
        eventTypeOne.durationUnit = 'Minute(s)';
        eventTypeOne.isActive = true;
        eventTypeOne.organization = org;
        eventTypeOne.tenant = tenant;
        eventTypes.push(eventTypeOne);
        const eventTypeTwo = new event_type_entity_1.EventType();
        eventTypeTwo.title = '60 Minutes Event';
        eventTypeTwo.description = 'This is a default event type.';
        eventTypeTwo.duration = 60;
        eventTypeTwo.durationUnit = 'Minute(s)';
        eventTypeTwo.isActive = true;
        eventTypeTwo.organization = org;
        eventTypeTwo.tenant = tenant;
        eventTypes.push(eventTypeTwo);
    });
    return await insertEventTypes(connection, eventTypes);
};
const insertEventTypes = async (connection, eventTypes) => {
    return await connection.manager.save(eventTypes);
};


/***/ }),

/***/ "./src/app/event-types/event-type.service.ts":
/*!***************************************************!*\
  !*** ./src/app/event-types/event-type.service.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventTypeService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const event_type_entity_1 = __webpack_require__(/*! ./event-type.entity */ "./src/app/event-types/event-type.entity.ts");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
let EventTypeService = class EventTypeService extends crud_service_1.CrudService {
    constructor(eventTypeRepository) {
        super(eventTypeRepository);
        this.eventTypeRepository = eventTypeRepository;
    }
    async findAll(filter) {
        const total = await this.repository.count(filter);
        let items = await this.repository.find(filter);
        return { items, total };
    }
};
EventTypeService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(event_type_entity_1.EventType)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], EventTypeService);
exports.EventTypeService = EventTypeService;


/***/ }),

/***/ "./src/app/expense-categories/expense-categories.controller.ts":
/*!*********************************************************************!*\
  !*** ./src/app/expense-categories/expense-categories.controller.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpenseCategoriesController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const expense_categories_service_1 = __webpack_require__(/*! ./expense-categories.service */ "./src/app/expense-categories/expense-categories.service.ts");
const expense_category_entity_1 = __webpack_require__(/*! ./expense-category.entity */ "./src/app/expense-categories/expense-category.entity.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let ExpenseCategoriesController = class ExpenseCategoriesController extends core_1.CrudController {
    constructor(expenseCategoriesService) {
        super(expenseCategoriesService);
        this.expenseCategoriesService = expenseCategoriesService;
    }
    async findAllOrganizationExpenseCategories(data) {
        const { relations, findInput } = JSON.parse(data);
        return this.expenseCategoriesService.findAll({
            where: findInput,
            relations
        });
    }
    async updateOrganizationExpenseCategories(id, entity, ...options) {
        return this.expenseCategoriesService.create(Object.assign({ id }, entity));
    }
};
tslib_1.__decorate([
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], ExpenseCategoriesController.prototype, "findAllOrganizationExpenseCategories", null);
tslib_1.__decorate([
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_b = typeof expense_category_entity_1.ExpenseCategory !== "undefined" && expense_category_entity_1.ExpenseCategory) === "function" ? _b : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], ExpenseCategoriesController.prototype, "updateOrganizationExpenseCategories", null);
ExpenseCategoriesController = tslib_1.__decorate([
    swagger_1.ApiTags('ExpenseCategories'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof expense_categories_service_1.ExpenseCategoriesService !== "undefined" && expense_categories_service_1.ExpenseCategoriesService) === "function" ? _d : Object])
], ExpenseCategoriesController);
exports.ExpenseCategoriesController = ExpenseCategoriesController;


/***/ }),

/***/ "./src/app/expense-categories/expense-categories.module.ts":
/*!*****************************************************************!*\
  !*** ./src/app/expense-categories/expense-categories.module.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpenseCategoriesModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const expense_category_entity_1 = __webpack_require__(/*! ./expense-category.entity */ "./src/app/expense-categories/expense-category.entity.ts");
const expense_categories_service_1 = __webpack_require__(/*! ./expense-categories.service */ "./src/app/expense-categories/expense-categories.service.ts");
const expense_categories_controller_1 = __webpack_require__(/*! ./expense-categories.controller */ "./src/app/expense-categories/expense-categories.controller.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let ExpenseCategoriesModule = class ExpenseCategoriesModule {
};
ExpenseCategoriesModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([expense_category_entity_1.ExpenseCategory]), tenant_module_1.TenantModule],
        controllers: [expense_categories_controller_1.ExpenseCategoriesController],
        providers: [expense_categories_service_1.ExpenseCategoriesService]
    })
], ExpenseCategoriesModule);
exports.ExpenseCategoriesModule = ExpenseCategoriesModule;


/***/ }),

/***/ "./src/app/expense-categories/expense-categories.seed.ts":
/*!***************************************************************!*\
  !*** ./src/app/expense-categories/expense-categories.seed.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomExpenseCategories = exports.createExpenseCategories = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const expense_category_entity_1 = __webpack_require__(/*! ./expense-category.entity */ "./src/app/expense-categories/expense-category.entity.ts");
exports.createExpenseCategories = async (connection, tenant, organizations) => {
    let defaultExpenseCategories = [];
    organizations.forEach((organization) => {
        const categories = Object.values(models_1.ExpenseCategoriesEnum).map((name) => {
            const category = new expense_category_entity_1.ExpenseCategory();
            category.name = name;
            category.organization = organization;
            category.tenant = tenant;
            return category;
        });
        defaultExpenseCategories = [...defaultExpenseCategories, ...categories];
    });
    return insertExpenseCategories(connection, defaultExpenseCategories);
};
exports.createRandomExpenseCategories = async (connection, tenants, tenantOrganizationMap) => {
    let expenseCategories = [];
    const expenseCategoryMap = new Map();
    (tenants || []).forEach((tenant) => {
        const organizations = tenantOrganizationMap.get(tenant);
        (organizations || []).forEach((organization) => {
            const categories = Object.values(models_1.ExpenseCategoriesEnum).map((name) => {
                const category = new expense_category_entity_1.ExpenseCategory();
                category.name = name;
                category.organization = organization;
                category.tenant = tenant;
                return category;
            });
            expenseCategoryMap.set(organization, categories);
            expenseCategories = [...expenseCategories, ...categories];
        });
    });
    await insertExpenseCategories(connection, expenseCategories);
    return expenseCategoryMap;
};
const insertExpenseCategories = async (connection, expenseCategories) => {
    return await connection.manager.save(expenseCategories);
};


/***/ }),

/***/ "./src/app/expense-categories/expense-categories.service.ts":
/*!******************************************************************!*\
  !*** ./src/app/expense-categories/expense-categories.service.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpenseCategoriesService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const expense_category_entity_1 = __webpack_require__(/*! ./expense-category.entity */ "./src/app/expense-categories/expense-category.entity.ts");
let ExpenseCategoriesService = class ExpenseCategoriesService extends crud_service_1.CrudService {
    constructor(expenseCategoryRepository) {
        super(expenseCategoryRepository);
        this.expenseCategoryRepository = expenseCategoryRepository;
    }
};
ExpenseCategoriesService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(expense_category_entity_1.ExpenseCategory)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], ExpenseCategoriesService);
exports.ExpenseCategoriesService = ExpenseCategoriesService;


/***/ }),

/***/ "./src/app/expense-categories/expense-category.entity.ts":
/*!***************************************************************!*\
  !*** ./src/app/expense-categories/expense-category.entity.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpenseCategory = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let ExpenseCategory = class ExpenseCategory extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty(),
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.expenseCategory),
    typeorm_1.JoinTable({
        name: 'tag_organization_expense_category'
    }),
    tslib_1.__metadata("design:type", Array)
], ExpenseCategory.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], ExpenseCategory.prototype, "name", void 0);
ExpenseCategory = tslib_1.__decorate([
    typeorm_1.Entity('expense_category')
], ExpenseCategory);
exports.ExpenseCategory = ExpenseCategory;


/***/ }),

/***/ "./src/app/expense/commands/expense.create.command.ts":
/*!************************************************************!*\
  !*** ./src/app/expense/commands/expense.create.command.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpenseCreateCommand = void 0;
class ExpenseCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.ExpenseCreateCommand = ExpenseCreateCommand;
ExpenseCreateCommand.type = '[Expense] Create';


/***/ }),

/***/ "./src/app/expense/commands/expense.delete.command.ts":
/*!************************************************************!*\
  !*** ./src/app/expense/commands/expense.delete.command.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpenseDeleteCommand = void 0;
class ExpenseDeleteCommand {
    constructor(employeeId, expenseId) {
        this.employeeId = employeeId;
        this.expenseId = expenseId;
    }
}
exports.ExpenseDeleteCommand = ExpenseDeleteCommand;
ExpenseDeleteCommand.type = '[Expense] Delete';


/***/ }),

/***/ "./src/app/expense/commands/expense.update.command.ts":
/*!************************************************************!*\
  !*** ./src/app/expense/commands/expense.update.command.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpenseUpdateCommand = void 0;
class ExpenseUpdateCommand {
    constructor(id, entity) {
        this.id = id;
        this.entity = entity;
    }
}
exports.ExpenseUpdateCommand = ExpenseUpdateCommand;
ExpenseUpdateCommand.type = '[Expense] Update';


/***/ }),

/***/ "./src/app/expense/commands/handlers/expense.create.handler.ts":
/*!*********************************************************************!*\
  !*** ./src/app/expense/commands/handlers/expense.create.handler.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpenseCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const expense_create_command_1 = __webpack_require__(/*! ../expense.create.command */ "./src/app/expense/commands/expense.create.command.ts");
const expense_entity_1 = __webpack_require__(/*! ../../expense.entity */ "./src/app/expense/expense.entity.ts");
const expense_service_1 = __webpack_require__(/*! ../../expense.service */ "./src/app/expense/expense.service.ts");
const employee_service_1 = __webpack_require__(/*! ../../../employee/employee.service */ "./src/app/employee/employee.service.ts");
const organization_service_1 = __webpack_require__(/*! ../../../organization/organization.service */ "./src/app/organization/organization.service.ts");
const employee_statistics_1 = __webpack_require__(/*! ../../../employee-statistics */ "./src/app/employee-statistics/index.ts");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
let ExpenseCreateHandler = class ExpenseCreateHandler {
    constructor(expenseService, employeeService, organizationService, employeeStatisticsService) {
        this.expenseService = expenseService;
        this.employeeService = employeeService;
        this.organizationService = organizationService;
        this.employeeStatisticsService = employeeStatisticsService;
    }
    async execute(command) {
        const expense = await this.createExpense(command);
        let averageExpense = 0;
        if (expense && expense.employeeId) {
            const id = expense.employeeId;
            const stat = await this.employeeStatisticsService.getStatisticsByEmployeeId(expense.employeeId);
            averageExpense = this.expenseService.countStatistic(stat.expenseStatistics);
            await this.employeeService.create({
                id,
                averageExpenses: averageExpense
            });
        }
        return expense;
    }
    async createExpense(command) {
        const { input } = command;
        const expense = new expense_entity_1.Expense();
        const employee = input.employeeId
            ? await this.employeeService.findOne(input.employeeId)
            : null;
        const organization = await this.organizationService.findOne(input.organizationId);
        expense.amount = Math.abs(input.amount);
        expense.category = input.category;
        expense.vendor = input.vendor;
        expense.typeOfExpense = input.typeOfExpense;
        expense.organizationContactName = input.organizationContactName;
        expense.organizationContactId = input.organizationContactId;
        expense.projectName = input.projectName;
        expense.projectId = input.projectId;
        expense.notes = input.notes;
        expense.valueDate = input.valueDate;
        expense.employee = employee;
        expense.organization = organization;
        expense.currency = input.currency;
        expense.purpose = input.purpose;
        expense.taxType = input.taxType;
        expense.taxLabel = input.taxLabel;
        expense.rateValue = input.rateValue;
        expense.receipt = input.receipt;
        expense.splitExpense = input.splitExpense;
        expense.tags = input.tags;
        expense.status = input.status;
        expense.tenantId = context_1.RequestContext.currentTenantId();
        if (!expense.currency) {
            expense.currency = organization.currency;
        }
        return await this.expenseService.create(expense);
    }
};
ExpenseCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(expense_create_command_1.ExpenseCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof expense_service_1.ExpenseService !== "undefined" && expense_service_1.ExpenseService) === "function" ? _a : Object, typeof (_b = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _b : Object, typeof (_c = typeof organization_service_1.OrganizationService !== "undefined" && organization_service_1.OrganizationService) === "function" ? _c : Object, typeof (_d = typeof employee_statistics_1.EmployeeStatisticsService !== "undefined" && employee_statistics_1.EmployeeStatisticsService) === "function" ? _d : Object])
], ExpenseCreateHandler);
exports.ExpenseCreateHandler = ExpenseCreateHandler;


/***/ }),

/***/ "./src/app/expense/commands/handlers/expense.delete.handler.ts":
/*!*********************************************************************!*\
  !*** ./src/app/expense/commands/handlers/expense.delete.handler.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpenseDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const expense_service_1 = __webpack_require__(/*! ../../expense.service */ "./src/app/expense/expense.service.ts");
const employee_service_1 = __webpack_require__(/*! ../../../employee/employee.service */ "./src/app/employee/employee.service.ts");
const employee_statistics_1 = __webpack_require__(/*! ../../../employee-statistics */ "./src/app/employee-statistics/index.ts");
const expense_delete_command_1 = __webpack_require__(/*! ../expense.delete.command */ "./src/app/expense/commands/expense.delete.command.ts");
let ExpenseDeleteHandler = class ExpenseDeleteHandler {
    constructor(expenseService, employeeService, employeeStatisticsService) {
        this.expenseService = expenseService;
        this.employeeService = employeeService;
        this.employeeStatisticsService = employeeStatisticsService;
    }
    async execute(command) {
        const { employeeId, expenseId } = command;
        await this.deleteExpense(expenseId);
        if (employeeId) {
            const id = employeeId;
            let averageExpense = 0;
            const stat = await this.employeeStatisticsService.getStatisticsByEmployeeId(id);
            averageExpense = this.expenseService.countStatistic(stat.expenseStatistics);
            return await this.employeeService.create({
                id,
                averageExpenses: averageExpense
            });
        }
    }
    async deleteExpense(expenseId) {
        return await this.expenseService.delete(expenseId);
    }
};
ExpenseDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(expense_delete_command_1.ExpenseDeleteCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof expense_service_1.ExpenseService !== "undefined" && expense_service_1.ExpenseService) === "function" ? _a : Object, typeof (_b = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _b : Object, typeof (_c = typeof employee_statistics_1.EmployeeStatisticsService !== "undefined" && employee_statistics_1.EmployeeStatisticsService) === "function" ? _c : Object])
], ExpenseDeleteHandler);
exports.ExpenseDeleteHandler = ExpenseDeleteHandler;


/***/ }),

/***/ "./src/app/expense/commands/handlers/expense.update.handler.ts":
/*!*********************************************************************!*\
  !*** ./src/app/expense/commands/handlers/expense.update.handler.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpenseUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const expense_service_1 = __webpack_require__(/*! ../../expense.service */ "./src/app/expense/expense.service.ts");
const employee_service_1 = __webpack_require__(/*! ../../../employee/employee.service */ "./src/app/employee/employee.service.ts");
const employee_statistics_1 = __webpack_require__(/*! ../../../employee-statistics */ "./src/app/employee-statistics/index.ts");
const expense_update_command_1 = __webpack_require__(/*! ../expense.update.command */ "./src/app/expense/commands/expense.update.command.ts");
let ExpenseUpdateHandler = class ExpenseUpdateHandler {
    constructor(expenseService, employeeService, employeeStatisticsService) {
        this.expenseService = expenseService;
        this.employeeService = employeeService;
        this.employeeStatisticsService = employeeStatisticsService;
    }
    async execute(command) {
        let { id } = command;
        const { entity } = command;
        const expense = await this.updateExpense(id, entity);
        let averageExpense = 0;
        if (expense && expense.employeeId) {
            id = expense.employeeId;
            const stat = await this.employeeStatisticsService.getStatisticsByEmployeeId(id);
            averageExpense = this.expenseService.countStatistic(stat.expenseStatistics);
            return await this.employeeService.create({
                id,
                averageExpenses: averageExpense
            });
        }
    }
    async updateExpense(expenseId, entity) {
        const id = expenseId;
        return this.expenseService.create(Object.assign({ id }, entity));
    }
};
ExpenseUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(expense_update_command_1.ExpenseUpdateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof expense_service_1.ExpenseService !== "undefined" && expense_service_1.ExpenseService) === "function" ? _a : Object, typeof (_b = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _b : Object, typeof (_c = typeof employee_statistics_1.EmployeeStatisticsService !== "undefined" && employee_statistics_1.EmployeeStatisticsService) === "function" ? _c : Object])
], ExpenseUpdateHandler);
exports.ExpenseUpdateHandler = ExpenseUpdateHandler;


/***/ }),

/***/ "./src/app/expense/commands/handlers/index.ts":
/*!****************************************************!*\
  !*** ./src/app/expense/commands/handlers/index.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const expense_create_handler_1 = __webpack_require__(/*! ./expense.create.handler */ "./src/app/expense/commands/handlers/expense.create.handler.ts");
const expense_delete_handler_1 = __webpack_require__(/*! ./expense.delete.handler */ "./src/app/expense/commands/handlers/expense.delete.handler.ts");
const expense_update_handler_1 = __webpack_require__(/*! ./expense.update.handler */ "./src/app/expense/commands/handlers/expense.update.handler.ts");
exports.CommandHandlers = [
    expense_create_handler_1.ExpenseCreateHandler,
    expense_delete_handler_1.ExpenseDeleteHandler,
    expense_update_handler_1.ExpenseUpdateHandler
];


/***/ }),

/***/ "./src/app/expense/expense.controller.ts":
/*!***********************************************!*\
  !*** ./src/app/expense/expense.controller.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpenseController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const expense_create_command_1 = __webpack_require__(/*! ./commands/expense.create.command */ "./src/app/expense/commands/expense.create.command.ts");
const expense_entity_1 = __webpack_require__(/*! ./expense.entity */ "./src/app/expense/expense.entity.ts");
const expense_service_1 = __webpack_require__(/*! ./expense.service */ "./src/app/expense/expense.service.ts");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const expense_find_split_expense_query_1 = __webpack_require__(/*! ./queries/expense.find-split-expense.query */ "./src/app/expense/queries/expense.find-split-expense.query.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const expense_delete_command_1 = __webpack_require__(/*! ./commands/expense.delete.command */ "./src/app/expense/commands/expense.delete.command.ts");
const expense_update_command_1 = __webpack_require__(/*! ./commands/expense.update.command */ "./src/app/expense/commands/expense.update.command.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const expense_map_service_1 = __webpack_require__(/*! ./expense.map.service */ "./src/app/expense/expense.map.service.ts");
let ExpenseController = class ExpenseController extends crud_controller_1.CrudController {
    constructor(expenseService, expenseMapService, employeeService, commandBus, queryBus) {
        super(expenseService);
        this.expenseService = expenseService;
        this.expenseMapService = expenseMapService;
        this.employeeService = employeeService;
        this.commandBus = commandBus;
        this.queryBus = queryBus;
    }
    async findMyExpenseWithSplitIncluded(data) {
        const { relations, filterDate } = JSON.parse(data);
        const employee = await this.employeeService.findOne({
            user: { id: context_1.RequestContext.currentUser().id }
        });
        return await this.queryBus.execute(new expense_find_split_expense_query_1.FindSplitExpenseQuery({
            employeeId: employee.id,
            relations,
            filterDate
        }));
    }
    async findAllSplitExpenses(data, employeeId) {
        const { relations, filterDate } = JSON.parse(data);
        return await this.queryBus.execute(new expense_find_split_expense_query_1.FindSplitExpenseQuery({
            employeeId,
            relations,
            filterDate
        }));
    }
    async getExpanseReport(request) {
        const expenses = await this.expenseService.getExpanse(request);
        let response = [];
        if (request.groupBy === 'date') {
            response = this.expenseMapService.mapByDate(expenses);
        }
        else if (request.groupBy === 'employee') {
            response = this.expenseMapService.mapByEmployee(expenses);
        }
        else if (request.groupBy === 'project') {
            response = this.expenseMapService.mapByProject(expenses);
        }
        return response;
    }
    async getDailyReportChartData(options) {
        return this.expenseService.getDailyReportChartData(options);
    }
    async findAllExpenses(data) {
        const { relations, findInput, filterDate } = JSON.parse(data);
        return this.expenseService.findAllExpenses({ where: findInput, relations }, filterDate);
    }
    async update(id, entity) {
        return this.commandBus.execute(new expense_update_command_1.ExpenseUpdateCommand(id, entity));
    }
    async create(entity, ...options) {
        return this.commandBus.execute(new expense_create_command_1.ExpenseCreateCommand(entity));
    }
    async deleteExpense(data) {
        const { expenseId = null, employeeId = null } = data;
        return this.commandBus.execute(new expense_delete_command_1.ExpenseDeleteCommand(employeeId, expenseId));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all expense for the logged in employee, including split expenses.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found expense',
        type: expense_entity_1.Expense
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('me'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], ExpenseController.prototype, "findMyExpenseWithSplitIncluded", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all expenses for an employee, including split expenses.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found split expenses'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_EXPENSES_VIEW),
    common_1.Get('include-split/:employeeId'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__param(1, common_1.Param('employeeId')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, String]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], ExpenseController.prototype, "findAllSplitExpenses", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all expenses for an employee, including split expenses.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found split expenses'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_EXPENSES_VIEW),
    common_1.Get('report'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.IGetExpenseInput !== "undefined" && models_1.IGetExpenseInput) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], ExpenseController.prototype, "getExpanseReport", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Report daily chart' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found one record'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('report/daily-chart'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof models_1.IGetExpenseInput !== "undefined" && models_1.IGetExpenseInput) === "function" ? _e : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ExpenseController.prototype, "getDailyReportChartData", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all expense.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found expense',
        type: expense_entity_1.Expense
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_EXPENSES_VIEW),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], ExpenseController.prototype, "findAllExpenses", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_EXPENSES_EDIT),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_g = typeof expense_entity_1.Expense !== "undefined" && expense_entity_1.Expense) === "function" ? _g : Object]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], ExpenseController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_EXPENSES_EDIT),
    common_1.Post('/create'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_j = typeof models_1.IExpenseCreateInput !== "undefined" && models_1.IExpenseCreateInput) === "function" ? _j : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_k = typeof Promise !== "undefined" && Promise) === "function" ? _k : Object)
], ExpenseController.prototype, "create", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Delete record'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'The record has been successfully deleted'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_EXPENSES_EDIT),
    common_1.Delete('deleteExpense'),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_l = typeof Promise !== "undefined" && Promise) === "function" ? _l : Object)
], ExpenseController.prototype, "deleteExpense", null);
ExpenseController = tslib_1.__decorate([
    swagger_1.ApiTags('Expense'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_m = typeof expense_service_1.ExpenseService !== "undefined" && expense_service_1.ExpenseService) === "function" ? _m : Object, typeof (_o = typeof expense_map_service_1.ExpenseMapService !== "undefined" && expense_map_service_1.ExpenseMapService) === "function" ? _o : Object, typeof (_p = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _p : Object, typeof (_q = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _q : Object, typeof (_r = typeof cqrs_1.QueryBus !== "undefined" && cqrs_1.QueryBus) === "function" ? _r : Object])
], ExpenseController);
exports.ExpenseController = ExpenseController;


/***/ }),

/***/ "./src/app/expense/expense.entity.ts":
/*!*******************************************!*\
  !*** ./src/app/expense/expense.entity.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Expense = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const expense_category_entity_1 = __webpack_require__(/*! ../expense-categories/expense-category.entity */ "./src/app/expense-categories/expense-category.entity.ts");
const organization_vendors_entity_1 = __webpack_require__(/*! ../organization-vendors/organization-vendors.entity */ "./src/app/organization-vendors/organization-vendors.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
const invoice_item_entity_1 = __webpack_require__(/*! ../invoice-item/invoice-item.entity */ "./src/app/invoice-item/invoice-item.entity.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
let Expense = class Expense extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: tag_entity_1.Tag }),
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.expense),
    typeorm_1.JoinTable({
        name: 'tag_expense'
    }),
    tslib_1.__metadata("design:type", Array)
], Expense.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.ManyToOne((type) => employee_entity_1.Employee, { nullable: true, onDelete: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IEmployee !== "undefined" && models_1.IEmployee) === "function" ? _a : Object)
], Expense.prototype, "employee", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((expense) => expense.employee),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Expense.prototype, "employeeId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column({ type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], Expense.prototype, "amount", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Index(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Expense.prototype, "typeOfExpense", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: organization_vendors_entity_1.OrganizationVendor }),
    typeorm_1.ManyToOne((type) => organization_vendors_entity_1.OrganizationVendor, {
        nullable: false
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof models_1.IOrganizationVendor !== "undefined" && models_1.IOrganizationVendor) === "function" ? _b : Object)
], Expense.prototype, "vendor", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((expense) => expense.vendor),
    tslib_1.__metadata("design:type", String)
], Expense.prototype, "vendorId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: expense_category_entity_1.ExpenseCategory }),
    typeorm_1.ManyToOne((type) => expense_category_entity_1.ExpenseCategory, {
        nullable: false
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_c = typeof models_1.IExpenseCategory !== "undefined" && models_1.IExpenseCategory) === "function" ? _c : Object)
], Expense.prototype, "category", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((expense) => expense.category),
    tslib_1.__metadata("design:type", String)
], Expense.prototype, "categoryId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Expense.prototype, "organizationContactId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Expense.prototype, "organizationContactName", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    typeorm_1.RelationId((expense) => expense.project),
    tslib_1.__metadata("design:type", String)
], Expense.prototype, "projectId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: organization_projects_entity_1.OrganizationProject }),
    typeorm_1.ManyToOne((type) => organization_projects_entity_1.OrganizationProject, {
        nullable: false
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_d = typeof models_1.IOrganizationProject !== "undefined" && models_1.IOrganizationProject) === "function" ? _d : Object)
], Expense.prototype, "project", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Expense.prototype, "projectName", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Expense.prototype, "notes", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.CurrenciesEnum }),
    class_validator_1.IsEnum(models_1.CurrenciesEnum),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Expense.prototype, "currency", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object)
], Expense.prototype, "valueDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Expense.prototype, "purpose", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Expense.prototype, "taxType", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Expense.prototype, "taxLabel", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true, type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], Expense.prototype, "rateValue", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Expense.prototype, "receipt", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Expense.prototype, "splitExpense", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String, maxLength: 256 }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Expense.prototype, "reference", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Expense.prototype, "status", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: invoice_item_entity_1.InvoiceItem, isArray: true }),
    typeorm_1.OneToMany((type) => invoice_item_entity_1.InvoiceItem, (invoiceItem) => invoiceItem.expense, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Expense.prototype, "invoiceItems", void 0);
Expense = tslib_1.__decorate([
    typeorm_1.Entity('expense')
], Expense);
exports.Expense = Expense;


/***/ }),

/***/ "./src/app/expense/expense.map.service.ts":
/*!************************************************!*\
  !*** ./src/app/expense/expense.map.service.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpenseMapService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const moment = __webpack_require__(/*! moment */ "moment");
const underscore_1 = __webpack_require__(/*! underscore */ "underscore");
let ExpenseMapService = class ExpenseMapService {
    constructor() { }
    mapByDate(expenses) {
        const dailyLogs = this.groupByDate(expenses).map((byDateExpense, date) => {
            const sum = this.getDurationSum(byDateExpense);
            const byEmployee = this.groupByEmployee(byDateExpense).map((byEmployeeExpense) => {
                const byProject = this.groupByProject(byEmployeeExpense).map((byProjectExpense) => {
                    const project = byProjectExpense.length > 0 &&
                        byProjectExpense[0]
                        ? byProjectExpense[0].project
                        : null;
                    return {
                        project,
                        expanse: byProjectExpense.map((row) => this.mapExpensePercentage(row, sum))
                    };
                });
                const employee = byEmployeeExpense.length > 0 && byEmployeeExpense[0]
                    ? byEmployeeExpense[0].employee
                    : null;
                return {
                    employee,
                    projects: byProject
                };
            });
            return {
                date,
                employees: byEmployee
            };
        });
        return dailyLogs;
    }
    mapByEmployee(expenses) {
        const byEmployee = this.groupByEmployee(expenses).map((byEmployeeExpense) => {
            const sum = this.getDurationSum(byEmployeeExpense);
            const dailyLogs = this.groupByDate(byEmployeeExpense).map((byDateExpense, date) => {
                const byProject = this.groupByProject(byDateExpense).map((byProjectExpense) => {
                    const project = byProjectExpense.length > 0 &&
                        byProjectExpense[0]
                        ? byProjectExpense[0].project
                        : null;
                    return {
                        project,
                        expanse: byProjectExpense.map((row) => this.mapExpensePercentage(row, sum))
                    };
                });
                return {
                    date,
                    projects: byProject
                };
            });
            const employee = byEmployeeExpense.length > 0 && byEmployeeExpense[0]
                ? byEmployeeExpense[0].employee
                : null;
            return {
                employee,
                dates: dailyLogs
            };
        });
        return byEmployee;
    }
    mapByProject(expenses) {
        const byEmployee = this.groupByProject(expenses).map((byProjectExpense) => {
            const sum = this.getDurationSum(byProjectExpense);
            const dailyLogs = this.groupByDate(byProjectExpense).map((byDateExpense, date) => {
                const byProject = this.groupByEmployee(byDateExpense).map((byEmployeeExpense) => {
                    const employee = byEmployeeExpense.length > 0 &&
                        byEmployeeExpense[0]
                        ? byEmployeeExpense[0].employee
                        : null;
                    return {
                        employee,
                        expanse: byEmployeeExpense.map((row) => this.mapExpensePercentage(row, sum))
                    };
                });
                return {
                    date,
                    employees: byProject
                };
            });
            const project = byProjectExpense.length > 0 && byProjectExpense[0]
                ? byProjectExpense[0].project
                : null;
            return {
                project,
                dates: dailyLogs
            };
        });
        return byEmployee;
    }
    groupByProject(expenses) {
        return underscore_1.chain(expenses).groupBy((expanse) => {
            return expanse.projectId;
        });
    }
    groupByDate(expenses) {
        return underscore_1.chain(expenses).groupBy((expanse) => {
            return moment.utc(expanse.valueDate).format('YYYY-MM-DD');
        });
    }
    groupByEmployee(expenses) {
        return underscore_1.chain(expenses).groupBy((expanse) => {
            return expanse.employeeId;
        });
    }
    mapExpensePercentage(expanse, sum = 0) {
        expanse.duration_percentage =
            (parseInt(expanse.duration, 10) * 100) / sum;
        return expanse;
    }
    getDurationSum(expenses) {
        return expenses.reduce((iteratee, log) => {
            return iteratee + parseInt(log.duration, 10);
        }, 0);
    }
};
ExpenseMapService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], ExpenseMapService);
exports.ExpenseMapService = ExpenseMapService;


/***/ }),

/***/ "./src/app/expense/expense.module.ts":
/*!*******************************************!*\
  !*** ./src/app/expense/expense.module.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpenseModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const expense_entity_1 = __webpack_require__(/*! ./expense.entity */ "./src/app/expense/expense.entity.ts");
const expense_service_1 = __webpack_require__(/*! ./expense.service */ "./src/app/expense/expense.service.ts");
const expense_controller_1 = __webpack_require__(/*! ./expense.controller */ "./src/app/expense/expense.controller.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/expense/commands/handlers/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const organization_service_1 = __webpack_require__(/*! ../organization/organization.service */ "./src/app/organization/organization.service.ts");
const user_module_1 = __webpack_require__(/*! ../user/user.module */ "./src/app/user/user.module.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const handlers_2 = __webpack_require__(/*! ./queries/handlers */ "./src/app/expense/queries/handlers/index.ts");
const expense_category_entity_1 = __webpack_require__(/*! ../expense-categories/expense-category.entity */ "./src/app/expense-categories/expense-category.entity.ts");
const employee_statistics_service_1 = __webpack_require__(/*! ../employee-statistics/employee-statistics.service */ "./src/app/employee-statistics/employee-statistics.service.ts");
const employee_statistics_1 = __webpack_require__(/*! ../employee-statistics */ "./src/app/employee-statistics/index.ts");
const income_service_1 = __webpack_require__(/*! ../income/income.service */ "./src/app/income/income.service.ts");
const employee_recurring_expense_1 = __webpack_require__(/*! ../employee-recurring-expense */ "./src/app/employee-recurring-expense/index.ts");
const organization_recurring_expense_service_1 = __webpack_require__(/*! ../organization-recurring-expense/organization-recurring-expense.service */ "./src/app/organization-recurring-expense/organization-recurring-expense.service.ts");
const income_module_1 = __webpack_require__(/*! ../income/income.module */ "./src/app/income/income.module.ts");
const income_entity_1 = __webpack_require__(/*! ../income/income.entity */ "./src/app/income/income.entity.ts");
const organization_recurring_expense_entity_1 = __webpack_require__(/*! ../organization-recurring-expense/organization-recurring-expense.entity */ "./src/app/organization-recurring-expense/organization-recurring-expense.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
const expense_map_service_1 = __webpack_require__(/*! ./expense.map.service */ "./src/app/expense/expense.map.service.ts");
let ExpenseModule = class ExpenseModule {
};
ExpenseModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            user_module_1.UserModule,
            employee_statistics_1.EmployeeStatisticsModule,
            income_module_1.IncomeModule,
            typeorm_1.TypeOrmModule.forFeature([
                expense_entity_1.Expense,
                employee_entity_1.Employee,
                employee_recurring_expense_1.EmployeeRecurringExpense,
                organization_recurring_expense_entity_1.OrganizationRecurringExpense,
                income_entity_1.Income,
                organization_entity_1.Organization,
                user_entity_1.User,
                expense_category_entity_1.ExpenseCategory
            ]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [expense_controller_1.ExpenseController],
        providers: [
            expense_service_1.ExpenseService,
            employee_service_1.EmployeeService,
            organization_service_1.OrganizationService,
            employee_statistics_service_1.EmployeeStatisticsService,
            user_service_1.UserService,
            income_service_1.IncomeService,
            employee_recurring_expense_1.EmployeeRecurringExpenseService,
            organization_recurring_expense_service_1.OrganizationRecurringExpenseService,
            expense_map_service_1.ExpenseMapService,
            ...handlers_1.CommandHandlers,
            ...handlers_2.QueryHandlers
        ],
        exports: [expense_service_1.ExpenseService]
    })
], ExpenseModule);
exports.ExpenseModule = ExpenseModule;


/***/ }),

/***/ "./src/app/expense/expense.seed.ts":
/*!*****************************************!*\
  !*** ./src/app/expense/expense.seed.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomExpenses = exports.createDefaultExpenses = void 0;
const expense_entity_1 = __webpack_require__(/*! ./expense.entity */ "./src/app/expense/expense.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const fs = __webpack_require__(/*! fs */ "fs");
const csv = __webpack_require__(/*! csv-parser */ "csv-parser");
const moment = __webpack_require__(/*! moment */ "moment");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
exports.createDefaultExpenses = async (connection, defaultData) => {
    if (!defaultData.categories) {
        console.warn('Warning: Categories not found, default expenses would not be created');
        return;
    }
    if (!defaultData.organizationVendors) {
        console.warn('Warning: organizationVendors not found, default expenses would not be created');
        return;
    }
    const expensesFromFile = [];
    let defaultExpenses = [];
    let filePath = './src/app/expense/expense-seed-data/expenses-data.csv';
    try {
        filePath = fs.existsSync(filePath)
            ? filePath
            : `./apps/api/${filePath.slice(2)}`;
    }
    catch (error) {
        console.error('Cannot find income data csv');
    }
    for (const organization of defaultData.organizations) {
        fs.createReadStream(filePath)
            .pipe(csv())
            .on('data', (data) => expensesFromFile.push(data))
            .on('end', async () => {
            defaultExpenses = expensesFromFile.map((seedExpense) => {
                const expense = new expense_entity_1.Expense();
                const foundEmployee = defaultData.employees.find((emp) => emp.user.email === seedExpense.email);
                const foundCategory = (defaultData.categories || []).find((category) => seedExpense.categoryName === category.name);
                const foundVendor = (defaultData.organizationVendors || []).find((vendor) => seedExpense.vendorName === vendor.name);
                expense.employee = foundEmployee;
                expense.organization = organization;
                expense.tenant = organization.tenant;
                expense.amount = Math.abs(seedExpense.amount);
                expense.vendor = foundVendor;
                expense.category = foundCategory;
                expense.currency =
                    seedExpense.currency || environment_1.environment.defaultCurrency;
                expense.valueDate = faker.date.between(new Date(), moment(new Date()).add(10, 'days').toDate());
                expense.notes = seedExpense.notes;
                return expense;
            });
            await insertExpense(connection, defaultExpenses);
        });
    }
    return expensesFromFile;
};
exports.createRandomExpenses = async (connection, tenants, tenantEmployeeMap, organizationVendorsMap, categoriesMap) => {
    if (!categoriesMap) {
        console.warn('Warning: categoriesMap not found, RandomExpenses will not be created');
        return;
    }
    if (!organizationVendorsMap) {
        console.warn('Warning: organizationVendorsMap not found, RandomExpenses will not be created');
        return;
    }
    const notesArray = [
        'Windows 10',
        'MultiSport Card',
        'Angular Masterclass',
        'Drive',
        'Rent for September'
    ];
    for (const tenant of tenants) {
        const employees = tenantEmployeeMap.get(tenant);
        for (const employee of employees) {
            const organizationVendors = organizationVendorsMap.get(employee.organization);
            const categories = categoriesMap.get(employee.organization);
            const randomExpenses = [];
            for (let index = 0; index < 100; index++) {
                const expense = new expense_entity_1.Expense();
                const currentIndex = faker.random.number({
                    min: 0,
                    max: index % 5
                });
                expense.organization = employee.organization;
                expense.tenant = tenant;
                expense.employee = employee;
                expense.amount = faker.random.number({ min: 10, max: 999 });
                expense.vendor =
                    organizationVendors[currentIndex % organizationVendors.length];
                expense.category = categories[currentIndex % categories.length];
                expense.currency =
                    employee.organization.currency || environment_1.environment.defaultCurrency;
                expense.valueDate = faker.date.between(new Date(), moment(new Date()).add(10, 'days').toDate());
                expense.notes = notesArray[currentIndex];
                randomExpenses.push(expense);
            }
            await insertExpense(connection, randomExpenses);
        }
    }
    return;
};
const insertExpense = async (connection, expenses) => {
    await connection.manager.save(expenses);
};


/***/ }),

/***/ "./src/app/expense/expense.service.ts":
/*!********************************************!*\
  !*** ./src/app/expense/expense.service.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpenseService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const expense_entity_1 = __webpack_require__(/*! ./expense.entity */ "./src/app/expense/expense.entity.ts");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const underscore_1 = __webpack_require__(/*! underscore */ "underscore");
let ExpenseService = class ExpenseService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(expenseRepository) {
        super(expenseRepository);
        this.expenseRepository = expenseRepository;
    }
    async findAllExpenses(filter, filterDate) {
        if (filterDate) {
            const startOfMonth = moment(filterDate)
                .startOf('month')
                .format('YYYY-MM-DD hh:mm:ss');
            const endOfMonth = moment(filterDate)
                .endOf('month')
                .format('YYYY-MM-DD hh:mm:ss');
            return filter
                ? await this.findAll({
                    where: Object.assign({ valueDate: typeorm_2.Between(startOfMonth, endOfMonth) }, filter.where),
                    relations: filter.relations
                })
                : await this.findAll({
                    where: {
                        valueDate: typeorm_2.Between(startOfMonth, endOfMonth)
                    }
                });
        }
        return await this.findAll(filter || {});
    }
    countStatistic(data) {
        return data.filter(Number).reduce((a, b) => a + b, 0) !== 0
            ? data.filter(Number).reduce((a, b) => a + b, 0) /
                data.filter(Number).length
            : 0;
    }
    async getExpanse(request) {
        const query = this.filterQuery(request);
        query.orderBy(`"${query.alias}"."valueDate"`, 'ASC');
        if (context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)) {
            query.leftJoinAndSelect(`${query.alias}.employee`, 'activityEmployee');
            query.leftJoinAndSelect(`activityEmployee.user`, 'activityUser', '"employee"."userId" = activityUser.id');
        }
        query.leftJoinAndSelect(`${query.alias}.category`, 'category');
        return await query.getMany();
    }
    async getDailyReportChartData(request) {
        const query = this.filterQuery(request);
        query.orderBy(`"${query.alias}"."valueDate"`, 'ASC');
        let dayList = [];
        const range = {};
        let i = 0;
        const start = moment(request.startDate);
        while (start.isSameOrBefore(request.endDate) && i < 31) {
            const date = start.format('YYYY-MM-DD');
            range[date] = null;
            start.add(1, 'day');
            i++;
        }
        dayList = Object.keys(range);
        const expenses = await query.getMany();
        const byDate = underscore_1.chain(expenses)
            .groupBy((expense) => moment(expense.valueDate).format('YYYY-MM-DD'))
            .mapObject((expenses, date) => {
            const sum = expenses.reduce((iteratee, expense) => {
                return iteratee + parseFloat(expense.amount);
            }, 0);
            return {
                date,
                value: {
                    expanse: sum.toFixed(1)
                }
            };
        })
            .value();
        const dates = dayList.map((date) => {
            if (byDate[date]) {
                return byDate[date];
            }
            else {
                return {
                    date: date,
                    value: {
                        expanse: 0
                    }
                };
            }
        });
        return dates;
    }
    filterQuery(request) {
        let employeeIds;
        const query = this.expenseRepository.createQueryBuilder();
        if (request && request.limit > 0) {
            query.take(request.limit);
            query.skip((request.page || 0) * request.limit);
        }
        if (context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)) {
            if (request.employeeIds) {
                employeeIds = request.employeeIds;
            }
        }
        else {
            const user = context_1.RequestContext.currentUser();
            employeeIds = [user.employeeId];
        }
        query.innerJoin(`${query.alias}.employee`, 'employee');
        query.where((qb) => {
            if (request.startDate && request.endDate) {
                const startDate = moment.utc(request.startDate).toDate();
                const endDate = moment.utc(request.endDate).toDate();
                qb.andWhere(`"${query.alias}"."valueDate" Between :startDate AND :endDate`, {
                    startDate,
                    endDate
                });
            }
            if (employeeIds) {
                qb.andWhere(`"${query.alias}"."employeeId" IN (:...employeeId)`, {
                    employeeId: employeeIds
                });
            }
            if (request.projectIds) {
                qb.andWhere(`"${query.alias}"."projectId" IN (:...projectId)`, {
                    projectId: request.projectIds
                });
            }
            if (request.organizationId) {
                qb.andWhere(`"${query.alias}"."organizationId" = :organizationId`, {
                    organizationId: request.organizationId
                });
            }
            qb.andWhere(`"${query.alias}"."tenantId" = :tenantId`, {
                tenantId: context_1.RequestContext.currentTenantId()
            });
        });
        return query;
    }
};
ExpenseService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(expense_entity_1.Expense)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], ExpenseService);
exports.ExpenseService = ExpenseService;


/***/ }),

/***/ "./src/app/expense/queries/expense.find-split-expense.query.ts":
/*!*********************************************************************!*\
  !*** ./src/app/expense/queries/expense.find-split-expense.query.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.FindSplitExpenseQuery = void 0;
class FindSplitExpenseQuery {
    constructor(findInput) {
        this.findInput = findInput;
    }
}
exports.FindSplitExpenseQuery = FindSplitExpenseQuery;
FindSplitExpenseQuery.type = '[Expense] Find Split Expense';


/***/ }),

/***/ "./src/app/expense/queries/handlers/expense.find-split-expense.handler.ts":
/*!********************************************************************************!*\
  !*** ./src/app/expense/queries/handlers/expense.find-split-expense.handler.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FindSplitExpenseHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_service_1 = __webpack_require__(/*! ../../../employee/employee.service */ "./src/app/employee/employee.service.ts");
const organization_service_1 = __webpack_require__(/*! ../../../organization/organization.service */ "./src/app/organization/organization.service.ts");
const expense_service_1 = __webpack_require__(/*! ../../expense.service */ "./src/app/expense/expense.service.ts");
const expense_find_split_expense_query_1 = __webpack_require__(/*! ../expense.find-split-expense.query */ "./src/app/expense/queries/expense.find-split-expense.query.ts");
let FindSplitExpenseHandler = class FindSplitExpenseHandler {
    constructor(expenseService, employeeService, organizationService) {
        this.expenseService = expenseService;
        this.employeeService = employeeService;
        this.organizationService = organizationService;
    }
    async execute(query) {
        const { findInput: { relations, filterDate, employeeId } } = query;
        const employee = await this.employeeService.findOne({
            where: {
                id: employeeId
            },
            relations: ['organization']
        });
        const { items, total } = await this.expenseService.findAllExpenses({
            where: [
                {
                    organization: employee.organization,
                    splitExpense: true
                },
                {
                    employee: {
                        id: employeeId
                    }
                }
            ],
            relations
        }, filterDate);
        const orgEmployees = await this.employeeService.findAll({
            where: {
                organization: employee.organization
            }
        });
        const splitItems = items.map((e) => e.splitExpense
            ? Object.assign(Object.assign({}, e), { amount: +(e.amount /
                    (orgEmployees.total !== 0 ? orgEmployees.total : 1)).toFixed(2), originalValue: +e.amount, employeeCount: orgEmployees.total }) : e);
        return { items: splitItems, total };
    }
};
FindSplitExpenseHandler = tslib_1.__decorate([
    cqrs_1.QueryHandler(expense_find_split_expense_query_1.FindSplitExpenseQuery),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof expense_service_1.ExpenseService !== "undefined" && expense_service_1.ExpenseService) === "function" ? _a : Object, typeof (_b = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _b : Object, typeof (_c = typeof organization_service_1.OrganizationService !== "undefined" && organization_service_1.OrganizationService) === "function" ? _c : Object])
], FindSplitExpenseHandler);
exports.FindSplitExpenseHandler = FindSplitExpenseHandler;


/***/ }),

/***/ "./src/app/expense/queries/handlers/index.ts":
/*!***************************************************!*\
  !*** ./src/app/expense/queries/handlers/index.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryHandlers = void 0;
const expense_find_split_expense_handler_1 = __webpack_require__(/*! ./expense.find-split-expense.handler */ "./src/app/expense/queries/handlers/expense.find-split-expense.handler.ts");
exports.QueryHandlers = [expense_find_split_expense_handler_1.FindSplitExpenseHandler];


/***/ }),

/***/ "./src/app/export_import/export-all.controller.ts":
/*!********************************************************!*\
  !*** ./src/app/export_import/export-all.controller.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportAllController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const export_all_service_1 = __webpack_require__(/*! ./export-all.service */ "./src/app/export_import/export-all.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
let ExportAllController = class ExportAllController {
    constructor(exportService) {
        this.exportService = exportService;
    }
    async exportAll(data, res) {
        const { findInput = null } = JSON.parse(data);
        await this.exportService.createFolders();
        await this.exportService.exportTables(findInput);
        await this.exportService.archiveAndDownload();
        await this.exportService.downloadToUser(res);
        await this.exportService.deleteCsvFiles();
        this.exportService.deleteArchive();
    }
    async downloadTemplate(res) {
        await this.exportService.downloadTemplate(res);
    }
    async exportByName(data, res) {
        const { entities: { names }, findInput = null } = JSON.parse(data);
        await this.exportService.createFolders();
        await this.exportService.exportSpecificTables(names, findInput);
        await this.exportService.archiveAndDownload();
        await this.exportService.downloadToUser(res);
        await this.exportService.deleteCsvFiles();
        this.exportService.deleteArchive();
    }
    ngOnDestroy() { }
};
tslib_1.__decorate([
    swagger_1.ApiTags('Download'),
    swagger_1.ApiOperation({ summary: 'Find all exports.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found tables'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')), tslib_1.__param(1, common_1.Res()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ExportAllController.prototype, "exportAll", null);
tslib_1.__decorate([
    common_1.Get('template'),
    tslib_1.__param(0, common_1.Res()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ExportAllController.prototype, "downloadTemplate", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find exports by name' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found specific tables'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('filter'),
    tslib_1.__param(0, common_1.Query('data')), tslib_1.__param(1, common_1.Res()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], ExportAllController.prototype, "exportByName", null);
ExportAllController = tslib_1.__decorate([
    swagger_1.ApiTags('Download'),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof export_all_service_1.ExportAllService !== "undefined" && export_all_service_1.ExportAllService) === "function" ? _b : Object])
], ExportAllController);
exports.ExportAllController = ExportAllController;


/***/ }),

/***/ "./src/app/export_import/export-all.module.ts":
/*!****************************************************!*\
  !*** ./src/app/export_import/export-all.module.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportAllModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const export_all_controller_1 = __webpack_require__(/*! ./export-all.controller */ "./src/app/export_import/export-all.controller.ts");
const export_all_service_1 = __webpack_require__(/*! ./export-all.service */ "./src/app/export_import/export-all.service.ts");
const country_1 = __webpack_require__(/*! ../country */ "./src/app/country/index.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const user_organization_services_1 = __webpack_require__(/*! ../user-organization/user-organization.services */ "./src/app/user-organization/user-organization.services.ts");
const user_organization_entity_1 = __webpack_require__(/*! ../user-organization/user-organization.entity */ "./src/app/user-organization/user-organization.entity.ts");
const email_entity_1 = __webpack_require__(/*! ../email/email.entity */ "./src/app/email/email.entity.ts");
const email_service_1 = __webpack_require__(/*! ../email/email.service */ "./src/app/email/email.service.ts");
const email_template_entity_1 = __webpack_require__(/*! ../email-template/email-template.entity */ "./src/app/email-template/email-template.entity.ts");
const email_template_service_1 = __webpack_require__(/*! ../email-template/email-template.service */ "./src/app/email-template/email-template.service.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const employee_recurring_expense_1 = __webpack_require__(/*! ../employee-recurring-expense */ "./src/app/employee-recurring-expense/index.ts");
const employee_setting_1 = __webpack_require__(/*! ../employee-setting */ "./src/app/employee-setting/index.ts");
const equipment_sharing_1 = __webpack_require__(/*! ../equipment-sharing */ "./src/app/equipment-sharing/index.ts");
const expense_entity_1 = __webpack_require__(/*! ../expense/expense.entity */ "./src/app/expense/expense.entity.ts");
const expense_service_1 = __webpack_require__(/*! ../expense/expense.service */ "./src/app/expense/expense.service.ts");
const expense_category_entity_1 = __webpack_require__(/*! ../expense-categories/expense-category.entity */ "./src/app/expense-categories/expense-category.entity.ts");
const expense_categories_service_1 = __webpack_require__(/*! ../expense-categories/expense-categories.service */ "./src/app/expense-categories/expense-categories.service.ts");
const income_service_1 = __webpack_require__(/*! ../income/income.service */ "./src/app/income/income.service.ts");
const income_entity_1 = __webpack_require__(/*! ../income/income.entity */ "./src/app/income/income.entity.ts");
const invite_service_1 = __webpack_require__(/*! ../invite/invite.service */ "./src/app/invite/invite.service.ts");
const invite_entity_1 = __webpack_require__(/*! ../invite/invite.entity */ "./src/app/invite/invite.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const organization_service_1 = __webpack_require__(/*! ../organization/organization.service */ "./src/app/organization/organization.service.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const organization_projects_service_1 = __webpack_require__(/*! ../organization-projects/organization-projects.service */ "./src/app/organization-projects/organization-projects.service.ts");
const organization_department_entity_1 = __webpack_require__(/*! ../organization-department/organization-department.entity */ "./src/app/organization-department/organization-department.entity.ts");
const organization_department_service_1 = __webpack_require__(/*! ../organization-department/organization-department.service */ "./src/app/organization-department/organization-department.service.ts");
const role_entity_1 = __webpack_require__(/*! ../role/role.entity */ "./src/app/role/role.entity.ts");
const role_service_1 = __webpack_require__(/*! ../role/role.service */ "./src/app/role/role.service.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const invoice_service_1 = __webpack_require__(/*! ../invoice/invoice.service */ "./src/app/invoice/invoice.service.ts");
const invoice_entity_1 = __webpack_require__(/*! ../invoice/invoice.entity */ "./src/app/invoice/invoice.entity.ts");
const invoice_item_service_1 = __webpack_require__(/*! ../invoice-item/invoice-item.service */ "./src/app/invoice-item/invoice-item.service.ts");
const invoice_item_entity_1 = __webpack_require__(/*! ../invoice-item/invoice-item.entity */ "./src/app/invoice-item/invoice-item.entity.ts");
const organization_employee_level_service_1 = __webpack_require__(/*! ../organization_employee-level/organization-employee-level.service */ "./src/app/organization_employee-level/organization-employee-level.service.ts");
const organization_employee_level_entity_1 = __webpack_require__(/*! ../organization_employee-level/organization-employee-level.entity */ "./src/app/organization_employee-level/organization-employee-level.entity.ts");
const organization_contact_service_1 = __webpack_require__(/*! ../organization-contact/organization-contact.service */ "./src/app/organization-contact/organization-contact.service.ts");
const organization_employment_type_entity_1 = __webpack_require__(/*! ../organization-employment-type/organization-employment-type.entity */ "./src/app/organization-employment-type/organization-employment-type.entity.ts");
const organization_employment_type_service_1 = __webpack_require__(/*! ../organization-employment-type/organization-employment-type.service */ "./src/app/organization-employment-type/organization-employment-type.service.ts");
const organization_positions_entity_1 = __webpack_require__(/*! ../organization-positions/organization-positions.entity */ "./src/app/organization-positions/organization-positions.entity.ts");
const organization_positions_service_1 = __webpack_require__(/*! ../organization-positions/organization-positions.service */ "./src/app/organization-positions/organization-positions.service.ts");
const organization_recurring_expense_entity_1 = __webpack_require__(/*! ../organization-recurring-expense/organization-recurring-expense.entity */ "./src/app/organization-recurring-expense/organization-recurring-expense.entity.ts");
const organization_recurring_expense_service_1 = __webpack_require__(/*! ../organization-recurring-expense/organization-recurring-expense.service */ "./src/app/organization-recurring-expense/organization-recurring-expense.service.ts");
const organization_team_entity_1 = __webpack_require__(/*! ../organization-team/organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const organization_team_service_1 = __webpack_require__(/*! ../organization-team/organization-team.service */ "./src/app/organization-team/organization-team.service.ts");
const organization_vendors_entity_1 = __webpack_require__(/*! ../organization-vendors/organization-vendors.entity */ "./src/app/organization-vendors/organization-vendors.entity.ts");
const organization_vendors_service_1 = __webpack_require__(/*! ../organization-vendors/organization-vendors.service */ "./src/app/organization-vendors/organization-vendors.service.ts");
const proposal_entity_1 = __webpack_require__(/*! ../proposal/proposal.entity */ "./src/app/proposal/proposal.entity.ts");
const proposal_service_1 = __webpack_require__(/*! ../proposal/proposal.service */ "./src/app/proposal/proposal.service.ts");
const role_permissions_entity_1 = __webpack_require__(/*! ../role-permissions/role-permissions.entity */ "./src/app/role-permissions/role-permissions.entity.ts");
const role_permissions_service_1 = __webpack_require__(/*! ../role-permissions/role-permissions.service */ "./src/app/role-permissions/role-permissions.service.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const tag_service_1 = __webpack_require__(/*! ../tags/tag.service */ "./src/app/tags/tag.service.ts");
const task_entity_1 = __webpack_require__(/*! ../tasks/task.entity */ "./src/app/tasks/task.entity.ts");
const task_service_1 = __webpack_require__(/*! ../tasks/task.service */ "./src/app/tasks/task.service.ts");
const tenant_entity_1 = __webpack_require__(/*! ../tenant/tenant.entity */ "./src/app/tenant/tenant.entity.ts");
const tenant_service_1 = __webpack_require__(/*! ../tenant/tenant.service */ "./src/app/tenant/tenant.service.ts");
const time_off_policy_entity_1 = __webpack_require__(/*! ../time-off-policy/time-off-policy.entity */ "./src/app/time-off-policy/time-off-policy.entity.ts");
const time_off_policy_service_1 = __webpack_require__(/*! ../time-off-policy/time-off-policy.service */ "./src/app/time-off-policy/time-off-policy.service.ts");
const timesheet_entity_1 = __webpack_require__(/*! ../timesheet/timesheet.entity */ "./src/app/timesheet/timesheet.entity.ts");
const time_slot_entity_1 = __webpack_require__(/*! ../timesheet/time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const activity_entity_1 = __webpack_require__(/*! ../timesheet/activity.entity */ "./src/app/timesheet/activity.entity.ts");
const screenshot_entity_1 = __webpack_require__(/*! ../timesheet/screenshot.entity */ "./src/app/timesheet/screenshot.entity.ts");
const time_log_entity_1 = __webpack_require__(/*! ../timesheet/time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const time_slot_minute_entity_1 = __webpack_require__(/*! ../timesheet/time-slot-minute.entity */ "./src/app/timesheet/time-slot-minute.entity.ts");
const timesheet_service_1 = __webpack_require__(/*! ../timesheet/timesheet/timesheet.service */ "./src/app/timesheet/timesheet/timesheet.service.ts");
const activity_service_1 = __webpack_require__(/*! ../timesheet/activity/activity.service */ "./src/app/timesheet/activity/activity.service.ts");
const screenshot_service_1 = __webpack_require__(/*! ../timesheet/screenshot/screenshot.service */ "./src/app/timesheet/screenshot/screenshot.service.ts");
const time_slot_service_1 = __webpack_require__(/*! ../timesheet/time-slot/time-slot.service */ "./src/app/timesheet/time-slot/time-slot.service.ts");
const time_log_service_1 = __webpack_require__(/*! ../timesheet/time-log/time-log.service */ "./src/app/timesheet/time-log/time-log.service.ts");
const appointment_employees_service_1 = __webpack_require__(/*! ../appointment-employees/appointment-employees.service */ "./src/app/appointment-employees/appointment-employees.service.ts");
const appointment_employees_entity_1 = __webpack_require__(/*! ../appointment-employees/appointment-employees.entity */ "./src/app/appointment-employees/appointment-employees.entity.ts");
const approval_policy_service_1 = __webpack_require__(/*! ../approval-policy/approval-policy.service */ "./src/app/approval-policy/approval-policy.service.ts");
const approval_policy_entity_1 = __webpack_require__(/*! ../approval-policy/approval-policy.entity */ "./src/app/approval-policy/approval-policy.entity.ts");
const candidate_service_1 = __webpack_require__(/*! ../candidate/candidate.service */ "./src/app/candidate/candidate.service.ts");
const candidate_entity_1 = __webpack_require__(/*! ../candidate/candidate.entity */ "./src/app/candidate/candidate.entity.ts");
const organization_team_employee_service_1 = __webpack_require__(/*! ../organization-team-employee/organization-team-employee.service */ "./src/app/organization-team-employee/organization-team-employee.service.ts");
const organization_team_employee_entity_1 = __webpack_require__(/*! ../organization-team-employee/organization-team-employee.entity */ "./src/app/organization-team-employee/organization-team-employee.entity.ts");
const equipment_entity_1 = __webpack_require__(/*! ../equipment/equipment.entity */ "./src/app/equipment/equipment.entity.ts");
const equipment_service_1 = __webpack_require__(/*! ../equipment/equipment.service */ "./src/app/equipment/equipment.service.ts");
const estimate_email_service_1 = __webpack_require__(/*! ../estimate-email/estimate-email.service */ "./src/app/estimate-email/estimate-email.service.ts");
const estimate_email_entity_1 = __webpack_require__(/*! ../estimate-email/estimate-email.entity */ "./src/app/estimate-email/estimate-email.entity.ts");
const contact_entity_1 = __webpack_require__(/*! ../contact/contact.entity */ "./src/app/contact/contact.entity.ts");
const contact_service_1 = __webpack_require__(/*! ../contact/contact.service */ "./src/app/contact/contact.service.ts");
const request_approval_team_entity_1 = __webpack_require__(/*! ../request-approval-team/request-approval-team.entity */ "./src/app/request-approval-team/request-approval-team.entity.ts");
const request_approval_entity_1 = __webpack_require__(/*! ../request-approval/request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const request_approval_employee_entity_1 = __webpack_require__(/*! ../request-approval-employee/request-approval-employee.entity */ "./src/app/request-approval-employee/request-approval-employee.entity.ts");
const organization_sprint_entity_1 = __webpack_require__(/*! ../organization-sprint/organization-sprint.entity */ "./src/app/organization-sprint/organization-sprint.entity.ts");
const organization_sprint_service_1 = __webpack_require__(/*! ../organization-sprint/organization-sprint.service */ "./src/app/organization-sprint/organization-sprint.service.ts");
const availability_slots_entity_1 = __webpack_require__(/*! ../availability-slots/availability-slots.entity */ "./src/app/availability-slots/availability-slots.entity.ts");
const candidate_documents_entity_1 = __webpack_require__(/*! ../candidate-documents/candidate-documents.entity */ "./src/app/candidate-documents/candidate-documents.entity.ts");
const candidate_experience_entity_1 = __webpack_require__(/*! ../candidate-experience/candidate-experience.entity */ "./src/app/candidate-experience/candidate-experience.entity.ts");
const candidate_interview_entity_1 = __webpack_require__(/*! ../candidate-interview/candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
const candidate_interviewers_entity_1 = __webpack_require__(/*! ../candidate-interviewers/candidate-interviewers.entity */ "./src/app/candidate-interviewers/candidate-interviewers.entity.ts");
const candidate_technologies_entity_1 = __webpack_require__(/*! ../candidate-technologies/candidate-technologies.entity */ "./src/app/candidate-technologies/candidate-technologies.entity.ts");
const candidate_criterion_rating_entity_1 = __webpack_require__(/*! ../candidate-criterions-rating/candidate-criterion-rating.entity */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.entity.ts");
const candidate_education_entity_1 = __webpack_require__(/*! ../candidate-education/candidate-education.entity */ "./src/app/candidate-education/candidate-education.entity.ts");
const candidate_feedbacks_entity_1 = __webpack_require__(/*! ../candidate-feedbacks/candidate-feedbacks.entity */ "./src/app/candidate-feedbacks/candidate-feedbacks.entity.ts");
const candidate_personal_qualities_entity_1 = __webpack_require__(/*! ../candidate-personal-qualities/candidate-personal-qualities.entity */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.entity.ts");
const candidate_skill_entity_1 = __webpack_require__(/*! ../candidate-skill/candidate-skill.entity */ "./src/app/candidate-skill/candidate-skill.entity.ts");
const candidate_source_entity_1 = __webpack_require__(/*! ../candidate-source/candidate-source.entity */ "./src/app/candidate-source/candidate-source.entity.ts");
const deal_entity_1 = __webpack_require__(/*! ../deal/deal.entity */ "./src/app/deal/deal.entity.ts");
const employee_appointment_1 = __webpack_require__(/*! ../employee-appointment */ "./src/app/employee-appointment/index.ts");
const event_type_entity_1 = __webpack_require__(/*! ../event-types/event-type.entity */ "./src/app/event-types/event-type.entity.ts");
const goal_kpi_entity_1 = __webpack_require__(/*! ../goal-kpi/goal-kpi.entity */ "./src/app/goal-kpi/goal-kpi.entity.ts");
const goal_time_frame_entity_1 = __webpack_require__(/*! ../goal-time-frame/goal-time-frame.entity */ "./src/app/goal-time-frame/goal-time-frame.entity.ts");
const goal_entity_1 = __webpack_require__(/*! ../goal/goal.entity */ "./src/app/goal/goal.entity.ts");
const help_center_article_entity_1 = __webpack_require__(/*! ../help-center-article/help-center-article.entity */ "./src/app/help-center-article/help-center-article.entity.ts");
const help_center_author_entity_1 = __webpack_require__(/*! ../help-center-author/help-center-author.entity */ "./src/app/help-center-author/help-center-author.entity.ts");
const help_center_entity_1 = __webpack_require__(/*! ../help-center/help-center.entity */ "./src/app/help-center/help-center.entity.ts");
const integration_entity_setting_tied_entity_entity_1 = __webpack_require__(/*! ../integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.entity */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.entity.ts");
const integration_entity_1 = __webpack_require__(/*! ../integration/integration.entity */ "./src/app/integration/integration.entity.ts");
const integration_entity_setting_entity_1 = __webpack_require__(/*! ../integration-entity-setting/integration-entity-setting.entity */ "./src/app/integration-entity-setting/integration-entity-setting.entity.ts");
const integration_map_entity_1 = __webpack_require__(/*! ../integration-map/integration-map.entity */ "./src/app/integration-map/integration-map.entity.ts");
const integration_tenant_entity_1 = __webpack_require__(/*! ../integration-tenant/integration-tenant.entity */ "./src/app/integration-tenant/integration-tenant.entity.ts");
const integration_setting_entity_1 = __webpack_require__(/*! ../integration-setting/integration-setting.entity */ "./src/app/integration-setting/integration-setting.entity.ts");
const keyresult_update_entity_1 = __webpack_require__(/*! ../keyresult-update/keyresult-update.entity */ "./src/app/keyresult-update/keyresult-update.entity.ts");
const keyresult_entity_1 = __webpack_require__(/*! ../keyresult/keyresult.entity */ "./src/app/keyresult/keyresult.entity.ts");
const language_entity_1 = __webpack_require__(/*! ../language/language.entity */ "./src/app/language/language.entity.ts");
const organization_awards_entity_1 = __webpack_require__(/*! ../organization-awards/organization-awards.entity */ "./src/app/organization-awards/organization-awards.entity.ts");
const organization_languages_entity_1 = __webpack_require__(/*! ../organization-languages/organization-languages.entity */ "./src/app/organization-languages/organization-languages.entity.ts");
const payment_entity_1 = __webpack_require__(/*! ../payment/payment.entity */ "./src/app/payment/payment.entity.ts");
const pipeline_entity_1 = __webpack_require__(/*! ../pipeline/pipeline.entity */ "./src/app/pipeline/pipeline.entity.ts");
const product_entity_1 = __webpack_require__(/*! ../product/product.entity */ "./src/app/product/product.entity.ts");
const skill_entity_1 = __webpack_require__(/*! ../skills/skill.entity */ "./src/app/skills/skill.entity.ts");
const pipeline_stage_entity_1 = __webpack_require__(/*! ../pipeline-stage/pipeline-stage.entity */ "./src/app/pipeline-stage/pipeline-stage.entity.ts");
const time_off_request_entity_1 = __webpack_require__(/*! ../time-off-request/time-off-request.entity */ "./src/app/time-off-request/time-off-request.entity.ts");
const upwork_service_1 = __webpack_require__(/*! ../upwork/upwork.service */ "./src/app/upwork/upwork.service.ts");
const request_approval_service_1 = __webpack_require__(/*! ../request-approval/request-approval.service */ "./src/app/request-approval/request-approval.service.ts");
const availability_slots_service_1 = __webpack_require__(/*! ../availability-slots/availability-slots.service */ "./src/app/availability-slots/availability-slots.service.ts");
const candidate_criterion_rating_service_1 = __webpack_require__(/*! ../candidate-criterions-rating/candidate-criterion-rating.service */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.service.ts");
const candidate_documents_service_1 = __webpack_require__(/*! ../candidate-documents/candidate-documents.service */ "./src/app/candidate-documents/candidate-documents.service.ts");
const candidate_experience_service_1 = __webpack_require__(/*! ../candidate-experience/candidate-experience.service */ "./src/app/candidate-experience/candidate-experience.service.ts");
const candidate_feedbacks_service_1 = __webpack_require__(/*! ../candidate-feedbacks/candidate-feedbacks.service */ "./src/app/candidate-feedbacks/candidate-feedbacks.service.ts");
const candidate_interview_service_1 = __webpack_require__(/*! ../candidate-interview/candidate-interview.service */ "./src/app/candidate-interview/candidate-interview.service.ts");
const candidate_education_service_1 = __webpack_require__(/*! ../candidate-education/candidate-education.service */ "./src/app/candidate-education/candidate-education.service.ts");
const candidate_interviewers_service_1 = __webpack_require__(/*! ../candidate-interviewers/candidate-interviewers.service */ "./src/app/candidate-interviewers/candidate-interviewers.service.ts");
const candidate_personal_qualities_service_1 = __webpack_require__(/*! ../candidate-personal-qualities/candidate-personal-qualities.service */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.service.ts");
const candidate_skill_service_1 = __webpack_require__(/*! ../candidate-skill/candidate-skill.service */ "./src/app/candidate-skill/candidate-skill.service.ts");
const candidate_source_service_1 = __webpack_require__(/*! ../candidate-source/candidate-source.service */ "./src/app/candidate-source/candidate-source.service.ts");
const candidate_technologies_service_1 = __webpack_require__(/*! ../candidate-technologies/candidate-technologies.service */ "./src/app/candidate-technologies/candidate-technologies.service.ts");
const deal_service_1 = __webpack_require__(/*! ../deal/deal.service */ "./src/app/deal/deal.service.ts");
const employee_statistics_1 = __webpack_require__(/*! ../employee-statistics */ "./src/app/employee-statistics/index.ts");
const goal_service_1 = __webpack_require__(/*! ../goal/goal.service */ "./src/app/goal/goal.service.ts");
const goal_kpi_service_1 = __webpack_require__(/*! ../goal-kpi/goal-kpi.service */ "./src/app/goal-kpi/goal-kpi.service.ts");
const goal_time_frame_service_1 = __webpack_require__(/*! ../goal-time-frame/goal-time-frame.service */ "./src/app/goal-time-frame/goal-time-frame.service.ts");
const event_type_service_1 = __webpack_require__(/*! ../event-types/event-type.service */ "./src/app/event-types/event-type.service.ts");
const help_center_service_1 = __webpack_require__(/*! ../help-center/help-center.service */ "./src/app/help-center/help-center.service.ts");
const help_center_article_service_1 = __webpack_require__(/*! ../help-center-article/help-center-article.service */ "./src/app/help-center-article/help-center-article.service.ts");
const help_center_author_service_1 = __webpack_require__(/*! ../help-center-author/help-center-author.service */ "./src/app/help-center-author/help-center-author.service.ts");
const timer_service_1 = __webpack_require__(/*! ../timesheet/timer/timer.service */ "./src/app/timesheet/timer/timer.service.ts");
const pipeline_stage_service_1 = __webpack_require__(/*! ../pipeline-stage/pipeline-stage.service */ "./src/app/pipeline-stage/pipeline-stage.service.ts");
const skill_service_1 = __webpack_require__(/*! ../skills/skill.service */ "./src/app/skills/skill.service.ts");
const time_off_request_service_1 = __webpack_require__(/*! ../time-off-request/time-off-request.service */ "./src/app/time-off-request/time-off-request.service.ts");
const pipeline_service_1 = __webpack_require__(/*! ../pipeline/pipeline.service */ "./src/app/pipeline/pipeline.service.ts");
const payment_service_1 = __webpack_require__(/*! ../payment/payment.service */ "./src/app/payment/payment.service.ts");
const product_service_1 = __webpack_require__(/*! ../product/product.service */ "./src/app/product/product.service.ts");
const product_option_entity_1 = __webpack_require__(/*! ../product-option/product-option.entity */ "./src/app/product-option/product-option.entity.ts");
const product_settings_entity_1 = __webpack_require__(/*! ../product-settings/product-settings.entity */ "./src/app/product-settings/product-settings.entity.ts");
const product_type_entity_1 = __webpack_require__(/*! ../product-type/product-type.entity */ "./src/app/product-type/product-type.entity.ts");
const product_variant_entity_1 = __webpack_require__(/*! ../product-variant/product-variant.entity */ "./src/app/product-variant/product-variant.entity.ts");
const product_variant_price_entity_1 = __webpack_require__(/*! ../product-variant-price/product-variant-price.entity */ "./src/app/product-variant-price/product-variant-price.entity.ts");
const product_type_service_1 = __webpack_require__(/*! ../product-type/product-type.service */ "./src/app/product-type/product-type.service.ts");
const product_settings_service_1 = __webpack_require__(/*! ../product-settings/product-settings.service */ "./src/app/product-settings/product-settings.service.ts");
const product_option_service_1 = __webpack_require__(/*! ../product-option/product-option.service */ "./src/app/product-option/product-option.service.ts");
const product_variant_service_1 = __webpack_require__(/*! ../product-variant/product-variant.service */ "./src/app/product-variant/product-variant.service.ts");
const product_variant_price_service_1 = __webpack_require__(/*! ../product-variant-price/product-variant-price.service */ "./src/app/product-variant-price/product-variant-price.service.ts");
const organization_awards_service_1 = __webpack_require__(/*! ../organization-awards/organization-awards.service */ "./src/app/organization-awards/organization-awards.service.ts");
const organization_languages_service_1 = __webpack_require__(/*! ../organization-languages/organization-languages.service */ "./src/app/organization-languages/organization-languages.service.ts");
const language_service_1 = __webpack_require__(/*! ../language/language.service */ "./src/app/language/language.service.ts");
const integration_service_1 = __webpack_require__(/*! ../integration/integration.service */ "./src/app/integration/integration.service.ts");
const integration_map_service_1 = __webpack_require__(/*! ../integration-map/integration-map.service */ "./src/app/integration-map/integration-map.service.ts");
const integration_setting_service_1 = __webpack_require__(/*! ../integration-setting/integration-setting.service */ "./src/app/integration-setting/integration-setting.service.ts");
const integration_entity_setting_service_1 = __webpack_require__(/*! ../integration-entity-setting/integration-entity-setting.service */ "./src/app/integration-entity-setting/integration-entity-setting.service.ts");
const integration_entity_setting_tied_entity_service_1 = __webpack_require__(/*! ../integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.service */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.service.ts");
const integration_tenant_service_1 = __webpack_require__(/*! ../integration-tenant/integration-tenant.service */ "./src/app/integration-tenant/integration-tenant.service.ts");
const keyresult_service_1 = __webpack_require__(/*! ../keyresult/keyresult.service */ "./src/app/keyresult/keyresult.service.ts");
const keyresult_update_service_1 = __webpack_require__(/*! ../keyresult-update/keyresult-update.service */ "./src/app/keyresult-update/keyresult-update.service.ts");
const product_category_entity_1 = __webpack_require__(/*! ../product-category/product-category.entity */ "./src/app/product-category/product-category.entity.ts");
const product_category_service_1 = __webpack_require__(/*! ../product-category/product-category.service */ "./src/app/product-category/product-category.service.ts");
const organization_documents_entity_1 = __webpack_require__(/*! ../organization-documents/organization-documents.entity */ "./src/app/organization-documents/organization-documents.entity.ts");
const organization_documents_service_1 = __webpack_require__(/*! ../organization-documents/organization-documents.service */ "./src/app/organization-documents/organization-documents.service.ts");
const integration_upwork_1 = __webpack_require__(/*! @gauzy/integration-upwork */ "./libs/integration-upwork/src/index.ts");
const custom_smtp_entity_1 = __webpack_require__(/*! ../custom-smtp/custom-smtp.entity */ "./src/app/custom-smtp/custom-smtp.entity.ts");
const custom_smtp_service_1 = __webpack_require__(/*! ../custom-smtp/custom-smtp.service */ "./src/app/custom-smtp/custom-smtp.service.ts");
const currency_1 = __webpack_require__(/*! ../currency */ "./src/app/currency/index.ts");
const employee_award_entity_1 = __webpack_require__(/*! ../employee-award/employee-award.entity */ "./src/app/employee-award/employee-award.entity.ts");
const employee_proposal_template_entity_1 = __webpack_require__(/*! ../employee-proposal-template/employee-proposal-template.entity */ "./src/app/employee-proposal-template/employee-proposal-template.entity.ts");
const employee_upwork_jobs_search_criterion_entity_1 = __webpack_require__(/*! ../employee-job-preset/employee-upwork-jobs-search-criterion.entity */ "./src/app/employee-job-preset/employee-upwork-jobs-search-criterion.entity.ts");
const equipment_sharing_policy_entity_1 = __webpack_require__(/*! ../equipment-sharing-policy/equipment-sharing-policy.entity */ "./src/app/equipment-sharing-policy/equipment-sharing-policy.entity.ts");
const goal_general_setting_entity_1 = __webpack_require__(/*! ../goal-general-setting/goal-general-setting.entity */ "./src/app/goal-general-setting/goal-general-setting.entity.ts");
const goal_template_entity_1 = __webpack_require__(/*! ../goal-template/goal-template.entity */ "./src/app/goal-template/goal-template.entity.ts");
const goal_kpi_template_entity_1 = __webpack_require__(/*! ../goal-kpi-template/goal-kpi-template.entity */ "./src/app/goal-kpi-template/goal-kpi-template.entity.ts");
const invoice_estimate_history_entity_1 = __webpack_require__(/*! ../invoice-estimate-history/invoice-estimate-history.entity */ "./src/app/invoice-estimate-history/invoice-estimate-history.entity.ts");
const job_preset_entity_1 = __webpack_require__(/*! ../employee-job-preset/job-preset.entity */ "./src/app/employee-job-preset/job-preset.entity.ts");
const job_search_occupation_entity_1 = __webpack_require__(/*! ../employee-job-preset/job-search-occupation/job-search-occupation.entity */ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.entity.ts");
const job_search_category_entity_1 = __webpack_require__(/*! ../employee-job-preset/job-search-category/job-search-category.entity */ "./src/app/employee-job-preset/job-search-category/job-search-category.entity.ts");
const job_preset_upwork_job_search_criterion_entity_1 = __webpack_require__(/*! ../employee-job-preset/job-preset-upwork-job-search-criterion.entity */ "./src/app/employee-job-preset/job-preset-upwork-job-search-criterion.entity.ts");
const keyresult_template_entity_1 = __webpack_require__(/*! ../keyresult-template/keyresult-template.entity */ "./src/app/keyresult-template/keyresult-template.entity.ts");
const report_entity_1 = __webpack_require__(/*! ../reports/report.entity */ "./src/app/reports/report.entity.ts");
const report_category_entity_1 = __webpack_require__(/*! ../reports/report-category.entity */ "./src/app/reports/report-category.entity.ts");
const report_organization_entity_1 = __webpack_require__(/*! ../reports/report-organization.entity */ "./src/app/reports/report-organization.entity.ts");
const employee_award_service_1 = __webpack_require__(/*! ../employee-award/employee-award.service */ "./src/app/employee-award/employee-award.service.ts");
const employee_proposal_template_service_1 = __webpack_require__(/*! ../employee-proposal-template/employee-proposal-template.service */ "./src/app/employee-proposal-template/employee-proposal-template.service.ts");
const goal_template_service_1 = __webpack_require__(/*! ../goal-template/goal-template.service */ "./src/app/goal-template/goal-template.service.ts");
const goal_kpi_template_service_1 = __webpack_require__(/*! ../goal-kpi-template/goal-kpi-template.service */ "./src/app/goal-kpi-template/goal-kpi-template.service.ts");
const invoice_estimate_history_service_1 = __webpack_require__(/*! ../invoice-estimate-history/invoice-estimate-history.service */ "./src/app/invoice-estimate-history/invoice-estimate-history.service.ts");
const job_preset_service_1 = __webpack_require__(/*! ../employee-job-preset/job-preset.service */ "./src/app/employee-job-preset/job-preset.service.ts");
const job_search_occupation_service_1 = __webpack_require__(/*! ../employee-job-preset/job-search-occupation/job-search-occupation.service */ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.service.ts");
const job_search_category_service_1 = __webpack_require__(/*! ../employee-job-preset/job-search-category/job-search-category.service */ "./src/app/employee-job-preset/job-search-category/job-search-category.service.ts");
const keyresult_template_service_1 = __webpack_require__(/*! ../keyresult-template/keyresult-template.service */ "./src/app/keyresult-template/keyresult-template.service.ts");
const report_service_1 = __webpack_require__(/*! ../reports/report.service */ "./src/app/reports/report.service.ts");
const report_category_service_1 = __webpack_require__(/*! ../reports/report-category.service */ "./src/app/reports/report-category.service.ts");
let ExportAllModule = class ExportAllModule {
};
ExportAllModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            cqrs_1.CqrsModule,
            typeorm_1.TypeOrmModule.forFeature([
                activity_entity_1.Activity,
                appointment_employees_entity_1.AppointmentEmployee,
                approval_policy_entity_1.ApprovalPolicy,
                availability_slots_entity_1.AvailabilitySlot,
                candidate_entity_1.Candidate,
                candidate_criterion_rating_entity_1.CandidateCriterionsRating,
                candidate_documents_entity_1.CandidateDocument,
                candidate_education_entity_1.CandidateEducation,
                candidate_experience_entity_1.CandidateExperience,
                candidate_feedbacks_entity_1.CandidateFeedback,
                candidate_interview_entity_1.CandidateInterview,
                candidate_interviewers_entity_1.CandidateInterviewers,
                candidate_personal_qualities_entity_1.CandidatePersonalQualities,
                candidate_skill_entity_1.CandidateSkill,
                candidate_source_entity_1.CandidateSource,
                candidate_technologies_entity_1.CandidateTechnologies,
                contact_entity_1.Contact,
                country_1.Country,
                currency_1.Currency,
                custom_smtp_entity_1.CustomSmtp,
                deal_entity_1.Deal,
                email_entity_1.Email,
                email_template_entity_1.EmailTemplate,
                employee_entity_1.Employee,
                employee_appointment_1.EmployeeAppointment,
                employee_award_entity_1.EmployeeAward,
                organization_employee_level_entity_1.EmployeeLevel,
                employee_proposal_template_entity_1.EmployeeProposalTemplate,
                employee_recurring_expense_1.EmployeeRecurringExpense,
                employee_setting_1.EmployeeSetting,
                employee_upwork_jobs_search_criterion_entity_1.EmployeeUpworkJobsSearchCriterion,
                equipment_entity_1.Equipment,
                equipment_sharing_1.EquipmentSharing,
                equipment_sharing_policy_entity_1.EquipmentSharingPolicy,
                estimate_email_entity_1.EstimateEmail,
                event_type_entity_1.EventType,
                expense_entity_1.Expense,
                expense_category_entity_1.ExpenseCategory,
                goal_entity_1.Goal,
                goal_general_setting_entity_1.GoalGeneralSetting,
                goal_kpi_entity_1.GoalKPI,
                goal_kpi_template_entity_1.GoalKPITemplate,
                goal_template_entity_1.GoalTemplate,
                goal_time_frame_entity_1.GoalTimeFrame,
                help_center_entity_1.HelpCenter,
                help_center_article_entity_1.HelpCenterArticle,
                help_center_author_entity_1.HelpCenterAuthor,
                income_entity_1.Income,
                integration_entity_1.Integration,
                integration_entity_setting_entity_1.IntegrationEntitySetting,
                integration_entity_setting_tied_entity_entity_1.IntegrationEntitySettingTiedEntity,
                integration_map_entity_1.IntegrationMap,
                integration_setting_entity_1.IntegrationSetting,
                integration_tenant_entity_1.IntegrationTenant,
                invite_entity_1.Invite,
                invoice_entity_1.Invoice,
                invoice_estimate_history_entity_1.InvoiceEstimateHistory,
                invoice_item_entity_1.InvoiceItem,
                job_preset_entity_1.JobPreset,
                job_search_occupation_entity_1.JobSearchOccupation,
                job_search_category_entity_1.JobSearchCategory,
                job_preset_upwork_job_search_criterion_entity_1.JobPresetUpworkJobSearchCriterion,
                keyresult_entity_1.KeyResult,
                keyresult_template_entity_1.KeyResultTemplate,
                keyresult_update_entity_1.KeyResultUpdate,
                language_entity_1.Language,
                organization_entity_1.Organization,
                organization_awards_entity_1.OrganizationAwards,
                organization_contact_entity_1.OrganizationContact,
                organization_department_entity_1.OrganizationDepartment,
                organization_documents_entity_1.OrganizationDocuments,
                organization_employment_type_entity_1.OrganizationEmploymentType,
                organization_languages_entity_1.OrganizationLanguages,
                organization_positions_entity_1.OrganizationPositions,
                organization_projects_entity_1.OrganizationProject,
                organization_recurring_expense_entity_1.OrganizationRecurringExpense,
                organization_sprint_entity_1.OrganizationSprint,
                organization_team_entity_1.OrganizationTeam,
                organization_team_employee_entity_1.OrganizationTeamEmployee,
                organization_vendors_entity_1.OrganizationVendor,
                payment_entity_1.Payment,
                pipeline_entity_1.Pipeline,
                pipeline_stage_entity_1.PipelineStage,
                product_entity_1.Product,
                product_category_entity_1.ProductCategory,
                product_option_entity_1.ProductOption,
                product_settings_entity_1.ProductVariantSettings,
                product_type_entity_1.ProductType,
                product_variant_entity_1.ProductVariant,
                product_variant_price_entity_1.ProductVariantPrice,
                proposal_entity_1.Proposal,
                report_entity_1.Report,
                report_category_entity_1.ReportCategory,
                report_organization_entity_1.ReportOrganization,
                request_approval_entity_1.RequestApproval,
                request_approval_employee_entity_1.RequestApprovalEmployee,
                request_approval_team_entity_1.RequestApprovalTeam,
                role_entity_1.Role,
                role_permissions_entity_1.RolePermissions,
                screenshot_entity_1.Screenshot,
                skill_entity_1.Skill,
                tag_entity_1.Tag,
                task_entity_1.Task,
                tenant_entity_1.Tenant,
                time_off_policy_entity_1.TimeOffPolicy,
                time_off_request_entity_1.TimeOffRequest,
                timesheet_entity_1.Timesheet,
                time_slot_entity_1.TimeSlot,
                time_log_entity_1.TimeLog,
                time_slot_minute_entity_1.TimeSlotMinute,
                user_entity_1.User,
                user_organization_entity_1.UserOrganization
            ])
        ],
        controllers: [export_all_controller_1.ExportAllController],
        providers: [
            activity_service_1.ActivityService,
            appointment_employees_service_1.AppointmentEmployeesService,
            approval_policy_service_1.ApprovalPolicyService,
            availability_slots_service_1.AvailabilitySlotsService,
            candidate_service_1.CandidateService,
            candidate_criterion_rating_service_1.CandidateCriterionsRatingService,
            candidate_documents_service_1.CandidateDocumentsService,
            candidate_education_service_1.CandidateEducationService,
            candidate_experience_service_1.CandidateExperienceService,
            candidate_feedbacks_service_1.CandidateFeedbacksService,
            candidate_interview_service_1.CandidateInterviewService,
            candidate_interviewers_service_1.CandidateInterviewersService,
            candidate_personal_qualities_service_1.CandidatePersonalQualitiesService,
            candidate_skill_service_1.CandidateSkillService,
            candidate_source_service_1.CandidateSourceService,
            candidate_technologies_service_1.CandidateTechnologiesService,
            contact_service_1.ContactService,
            country_1.CountryService,
            currency_1.CurrencyService,
            custom_smtp_service_1.CustomSmtpService,
            deal_service_1.DealService,
            email_service_1.EmailService,
            email_template_service_1.EmailTemplateService,
            employee_service_1.EmployeeService,
            employee_award_service_1.EmployeeAwardService,
            employee_appointment_1.EmployeeAppointmentService,
            organization_employee_level_service_1.EmployeeLevelService,
            employee_proposal_template_service_1.EmployeeProposalTemplateService,
            employee_recurring_expense_1.EmployeeRecurringExpenseService,
            employee_setting_1.EmployeeSettingService,
            employee_statistics_1.EmployeeStatisticsService,
            equipment_service_1.EquipmentService,
            equipment_sharing_1.EquipmentSharingService,
            estimate_email_service_1.EstimateEmailService,
            event_type_service_1.EventTypeService,
            expense_service_1.ExpenseService,
            expense_categories_service_1.ExpenseCategoriesService,
            export_all_service_1.ExportAllService,
            goal_service_1.GoalService,
            goal_template_service_1.GoalTemplateService,
            goal_kpi_service_1.GoalKpiService,
            goal_kpi_template_service_1.GoalKpiTemplateService,
            goal_time_frame_service_1.GoalTimeFrameService,
            help_center_service_1.HelpCenterService,
            help_center_article_service_1.HelpCenterArticleService,
            help_center_author_service_1.HelpCenterAuthorService,
            income_service_1.IncomeService,
            integration_service_1.IntegrationService,
            integration_entity_setting_service_1.IntegrationEntitySettingService,
            integration_entity_setting_tied_entity_service_1.IntegrationEntitySettingTiedEntityService,
            integration_map_service_1.IntegrationMapService,
            integration_setting_service_1.IntegrationSettingService,
            integration_tenant_service_1.IntegrationTenantService,
            invite_service_1.InviteService,
            invoice_service_1.InvoiceService,
            invoice_item_service_1.InvoiceItemService,
            invoice_estimate_history_service_1.InvoiceEstimateHistoryService,
            job_preset_service_1.JobPresetService,
            job_search_occupation_service_1.JobSearchOccupationService,
            job_search_category_service_1.JobSearchCategoryService,
            keyresult_service_1.KeyResultService,
            keyresult_template_service_1.KeyresultTemplateService,
            keyresult_update_service_1.KeyResultUpdateService,
            language_service_1.LanguageService,
            organization_awards_service_1.OrganizationAwardsService,
            organization_languages_service_1.OrganizationLanguagesService,
            organization_service_1.OrganizationService,
            organization_contact_service_1.OrganizationContactService,
            organization_department_service_1.OrganizationDepartmentService,
            organization_documents_service_1.OrganizationDocumentsService,
            organization_employment_type_service_1.OrganizationEmploymentTypeService,
            organization_positions_service_1.OrganizationPositionsService,
            organization_projects_service_1.OrganizationProjectsService,
            organization_recurring_expense_service_1.OrganizationRecurringExpenseService,
            organization_team_service_1.OrganizationTeamService,
            organization_team_employee_service_1.OrganizationTeamEmployeeService,
            organization_sprint_service_1.OrganizationSprintService,
            organization_vendors_service_1.OrganizationVendorsService,
            payment_service_1.PaymentService,
            pipeline_service_1.PipelineService,
            product_service_1.ProductService,
            product_category_service_1.ProductCategoryService,
            product_type_service_1.ProductTypeService,
            product_option_service_1.ProductOptionService,
            product_variant_service_1.ProductVariantService,
            product_settings_service_1.ProductVariantSettingService,
            product_variant_price_service_1.ProductVariantPriceService,
            proposal_service_1.ProposalService,
            report_service_1.ReportService,
            report_category_service_1.ReportCategoryService,
            request_approval_service_1.RequestApprovalService,
            role_service_1.RoleService,
            role_permissions_service_1.RolePermissionsService,
            screenshot_service_1.ScreenshotService,
            pipeline_stage_service_1.StageService,
            skill_service_1.SkillService,
            tag_service_1.TagService,
            task_service_1.TaskService,
            tenant_service_1.TenantService,
            timer_service_1.TimerService,
            time_off_policy_service_1.TimeOffPolicyService,
            time_off_request_service_1.TimeOffRequestService,
            timesheet_service_1.TimeSheetService,
            time_log_service_1.TimeLogService,
            time_slot_service_1.TimeSlotService,
            integration_upwork_1.UpworkJobService,
            integration_upwork_1.UpworkOffersService,
            upwork_service_1.UpworkService,
            integration_upwork_1.UpworkReportService,
            user_service_1.UserService,
            user_organization_services_1.UserOrganizationService
        ],
        exports: [
            activity_service_1.ActivityService,
            appointment_employees_service_1.AppointmentEmployeesService,
            approval_policy_service_1.ApprovalPolicyService,
            availability_slots_service_1.AvailabilitySlotsService,
            candidate_service_1.CandidateService,
            candidate_criterion_rating_service_1.CandidateCriterionsRatingService,
            candidate_documents_service_1.CandidateDocumentsService,
            candidate_education_service_1.CandidateEducationService,
            candidate_experience_service_1.CandidateExperienceService,
            candidate_feedbacks_service_1.CandidateFeedbacksService,
            candidate_interview_service_1.CandidateInterviewService,
            candidate_interviewers_service_1.CandidateInterviewersService,
            candidate_personal_qualities_service_1.CandidatePersonalQualitiesService,
            candidate_skill_service_1.CandidateSkillService,
            candidate_source_service_1.CandidateSourceService,
            candidate_technologies_service_1.CandidateTechnologiesService,
            contact_service_1.ContactService,
            country_1.CountryService,
            currency_1.CurrencyService,
            custom_smtp_service_1.CustomSmtpService,
            deal_service_1.DealService,
            email_service_1.EmailService,
            email_template_service_1.EmailTemplateService,
            employee_service_1.EmployeeService,
            employee_appointment_1.EmployeeAppointmentService,
            employee_award_service_1.EmployeeAwardService,
            employee_proposal_template_service_1.EmployeeProposalTemplateService,
            organization_employee_level_service_1.EmployeeLevelService,
            employee_recurring_expense_1.EmployeeRecurringExpenseService,
            employee_setting_1.EmployeeSettingService,
            employee_statistics_1.EmployeeStatisticsService,
            equipment_service_1.EquipmentService,
            equipment_sharing_1.EquipmentSharingService,
            estimate_email_service_1.EstimateEmailService,
            event_type_service_1.EventTypeService,
            expense_service_1.ExpenseService,
            expense_categories_service_1.ExpenseCategoriesService,
            export_all_service_1.ExportAllService,
            goal_service_1.GoalService,
            goal_template_service_1.GoalTemplateService,
            goal_kpi_service_1.GoalKpiService,
            goal_kpi_template_service_1.GoalKpiTemplateService,
            goal_time_frame_service_1.GoalTimeFrameService,
            help_center_service_1.HelpCenterService,
            help_center_article_service_1.HelpCenterArticleService,
            help_center_author_service_1.HelpCenterAuthorService,
            income_service_1.IncomeService,
            integration_service_1.IntegrationService,
            integration_entity_setting_service_1.IntegrationEntitySettingService,
            integration_entity_setting_tied_entity_service_1.IntegrationEntitySettingTiedEntityService,
            integration_map_service_1.IntegrationMapService,
            integration_setting_service_1.IntegrationSettingService,
            integration_tenant_service_1.IntegrationTenantService,
            invite_service_1.InviteService,
            invoice_service_1.InvoiceService,
            invoice_item_service_1.InvoiceItemService,
            invoice_estimate_history_service_1.InvoiceEstimateHistoryService,
            job_preset_service_1.JobPresetService,
            job_search_occupation_service_1.JobSearchOccupationService,
            job_search_category_service_1.JobSearchCategoryService,
            keyresult_service_1.KeyResultService,
            keyresult_template_service_1.KeyresultTemplateService,
            keyresult_update_service_1.KeyResultUpdateService,
            language_service_1.LanguageService,
            organization_service_1.OrganizationService,
            organization_awards_service_1.OrganizationAwardsService,
            organization_languages_service_1.OrganizationLanguagesService,
            organization_contact_service_1.OrganizationContactService,
            organization_department_service_1.OrganizationDepartmentService,
            organization_documents_service_1.OrganizationDocumentsService,
            organization_employment_type_service_1.OrganizationEmploymentTypeService,
            organization_positions_service_1.OrganizationPositionsService,
            organization_projects_service_1.OrganizationProjectsService,
            organization_recurring_expense_service_1.OrganizationRecurringExpenseService,
            organization_team_service_1.OrganizationTeamService,
            organization_team_employee_service_1.OrganizationTeamEmployeeService,
            organization_sprint_service_1.OrganizationSprintService,
            organization_vendors_service_1.OrganizationVendorsService,
            payment_service_1.PaymentService,
            pipeline_service_1.PipelineService,
            product_service_1.ProductService,
            product_category_service_1.ProductCategoryService,
            product_type_service_1.ProductTypeService,
            product_option_service_1.ProductOptionService,
            product_variant_service_1.ProductVariantService,
            product_settings_service_1.ProductVariantSettingService,
            product_variant_price_service_1.ProductVariantPriceService,
            proposal_service_1.ProposalService,
            report_service_1.ReportService,
            report_category_service_1.ReportCategoryService,
            role_service_1.RoleService,
            role_permissions_service_1.RolePermissionsService,
            request_approval_service_1.RequestApprovalService,
            pipeline_stage_service_1.StageService,
            skill_service_1.SkillService,
            screenshot_service_1.ScreenshotService,
            tag_service_1.TagService,
            task_service_1.TaskService,
            tenant_service_1.TenantService,
            timer_service_1.TimerService,
            time_off_policy_service_1.TimeOffPolicyService,
            time_off_request_service_1.TimeOffRequestService,
            timesheet_service_1.TimeSheetService,
            time_log_service_1.TimeLogService,
            time_slot_service_1.TimeSlotService,
            integration_upwork_1.UpworkJobService,
            integration_upwork_1.UpworkOffersService,
            upwork_service_1.UpworkService,
            integration_upwork_1.UpworkReportService,
            user_service_1.UserService,
            user_organization_services_1.UserOrganizationService
        ]
    })
], ExportAllModule);
exports.ExportAllModule = ExportAllModule;


/***/ }),

/***/ "./src/app/export_import/export-all.service.ts":
/*!*****************************************************!*\
  !*** ./src/app/export_import/export-all.service.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportAllService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const fs = __webpack_require__(/*! fs */ "fs");
const fse = __webpack_require__(/*! fs-extra */ "fs-extra");
const archiver = __webpack_require__(/*! archiver */ "archiver");
const uuid_1 = __webpack_require__(/*! uuid */ "uuid");
const rxjs_1 = __webpack_require__(/*! rxjs */ "rxjs");
const country_1 = __webpack_require__(/*! ../country */ "./src/app/country/index.ts");
const csv = __webpack_require__(/*! csv-writer */ "csv-writer");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const user_organization_services_1 = __webpack_require__(/*! ../user-organization/user-organization.services */ "./src/app/user-organization/user-organization.services.ts");
const email_1 = __webpack_require__(/*! ../email */ "./src/app/email/index.ts");
const email_template_1 = __webpack_require__(/*! ../email-template */ "./src/app/email-template/index.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const operators_1 = __webpack_require__(/*! rxjs/operators */ "rxjs/operators");
const employee_recurring_expense_1 = __webpack_require__(/*! ../employee-recurring-expense */ "./src/app/employee-recurring-expense/index.ts");
const employee_setting_1 = __webpack_require__(/*! ../employee-setting */ "./src/app/employee-setting/index.ts");
const equipment_sharing_1 = __webpack_require__(/*! ../equipment-sharing */ "./src/app/equipment-sharing/index.ts");
const expense_service_1 = __webpack_require__(/*! ../expense/expense.service */ "./src/app/expense/expense.service.ts");
const expense_categories_service_1 = __webpack_require__(/*! ../expense-categories/expense-categories.service */ "./src/app/expense-categories/expense-categories.service.ts");
const income_service_1 = __webpack_require__(/*! ../income/income.service */ "./src/app/income/income.service.ts");
const invite_service_1 = __webpack_require__(/*! ../invite/invite.service */ "./src/app/invite/invite.service.ts");
const invoice_service_1 = __webpack_require__(/*! ../invoice/invoice.service */ "./src/app/invoice/invoice.service.ts");
const invoice_item_service_1 = __webpack_require__(/*! ../invoice-item/invoice-item.service */ "./src/app/invoice-item/invoice-item.service.ts");
const organization_service_1 = __webpack_require__(/*! ../organization/organization.service */ "./src/app/organization/organization.service.ts");
const organization_employee_level_service_1 = __webpack_require__(/*! ../organization_employee-level/organization-employee-level.service */ "./src/app/organization_employee-level/organization-employee-level.service.ts");
const organization_contact_service_1 = __webpack_require__(/*! ../organization-contact/organization-contact.service */ "./src/app/organization-contact/organization-contact.service.ts");
const organization_department_service_1 = __webpack_require__(/*! ../organization-department/organization-department.service */ "./src/app/organization-department/organization-department.service.ts");
const organization_employment_type_service_1 = __webpack_require__(/*! ../organization-employment-type/organization-employment-type.service */ "./src/app/organization-employment-type/organization-employment-type.service.ts");
const organization_positions_service_1 = __webpack_require__(/*! ../organization-positions/organization-positions.service */ "./src/app/organization-positions/organization-positions.service.ts");
const organization_projects_service_1 = __webpack_require__(/*! ../organization-projects/organization-projects.service */ "./src/app/organization-projects/organization-projects.service.ts");
const organization_recurring_expense_service_1 = __webpack_require__(/*! ../organization-recurring-expense/organization-recurring-expense.service */ "./src/app/organization-recurring-expense/organization-recurring-expense.service.ts");
const organization_team_service_1 = __webpack_require__(/*! ../organization-team/organization-team.service */ "./src/app/organization-team/organization-team.service.ts");
const organization_vendors_service_1 = __webpack_require__(/*! ../organization-vendors/organization-vendors.service */ "./src/app/organization-vendors/organization-vendors.service.ts");
const proposal_service_1 = __webpack_require__(/*! ../proposal/proposal.service */ "./src/app/proposal/proposal.service.ts");
const role_service_1 = __webpack_require__(/*! ../role/role.service */ "./src/app/role/role.service.ts");
const role_permissions_service_1 = __webpack_require__(/*! ../role-permissions/role-permissions.service */ "./src/app/role-permissions/role-permissions.service.ts");
const tag_service_1 = __webpack_require__(/*! ../tags/tag.service */ "./src/app/tags/tag.service.ts");
const task_service_1 = __webpack_require__(/*! ../tasks/task.service */ "./src/app/tasks/task.service.ts");
const tenant_service_1 = __webpack_require__(/*! ../tenant/tenant.service */ "./src/app/tenant/tenant.service.ts");
const time_off_policy_service_1 = __webpack_require__(/*! ../time-off-policy/time-off-policy.service */ "./src/app/time-off-policy/time-off-policy.service.ts");
const timesheet_service_1 = __webpack_require__(/*! ../timesheet/timesheet/timesheet.service */ "./src/app/timesheet/timesheet/timesheet.service.ts");
const activity_service_1 = __webpack_require__(/*! ../timesheet/activity/activity.service */ "./src/app/timesheet/activity/activity.service.ts");
const screenshot_service_1 = __webpack_require__(/*! ../timesheet/screenshot/screenshot.service */ "./src/app/timesheet/screenshot/screenshot.service.ts");
const time_slot_service_1 = __webpack_require__(/*! ../timesheet/time-slot/time-slot.service */ "./src/app/timesheet/time-slot/time-slot.service.ts");
const time_log_service_1 = __webpack_require__(/*! ../timesheet/time-log/time-log.service */ "./src/app/timesheet/time-log/time-log.service.ts");
const appointment_employees_service_1 = __webpack_require__(/*! ../appointment-employees/appointment-employees.service */ "./src/app/appointment-employees/appointment-employees.service.ts");
const approval_policy_service_1 = __webpack_require__(/*! ../approval-policy/approval-policy.service */ "./src/app/approval-policy/approval-policy.service.ts");
const candidate_service_1 = __webpack_require__(/*! ../candidate/candidate.service */ "./src/app/candidate/candidate.service.ts");
const organization_team_employee_service_1 = __webpack_require__(/*! ../organization-team-employee/organization-team-employee.service */ "./src/app/organization-team-employee/organization-team-employee.service.ts");
const equipment_service_1 = __webpack_require__(/*! ../equipment/equipment.service */ "./src/app/equipment/equipment.service.ts");
const contact_service_1 = __webpack_require__(/*! ../contact/contact.service */ "./src/app/contact/contact.service.ts");
const time_off_request_service_1 = __webpack_require__(/*! ../time-off-request/time-off-request.service */ "./src/app/time-off-request/time-off-request.service.ts");
const pipeline_stage_service_1 = __webpack_require__(/*! ../pipeline-stage/pipeline-stage.service */ "./src/app/pipeline-stage/pipeline-stage.service.ts");
const skill_service_1 = __webpack_require__(/*! ../skills/skill.service */ "./src/app/skills/skill.service.ts");
const request_approval_service_1 = __webpack_require__(/*! ../request-approval/request-approval.service */ "./src/app/request-approval/request-approval.service.ts");
const product_variant_service_1 = __webpack_require__(/*! ../product-variant/product-variant.service */ "./src/app/product-variant/product-variant.service.ts");
const product_variant_price_service_1 = __webpack_require__(/*! ../product-variant-price/product-variant-price.service */ "./src/app/product-variant-price/product-variant-price.service.ts");
const payment_service_1 = __webpack_require__(/*! ../payment/payment.service */ "./src/app/payment/payment.service.ts");
const pipeline_service_1 = __webpack_require__(/*! ../pipeline/pipeline.service */ "./src/app/pipeline/pipeline.service.ts");
const product_service_1 = __webpack_require__(/*! ../product/product.service */ "./src/app/product/product.service.ts");
const product_category_service_1 = __webpack_require__(/*! ../product-category/product-category.service */ "./src/app/product-category/product-category.service.ts");
const product_option_service_1 = __webpack_require__(/*! ../product-option/product-option.service */ "./src/app/product-option/product-option.service.ts");
const product_settings_service_1 = __webpack_require__(/*! ../product-settings/product-settings.service */ "./src/app/product-settings/product-settings.service.ts");
const product_type_service_1 = __webpack_require__(/*! ../product-type/product-type.service */ "./src/app/product-type/product-type.service.ts");
const organization_sprint_service_1 = __webpack_require__(/*! ../organization-sprint/organization-sprint.service */ "./src/app/organization-sprint/organization-sprint.service.ts");
const organization_languages_service_1 = __webpack_require__(/*! ../organization-languages/organization-languages.service */ "./src/app/organization-languages/organization-languages.service.ts");
const organization_awards_service_1 = __webpack_require__(/*! ../organization-awards/organization-awards.service */ "./src/app/organization-awards/organization-awards.service.ts");
const keyresult_service_1 = __webpack_require__(/*! ../keyresult/keyresult.service */ "./src/app/keyresult/keyresult.service.ts");
const keyresult_update_service_1 = __webpack_require__(/*! ../keyresult-update/keyresult-update.service */ "./src/app/keyresult-update/keyresult-update.service.ts");
const integration_service_1 = __webpack_require__(/*! ../integration/integration.service */ "./src/app/integration/integration.service.ts");
const integration_entity_setting_service_1 = __webpack_require__(/*! ../integration-entity-setting/integration-entity-setting.service */ "./src/app/integration-entity-setting/integration-entity-setting.service.ts");
const integration_entity_setting_tied_entity_service_1 = __webpack_require__(/*! ../integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.service */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.service.ts");
const integration_map_service_1 = __webpack_require__(/*! ../integration-map/integration-map.service */ "./src/app/integration-map/integration-map.service.ts");
const integration_setting_service_1 = __webpack_require__(/*! ../integration-setting/integration-setting.service */ "./src/app/integration-setting/integration-setting.service.ts");
const integration_tenant_service_1 = __webpack_require__(/*! ../integration-tenant/integration-tenant.service */ "./src/app/integration-tenant/integration-tenant.service.ts");
const help_center_service_1 = __webpack_require__(/*! ../help-center/help-center.service */ "./src/app/help-center/help-center.service.ts");
const help_center_article_service_1 = __webpack_require__(/*! ../help-center-article/help-center-article.service */ "./src/app/help-center-article/help-center-article.service.ts");
const help_center_author_service_1 = __webpack_require__(/*! ../help-center-author/help-center-author.service */ "./src/app/help-center-author/help-center-author.service.ts");
const goal_service_1 = __webpack_require__(/*! ../goal/goal.service */ "./src/app/goal/goal.service.ts");
const goal_time_frame_service_1 = __webpack_require__(/*! ../goal-time-frame/goal-time-frame.service */ "./src/app/goal-time-frame/goal-time-frame.service.ts");
const goal_kpi_service_1 = __webpack_require__(/*! ../goal-kpi/goal-kpi.service */ "./src/app/goal-kpi/goal-kpi.service.ts");
const event_type_service_1 = __webpack_require__(/*! ../event-types/event-type.service */ "./src/app/event-types/event-type.service.ts");
const estimate_email_service_1 = __webpack_require__(/*! ../estimate-email/estimate-email.service */ "./src/app/estimate-email/estimate-email.service.ts");
const employee_appointment_1 = __webpack_require__(/*! ../employee-appointment */ "./src/app/employee-appointment/index.ts");
const deal_service_1 = __webpack_require__(/*! ../deal/deal.service */ "./src/app/deal/deal.service.ts");
const availability_slots_service_1 = __webpack_require__(/*! ../availability-slots/availability-slots.service */ "./src/app/availability-slots/availability-slots.service.ts");
const candidate_criterion_rating_service_1 = __webpack_require__(/*! ../candidate-criterions-rating/candidate-criterion-rating.service */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.service.ts");
const candidate_documents_service_1 = __webpack_require__(/*! ../candidate-documents/candidate-documents.service */ "./src/app/candidate-documents/candidate-documents.service.ts");
const candidate_education_service_1 = __webpack_require__(/*! ../candidate-education/candidate-education.service */ "./src/app/candidate-education/candidate-education.service.ts");
const candidate_experience_service_1 = __webpack_require__(/*! ../candidate-experience/candidate-experience.service */ "./src/app/candidate-experience/candidate-experience.service.ts");
const candidate_feedbacks_service_1 = __webpack_require__(/*! ../candidate-feedbacks/candidate-feedbacks.service */ "./src/app/candidate-feedbacks/candidate-feedbacks.service.ts");
const candidate_interview_service_1 = __webpack_require__(/*! ../candidate-interview/candidate-interview.service */ "./src/app/candidate-interview/candidate-interview.service.ts");
const candidate_interviewers_service_1 = __webpack_require__(/*! ../candidate-interviewers/candidate-interviewers.service */ "./src/app/candidate-interviewers/candidate-interviewers.service.ts");
const candidate_personal_qualities_service_1 = __webpack_require__(/*! ../candidate-personal-qualities/candidate-personal-qualities.service */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.service.ts");
const candidate_skill_service_1 = __webpack_require__(/*! ../candidate-skill/candidate-skill.service */ "./src/app/candidate-skill/candidate-skill.service.ts");
const candidate_technologies_service_1 = __webpack_require__(/*! ../candidate-technologies/candidate-technologies.service */ "./src/app/candidate-technologies/candidate-technologies.service.ts");
const candidate_source_service_1 = __webpack_require__(/*! ../candidate-source/candidate-source.service */ "./src/app/candidate-source/candidate-source.service.ts");
const language_service_1 = __webpack_require__(/*! ../language/language.service */ "./src/app/language/language.service.ts");
const organization_documents_service_1 = __webpack_require__(/*! ../organization-documents/organization-documents.service */ "./src/app/organization-documents/organization-documents.service.ts");
const currency_1 = __webpack_require__(/*! ../currency */ "./src/app/currency/index.ts");
const employee_award_service_1 = __webpack_require__(/*! ../employee-award/employee-award.service */ "./src/app/employee-award/employee-award.service.ts");
const employee_proposal_template_service_1 = __webpack_require__(/*! ../employee-proposal-template/employee-proposal-template.service */ "./src/app/employee-proposal-template/employee-proposal-template.service.ts");
const goal_template_service_1 = __webpack_require__(/*! ../goal-template/goal-template.service */ "./src/app/goal-template/goal-template.service.ts");
const goal_kpi_template_service_1 = __webpack_require__(/*! ../goal-kpi-template/goal-kpi-template.service */ "./src/app/goal-kpi-template/goal-kpi-template.service.ts");
const invoice_estimate_history_service_1 = __webpack_require__(/*! ../invoice-estimate-history/invoice-estimate-history.service */ "./src/app/invoice-estimate-history/invoice-estimate-history.service.ts");
const job_search_occupation_service_1 = __webpack_require__(/*! ../employee-job-preset/job-search-occupation/job-search-occupation.service */ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.service.ts");
const job_preset_service_1 = __webpack_require__(/*! ../employee-job-preset/job-preset.service */ "./src/app/employee-job-preset/job-preset.service.ts");
const job_search_category_service_1 = __webpack_require__(/*! ../employee-job-preset/job-search-category/job-search-category.service */ "./src/app/employee-job-preset/job-search-category/job-search-category.service.ts");
const keyresult_template_service_1 = __webpack_require__(/*! ../keyresult-template/keyresult-template.service */ "./src/app/keyresult-template/keyresult-template.service.ts");
const report_service_1 = __webpack_require__(/*! ../reports/report.service */ "./src/app/reports/report.service.ts");
const report_category_service_1 = __webpack_require__(/*! ../reports/report-category.service */ "./src/app/reports/report-category.service.ts");
let ExportAllService = class ExportAllService {
    constructor(activityService, appointmentEmployeeService, approvalPolicyService, availabilitySlotsService, candidateService, candidateCriterionsRatingService, candidateDocumentsService, candidateEducationService, candidateExperienceService, candidateFeedbacksService, candidateInterviewService, candidateInterviewsService, candidatePersonalQualitiesService, candidateSkillService, candidateSourceService, candidateTechnologiesService, contactService, countryService, currencyService, dealService, emailService, emailTemplate, employeeService, employeeAppointmentService, employeeAwardService, employeeProposalTemplateService, employeeRecurringExpensesService, employeeSettingService, equipmentService, equipmentSharingService, estimateEmailService, eventTypesService, expenseService, expenseCategoriesService, employeeLevelService, goalService, goalTemplateService, goalKpiService, goalKpiTemplateService, goalTimeFrameService, helpCenterService, helpCenterArticleService, helpCenterAuthorService, incomeService, integrationService, integrationEntitySettingService, integrationEntitySettingTiedEntityService, integrationMapService, integrationSettingService, integrationTenantService, inviteService, invoiceService, invoiceItemService, invoiceEstimateHistoryService, jobPresetService, jobSearchOccupationService, jobSearchCategoryService, keyResultService, keyResultTemplateService, keyResultUpdateService, languageService, organizationService, organizationAwardsService, organizationContactService, organizationDepartmentService, organizationDocumentService, organizationEmploymentTypeService, organizationLanguagesService, organizationPositionsService, organizationProjectsService, organizationRecurringExpenseService, organizationSprintService, organizationTeamService, organizationTeamEmployeeService, organizationVendorsService, paymentService, pipelineService, productService, productCategoryService, productOptionService, productSettingsService, productTypeService, productVariantService, productVariantPriceService, proposalService, reportService, reportCategoryService, requestApprovalService, roleService, rolePermissionsService, screenShotService, skillService, stageService, tagService, taskService, tenantService, timeOffPolicyService, timeOffRequestService, timeSheetService, timeLogService, timeSlotService, userService, userOrganizationService) {
        this.activityService = activityService;
        this.appointmentEmployeeService = appointmentEmployeeService;
        this.approvalPolicyService = approvalPolicyService;
        this.availabilitySlotsService = availabilitySlotsService;
        this.candidateService = candidateService;
        this.candidateCriterionsRatingService = candidateCriterionsRatingService;
        this.candidateDocumentsService = candidateDocumentsService;
        this.candidateEducationService = candidateEducationService;
        this.candidateExperienceService = candidateExperienceService;
        this.candidateFeedbacksService = candidateFeedbacksService;
        this.candidateInterviewService = candidateInterviewService;
        this.candidateInterviewsService = candidateInterviewsService;
        this.candidatePersonalQualitiesService = candidatePersonalQualitiesService;
        this.candidateSkillService = candidateSkillService;
        this.candidateSourceService = candidateSourceService;
        this.candidateTechnologiesService = candidateTechnologiesService;
        this.contactService = contactService;
        this.countryService = countryService;
        this.currencyService = currencyService;
        this.dealService = dealService;
        this.emailService = emailService;
        this.emailTemplate = emailTemplate;
        this.employeeService = employeeService;
        this.employeeAppointmentService = employeeAppointmentService;
        this.employeeAwardService = employeeAwardService;
        this.employeeProposalTemplateService = employeeProposalTemplateService;
        this.employeeRecurringExpensesService = employeeRecurringExpensesService;
        this.employeeSettingService = employeeSettingService;
        this.equipmentService = equipmentService;
        this.equipmentSharingService = equipmentSharingService;
        this.estimateEmailService = estimateEmailService;
        this.eventTypesService = eventTypesService;
        this.expenseService = expenseService;
        this.expenseCategoriesService = expenseCategoriesService;
        this.employeeLevelService = employeeLevelService;
        this.goalService = goalService;
        this.goalTemplateService = goalTemplateService;
        this.goalKpiService = goalKpiService;
        this.goalKpiTemplateService = goalKpiTemplateService;
        this.goalTimeFrameService = goalTimeFrameService;
        this.helpCenterService = helpCenterService;
        this.helpCenterArticleService = helpCenterArticleService;
        this.helpCenterAuthorService = helpCenterAuthorService;
        this.incomeService = incomeService;
        this.integrationService = integrationService;
        this.integrationEntitySettingService = integrationEntitySettingService;
        this.integrationEntitySettingTiedEntityService = integrationEntitySettingTiedEntityService;
        this.integrationMapService = integrationMapService;
        this.integrationSettingService = integrationSettingService;
        this.integrationTenantService = integrationTenantService;
        this.inviteService = inviteService;
        this.invoiceService = invoiceService;
        this.invoiceItemService = invoiceItemService;
        this.invoiceEstimateHistoryService = invoiceEstimateHistoryService;
        this.jobPresetService = jobPresetService;
        this.jobSearchOccupationService = jobSearchOccupationService;
        this.jobSearchCategoryService = jobSearchCategoryService;
        this.keyResultService = keyResultService;
        this.keyResultTemplateService = keyResultTemplateService;
        this.keyResultUpdateService = keyResultUpdateService;
        this.languageService = languageService;
        this.organizationService = organizationService;
        this.organizationAwardsService = organizationAwardsService;
        this.organizationContactService = organizationContactService;
        this.organizationDepartmentService = organizationDepartmentService;
        this.organizationDocumentService = organizationDocumentService;
        this.organizationEmploymentTypeService = organizationEmploymentTypeService;
        this.organizationLanguagesService = organizationLanguagesService;
        this.organizationPositionsService = organizationPositionsService;
        this.organizationProjectsService = organizationProjectsService;
        this.organizationRecurringExpenseService = organizationRecurringExpenseService;
        this.organizationSprintService = organizationSprintService;
        this.organizationTeamService = organizationTeamService;
        this.organizationTeamEmployeeService = organizationTeamEmployeeService;
        this.organizationVendorsService = organizationVendorsService;
        this.paymentService = paymentService;
        this.pipelineService = pipelineService;
        this.productService = productService;
        this.productCategoryService = productCategoryService;
        this.productOptionService = productOptionService;
        this.productSettingsService = productSettingsService;
        this.productTypeService = productTypeService;
        this.productVariantService = productVariantService;
        this.productVariantPriceService = productVariantPriceService;
        this.proposalService = proposalService;
        this.reportService = reportService;
        this.reportCategoryService = reportCategoryService;
        this.requestApprovalService = requestApprovalService;
        this.roleService = roleService;
        this.rolePermissionsService = rolePermissionsService;
        this.screenShotService = screenShotService;
        this.skillService = skillService;
        this.stageService = stageService;
        this.tagService = tagService;
        this.taskService = taskService;
        this.tenantService = tenantService;
        this.timeOffPolicyService = timeOffPolicyService;
        this.timeOffRequestService = timeOffRequestService;
        this.timeSheetService = timeSheetService;
        this.timeLogService = timeLogService;
        this.timeSlotService = timeSlotService;
        this.userService = userService;
        this.userOrganizationService = userOrganizationService;
        this.idZip = new rxjs_1.BehaviorSubject('');
        this.idCsv = new rxjs_1.BehaviorSubject('');
        this._ngDestroy$ = new rxjs_1.Subject();
        this.services = [];
        this.services = this.loadServices();
    }
    async createFolders() {
        return new Promise((resolve, reject) => {
            const id = uuid_1.v4();
            this.idCsv.next(id);
            fs.access(`./export/${id}/csv`, (error) => {
                if (!error) {
                    return null;
                }
                else {
                    fs.mkdir(`./export/${id}/csv`, { recursive: true }, (err) => {
                        if (err)
                            reject(err);
                        resolve();
                    });
                }
            });
        });
    }
    async archiveAndDownload() {
        return new Promise((resolve, reject) => {
            {
                const id = uuid_1.v4();
                const fileNameS = id + '_export.zip';
                this.idZip.next(fileNameS);
                const output = fs.createWriteStream(`./export/${fileNameS}`);
                const archive = archiver('zip', {
                    zlib: { level: 9 }
                });
                output.on('close', function () {
                    resolve();
                });
                output.on('end', function () {
                    console.log('Data has been drained');
                });
                archive.on('warning', function (err) {
                    if (err.code === 'ENOENT') {
                        reject(err);
                    }
                    else {
                        console.log('Unexpected error!');
                    }
                });
                archive.on('error', function (err) {
                    reject(err);
                });
                let id$ = '';
                this.idCsv
                    .pipe(operators_1.takeUntil(this._ngDestroy$))
                    .subscribe((idCsv) => {
                    id$ = idCsv;
                });
                archive.pipe(output);
                archive.directory(`./export/${id$}/csv`, false);
                archive.finalize();
            }
        });
    }
    async getAsCsv(service_count, findInput) {
        const whereClause = {};
        if (this.services[service_count]['tenantOrganizationBase'] !== false) {
            whereClause['where'] = findInput;
        }
        if (this.services[service_count]['tenantBase'] === true) {
            whereClause['where'] = {
                tenantId: findInput['tenantId']
            };
        }
        const incomingData = (await this.services[service_count].service.findAll(whereClause)).items;
        if (incomingData.length > 0) {
            return new Promise((resolve, reject) => {
                const createCsvWriter = csv.createObjectCsvWriter;
                const dataIn = [];
                const dataKeys = Object.keys(incomingData[0]);
                for (const count of dataKeys) {
                    dataIn.push({ id: count, title: count });
                }
                let id$ = '';
                this.idCsv.pipe(operators_1.takeUntil(this._ngDestroy$)).subscribe((id) => {
                    id$ = id;
                });
                const csvWriter = createCsvWriter({
                    path: `./export/${id$}/csv/${this.services[service_count].nameFile}.csv`,
                    header: dataIn
                });
                const data = incomingData;
                csvWriter.writeRecords(data).then(() => {
                    resolve();
                });
            });
        }
        return false;
    }
    async downloadToUser(res) {
        return new Promise((resolve, reject) => {
            let fileName = '';
            this.idZip
                .pipe(operators_1.takeUntil(this._ngDestroy$))
                .subscribe((filename) => {
                fileName = filename;
            });
            res.download(`./export/${fileName}`);
            resolve();
        });
    }
    async downloadTemplate(res) {
        return new Promise((resolve, reject) => {
            res.download('./export/template.zip');
            resolve();
        });
    }
    async deleteCsvFiles() {
        return new Promise((resolve, reject) => {
            let id$ = '';
            this.idCsv.pipe(operators_1.takeUntil(this._ngDestroy$)).subscribe((id) => {
                id$ = id;
            });
            fs.access(`./export/${id$}`, (error) => {
                if (!error) {
                    fse.removeSync(`./export/${id$}`);
                    resolve();
                }
                else {
                    return null;
                }
            });
        });
    }
    async deleteArchive() {
        return new Promise((resolve, reject) => {
            let fileName = '';
            this.idZip
                .pipe(operators_1.takeUntil(this._ngDestroy$))
                .subscribe((fileName$) => {
                fileName = fileName$;
            });
            fs.access(`./export/${fileName}`, (error) => {
                if (!error) {
                    fse.removeSync(`./export/${fileName}`);
                    resolve();
                }
                else {
                    return null;
                }
            });
        });
    }
    async exportTables(findInput) {
        return new Promise(async (resolve, reject) => {
            for (const [i] of this.services.entries()) {
                await this.getAsCsv(i, findInput);
            }
            resolve();
        });
    }
    async exportSpecificTables(names, findInput) {
        return new Promise(async (resolve, reject) => {
            for (let i = 0; i < this.services.length; i++) {
                const name = names.find((n) => this.services[i].nameFile === n);
                if (name) {
                    await this.getAsCsv(i, findInput);
                }
            }
            resolve();
        });
    }
    loadServices() {
        return [
            { service: this.activityService, nameFile: 'activity' },
            {
                service: this.appointmentEmployeeService,
                nameFile: 'appointment_employee'
            },
            {
                service: this.approvalPolicyService,
                nameFile: 'approval_policy'
            },
            {
                service: this.availabilitySlotsService,
                nameFile: 'availability_slot'
            },
            { service: this.candidateService, nameFile: 'candidate' },
            {
                service: this.candidateCriterionsRatingService,
                nameFile: 'candidate_creation_rating'
            },
            {
                service: this.candidateDocumentsService,
                nameFile: 'candidate_document'
            },
            {
                service: this.candidateEducationService,
                nameFile: 'candidate_education'
            },
            {
                service: this.candidateExperienceService,
                nameFile: 'candidate_experience'
            },
            {
                service: this.candidateFeedbacksService,
                nameFile: 'candidate_feedback'
            },
            {
                service: this.candidateInterviewService,
                nameFile: 'candidate_interview'
            },
            {
                service: this.candidateInterviewsService,
                nameFile: 'candidate_interviewer'
            },
            {
                service: this.candidatePersonalQualitiesService,
                nameFile: 'candidate_personal_quality'
            },
            {
                service: this.candidateSkillService,
                nameFile: 'candidate_skill'
            },
            {
                service: this.candidateSourceService,
                nameFile: 'candidate_source'
            },
            {
                service: this.candidateTechnologiesService,
                nameFile: 'candidate_technology'
            },
            { service: this.contactService, nameFile: 'contact' },
            {
                service: this.countryService,
                nameFile: 'country',
                tenantOrganizationBase: false
            },
            {
                service: this.currencyService,
                nameFile: 'currency',
                tenantOrganizationBase: false
            },
            { service: this.dealService, nameFile: 'deal' },
            { service: this.emailService, nameFile: 'email' },
            { service: this.emailTemplate, nameFile: 'email_template' },
            { service: this.estimateEmailService, nameFile: 'estimate_email' },
            { service: this.employeeService, nameFile: 'employee' },
            {
                service: this.employeeAppointmentService,
                nameFile: 'employee_appointment'
            },
            {
                service: this.employeeAwardService,
                nameFile: 'employee_award'
            },
            {
                service: this.employeeProposalTemplateService,
                nameFile: 'employee_proposal_template'
            },
            {
                service: this.employeeRecurringExpensesService,
                nameFile: 'employee_recurring_expense'
            },
            {
                service: this.employeeSettingService,
                nameFile: 'employee_setting'
            },
            { service: this.equipmentService, nameFile: 'equipment' },
            {
                service: this.equipmentSharingService,
                nameFile: 'equipment_sharing'
            },
            { service: this.eventTypesService, nameFile: 'event_types' },
            { service: this.expenseService, nameFile: 'expense' },
            {
                service: this.expenseCategoriesService,
                nameFile: 'expense_category'
            },
            { service: this.goalService, nameFile: 'goal' },
            {
                service: this.goalTemplateService,
                nameFile: 'goal_template'
            },
            { service: this.goalKpiService, nameFile: 'goal_kpi' },
            {
                service: this.goalKpiTemplateService,
                nameFile: 'goal_kpi_template'
            },
            { service: this.goalTimeFrameService, nameFile: 'goal_time_frame' },
            { service: this.helpCenterService, nameFile: 'knowledge_base' },
            {
                service: this.helpCenterArticleService,
                nameFile: 'knowledge_base_article'
            },
            {
                service: this.helpCenterAuthorService,
                nameFile: 'knowledge_base_author'
            },
            { service: this.incomeService, nameFile: 'income' },
            {
                service: this.integrationService,
                nameFile: 'integration',
                tenantOrganizationBase: false
            },
            {
                service: this.integrationEntitySettingService,
                nameFile: 'integration_entity_setting'
            },
            {
                service: this.integrationEntitySettingTiedEntityService,
                nameFile: 'integration_entity_setting_tied_entity'
            },
            {
                service: this.integrationMapService,
                nameFile: 'integration_map'
            },
            {
                service: this.integrationSettingService,
                nameFile: 'integration_setting'
            },
            {
                service: this.integrationTenantService,
                nameFile: 'integration_tenant'
            },
            { service: this.inviteService, nameFile: 'invite' },
            { service: this.invoiceService, nameFile: 'invoice' },
            { service: this.invoiceItemService, nameFile: 'invoice_item' },
            {
                service: this.invoiceEstimateHistoryService,
                nameFile: 'invoice_estimate_history'
            },
            {
                service: this.jobPresetService,
                nameFile: 'job_preset'
            },
            {
                service: this.jobSearchOccupationService,
                nameFile: 'job_search_occupation'
            },
            {
                service: this.jobSearchCategoryService,
                nameFile: 'job_search_category'
            },
            { service: this.keyResultService, nameFile: 'key_result' },
            {
                service: this.keyResultTemplateService,
                nameFile: 'key_result_template'
            },
            {
                service: this.keyResultUpdateService,
                nameFile: 'key_result_update'
            },
            {
                service: this.languageService,
                nameFile: 'language',
                tenantOrganizationBase: false
            },
            {
                service: this.organizationService,
                nameFile: 'organization',
                tenantOrganizationBase: false,
                tenantBase: true
            },
            {
                service: this.organizationAwardsService,
                nameFile: 'organization_award'
            },
            {
                service: this.organizationContactService,
                nameFile: 'organization_contact'
            },
            {
                service: this.organizationDepartmentService,
                nameFile: 'organization_department'
            },
            {
                service: this.organizationDocumentService,
                nameFile: 'organization_document'
            },
            {
                service: this.employeeLevelService,
                nameFile: 'organization_employee_level'
            },
            {
                service: this.organizationEmploymentTypeService,
                nameFile: 'organization_employment_type'
            },
            {
                service: this.organizationLanguagesService,
                nameFile: 'organization_languages'
            },
            {
                service: this.organizationPositionsService,
                nameFile: 'organization_position'
            },
            {
                service: this.organizationProjectsService,
                nameFile: 'organization_project'
            },
            {
                service: this.organizationRecurringExpenseService,
                nameFile: 'organization_recurring_expense'
            },
            {
                service: this.organizationSprintService,
                nameFile: 'organization_sprint'
            },
            {
                service: this.organizationTeamService,
                nameFile: 'organization_team'
            },
            {
                service: this.organizationTeamEmployeeService,
                nameFile: 'organization_team_employee'
            },
            {
                service: this.organizationVendorsService,
                nameFile: 'organization_vendor'
            },
            { service: this.paymentService, nameFile: 'payment' },
            { service: this.pipelineService, nameFile: 'pipeline' },
            { service: this.productService, nameFile: 'product' },
            {
                service: this.productCategoryService,
                nameFile: 'product_category'
            },
            { service: this.productOptionService, nameFile: 'product_option' },
            { service: this.productTypeService, nameFile: 'product_type' },
            {
                service: this.productVariantService,
                nameFile: 'product_variant'
            },
            {
                service: this.productVariantPriceService,
                nameFile: 'product_variant_price'
            },
            {
                service: this.productSettingsService,
                nameFile: 'product_variant_setting'
            },
            { service: this.proposalService, nameFile: 'proposal' },
            {
                service: this.reportService,
                nameFile: 'report'
            },
            {
                service: this.reportCategoryService,
                nameFile: 'report_category'
            },
            {
                service: this.requestApprovalService,
                nameFile: 'request_approval'
            },
            {
                service: this.roleService,
                nameFile: 'role',
                tenantOrganizationBase: false
            },
            {
                service: this.rolePermissionsService,
                nameFile: 'role_permission',
                tenantOrganizationBase: false
            },
            { service: this.screenShotService, nameFile: 'screenshot' },
            {
                service: this.skillService,
                nameFile: 'skill',
                tenantOrganizationBase: false
            },
            { service: this.stageService, nameFile: 'pipeline_stage' },
            { service: this.tagService, nameFile: 'tag' },
            { service: this.taskService, nameFile: 'task' },
            {
                service: this.tenantService,
                nameFile: 'tenant',
                tenantOrganizationBase: false
            },
            { service: this.timeOffPolicyService, nameFile: 'time_off_policy' },
            {
                service: this.timeOffRequestService,
                nameFile: 'time_off_request'
            },
            { service: this.timeSheetService, nameFile: 'timesheet' },
            { service: this.timeLogService, nameFile: 'time_log' },
            { service: this.timeSlotService, nameFile: 'time_slot' },
            {
                service: this.userService,
                nameFile: 'user',
                tenantOrganizationBase: false,
                tenantBase: true
            },
            {
                service: this.userOrganizationService,
                nameFile: 'user_organization'
            }
        ];
    }
    ngOnDestroy() {
        this._ngDestroy$.next();
        this._ngDestroy$.complete();
    }
};
ExportAllService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof activity_service_1.ActivityService !== "undefined" && activity_service_1.ActivityService) === "function" ? _a : Object, typeof (_b = typeof appointment_employees_service_1.AppointmentEmployeesService !== "undefined" && appointment_employees_service_1.AppointmentEmployeesService) === "function" ? _b : Object, typeof (_c = typeof approval_policy_service_1.ApprovalPolicyService !== "undefined" && approval_policy_service_1.ApprovalPolicyService) === "function" ? _c : Object, typeof (_d = typeof availability_slots_service_1.AvailabilitySlotsService !== "undefined" && availability_slots_service_1.AvailabilitySlotsService) === "function" ? _d : Object, typeof (_e = typeof candidate_service_1.CandidateService !== "undefined" && candidate_service_1.CandidateService) === "function" ? _e : Object, typeof (_f = typeof candidate_criterion_rating_service_1.CandidateCriterionsRatingService !== "undefined" && candidate_criterion_rating_service_1.CandidateCriterionsRatingService) === "function" ? _f : Object, typeof (_g = typeof candidate_documents_service_1.CandidateDocumentsService !== "undefined" && candidate_documents_service_1.CandidateDocumentsService) === "function" ? _g : Object, typeof (_h = typeof candidate_education_service_1.CandidateEducationService !== "undefined" && candidate_education_service_1.CandidateEducationService) === "function" ? _h : Object, typeof (_j = typeof candidate_experience_service_1.CandidateExperienceService !== "undefined" && candidate_experience_service_1.CandidateExperienceService) === "function" ? _j : Object, typeof (_k = typeof candidate_feedbacks_service_1.CandidateFeedbacksService !== "undefined" && candidate_feedbacks_service_1.CandidateFeedbacksService) === "function" ? _k : Object, typeof (_l = typeof candidate_interview_service_1.CandidateInterviewService !== "undefined" && candidate_interview_service_1.CandidateInterviewService) === "function" ? _l : Object, typeof (_m = typeof candidate_interviewers_service_1.CandidateInterviewersService !== "undefined" && candidate_interviewers_service_1.CandidateInterviewersService) === "function" ? _m : Object, typeof (_o = typeof candidate_personal_qualities_service_1.CandidatePersonalQualitiesService !== "undefined" && candidate_personal_qualities_service_1.CandidatePersonalQualitiesService) === "function" ? _o : Object, typeof (_p = typeof candidate_skill_service_1.CandidateSkillService !== "undefined" && candidate_skill_service_1.CandidateSkillService) === "function" ? _p : Object, typeof (_q = typeof candidate_source_service_1.CandidateSourceService !== "undefined" && candidate_source_service_1.CandidateSourceService) === "function" ? _q : Object, typeof (_r = typeof candidate_technologies_service_1.CandidateTechnologiesService !== "undefined" && candidate_technologies_service_1.CandidateTechnologiesService) === "function" ? _r : Object, typeof (_s = typeof contact_service_1.ContactService !== "undefined" && contact_service_1.ContactService) === "function" ? _s : Object, typeof (_t = typeof country_1.CountryService !== "undefined" && country_1.CountryService) === "function" ? _t : Object, typeof (_u = typeof currency_1.CurrencyService !== "undefined" && currency_1.CurrencyService) === "function" ? _u : Object, typeof (_v = typeof deal_service_1.DealService !== "undefined" && deal_service_1.DealService) === "function" ? _v : Object, typeof (_w = typeof email_1.EmailService !== "undefined" && email_1.EmailService) === "function" ? _w : Object, typeof (_x = typeof email_template_1.EmailTemplateService !== "undefined" && email_template_1.EmailTemplateService) === "function" ? _x : Object, typeof (_y = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _y : Object, typeof (_z = typeof employee_appointment_1.EmployeeAppointmentService !== "undefined" && employee_appointment_1.EmployeeAppointmentService) === "function" ? _z : Object, typeof (_0 = typeof employee_award_service_1.EmployeeAwardService !== "undefined" && employee_award_service_1.EmployeeAwardService) === "function" ? _0 : Object, typeof (_1 = typeof employee_proposal_template_service_1.EmployeeProposalTemplateService !== "undefined" && employee_proposal_template_service_1.EmployeeProposalTemplateService) === "function" ? _1 : Object, typeof (_2 = typeof employee_recurring_expense_1.EmployeeRecurringExpenseService !== "undefined" && employee_recurring_expense_1.EmployeeRecurringExpenseService) === "function" ? _2 : Object, typeof (_3 = typeof employee_setting_1.EmployeeSettingService !== "undefined" && employee_setting_1.EmployeeSettingService) === "function" ? _3 : Object, typeof (_4 = typeof equipment_service_1.EquipmentService !== "undefined" && equipment_service_1.EquipmentService) === "function" ? _4 : Object, typeof (_5 = typeof equipment_sharing_1.EquipmentSharingService !== "undefined" && equipment_sharing_1.EquipmentSharingService) === "function" ? _5 : Object, typeof (_6 = typeof estimate_email_service_1.EstimateEmailService !== "undefined" && estimate_email_service_1.EstimateEmailService) === "function" ? _6 : Object, typeof (_7 = typeof event_type_service_1.EventTypeService !== "undefined" && event_type_service_1.EventTypeService) === "function" ? _7 : Object, typeof (_8 = typeof expense_service_1.ExpenseService !== "undefined" && expense_service_1.ExpenseService) === "function" ? _8 : Object, typeof (_9 = typeof expense_categories_service_1.ExpenseCategoriesService !== "undefined" && expense_categories_service_1.ExpenseCategoriesService) === "function" ? _9 : Object, typeof (_10 = typeof organization_employee_level_service_1.EmployeeLevelService !== "undefined" && organization_employee_level_service_1.EmployeeLevelService) === "function" ? _10 : Object, typeof (_11 = typeof goal_service_1.GoalService !== "undefined" && goal_service_1.GoalService) === "function" ? _11 : Object, typeof (_12 = typeof goal_template_service_1.GoalTemplateService !== "undefined" && goal_template_service_1.GoalTemplateService) === "function" ? _12 : Object, typeof (_13 = typeof goal_kpi_service_1.GoalKpiService !== "undefined" && goal_kpi_service_1.GoalKpiService) === "function" ? _13 : Object, typeof (_14 = typeof goal_kpi_template_service_1.GoalKpiTemplateService !== "undefined" && goal_kpi_template_service_1.GoalKpiTemplateService) === "function" ? _14 : Object, typeof (_15 = typeof goal_time_frame_service_1.GoalTimeFrameService !== "undefined" && goal_time_frame_service_1.GoalTimeFrameService) === "function" ? _15 : Object, typeof (_16 = typeof help_center_service_1.HelpCenterService !== "undefined" && help_center_service_1.HelpCenterService) === "function" ? _16 : Object, typeof (_17 = typeof help_center_article_service_1.HelpCenterArticleService !== "undefined" && help_center_article_service_1.HelpCenterArticleService) === "function" ? _17 : Object, typeof (_18 = typeof help_center_author_service_1.HelpCenterAuthorService !== "undefined" && help_center_author_service_1.HelpCenterAuthorService) === "function" ? _18 : Object, typeof (_19 = typeof income_service_1.IncomeService !== "undefined" && income_service_1.IncomeService) === "function" ? _19 : Object, typeof (_20 = typeof integration_service_1.IntegrationService !== "undefined" && integration_service_1.IntegrationService) === "function" ? _20 : Object, typeof (_21 = typeof integration_entity_setting_service_1.IntegrationEntitySettingService !== "undefined" && integration_entity_setting_service_1.IntegrationEntitySettingService) === "function" ? _21 : Object, typeof (_22 = typeof integration_entity_setting_tied_entity_service_1.IntegrationEntitySettingTiedEntityService !== "undefined" && integration_entity_setting_tied_entity_service_1.IntegrationEntitySettingTiedEntityService) === "function" ? _22 : Object, typeof (_23 = typeof integration_map_service_1.IntegrationMapService !== "undefined" && integration_map_service_1.IntegrationMapService) === "function" ? _23 : Object, typeof (_24 = typeof integration_setting_service_1.IntegrationSettingService !== "undefined" && integration_setting_service_1.IntegrationSettingService) === "function" ? _24 : Object, typeof (_25 = typeof integration_tenant_service_1.IntegrationTenantService !== "undefined" && integration_tenant_service_1.IntegrationTenantService) === "function" ? _25 : Object, typeof (_26 = typeof invite_service_1.InviteService !== "undefined" && invite_service_1.InviteService) === "function" ? _26 : Object, typeof (_27 = typeof invoice_service_1.InvoiceService !== "undefined" && invoice_service_1.InvoiceService) === "function" ? _27 : Object, typeof (_28 = typeof invoice_item_service_1.InvoiceItemService !== "undefined" && invoice_item_service_1.InvoiceItemService) === "function" ? _28 : Object, typeof (_29 = typeof invoice_estimate_history_service_1.InvoiceEstimateHistoryService !== "undefined" && invoice_estimate_history_service_1.InvoiceEstimateHistoryService) === "function" ? _29 : Object, typeof (_30 = typeof job_preset_service_1.JobPresetService !== "undefined" && job_preset_service_1.JobPresetService) === "function" ? _30 : Object, typeof (_31 = typeof job_search_occupation_service_1.JobSearchOccupationService !== "undefined" && job_search_occupation_service_1.JobSearchOccupationService) === "function" ? _31 : Object, typeof (_32 = typeof job_search_category_service_1.JobSearchCategoryService !== "undefined" && job_search_category_service_1.JobSearchCategoryService) === "function" ? _32 : Object, typeof (_33 = typeof keyresult_service_1.KeyResultService !== "undefined" && keyresult_service_1.KeyResultService) === "function" ? _33 : Object, typeof (_34 = typeof keyresult_template_service_1.KeyresultTemplateService !== "undefined" && keyresult_template_service_1.KeyresultTemplateService) === "function" ? _34 : Object, typeof (_35 = typeof keyresult_update_service_1.KeyResultUpdateService !== "undefined" && keyresult_update_service_1.KeyResultUpdateService) === "function" ? _35 : Object, typeof (_36 = typeof language_service_1.LanguageService !== "undefined" && language_service_1.LanguageService) === "function" ? _36 : Object, typeof (_37 = typeof organization_service_1.OrganizationService !== "undefined" && organization_service_1.OrganizationService) === "function" ? _37 : Object, typeof (_38 = typeof organization_awards_service_1.OrganizationAwardsService !== "undefined" && organization_awards_service_1.OrganizationAwardsService) === "function" ? _38 : Object, typeof (_39 = typeof organization_contact_service_1.OrganizationContactService !== "undefined" && organization_contact_service_1.OrganizationContactService) === "function" ? _39 : Object, typeof (_40 = typeof organization_department_service_1.OrganizationDepartmentService !== "undefined" && organization_department_service_1.OrganizationDepartmentService) === "function" ? _40 : Object, typeof (_41 = typeof organization_documents_service_1.OrganizationDocumentsService !== "undefined" && organization_documents_service_1.OrganizationDocumentsService) === "function" ? _41 : Object, typeof (_42 = typeof organization_employment_type_service_1.OrganizationEmploymentTypeService !== "undefined" && organization_employment_type_service_1.OrganizationEmploymentTypeService) === "function" ? _42 : Object, typeof (_43 = typeof organization_languages_service_1.OrganizationLanguagesService !== "undefined" && organization_languages_service_1.OrganizationLanguagesService) === "function" ? _43 : Object, typeof (_44 = typeof organization_positions_service_1.OrganizationPositionsService !== "undefined" && organization_positions_service_1.OrganizationPositionsService) === "function" ? _44 : Object, typeof (_45 = typeof organization_projects_service_1.OrganizationProjectsService !== "undefined" && organization_projects_service_1.OrganizationProjectsService) === "function" ? _45 : Object, typeof (_46 = typeof organization_recurring_expense_service_1.OrganizationRecurringExpenseService !== "undefined" && organization_recurring_expense_service_1.OrganizationRecurringExpenseService) === "function" ? _46 : Object, typeof (_47 = typeof organization_sprint_service_1.OrganizationSprintService !== "undefined" && organization_sprint_service_1.OrganizationSprintService) === "function" ? _47 : Object, typeof (_48 = typeof organization_team_service_1.OrganizationTeamService !== "undefined" && organization_team_service_1.OrganizationTeamService) === "function" ? _48 : Object, typeof (_49 = typeof organization_team_employee_service_1.OrganizationTeamEmployeeService !== "undefined" && organization_team_employee_service_1.OrganizationTeamEmployeeService) === "function" ? _49 : Object, typeof (_50 = typeof organization_vendors_service_1.OrganizationVendorsService !== "undefined" && organization_vendors_service_1.OrganizationVendorsService) === "function" ? _50 : Object, typeof (_51 = typeof payment_service_1.PaymentService !== "undefined" && payment_service_1.PaymentService) === "function" ? _51 : Object, typeof (_52 = typeof pipeline_service_1.PipelineService !== "undefined" && pipeline_service_1.PipelineService) === "function" ? _52 : Object, typeof (_53 = typeof product_service_1.ProductService !== "undefined" && product_service_1.ProductService) === "function" ? _53 : Object, typeof (_54 = typeof product_category_service_1.ProductCategoryService !== "undefined" && product_category_service_1.ProductCategoryService) === "function" ? _54 : Object, typeof (_55 = typeof product_option_service_1.ProductOptionService !== "undefined" && product_option_service_1.ProductOptionService) === "function" ? _55 : Object, typeof (_56 = typeof product_settings_service_1.ProductVariantSettingService !== "undefined" && product_settings_service_1.ProductVariantSettingService) === "function" ? _56 : Object, typeof (_57 = typeof product_type_service_1.ProductTypeService !== "undefined" && product_type_service_1.ProductTypeService) === "function" ? _57 : Object, typeof (_58 = typeof product_variant_service_1.ProductVariantService !== "undefined" && product_variant_service_1.ProductVariantService) === "function" ? _58 : Object, typeof (_59 = typeof product_variant_price_service_1.ProductVariantPriceService !== "undefined" && product_variant_price_service_1.ProductVariantPriceService) === "function" ? _59 : Object, typeof (_60 = typeof proposal_service_1.ProposalService !== "undefined" && proposal_service_1.ProposalService) === "function" ? _60 : Object, typeof (_61 = typeof report_service_1.ReportService !== "undefined" && report_service_1.ReportService) === "function" ? _61 : Object, typeof (_62 = typeof report_category_service_1.ReportCategoryService !== "undefined" && report_category_service_1.ReportCategoryService) === "function" ? _62 : Object, typeof (_63 = typeof request_approval_service_1.RequestApprovalService !== "undefined" && request_approval_service_1.RequestApprovalService) === "function" ? _63 : Object, typeof (_64 = typeof role_service_1.RoleService !== "undefined" && role_service_1.RoleService) === "function" ? _64 : Object, typeof (_65 = typeof role_permissions_service_1.RolePermissionsService !== "undefined" && role_permissions_service_1.RolePermissionsService) === "function" ? _65 : Object, typeof (_66 = typeof screenshot_service_1.ScreenshotService !== "undefined" && screenshot_service_1.ScreenshotService) === "function" ? _66 : Object, typeof (_67 = typeof skill_service_1.SkillService !== "undefined" && skill_service_1.SkillService) === "function" ? _67 : Object, typeof (_68 = typeof pipeline_stage_service_1.StageService !== "undefined" && pipeline_stage_service_1.StageService) === "function" ? _68 : Object, typeof (_69 = typeof tag_service_1.TagService !== "undefined" && tag_service_1.TagService) === "function" ? _69 : Object, typeof (_70 = typeof task_service_1.TaskService !== "undefined" && task_service_1.TaskService) === "function" ? _70 : Object, typeof (_71 = typeof tenant_service_1.TenantService !== "undefined" && tenant_service_1.TenantService) === "function" ? _71 : Object, typeof (_72 = typeof time_off_policy_service_1.TimeOffPolicyService !== "undefined" && time_off_policy_service_1.TimeOffPolicyService) === "function" ? _72 : Object, typeof (_73 = typeof time_off_request_service_1.TimeOffRequestService !== "undefined" && time_off_request_service_1.TimeOffRequestService) === "function" ? _73 : Object, typeof (_74 = typeof timesheet_service_1.TimeSheetService !== "undefined" && timesheet_service_1.TimeSheetService) === "function" ? _74 : Object, typeof (_75 = typeof time_log_service_1.TimeLogService !== "undefined" && time_log_service_1.TimeLogService) === "function" ? _75 : Object, typeof (_76 = typeof time_slot_service_1.TimeSlotService !== "undefined" && time_slot_service_1.TimeSlotService) === "function" ? _76 : Object, typeof (_77 = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" ? _77 : Object, typeof (_78 = typeof user_organization_services_1.UserOrganizationService !== "undefined" && user_organization_services_1.UserOrganizationService) === "function" ? _78 : Object])
], ExportAllService);
exports.ExportAllService = ExportAllService;


/***/ }),

/***/ "./src/app/export_import/import/import-all.controller.ts":
/*!***************************************************************!*\
  !*** ./src/app/export_import/import/import-all.controller.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportAllController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const platform_express_1 = __webpack_require__(/*! @nestjs/platform-express */ "@nestjs/platform-express");
const _1 = __webpack_require__(/*! . */ "./src/app/export_import/import/index.ts");
const path = __webpack_require__(/*! path */ "path");
const file_storage_1 = __webpack_require__(/*! ../../core/file-storage */ "./src/app/core/file-storage/index.ts");
let ImportAllController = class ImportAllController {
    constructor(importAllService) {
        this.importAllService = importAllService;
    }
    async importAll() { }
    async parse({ importType }, file) {
        this.importAllService.removeExtractedFiles();
        await this.importAllService.unzipAndParse(file.key, importType === 'clean');
        return;
    }
    ngOnDestroy() { }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all exports.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found tables'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", Promise)
], ImportAllController.prototype, "importAll", null);
tslib_1.__decorate([
    common_1.UseInterceptors(platform_express_1.FileInterceptor('file', {
        storage: new file_storage_1.FileStorage().storage({
            dest: path.join('import'),
            prefix: 'import'
        })
    })),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()), tslib_1.__param(1, common_1.UploadedFile()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ImportAllController.prototype, "parse", null);
ImportAllController = tslib_1.__decorate([
    common_1.Injectable(),
    swagger_1.ApiTags('Import'),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof _1.ImportAllService !== "undefined" && _1.ImportAllService) === "function" ? _a : Object])
], ImportAllController);
exports.ImportAllController = ImportAllController;


/***/ }),

/***/ "./src/app/export_import/import/import-all.module.ts":
/*!***********************************************************!*\
  !*** ./src/app/export_import/import/import-all.module.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportAllModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const import_all_controller_1 = __webpack_require__(/*! ./import-all.controller */ "./src/app/export_import/import/import-all.controller.ts");
const import_all_service_1 = __webpack_require__(/*! ./import-all.service */ "./src/app/export_import/import/import-all.service.ts");
const platform_express_1 = __webpack_require__(/*! @nestjs/platform-express */ "@nestjs/platform-express");
const country_entity_1 = __webpack_require__(/*! ../../country/country.entity */ "./src/app/country/country.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const tag_entity_1 = __webpack_require__(/*! ../../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../../user/user.entity */ "./src/app/user/user.entity.ts");
const user_organization_entity_1 = __webpack_require__(/*! ../../user-organization/user-organization.entity */ "./src/app/user-organization/user-organization.entity.ts");
const activity_entity_1 = __webpack_require__(/*! ../../timesheet/activity.entity */ "./src/app/timesheet/activity.entity.ts");
const approval_policy_entity_1 = __webpack_require__(/*! ../../approval-policy/approval-policy.entity */ "./src/app/approval-policy/approval-policy.entity.ts");
const availability_slots_entity_1 = __webpack_require__(/*! ../../availability-slots/availability-slots.entity */ "./src/app/availability-slots/availability-slots.entity.ts");
const candidate_entity_1 = __webpack_require__(/*! ../../candidate/candidate.entity */ "./src/app/candidate/candidate.entity.ts");
const candidate_documents_entity_1 = __webpack_require__(/*! ../../candidate-documents/candidate-documents.entity */ "./src/app/candidate-documents/candidate-documents.entity.ts");
const candidate_education_entity_1 = __webpack_require__(/*! ../../candidate-education/candidate-education.entity */ "./src/app/candidate-education/candidate-education.entity.ts");
const candidate_experience_entity_1 = __webpack_require__(/*! ../../candidate-experience/candidate-experience.entity */ "./src/app/candidate-experience/candidate-experience.entity.ts");
const candidate_feedbacks_entity_1 = __webpack_require__(/*! ../../candidate-feedbacks/candidate-feedbacks.entity */ "./src/app/candidate-feedbacks/candidate-feedbacks.entity.ts");
const candidate_interview_entity_1 = __webpack_require__(/*! ../../candidate-interview/candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
const candidate_interviewers_entity_1 = __webpack_require__(/*! ../../candidate-interviewers/candidate-interviewers.entity */ "./src/app/candidate-interviewers/candidate-interviewers.entity.ts");
const candidate_personal_qualities_entity_1 = __webpack_require__(/*! ../../candidate-personal-qualities/candidate-personal-qualities.entity */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.entity.ts");
const candidate_skill_entity_1 = __webpack_require__(/*! ../../candidate-skill/candidate-skill.entity */ "./src/app/candidate-skill/candidate-skill.entity.ts");
const candidate_source_entity_1 = __webpack_require__(/*! ../../candidate-source/candidate-source.entity */ "./src/app/candidate-source/candidate-source.entity.ts");
const candidate_technologies_entity_1 = __webpack_require__(/*! ../../candidate-technologies/candidate-technologies.entity */ "./src/app/candidate-technologies/candidate-technologies.entity.ts");
const deal_entity_1 = __webpack_require__(/*! ../../deal/deal.entity */ "./src/app/deal/deal.entity.ts");
const email_template_1 = __webpack_require__(/*! ../../email-template */ "./src/app/email-template/index.ts");
const email_1 = __webpack_require__(/*! ../../email */ "./src/app/email/index.ts");
const employee_entity_1 = __webpack_require__(/*! ../../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const equipment_entity_1 = __webpack_require__(/*! ../../equipment/equipment.entity */ "./src/app/equipment/equipment.entity.ts");
const expense_category_entity_1 = __webpack_require__(/*! ../../expense-categories/expense-category.entity */ "./src/app/expense-categories/expense-category.entity.ts");
const goal_kpi_entity_1 = __webpack_require__(/*! ../../goal-kpi/goal-kpi.entity */ "./src/app/goal-kpi/goal-kpi.entity.ts");
const expense_entity_1 = __webpack_require__(/*! ../../expense/expense.entity */ "./src/app/expense/expense.entity.ts");
const goal_time_frame_entity_1 = __webpack_require__(/*! ../../goal-time-frame/goal-time-frame.entity */ "./src/app/goal-time-frame/goal-time-frame.entity.ts");
const goal_entity_1 = __webpack_require__(/*! ../../goal/goal.entity */ "./src/app/goal/goal.entity.ts");
const integration_tenant_entity_1 = __webpack_require__(/*! ../../integration-tenant/integration-tenant.entity */ "./src/app/integration-tenant/integration-tenant.entity.ts");
const invoice_item_entity_1 = __webpack_require__(/*! ../../invoice-item/invoice-item.entity */ "./src/app/invoice-item/invoice-item.entity.ts");
const invoice_entity_1 = __webpack_require__(/*! ../../invoice/invoice.entity */ "./src/app/invoice/invoice.entity.ts");
const keyresult_entity_1 = __webpack_require__(/*! ../../keyresult/keyresult.entity */ "./src/app/keyresult/keyresult.entity.ts");
const language_entity_1 = __webpack_require__(/*! ../../language/language.entity */ "./src/app/language/language.entity.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const organization_department_entity_1 = __webpack_require__(/*! ../../organization-department/organization-department.entity */ "./src/app/organization-department/organization-department.entity.ts");
const organization_documents_entity_1 = __webpack_require__(/*! ../../organization-documents/organization-documents.entity */ "./src/app/organization-documents/organization-documents.entity.ts");
const organization_employment_type_entity_1 = __webpack_require__(/*! ../../organization-employment-type/organization-employment-type.entity */ "./src/app/organization-employment-type/organization-employment-type.entity.ts");
const organization_positions_entity_1 = __webpack_require__(/*! ../../organization-positions/organization-positions.entity */ "./src/app/organization-positions/organization-positions.entity.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const organization_team_entity_1 = __webpack_require__(/*! ../../organization-team/organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const organization_team_employee_entity_1 = __webpack_require__(/*! ../../organization-team-employee/organization-team-employee.entity */ "./src/app/organization-team-employee/organization-team-employee.entity.ts");
const organization_vendors_entity_1 = __webpack_require__(/*! ../../organization-vendors/organization-vendors.entity */ "./src/app/organization-vendors/organization-vendors.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const pipeline_entity_1 = __webpack_require__(/*! ../../pipeline/pipeline.entity */ "./src/app/pipeline/pipeline.entity.ts");
const product_category_entity_1 = __webpack_require__(/*! ../../product-category/product-category.entity */ "./src/app/product-category/product-category.entity.ts");
const product_option_entity_1 = __webpack_require__(/*! ../../product-option/product-option.entity */ "./src/app/product-option/product-option.entity.ts");
const product_settings_entity_1 = __webpack_require__(/*! ../../product-settings/product-settings.entity */ "./src/app/product-settings/product-settings.entity.ts");
const product_type_entity_1 = __webpack_require__(/*! ../../product-type/product-type.entity */ "./src/app/product-type/product-type.entity.ts");
const product_variant_price_entity_1 = __webpack_require__(/*! ../../product-variant-price/product-variant-price.entity */ "./src/app/product-variant-price/product-variant-price.entity.ts");
const product_variant_entity_1 = __webpack_require__(/*! ../../product-variant/product-variant.entity */ "./src/app/product-variant/product-variant.entity.ts");
const product_entity_1 = __webpack_require__(/*! ../../product/product.entity */ "./src/app/product/product.entity.ts");
const request_approval_entity_1 = __webpack_require__(/*! ../../request-approval/request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const role_permissions_entity_1 = __webpack_require__(/*! ../../role-permissions/role-permissions.entity */ "./src/app/role-permissions/role-permissions.entity.ts");
const role_entity_1 = __webpack_require__(/*! ../../role/role.entity */ "./src/app/role/role.entity.ts");
const skill_entity_1 = __webpack_require__(/*! ../../skills/skill.entity */ "./src/app/skills/skill.entity.ts");
const tenant_entity_1 = __webpack_require__(/*! ../../tenant/tenant.entity */ "./src/app/tenant/tenant.entity.ts");
const time_log_entity_1 = __webpack_require__(/*! ../../timesheet/time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const time_slot_entity_1 = __webpack_require__(/*! ../../timesheet/time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const time_off_policy_entity_1 = __webpack_require__(/*! ../../time-off-policy/time-off-policy.entity */ "./src/app/time-off-policy/time-off-policy.entity.ts");
const timesheet_entity_1 = __webpack_require__(/*! ../../timesheet/timesheet.entity */ "./src/app/timesheet/timesheet.entity.ts");
const time_off_request_entity_1 = __webpack_require__(/*! ../../time-off-request/time-off-request.entity */ "./src/app/time-off-request/time-off-request.entity.ts");
const income_entity_1 = __webpack_require__(/*! ../../income/income.entity */ "./src/app/income/income.entity.ts");
const integration_entity_1 = __webpack_require__(/*! ../../integration/integration.entity */ "./src/app/integration/integration.entity.ts");
const invite_entity_1 = __webpack_require__(/*! ../../invite/invite.entity */ "./src/app/invite/invite.entity.ts");
const appointment_employees_entity_1 = __webpack_require__(/*! ../../appointment-employees/appointment-employees.entity */ "./src/app/appointment-employees/appointment-employees.entity.ts");
const candidate_criterion_rating_entity_1 = __webpack_require__(/*! ../../candidate-criterions-rating/candidate-criterion-rating.entity */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.entity.ts");
const contact_entity_1 = __webpack_require__(/*! ../../contact/contact.entity */ "./src/app/contact/contact.entity.ts");
const employee_appointment_1 = __webpack_require__(/*! ../../employee-appointment */ "./src/app/employee-appointment/index.ts");
const organization_employee_level_entity_1 = __webpack_require__(/*! ../../organization_employee-level/organization-employee-level.entity */ "./src/app/organization_employee-level/organization-employee-level.entity.ts");
const employee_recurring_expense_entity_1 = __webpack_require__(/*! ../../employee-recurring-expense/employee-recurring-expense.entity */ "./src/app/employee-recurring-expense/employee-recurring-expense.entity.ts");
const employee_setting_entity_1 = __webpack_require__(/*! ../../employee-setting/employee-setting.entity */ "./src/app/employee-setting/employee-setting.entity.ts");
const equipment_sharing_1 = __webpack_require__(/*! ../../equipment-sharing */ "./src/app/equipment-sharing/index.ts");
const help_center_entity_1 = __webpack_require__(/*! ../../help-center/help-center.entity */ "./src/app/help-center/help-center.entity.ts");
const help_center_author_entity_1 = __webpack_require__(/*! ../../help-center-author/help-center-author.entity */ "./src/app/help-center-author/help-center-author.entity.ts");
const help_center_article_entity_1 = __webpack_require__(/*! ../../help-center-article/help-center-article.entity */ "./src/app/help-center-article/help-center-article.entity.ts");
const integration_setting_entity_1 = __webpack_require__(/*! ../../integration-setting/integration-setting.entity */ "./src/app/integration-setting/integration-setting.entity.ts");
const integration_map_entity_1 = __webpack_require__(/*! ../../integration-map/integration-map.entity */ "./src/app/integration-map/integration-map.entity.ts");
const integration_entity_setting_tied_entity_entity_1 = __webpack_require__(/*! ../../integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.entity */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.entity.ts");
const integration_entity_setting_entity_1 = __webpack_require__(/*! ../../integration-entity-setting/integration-entity-setting.entity */ "./src/app/integration-entity-setting/integration-entity-setting.entity.ts");
const keyresult_update_entity_1 = __webpack_require__(/*! ../../keyresult-update/keyresult-update.entity */ "./src/app/keyresult-update/keyresult-update.entity.ts");
const organization_awards_entity_1 = __webpack_require__(/*! ../../organization-awards/organization-awards.entity */ "./src/app/organization-awards/organization-awards.entity.ts");
const organization_languages_entity_1 = __webpack_require__(/*! ../../organization-languages/organization-languages.entity */ "./src/app/organization-languages/organization-languages.entity.ts");
const organization_recurring_expense_entity_1 = __webpack_require__(/*! ../../organization-recurring-expense/organization-recurring-expense.entity */ "./src/app/organization-recurring-expense/organization-recurring-expense.entity.ts");
const organization_sprint_entity_1 = __webpack_require__(/*! ../../organization-sprint/organization-sprint.entity */ "./src/app/organization-sprint/organization-sprint.entity.ts");
const payment_entity_1 = __webpack_require__(/*! ../../payment/payment.entity */ "./src/app/payment/payment.entity.ts");
const proposal_entity_1 = __webpack_require__(/*! ../../proposal/proposal.entity */ "./src/app/proposal/proposal.entity.ts");
const request_approval_employee_entity_1 = __webpack_require__(/*! ../../request-approval-employee/request-approval-employee.entity */ "./src/app/request-approval-employee/request-approval-employee.entity.ts");
const request_approval_team_entity_1 = __webpack_require__(/*! ../../request-approval-team/request-approval-team.entity */ "./src/app/request-approval-team/request-approval-team.entity.ts");
const screenshot_entity_1 = __webpack_require__(/*! ../../timesheet/screenshot.entity */ "./src/app/timesheet/screenshot.entity.ts");
const task_entity_1 = __webpack_require__(/*! ../../tasks/task.entity */ "./src/app/tasks/task.entity.ts");
const time_slot_minute_entity_1 = __webpack_require__(/*! ../../timesheet/time-slot-minute.entity */ "./src/app/timesheet/time-slot-minute.entity.ts");
const equipment_sharing_policy_entity_1 = __webpack_require__(/*! ../../equipment-sharing-policy/equipment-sharing-policy.entity */ "./src/app/equipment-sharing-policy/equipment-sharing-policy.entity.ts");
const estimate_email_entity_1 = __webpack_require__(/*! ../../estimate-email/estimate-email.entity */ "./src/app/estimate-email/estimate-email.entity.ts");
const event_type_entity_1 = __webpack_require__(/*! ../../event-types/event-type.entity */ "./src/app/event-types/event-type.entity.ts");
const goal_general_setting_entity_1 = __webpack_require__(/*! ../../goal-general-setting/goal-general-setting.entity */ "./src/app/goal-general-setting/goal-general-setting.entity.ts");
const pipeline_stage_entity_1 = __webpack_require__(/*! ../../pipeline-stage/pipeline-stage.entity */ "./src/app/pipeline-stage/pipeline-stage.entity.ts");
const custom_smtp_entity_1 = __webpack_require__(/*! ../../custom-smtp/custom-smtp.entity */ "./src/app/custom-smtp/custom-smtp.entity.ts");
const currency_1 = __webpack_require__(/*! ../../currency */ "./src/app/currency/index.ts");
const employee_award_entity_1 = __webpack_require__(/*! ../../employee-award/employee-award.entity */ "./src/app/employee-award/employee-award.entity.ts");
const job_search_occupation_entity_1 = __webpack_require__(/*! ../../employee-job-preset/job-search-occupation/job-search-occupation.entity */ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.entity.ts");
const job_search_category_entity_1 = __webpack_require__(/*! ../../employee-job-preset/job-search-category/job-search-category.entity */ "./src/app/employee-job-preset/job-search-category/job-search-category.entity.ts");
const job_preset_upwork_job_search_criterion_entity_1 = __webpack_require__(/*! ../../employee-job-preset/job-preset-upwork-job-search-criterion.entity */ "./src/app/employee-job-preset/job-preset-upwork-job-search-criterion.entity.ts");
const employee_upwork_jobs_search_criterion_entity_1 = __webpack_require__(/*! ../../employee-job-preset/employee-upwork-jobs-search-criterion.entity */ "./src/app/employee-job-preset/employee-upwork-jobs-search-criterion.entity.ts");
const employee_proposal_template_entity_1 = __webpack_require__(/*! ../../employee-proposal-template/employee-proposal-template.entity */ "./src/app/employee-proposal-template/employee-proposal-template.entity.ts");
const goal_kpi_template_entity_1 = __webpack_require__(/*! ../../goal-kpi-template/goal-kpi-template.entity */ "./src/app/goal-kpi-template/goal-kpi-template.entity.ts");
const goal_template_entity_1 = __webpack_require__(/*! ../../goal-template/goal-template.entity */ "./src/app/goal-template/goal-template.entity.ts");
const invoice_estimate_history_entity_1 = __webpack_require__(/*! ../../invoice-estimate-history/invoice-estimate-history.entity */ "./src/app/invoice-estimate-history/invoice-estimate-history.entity.ts");
const keyresult_template_entity_1 = __webpack_require__(/*! ../../keyresult-template/keyresult-template.entity */ "./src/app/keyresult-template/keyresult-template.entity.ts");
const report_entity_1 = __webpack_require__(/*! ../../reports/report.entity */ "./src/app/reports/report.entity.ts");
const report_category_entity_1 = __webpack_require__(/*! ../../reports/report-category.entity */ "./src/app/reports/report-category.entity.ts");
const report_organization_entity_1 = __webpack_require__(/*! ../../reports/report-organization.entity */ "./src/app/reports/report-organization.entity.ts");
const job_preset_entity_1 = __webpack_require__(/*! ../../employee-job-preset/job-preset.entity */ "./src/app/employee-job-preset/job-preset.entity.ts");
let ImportAllModule = class ImportAllModule {
};
ImportAllModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            cqrs_1.CqrsModule,
            platform_express_1.MulterModule.register({
                dest: './import'
            }),
            typeorm_1.TypeOrmModule.forFeature([
                activity_entity_1.Activity,
                appointment_employees_entity_1.AppointmentEmployee,
                approval_policy_entity_1.ApprovalPolicy,
                availability_slots_entity_1.AvailabilitySlot,
                candidate_entity_1.Candidate,
                candidate_criterion_rating_entity_1.CandidateCriterionsRating,
                candidate_documents_entity_1.CandidateDocument,
                candidate_education_entity_1.CandidateEducation,
                candidate_experience_entity_1.CandidateExperience,
                candidate_feedbacks_entity_1.CandidateFeedback,
                candidate_interview_entity_1.CandidateInterview,
                candidate_interviewers_entity_1.CandidateInterviewers,
                candidate_personal_qualities_entity_1.CandidatePersonalQualities,
                candidate_skill_entity_1.CandidateSkill,
                candidate_source_entity_1.CandidateSource,
                candidate_technologies_entity_1.CandidateTechnologies,
                contact_entity_1.Contact,
                country_entity_1.Country,
                currency_1.Currency,
                custom_smtp_entity_1.CustomSmtp,
                deal_entity_1.Deal,
                email_1.Email,
                email_template_1.EmailTemplate,
                employee_entity_1.Employee,
                employee_appointment_1.EmployeeAppointment,
                employee_award_entity_1.EmployeeAward,
                organization_employee_level_entity_1.EmployeeLevel,
                employee_proposal_template_entity_1.EmployeeProposalTemplate,
                employee_recurring_expense_entity_1.EmployeeRecurringExpense,
                employee_setting_entity_1.EmployeeSetting,
                employee_upwork_jobs_search_criterion_entity_1.EmployeeUpworkJobsSearchCriterion,
                equipment_entity_1.Equipment,
                equipment_sharing_1.EquipmentSharing,
                equipment_sharing_policy_entity_1.EquipmentSharingPolicy,
                estimate_email_entity_1.EstimateEmail,
                event_type_entity_1.EventType,
                expense_entity_1.Expense,
                expense_category_entity_1.ExpenseCategory,
                goal_entity_1.Goal,
                goal_general_setting_entity_1.GoalGeneralSetting,
                goal_kpi_entity_1.GoalKPI,
                goal_kpi_template_entity_1.GoalKPITemplate,
                goal_template_entity_1.GoalTemplate,
                goal_time_frame_entity_1.GoalTimeFrame,
                help_center_entity_1.HelpCenter,
                help_center_article_entity_1.HelpCenterArticle,
                help_center_author_entity_1.HelpCenterAuthor,
                income_entity_1.Income,
                integration_entity_1.Integration,
                integration_entity_setting_entity_1.IntegrationEntitySetting,
                integration_entity_setting_tied_entity_entity_1.IntegrationEntitySettingTiedEntity,
                integration_map_entity_1.IntegrationMap,
                integration_setting_entity_1.IntegrationSetting,
                integration_tenant_entity_1.IntegrationTenant,
                invite_entity_1.Invite,
                invoice_entity_1.Invoice,
                invoice_estimate_history_entity_1.InvoiceEstimateHistory,
                invoice_item_entity_1.InvoiceItem,
                job_preset_entity_1.JobPreset,
                job_search_occupation_entity_1.JobSearchOccupation,
                job_search_category_entity_1.JobSearchCategory,
                job_preset_upwork_job_search_criterion_entity_1.JobPresetUpworkJobSearchCriterion,
                keyresult_entity_1.KeyResult,
                keyresult_template_entity_1.KeyResultTemplate,
                keyresult_update_entity_1.KeyResultUpdate,
                language_entity_1.Language,
                organization_entity_1.Organization,
                organization_awards_entity_1.OrganizationAwards,
                organization_contact_entity_1.OrganizationContact,
                organization_department_entity_1.OrganizationDepartment,
                organization_documents_entity_1.OrganizationDocuments,
                organization_employment_type_entity_1.OrganizationEmploymentType,
                organization_languages_entity_1.OrganizationLanguages,
                organization_positions_entity_1.OrganizationPositions,
                organization_projects_entity_1.OrganizationProject,
                organization_recurring_expense_entity_1.OrganizationRecurringExpense,
                organization_sprint_entity_1.OrganizationSprint,
                organization_team_entity_1.OrganizationTeam,
                organization_team_employee_entity_1.OrganizationTeamEmployee,
                organization_vendors_entity_1.OrganizationVendor,
                payment_entity_1.Payment,
                pipeline_entity_1.Pipeline,
                pipeline_stage_entity_1.PipelineStage,
                product_entity_1.Product,
                product_category_entity_1.ProductCategory,
                product_option_entity_1.ProductOption,
                product_settings_entity_1.ProductVariantSettings,
                product_type_entity_1.ProductType,
                product_variant_entity_1.ProductVariant,
                product_variant_price_entity_1.ProductVariantPrice,
                proposal_entity_1.Proposal,
                report_entity_1.Report,
                report_category_entity_1.ReportCategory,
                report_organization_entity_1.ReportOrganization,
                request_approval_entity_1.RequestApproval,
                request_approval_employee_entity_1.RequestApprovalEmployee,
                request_approval_team_entity_1.RequestApprovalTeam,
                role_entity_1.Role,
                role_permissions_entity_1.RolePermissions,
                screenshot_entity_1.Screenshot,
                skill_entity_1.Skill,
                tag_entity_1.Tag,
                task_entity_1.Task,
                tenant_entity_1.Tenant,
                time_off_policy_entity_1.TimeOffPolicy,
                time_off_request_entity_1.TimeOffRequest,
                timesheet_entity_1.Timesheet,
                time_log_entity_1.TimeLog,
                time_slot_entity_1.TimeSlot,
                time_slot_minute_entity_1.TimeSlotMinute,
                user_entity_1.User,
                user_organization_entity_1.UserOrganization
            ])
        ],
        controllers: [import_all_controller_1.ImportAllController],
        providers: [import_all_service_1.ImportAllService],
        exports: [import_all_service_1.ImportAllService]
    })
], ImportAllModule);
exports.ImportAllModule = ImportAllModule;


/***/ }),

/***/ "./src/app/export_import/import/import-all.service.ts":
/*!************************************************************!*\
  !*** ./src/app/export_import/import/import-all.service.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportAllService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const fs = __webpack_require__(/*! fs */ "fs");
const unzipper = __webpack_require__(/*! unzipper */ "unzipper");
const csv = __webpack_require__(/*! csv-parser */ "csv-parser");
const rimraf = __webpack_require__(/*! rimraf */ "rimraf");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const country_entity_1 = __webpack_require__(/*! ../../country/country.entity */ "./src/app/country/country.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../../user/user.entity */ "./src/app/user/user.entity.ts");
const typeorm_2 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const tag_entity_1 = __webpack_require__(/*! ../../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const activity_entity_1 = __webpack_require__(/*! ../../timesheet/activity.entity */ "./src/app/timesheet/activity.entity.ts");
const availability_slots_entity_1 = __webpack_require__(/*! ../../availability-slots/availability-slots.entity */ "./src/app/availability-slots/availability-slots.entity.ts");
const approval_policy_entity_1 = __webpack_require__(/*! ../../approval-policy/approval-policy.entity */ "./src/app/approval-policy/approval-policy.entity.ts");
const appointment_employees_entity_1 = __webpack_require__(/*! ../../appointment-employees/appointment-employees.entity */ "./src/app/appointment-employees/appointment-employees.entity.ts");
const candidate_technologies_entity_1 = __webpack_require__(/*! ../../candidate-technologies/candidate-technologies.entity */ "./src/app/candidate-technologies/candidate-technologies.entity.ts");
const candidate_source_entity_1 = __webpack_require__(/*! ../../candidate-source/candidate-source.entity */ "./src/app/candidate-source/candidate-source.entity.ts");
const candidate_skill_entity_1 = __webpack_require__(/*! ../../candidate-skill/candidate-skill.entity */ "./src/app/candidate-skill/candidate-skill.entity.ts");
const candidate_personal_qualities_entity_1 = __webpack_require__(/*! ../../candidate-personal-qualities/candidate-personal-qualities.entity */ "./src/app/candidate-personal-qualities/candidate-personal-qualities.entity.ts");
const candidate_interviewers_entity_1 = __webpack_require__(/*! ../../candidate-interviewers/candidate-interviewers.entity */ "./src/app/candidate-interviewers/candidate-interviewers.entity.ts");
const candidate_interview_entity_1 = __webpack_require__(/*! ../../candidate-interview/candidate-interview.entity */ "./src/app/candidate-interview/candidate-interview.entity.ts");
const candidate_feedbacks_entity_1 = __webpack_require__(/*! ../../candidate-feedbacks/candidate-feedbacks.entity */ "./src/app/candidate-feedbacks/candidate-feedbacks.entity.ts");
const candidate_experience_entity_1 = __webpack_require__(/*! ../../candidate-experience/candidate-experience.entity */ "./src/app/candidate-experience/candidate-experience.entity.ts");
const candidate_education_entity_1 = __webpack_require__(/*! ../../candidate-education/candidate-education.entity */ "./src/app/candidate-education/candidate-education.entity.ts");
const candidate_documents_entity_1 = __webpack_require__(/*! ../../candidate-documents/candidate-documents.entity */ "./src/app/candidate-documents/candidate-documents.entity.ts");
const candidate_criterion_rating_entity_1 = __webpack_require__(/*! ../../candidate-criterions-rating/candidate-criterion-rating.entity */ "./src/app/candidate-criterions-rating/candidate-criterion-rating.entity.ts");
const candidate_entity_1 = __webpack_require__(/*! ../../candidate/candidate.entity */ "./src/app/candidate/candidate.entity.ts");
const contact_entity_1 = __webpack_require__(/*! ../../contact/contact.entity */ "./src/app/contact/contact.entity.ts");
const deal_entity_1 = __webpack_require__(/*! ../../deal/deal.entity */ "./src/app/deal/deal.entity.ts");
const email_template_entity_1 = __webpack_require__(/*! ../../email-template/email-template.entity */ "./src/app/email-template/email-template.entity.ts");
const email_entity_1 = __webpack_require__(/*! ../../email/email.entity */ "./src/app/email/email.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const employee_appointment_entity_1 = __webpack_require__(/*! ../../employee-appointment/employee-appointment.entity */ "./src/app/employee-appointment/employee-appointment.entity.ts");
const employee_recurring_expense_entity_1 = __webpack_require__(/*! ../../employee-recurring-expense/employee-recurring-expense.entity */ "./src/app/employee-recurring-expense/employee-recurring-expense.entity.ts");
const employee_setting_entity_1 = __webpack_require__(/*! ../../employee-setting/employee-setting.entity */ "./src/app/employee-setting/employee-setting.entity.ts");
const equipment_entity_1 = __webpack_require__(/*! ../../equipment/equipment.entity */ "./src/app/equipment/equipment.entity.ts");
const equipment_sharing_entity_1 = __webpack_require__(/*! ../../equipment-sharing/equipment-sharing.entity */ "./src/app/equipment-sharing/equipment-sharing.entity.ts");
const equipment_sharing_policy_entity_1 = __webpack_require__(/*! ../../equipment-sharing-policy/equipment-sharing-policy.entity */ "./src/app/equipment-sharing-policy/equipment-sharing-policy.entity.ts");
const estimate_email_entity_1 = __webpack_require__(/*! ../../estimate-email/estimate-email.entity */ "./src/app/estimate-email/estimate-email.entity.ts");
const event_type_entity_1 = __webpack_require__(/*! ../../event-types/event-type.entity */ "./src/app/event-types/event-type.entity.ts");
const expense_entity_1 = __webpack_require__(/*! ../../expense/expense.entity */ "./src/app/expense/expense.entity.ts");
const expense_category_entity_1 = __webpack_require__(/*! ../../expense-categories/expense-category.entity */ "./src/app/expense-categories/expense-category.entity.ts");
const user_organization_entity_1 = __webpack_require__(/*! ../../user-organization/user-organization.entity */ "./src/app/user-organization/user-organization.entity.ts");
const time_off_policy_entity_1 = __webpack_require__(/*! ../../time-off-policy/time-off-policy.entity */ "./src/app/time-off-policy/time-off-policy.entity.ts");
const time_off_request_entity_1 = __webpack_require__(/*! ../../time-off-request/time-off-request.entity */ "./src/app/time-off-request/time-off-request.entity.ts");
const time_slot_entity_1 = __webpack_require__(/*! ../../timesheet/time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const time_log_entity_1 = __webpack_require__(/*! ../../timesheet/time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const timesheet_entity_1 = __webpack_require__(/*! ../../timesheet/timesheet.entity */ "./src/app/timesheet/timesheet.entity.ts");
const tenant_entity_1 = __webpack_require__(/*! ../../tenant/tenant.entity */ "./src/app/tenant/tenant.entity.ts");
const task_entity_1 = __webpack_require__(/*! ../../tasks/task.entity */ "./src/app/tasks/task.entity.ts");
const screenshot_entity_1 = __webpack_require__(/*! ../../timesheet/screenshot.entity */ "./src/app/timesheet/screenshot.entity.ts");
const help_center_author_entity_1 = __webpack_require__(/*! ../../help-center-author/help-center-author.entity */ "./src/app/help-center-author/help-center-author.entity.ts");
const help_center_article_entity_1 = __webpack_require__(/*! ../../help-center-article/help-center-article.entity */ "./src/app/help-center-article/help-center-article.entity.ts");
const help_center_entity_1 = __webpack_require__(/*! ../../help-center/help-center.entity */ "./src/app/help-center/help-center.entity.ts");
const goal_time_frame_entity_1 = __webpack_require__(/*! ../../goal-time-frame/goal-time-frame.entity */ "./src/app/goal-time-frame/goal-time-frame.entity.ts");
const goal_kpi_entity_1 = __webpack_require__(/*! ../../goal-kpi/goal-kpi.entity */ "./src/app/goal-kpi/goal-kpi.entity.ts");
const goal_general_setting_entity_1 = __webpack_require__(/*! ../../goal-general-setting/goal-general-setting.entity */ "./src/app/goal-general-setting/goal-general-setting.entity.ts");
const goal_entity_1 = __webpack_require__(/*! ../../goal/goal.entity */ "./src/app/goal/goal.entity.ts");
const skill_entity_1 = __webpack_require__(/*! ../../skills/skill.entity */ "./src/app/skills/skill.entity.ts");
const language_entity_1 = __webpack_require__(/*! ../../language/language.entity */ "./src/app/language/language.entity.ts");
const keyresult_update_entity_1 = __webpack_require__(/*! ../../keyresult-update/keyresult-update.entity */ "./src/app/keyresult-update/keyresult-update.entity.ts");
const keyresult_entity_1 = __webpack_require__(/*! ../../keyresult/keyresult.entity */ "./src/app/keyresult/keyresult.entity.ts");
const invoice_item_entity_1 = __webpack_require__(/*! ../../invoice-item/invoice-item.entity */ "./src/app/invoice-item/invoice-item.entity.ts");
const invoice_entity_1 = __webpack_require__(/*! ../../invoice/invoice.entity */ "./src/app/invoice/invoice.entity.ts");
const invite_entity_1 = __webpack_require__(/*! ../../invite/invite.entity */ "./src/app/invite/invite.entity.ts");
const integration_tenant_entity_1 = __webpack_require__(/*! ../../integration-tenant/integration-tenant.entity */ "./src/app/integration-tenant/integration-tenant.entity.ts");
const integration_setting_entity_1 = __webpack_require__(/*! ../../integration-setting/integration-setting.entity */ "./src/app/integration-setting/integration-setting.entity.ts");
const integration_map_entity_1 = __webpack_require__(/*! ../../integration-map/integration-map.entity */ "./src/app/integration-map/integration-map.entity.ts");
const income_entity_1 = __webpack_require__(/*! ../../income/income.entity */ "./src/app/income/income.entity.ts");
const integration_entity_1 = __webpack_require__(/*! ../../integration/integration.entity */ "./src/app/integration/integration.entity.ts");
const integration_entity_setting_entity_1 = __webpack_require__(/*! ../../integration-entity-setting/integration-entity-setting.entity */ "./src/app/integration-entity-setting/integration-entity-setting.entity.ts");
const integration_entity_setting_tied_entity_entity_1 = __webpack_require__(/*! ../../integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.entity */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const organization_employee_level_entity_1 = __webpack_require__(/*! ../../organization_employee-level/organization-employee-level.entity */ "./src/app/organization_employee-level/organization-employee-level.entity.ts");
const organization_awards_entity_1 = __webpack_require__(/*! ../../organization-awards/organization-awards.entity */ "./src/app/organization-awards/organization-awards.entity.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const organization_department_entity_1 = __webpack_require__(/*! ../../organization-department/organization-department.entity */ "./src/app/organization-department/organization-department.entity.ts");
const organization_documents_entity_1 = __webpack_require__(/*! ../../organization-documents/organization-documents.entity */ "./src/app/organization-documents/organization-documents.entity.ts");
const organization_employment_type_entity_1 = __webpack_require__(/*! ../../organization-employment-type/organization-employment-type.entity */ "./src/app/organization-employment-type/organization-employment-type.entity.ts");
const organization_languages_entity_1 = __webpack_require__(/*! ../../organization-languages/organization-languages.entity */ "./src/app/organization-languages/organization-languages.entity.ts");
const organization_positions_entity_1 = __webpack_require__(/*! ../../organization-positions/organization-positions.entity */ "./src/app/organization-positions/organization-positions.entity.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const organization_recurring_expense_entity_1 = __webpack_require__(/*! ../../organization-recurring-expense/organization-recurring-expense.entity */ "./src/app/organization-recurring-expense/organization-recurring-expense.entity.ts");
const organization_sprint_entity_1 = __webpack_require__(/*! ../../organization-sprint/organization-sprint.entity */ "./src/app/organization-sprint/organization-sprint.entity.ts");
const organization_team_entity_1 = __webpack_require__(/*! ../../organization-team/organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const organization_team_employee_entity_1 = __webpack_require__(/*! ../../organization-team-employee/organization-team-employee.entity */ "./src/app/organization-team-employee/organization-team-employee.entity.ts");
const organization_vendors_entity_1 = __webpack_require__(/*! ../../organization-vendors/organization-vendors.entity */ "./src/app/organization-vendors/organization-vendors.entity.ts");
const role_permissions_entity_1 = __webpack_require__(/*! ../../role-permissions/role-permissions.entity */ "./src/app/role-permissions/role-permissions.entity.ts");
const role_entity_1 = __webpack_require__(/*! ../../role/role.entity */ "./src/app/role/role.entity.ts");
const request_approval_entity_1 = __webpack_require__(/*! ../../request-approval/request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const payment_entity_1 = __webpack_require__(/*! ../../payment/payment.entity */ "./src/app/payment/payment.entity.ts");
const pipeline_entity_1 = __webpack_require__(/*! ../../pipeline/pipeline.entity */ "./src/app/pipeline/pipeline.entity.ts");
const pipeline_stage_entity_1 = __webpack_require__(/*! ../../pipeline-stage/pipeline-stage.entity */ "./src/app/pipeline-stage/pipeline-stage.entity.ts");
const proposal_entity_1 = __webpack_require__(/*! ../../proposal/proposal.entity */ "./src/app/proposal/proposal.entity.ts");
const product_variant_price_entity_1 = __webpack_require__(/*! ../../product-variant-price/product-variant-price.entity */ "./src/app/product-variant-price/product-variant-price.entity.ts");
const product_variant_entity_1 = __webpack_require__(/*! ../../product-variant/product-variant.entity */ "./src/app/product-variant/product-variant.entity.ts");
const product_type_entity_1 = __webpack_require__(/*! ../../product-type/product-type.entity */ "./src/app/product-type/product-type.entity.ts");
const product_settings_entity_1 = __webpack_require__(/*! ../../product-settings/product-settings.entity */ "./src/app/product-settings/product-settings.entity.ts");
const product_option_entity_1 = __webpack_require__(/*! ../../product-option/product-option.entity */ "./src/app/product-option/product-option.entity.ts");
const product_category_entity_1 = __webpack_require__(/*! ../../product-category/product-category.entity */ "./src/app/product-category/product-category.entity.ts");
const product_entity_1 = __webpack_require__(/*! ../../product/product.entity */ "./src/app/product/product.entity.ts");
const utils_1 = __webpack_require__(/*! ../../core/utils */ "./src/app/core/utils.ts");
const file_storage_1 = __webpack_require__(/*! ../../core/file-storage */ "./src/app/core/file-storage/index.ts");
const currency_entity_1 = __webpack_require__(/*! ../../currency/currency.entity */ "./src/app/currency/currency.entity.ts");
const employee_award_entity_1 = __webpack_require__(/*! ../../employee-award/employee-award.entity */ "./src/app/employee-award/employee-award.entity.ts");
const employee_proposal_template_entity_1 = __webpack_require__(/*! ../../employee-proposal-template/employee-proposal-template.entity */ "./src/app/employee-proposal-template/employee-proposal-template.entity.ts");
const employee_upwork_jobs_search_criterion_entity_1 = __webpack_require__(/*! ../../employee-job-preset/employee-upwork-jobs-search-criterion.entity */ "./src/app/employee-job-preset/employee-upwork-jobs-search-criterion.entity.ts");
const goal_template_entity_1 = __webpack_require__(/*! ../../goal-template/goal-template.entity */ "./src/app/goal-template/goal-template.entity.ts");
const goal_kpi_template_entity_1 = __webpack_require__(/*! ../../goal-kpi-template/goal-kpi-template.entity */ "./src/app/goal-kpi-template/goal-kpi-template.entity.ts");
const invoice_estimate_history_entity_1 = __webpack_require__(/*! ../../invoice-estimate-history/invoice-estimate-history.entity */ "./src/app/invoice-estimate-history/invoice-estimate-history.entity.ts");
const job_search_occupation_entity_1 = __webpack_require__(/*! ../../employee-job-preset/job-search-occupation/job-search-occupation.entity */ "./src/app/employee-job-preset/job-search-occupation/job-search-occupation.entity.ts");
const job_preset_upwork_job_search_criterion_entity_1 = __webpack_require__(/*! ../../employee-job-preset/job-preset-upwork-job-search-criterion.entity */ "./src/app/employee-job-preset/job-preset-upwork-job-search-criterion.entity.ts");
const job_search_category_entity_1 = __webpack_require__(/*! ../../employee-job-preset/job-search-category/job-search-category.entity */ "./src/app/employee-job-preset/job-search-category/job-search-category.entity.ts");
const job_preset_entity_1 = __webpack_require__(/*! ../../employee-job-preset/job-preset.entity */ "./src/app/employee-job-preset/job-preset.entity.ts");
const keyresult_template_entity_1 = __webpack_require__(/*! ../../keyresult-template/keyresult-template.entity */ "./src/app/keyresult-template/keyresult-template.entity.ts");
const report_entity_1 = __webpack_require__(/*! ../../reports/report.entity */ "./src/app/reports/report.entity.ts");
const report_category_entity_1 = __webpack_require__(/*! ../../reports/report-category.entity */ "./src/app/reports/report-category.entity.ts");
const report_organization_entity_1 = __webpack_require__(/*! ../../reports/report-organization.entity */ "./src/app/reports/report-organization.entity.ts");
let ImportAllService = class ImportAllService {
    constructor(activityRepository, appointmentEmployeesRepository, approvalPolicyRepository, availabilitySlotsRepository, candidateRepository, candidateCriterionsRatingRepository, candidateDocumentRepository, candidateEducationRepository, candidateExperienceRepository, candidateFeedbackRepository, candidateInterviewRepository, candidateInterviewersRepository, candidatePersonalQualitiesRepository, candidateSkillRepository, candidateSourceRepository, candidateTechnologiesRepository, contactRepository, countryRepository, currencyRepository, dealRepository, emailRepository, emailTemplateRepository, employeeRepository, employeeAppointmentRepository, employeeAwardRepository, employeeProposalTemplateRepository, employeeUpworkJobsSearchCriterionRepository, employeeRecurringExpenseRepository, employeeSettingRepository, equipmentRepository, equipmentSharingRepository, equipmentSharingPolicyRepository, estimateEmailRepository, eventTypeRepository, expenseRepository, expenseCategoryRepository, goalRepository, goalTemplateRepository, goalGeneralSettingRepository, goalKpiRepository, goalKpiTemplateRepository, goalTimeFrameRepository, HelpCenterRepository, HelpCenterArticleRepository, HelpCenterAuthorRepository, incomeRepository, integrationRepository, integrationEntitySettingRepository, integrationEntitySettingTiedEntityRepository, IntegrationMapRepository, IntegrationSettingRepository, integrationTenantRepository, inviteRepository, invoiceRepository, invoiceEstimateHistoryRepository, invoiceItemRepository, jobPresetRepository, jobSearchCategoryRepository, jobSearchOccupationRepository, jobPresetUpworkJobSearchCriterionRepository, keyResultRepository, keyResultTemplateRepository, keyResultUpdateRepository, languageRepository, organizationRepository, employeeLevelRepository, organizationAwardsRepository, organizationContactRepository, organizationDepartmentRepository, organizationDocumentRepository, organizationEmploymentTypeRepository, organizationLanguagesRepository, organizationPositionsRepository, organizationProjectsRepository, organizationRecurringExpenseRepository, sprintRepository, organizationTeamRepository, OrganizationTeamEmployeeRepository, organizationVendorsRepository, paymentRepository, pipelineRepository, stageRepository, productRepository, productCategoryRepository, productOptionRepository, productVariantSettingsRepository, productTypeRepository, productVariantRepository, productVariantPriceRepository, proposalRepository, skillRepository, screenShotRepository, requestApprovalRepository, roleRepository, RolePermissionsRepository, reportRepository, reportCategoryRepository, reportOrganizationRepository, tagRepository, taskRepository, tenantRepository, timeSheetRepository, timeLogRepository, timeSlotRepository, timeOffRequestRepository, timeOffPolicyRepository, userRepository, userOrganizationRepository) {
        this.activityRepository = activityRepository;
        this.appointmentEmployeesRepository = appointmentEmployeesRepository;
        this.approvalPolicyRepository = approvalPolicyRepository;
        this.availabilitySlotsRepository = availabilitySlotsRepository;
        this.candidateRepository = candidateRepository;
        this.candidateCriterionsRatingRepository = candidateCriterionsRatingRepository;
        this.candidateDocumentRepository = candidateDocumentRepository;
        this.candidateEducationRepository = candidateEducationRepository;
        this.candidateExperienceRepository = candidateExperienceRepository;
        this.candidateFeedbackRepository = candidateFeedbackRepository;
        this.candidateInterviewRepository = candidateInterviewRepository;
        this.candidateInterviewersRepository = candidateInterviewersRepository;
        this.candidatePersonalQualitiesRepository = candidatePersonalQualitiesRepository;
        this.candidateSkillRepository = candidateSkillRepository;
        this.candidateSourceRepository = candidateSourceRepository;
        this.candidateTechnologiesRepository = candidateTechnologiesRepository;
        this.contactRepository = contactRepository;
        this.countryRepository = countryRepository;
        this.currencyRepository = currencyRepository;
        this.dealRepository = dealRepository;
        this.emailRepository = emailRepository;
        this.emailTemplateRepository = emailTemplateRepository;
        this.employeeRepository = employeeRepository;
        this.employeeAppointmentRepository = employeeAppointmentRepository;
        this.employeeAwardRepository = employeeAwardRepository;
        this.employeeProposalTemplateRepository = employeeProposalTemplateRepository;
        this.employeeUpworkJobsSearchCriterionRepository = employeeUpworkJobsSearchCriterionRepository;
        this.employeeRecurringExpenseRepository = employeeRecurringExpenseRepository;
        this.employeeSettingRepository = employeeSettingRepository;
        this.equipmentRepository = equipmentRepository;
        this.equipmentSharingRepository = equipmentSharingRepository;
        this.equipmentSharingPolicyRepository = equipmentSharingPolicyRepository;
        this.estimateEmailRepository = estimateEmailRepository;
        this.eventTypeRepository = eventTypeRepository;
        this.expenseRepository = expenseRepository;
        this.expenseCategoryRepository = expenseCategoryRepository;
        this.goalRepository = goalRepository;
        this.goalTemplateRepository = goalTemplateRepository;
        this.goalGeneralSettingRepository = goalGeneralSettingRepository;
        this.goalKpiRepository = goalKpiRepository;
        this.goalKpiTemplateRepository = goalKpiTemplateRepository;
        this.goalTimeFrameRepository = goalTimeFrameRepository;
        this.HelpCenterRepository = HelpCenterRepository;
        this.HelpCenterArticleRepository = HelpCenterArticleRepository;
        this.HelpCenterAuthorRepository = HelpCenterAuthorRepository;
        this.incomeRepository = incomeRepository;
        this.integrationRepository = integrationRepository;
        this.integrationEntitySettingRepository = integrationEntitySettingRepository;
        this.integrationEntitySettingTiedEntityRepository = integrationEntitySettingTiedEntityRepository;
        this.IntegrationMapRepository = IntegrationMapRepository;
        this.IntegrationSettingRepository = IntegrationSettingRepository;
        this.integrationTenantRepository = integrationTenantRepository;
        this.inviteRepository = inviteRepository;
        this.invoiceRepository = invoiceRepository;
        this.invoiceEstimateHistoryRepository = invoiceEstimateHistoryRepository;
        this.invoiceItemRepository = invoiceItemRepository;
        this.jobPresetRepository = jobPresetRepository;
        this.jobSearchCategoryRepository = jobSearchCategoryRepository;
        this.jobSearchOccupationRepository = jobSearchOccupationRepository;
        this.jobPresetUpworkJobSearchCriterionRepository = jobPresetUpworkJobSearchCriterionRepository;
        this.keyResultRepository = keyResultRepository;
        this.keyResultTemplateRepository = keyResultTemplateRepository;
        this.keyResultUpdateRepository = keyResultUpdateRepository;
        this.languageRepository = languageRepository;
        this.organizationRepository = organizationRepository;
        this.employeeLevelRepository = employeeLevelRepository;
        this.organizationAwardsRepository = organizationAwardsRepository;
        this.organizationContactRepository = organizationContactRepository;
        this.organizationDepartmentRepository = organizationDepartmentRepository;
        this.organizationDocumentRepository = organizationDocumentRepository;
        this.organizationEmploymentTypeRepository = organizationEmploymentTypeRepository;
        this.organizationLanguagesRepository = organizationLanguagesRepository;
        this.organizationPositionsRepository = organizationPositionsRepository;
        this.organizationProjectsRepository = organizationProjectsRepository;
        this.organizationRecurringExpenseRepository = organizationRecurringExpenseRepository;
        this.sprintRepository = sprintRepository;
        this.organizationTeamRepository = organizationTeamRepository;
        this.OrganizationTeamEmployeeRepository = OrganizationTeamEmployeeRepository;
        this.organizationVendorsRepository = organizationVendorsRepository;
        this.paymentRepository = paymentRepository;
        this.pipelineRepository = pipelineRepository;
        this.stageRepository = stageRepository;
        this.productRepository = productRepository;
        this.productCategoryRepository = productCategoryRepository;
        this.productOptionRepository = productOptionRepository;
        this.productVariantSettingsRepository = productVariantSettingsRepository;
        this.productTypeRepository = productTypeRepository;
        this.productVariantRepository = productVariantRepository;
        this.productVariantPriceRepository = productVariantPriceRepository;
        this.proposalRepository = proposalRepository;
        this.skillRepository = skillRepository;
        this.screenShotRepository = screenShotRepository;
        this.requestApprovalRepository = requestApprovalRepository;
        this.roleRepository = roleRepository;
        this.RolePermissionsRepository = RolePermissionsRepository;
        this.reportRepository = reportRepository;
        this.reportCategoryRepository = reportCategoryRepository;
        this.reportOrganizationRepository = reportOrganizationRepository;
        this.tagRepository = tagRepository;
        this.taskRepository = taskRepository;
        this.tenantRepository = tenantRepository;
        this.timeSheetRepository = timeSheetRepository;
        this.timeLogRepository = timeLogRepository;
        this.timeSlotRepository = timeSlotRepository;
        this.timeOffRequestRepository = timeOffRequestRepository;
        this.timeOffPolicyRepository = timeOffPolicyRepository;
        this.userRepository = userRepository;
        this.userOrganizationRepository = userOrganizationRepository;
        this.__dirname = './import/csv/';
        this.orderedRepositories = {
            countries: this.countryRepository,
            currencies: this.currencyRepository,
            skill: this.skillRepository,
            language: this.languageRepository,
            tenant: this.tenantRepository,
            report_category: this.reportCategoryRepository,
            report: this.reportRepository,
            role: this.roleRepository,
            role_permission: this.RolePermissionsRepository,
            organization: this.organizationRepository,
            users: this.userRepository,
            candidate: this.candidateRepository,
            user_organization: this.userOrganizationRepository,
            contact: this.contactRepository,
            report_organization: this.reportOrganizationRepository,
            job_preset: this.jobPresetRepository,
            job_search_category: this.jobSearchCategoryRepository,
            job_search_occupation: this.jobSearchOccupationRepository,
            job_preset_upwork_job_search_criterion: this
                .jobPresetUpworkJobSearchCriterionRepository,
            employee: this.employeeRepository,
            candidate_documents: this.candidateDocumentRepository,
            candidate_education: this.candidateEducationRepository,
            candidate_experience: this.candidateExperienceRepository,
            candidate_feedbacks: this.candidateFeedbackRepository,
            candidate_interview: this.candidateInterviewRepository,
            candidate_interviews: this.candidateInterviewersRepository,
            candidate_personal_qualities: this.candidatePersonalQualitiesRepository,
            candidate_creation_rating: this.candidateCriterionsRatingRepository,
            candidate_skill: this.candidateSkillRepository,
            candidate_source: this.candidateSourceRepository,
            candidate_technologies: this.candidateTechnologiesRepository,
            activity: this.activityRepository,
            approval_policy: this.approvalPolicyRepository,
            availability_slot: this.availabilitySlotsRepository,
            appointment_employee: this.appointmentEmployeesRepository,
            deal: this.dealRepository,
            email_template: this.emailTemplateRepository,
            estimate_email: this.estimateEmailRepository,
            email: this.emailRepository,
            employee_appointment: this.employeeAppointmentRepository,
            employee_award: this.employeeAwardRepository,
            employee_proposal_template: this.employeeProposalTemplateRepository,
            employee_recurring_expense: this.employeeRecurringExpenseRepository,
            employee_setting: this.employeeSettingRepository,
            employee_upwork_job_search_criterion: this
                .employeeUpworkJobsSearchCriterionRepository,
            equipment: this.equipmentRepository,
            equipment_sharing: this.equipmentSharingRepository,
            equipment_sharing_policy: this.equipmentSharingPolicyRepository,
            event_types: this.eventTypeRepository,
            expense_category: this.expenseCategoryRepository,
            expense: this.expenseRepository,
            goal_kpi: this.goalKpiRepository,
            gosl_kpi_template: this.goalKpiTemplateRepository,
            goal_time_frame: this.goalTimeFrameRepository,
            goal: this.goalRepository,
            goal_template: this.goalTemplateRepository,
            goal_general_setting: this.goalGeneralSettingRepository,
            income: this.incomeRepository,
            integration_tenant: this.integrationTenantRepository,
            integration_entity_setting: this.integrationEntitySettingRepository,
            integration_entity_setting_tied_entity: this
                .integrationEntitySettingTiedEntityRepository,
            integration_map: this.IntegrationMapRepository,
            integration_setting: this.IntegrationSettingRepository,
            integration: this.integrationRepository,
            invite: this.inviteRepository,
            invoice_item: this.invoiceItemRepository,
            invoice: this.invoiceRepository,
            invoise_estimate_history: this.invoiceEstimateHistoryRepository,
            key_result: this.keyResultRepository,
            key_result_template: this.keyResultTemplateRepository,
            key_result_update: this.keyResultUpdateRepository,
            knowledge_base: this.HelpCenterRepository,
            knowledge_base_article: this.HelpCenterArticleRepository,
            knowledge_base_author: this.HelpCenterAuthorRepository,
            organization_award: this.organizationAwardsRepository,
            organization_contact: this.organizationContactRepository,
            organization_department: this.organizationDepartmentRepository,
            organization_document: this.organizationDocumentRepository,
            organization_employee_level: this.employeeLevelRepository,
            organization_employment_type: this.organizationEmploymentTypeRepository,
            organization_language: this.organizationLanguagesRepository,
            organization_position: this.organizationPositionsRepository,
            organization_project: this.organizationProjectsRepository,
            organization_recurring_expense: this
                .organizationRecurringExpenseRepository,
            organization_sprint: this.sprintRepository,
            organization_team_employee: this.OrganizationTeamEmployeeRepository,
            organization_team: this.organizationTeamRepository,
            organization_vendor: this.organizationVendorsRepository,
            pipeline: this.pipelineRepository,
            product_category: this.productCategoryRepository,
            product_option: this.productOptionRepository,
            product_settings: this.productVariantSettingsRepository,
            product_type: this.productTypeRepository,
            product_variant_price: this.productVariantPriceRepository,
            product_variant: this.productVariantRepository,
            product: this.productRepository,
            proposal: this.proposalRepository,
            payment: this.paymentRepository,
            request_approval: this.requestApprovalRepository,
            screenshot: this.screenShotRepository,
            stage: this.stageRepository,
            tag: this.tagRepository,
            task: this.taskRepository,
            time_log: this.timeLogRepository,
            time_slot: this.timeSlotRepository,
            time_off_policy: this.timeOffPolicyRepository,
            time_off_request: this.timeOffRequestRepository,
            timesheet: this.timeSheetRepository
        };
    }
    async createFolder() {
        return new Promise((resolve, reject) => {
            fs.access(`./import`, (error) => {
                if (!error) {
                    return null;
                }
                else {
                    fs.mkdir(`./import`, { recursive: true }, (err) => {
                        if (err)
                            reject(err);
                        resolve();
                    });
                }
            });
        });
    }
    removeExtractedFiles() {
        try {
            rimraf.sync(this.__dirname);
        }
        catch (error) {
            console.log(error);
        }
    }
    async unzipAndParse(filePath, cleanup = false) {
        const file = await new file_storage_1.FileStorage().getProvider().getFile(filePath);
        await unzipper.Open.buffer(file).then((d) => d.extract({ path: this.__dirname }));
        this.parse(cleanup);
    }
    parse(cleanup = false) {
        for (const i of Object.keys(this.orderedRepositories)) {
            if (!fs.existsSync(this.__dirname + i + '.csv')) {
                continue;
            }
            console.log('File Exists:', this.__dirname + i + '.csv');
            const results = [];
            fs.createReadStream(this.__dirname + i + '.csv')
                .pipe(csv())
                .on('data', (data) => {
                data = this.mappedTimestampsFields(data);
                results.push(data);
            })
                .on('end', async () => {
                if (cleanup) {
                    await this.orderedRepositories[i].query(`TRUNCATE  "${this.orderedRepositories[i].metadata.tableName}" RESTART IDENTITY CASCADE;`);
                }
                this.orderedRepositories[i].insert(results);
            });
        }
    }
    mappedTimestampsFields(data) {
        if (data.hasOwnProperty('createdAt')) {
            data['createdAt'] = utils_1.convertToDatetime(data['createdAt']);
        }
        if (data.hasOwnProperty('updatedAt')) {
            data['updatedAt'] = utils_1.convertToDatetime(data['updatedAt']);
        }
        if (data.hasOwnProperty('recordedAt')) {
            data['recordedAt'] = utils_1.convertToDatetime(data['recordedAt']);
        }
        if (data.hasOwnProperty('deletedAt')) {
            data['deletedAt'] = utils_1.convertToDatetime(data['deletedAt']);
        }
        return data;
    }
    ngOnDestroy() { }
};
ImportAllService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_2.InjectRepository(activity_entity_1.Activity)),
    tslib_1.__param(1, typeorm_2.InjectRepository(appointment_employees_entity_1.AppointmentEmployee)),
    tslib_1.__param(2, typeorm_2.InjectRepository(approval_policy_entity_1.ApprovalPolicy)),
    tslib_1.__param(3, typeorm_2.InjectRepository(availability_slots_entity_1.AvailabilitySlot)),
    tslib_1.__param(4, typeorm_2.InjectRepository(candidate_entity_1.Candidate)),
    tslib_1.__param(5, typeorm_2.InjectRepository(candidate_criterion_rating_entity_1.CandidateCriterionsRating)),
    tslib_1.__param(6, typeorm_2.InjectRepository(candidate_documents_entity_1.CandidateDocument)),
    tslib_1.__param(7, typeorm_2.InjectRepository(candidate_education_entity_1.CandidateEducation)),
    tslib_1.__param(8, typeorm_2.InjectRepository(candidate_experience_entity_1.CandidateExperience)),
    tslib_1.__param(9, typeorm_2.InjectRepository(candidate_feedbacks_entity_1.CandidateFeedback)),
    tslib_1.__param(10, typeorm_2.InjectRepository(candidate_interview_entity_1.CandidateInterview)),
    tslib_1.__param(11, typeorm_2.InjectRepository(candidate_interviewers_entity_1.CandidateInterviewers)),
    tslib_1.__param(12, typeorm_2.InjectRepository(candidate_personal_qualities_entity_1.CandidatePersonalQualities)),
    tslib_1.__param(13, typeorm_2.InjectRepository(candidate_skill_entity_1.CandidateSkill)),
    tslib_1.__param(14, typeorm_2.InjectRepository(candidate_source_entity_1.CandidateSource)),
    tslib_1.__param(15, typeorm_2.InjectRepository(candidate_technologies_entity_1.CandidateTechnologies)),
    tslib_1.__param(16, typeorm_2.InjectRepository(contact_entity_1.Contact)),
    tslib_1.__param(17, typeorm_2.InjectRepository(country_entity_1.Country)),
    tslib_1.__param(18, typeorm_2.InjectRepository(currency_entity_1.Currency)),
    tslib_1.__param(19, typeorm_2.InjectRepository(deal_entity_1.Deal)),
    tslib_1.__param(20, typeorm_2.InjectRepository(email_entity_1.Email)),
    tslib_1.__param(21, typeorm_2.InjectRepository(email_template_entity_1.EmailTemplate)),
    tslib_1.__param(22, typeorm_2.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__param(23, typeorm_2.InjectRepository(employee_appointment_entity_1.EmployeeAppointment)),
    tslib_1.__param(24, typeorm_2.InjectRepository(employee_award_entity_1.EmployeeAward)),
    tslib_1.__param(25, typeorm_2.InjectRepository(employee_proposal_template_entity_1.EmployeeProposalTemplate)),
    tslib_1.__param(26, typeorm_2.InjectRepository(employee_upwork_jobs_search_criterion_entity_1.EmployeeUpworkJobsSearchCriterion)),
    tslib_1.__param(27, typeorm_2.InjectRepository(employee_recurring_expense_entity_1.EmployeeRecurringExpense)),
    tslib_1.__param(28, typeorm_2.InjectRepository(employee_setting_entity_1.EmployeeSetting)),
    tslib_1.__param(29, typeorm_2.InjectRepository(equipment_entity_1.Equipment)),
    tslib_1.__param(30, typeorm_2.InjectRepository(equipment_sharing_entity_1.EquipmentSharing)),
    tslib_1.__param(31, typeorm_2.InjectRepository(equipment_sharing_policy_entity_1.EquipmentSharingPolicy)),
    tslib_1.__param(32, typeorm_2.InjectRepository(estimate_email_entity_1.EstimateEmail)),
    tslib_1.__param(33, typeorm_2.InjectRepository(event_type_entity_1.EventType)),
    tslib_1.__param(34, typeorm_2.InjectRepository(expense_entity_1.Expense)),
    tslib_1.__param(35, typeorm_2.InjectRepository(expense_category_entity_1.ExpenseCategory)),
    tslib_1.__param(36, typeorm_2.InjectRepository(goal_entity_1.Goal)),
    tslib_1.__param(37, typeorm_2.InjectRepository(goal_template_entity_1.GoalTemplate)),
    tslib_1.__param(38, typeorm_2.InjectRepository(goal_general_setting_entity_1.GoalGeneralSetting)),
    tslib_1.__param(39, typeorm_2.InjectRepository(goal_kpi_entity_1.GoalKPI)),
    tslib_1.__param(40, typeorm_2.InjectRepository(goal_kpi_template_entity_1.GoalKPITemplate)),
    tslib_1.__param(41, typeorm_2.InjectRepository(goal_time_frame_entity_1.GoalTimeFrame)),
    tslib_1.__param(42, typeorm_2.InjectRepository(help_center_entity_1.HelpCenter)),
    tslib_1.__param(43, typeorm_2.InjectRepository(help_center_article_entity_1.HelpCenterArticle)),
    tslib_1.__param(44, typeorm_2.InjectRepository(help_center_author_entity_1.HelpCenterAuthor)),
    tslib_1.__param(45, typeorm_2.InjectRepository(income_entity_1.Income)),
    tslib_1.__param(46, typeorm_2.InjectRepository(integration_entity_1.Integration)),
    tslib_1.__param(47, typeorm_2.InjectRepository(integration_entity_setting_entity_1.IntegrationEntitySetting)),
    tslib_1.__param(48, typeorm_2.InjectRepository(integration_entity_setting_tied_entity_entity_1.IntegrationEntitySettingTiedEntity)),
    tslib_1.__param(49, typeorm_2.InjectRepository(integration_map_entity_1.IntegrationMap)),
    tslib_1.__param(50, typeorm_2.InjectRepository(integration_setting_entity_1.IntegrationSetting)),
    tslib_1.__param(51, typeorm_2.InjectRepository(integration_tenant_entity_1.IntegrationTenant)),
    tslib_1.__param(52, typeorm_2.InjectRepository(invite_entity_1.Invite)),
    tslib_1.__param(53, typeorm_2.InjectRepository(invoice_entity_1.Invoice)),
    tslib_1.__param(54, typeorm_2.InjectRepository(invoice_estimate_history_entity_1.InvoiceEstimateHistory)),
    tslib_1.__param(55, typeorm_2.InjectRepository(invoice_item_entity_1.InvoiceItem)),
    tslib_1.__param(56, typeorm_2.InjectRepository(job_preset_entity_1.JobPreset)),
    tslib_1.__param(57, typeorm_2.InjectRepository(job_search_category_entity_1.JobSearchCategory)),
    tslib_1.__param(58, typeorm_2.InjectRepository(job_search_occupation_entity_1.JobSearchOccupation)),
    tslib_1.__param(59, typeorm_2.InjectRepository(job_preset_upwork_job_search_criterion_entity_1.JobPresetUpworkJobSearchCriterion)),
    tslib_1.__param(60, typeorm_2.InjectRepository(keyresult_entity_1.KeyResult)),
    tslib_1.__param(61, typeorm_2.InjectRepository(keyresult_template_entity_1.KeyResultTemplate)),
    tslib_1.__param(62, typeorm_2.InjectRepository(keyresult_update_entity_1.KeyResultUpdate)),
    tslib_1.__param(63, typeorm_2.InjectRepository(language_entity_1.Language)),
    tslib_1.__param(64, typeorm_2.InjectRepository(organization_entity_1.Organization)),
    tslib_1.__param(65, typeorm_2.InjectRepository(organization_employee_level_entity_1.EmployeeLevel)),
    tslib_1.__param(66, typeorm_2.InjectRepository(organization_awards_entity_1.OrganizationAwards)),
    tslib_1.__param(67, typeorm_2.InjectRepository(organization_contact_entity_1.OrganizationContact)),
    tslib_1.__param(68, typeorm_2.InjectRepository(organization_department_entity_1.OrganizationDepartment)),
    tslib_1.__param(69, typeorm_2.InjectRepository(organization_documents_entity_1.OrganizationDocuments)),
    tslib_1.__param(70, typeorm_2.InjectRepository(organization_employment_type_entity_1.OrganizationEmploymentType)),
    tslib_1.__param(71, typeorm_2.InjectRepository(organization_languages_entity_1.OrganizationLanguages)),
    tslib_1.__param(72, typeorm_2.InjectRepository(organization_positions_entity_1.OrganizationPositions)),
    tslib_1.__param(73, typeorm_2.InjectRepository(organization_projects_entity_1.OrganizationProject)),
    tslib_1.__param(74, typeorm_2.InjectRepository(organization_recurring_expense_entity_1.OrganizationRecurringExpense)),
    tslib_1.__param(75, typeorm_2.InjectRepository(organization_sprint_entity_1.OrganizationSprint)),
    tslib_1.__param(76, typeorm_2.InjectRepository(organization_team_entity_1.OrganizationTeam)),
    tslib_1.__param(77, typeorm_2.InjectRepository(organization_team_employee_entity_1.OrganizationTeamEmployee)),
    tslib_1.__param(78, typeorm_2.InjectRepository(organization_vendors_entity_1.OrganizationVendor)),
    tslib_1.__param(79, typeorm_2.InjectRepository(payment_entity_1.Payment)),
    tslib_1.__param(80, typeorm_2.InjectRepository(pipeline_entity_1.Pipeline)),
    tslib_1.__param(81, typeorm_2.InjectRepository(pipeline_stage_entity_1.PipelineStage)),
    tslib_1.__param(82, typeorm_2.InjectRepository(product_entity_1.Product)),
    tslib_1.__param(83, typeorm_2.InjectRepository(product_category_entity_1.ProductCategory)),
    tslib_1.__param(84, typeorm_2.InjectRepository(product_option_entity_1.ProductOption)),
    tslib_1.__param(85, typeorm_2.InjectRepository(product_settings_entity_1.ProductVariantSettings)),
    tslib_1.__param(86, typeorm_2.InjectRepository(product_type_entity_1.ProductType)),
    tslib_1.__param(87, typeorm_2.InjectRepository(product_variant_entity_1.ProductVariant)),
    tslib_1.__param(88, typeorm_2.InjectRepository(product_variant_price_entity_1.ProductVariantPrice)),
    tslib_1.__param(89, typeorm_2.InjectRepository(proposal_entity_1.Proposal)),
    tslib_1.__param(90, typeorm_2.InjectRepository(skill_entity_1.Skill)),
    tslib_1.__param(91, typeorm_2.InjectRepository(screenshot_entity_1.Screenshot)),
    tslib_1.__param(92, typeorm_2.InjectRepository(request_approval_entity_1.RequestApproval)),
    tslib_1.__param(93, typeorm_2.InjectRepository(role_entity_1.Role)),
    tslib_1.__param(94, typeorm_2.InjectRepository(role_permissions_entity_1.RolePermissions)),
    tslib_1.__param(95, typeorm_2.InjectRepository(report_entity_1.Report)),
    tslib_1.__param(96, typeorm_2.InjectRepository(report_category_entity_1.ReportCategory)),
    tslib_1.__param(97, typeorm_2.InjectRepository(report_organization_entity_1.ReportOrganization)),
    tslib_1.__param(98, typeorm_2.InjectRepository(tag_entity_1.Tag)),
    tslib_1.__param(99, typeorm_2.InjectRepository(task_entity_1.Task)),
    tslib_1.__param(100, typeorm_2.InjectRepository(tenant_entity_1.Tenant)),
    tslib_1.__param(101, typeorm_2.InjectRepository(timesheet_entity_1.Timesheet)),
    tslib_1.__param(102, typeorm_2.InjectRepository(time_log_entity_1.TimeLog)),
    tslib_1.__param(103, typeorm_2.InjectRepository(time_slot_entity_1.TimeSlot)),
    tslib_1.__param(104, typeorm_2.InjectRepository(time_off_request_entity_1.TimeOffRequest)),
    tslib_1.__param(105, typeorm_2.InjectRepository(time_off_policy_entity_1.TimeOffPolicy)),
    tslib_1.__param(106, typeorm_2.InjectRepository(user_entity_1.User)),
    tslib_1.__param(107, typeorm_2.InjectRepository(user_organization_entity_1.UserOrganization)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _c : Object, typeof (_d = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _d : Object, typeof (_e = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _e : Object, typeof (_f = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _f : Object, typeof (_g = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _g : Object, typeof (_h = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _h : Object, typeof (_j = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _j : Object, typeof (_k = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _k : Object, typeof (_l = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _l : Object, typeof (_m = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _m : Object, typeof (_o = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _o : Object, typeof (_p = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _p : Object, typeof (_q = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _q : Object, typeof (_r = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _r : Object, typeof (_s = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _s : Object, typeof (_t = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _t : Object, typeof (_u = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _u : Object, typeof (_v = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _v : Object, typeof (_w = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _w : Object, typeof (_x = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _x : Object, typeof (_y = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _y : Object, typeof (_z = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _z : Object, typeof (_0 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _0 : Object, typeof (_1 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _1 : Object, typeof (_2 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _2 : Object, typeof (_3 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _3 : Object, typeof (_4 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _4 : Object, typeof (_5 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _5 : Object, typeof (_6 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _6 : Object, typeof (_7 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _7 : Object, typeof (_8 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _8 : Object, typeof (_9 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _9 : Object, typeof (_10 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _10 : Object, typeof (_11 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _11 : Object, typeof (_12 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _12 : Object, typeof (_13 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _13 : Object, typeof (_14 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _14 : Object, typeof (_15 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _15 : Object, typeof (_16 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _16 : Object, typeof (_17 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _17 : Object, typeof (_18 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _18 : Object, typeof (_19 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _19 : Object, typeof (_20 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _20 : Object, typeof (_21 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _21 : Object, typeof (_22 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _22 : Object, typeof (_23 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _23 : Object, typeof (_24 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _24 : Object, typeof (_25 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _25 : Object, typeof (_26 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _26 : Object, typeof (_27 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _27 : Object, typeof (_28 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _28 : Object, typeof (_29 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _29 : Object, typeof (_30 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _30 : Object, typeof (_31 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _31 : Object, typeof (_32 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _32 : Object, typeof (_33 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _33 : Object, typeof (_34 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _34 : Object, typeof (_35 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _35 : Object, typeof (_36 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _36 : Object, typeof (_37 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _37 : Object, typeof (_38 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _38 : Object, typeof (_39 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _39 : Object, typeof (_40 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _40 : Object, typeof (_41 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _41 : Object, typeof (_42 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _42 : Object, typeof (_43 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _43 : Object, typeof (_44 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _44 : Object, typeof (_45 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _45 : Object, typeof (_46 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _46 : Object, typeof (_47 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _47 : Object, typeof (_48 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _48 : Object, typeof (_49 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _49 : Object, typeof (_50 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _50 : Object, typeof (_51 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _51 : Object, typeof (_52 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _52 : Object, typeof (_53 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _53 : Object, typeof (_54 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _54 : Object, typeof (_55 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _55 : Object, typeof (_56 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _56 : Object, typeof (_57 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _57 : Object, typeof (_58 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _58 : Object, typeof (_59 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _59 : Object, typeof (_60 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _60 : Object, typeof (_61 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _61 : Object, typeof (_62 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _62 : Object, typeof (_63 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _63 : Object, typeof (_64 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _64 : Object, typeof (_65 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _65 : Object, typeof (_66 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _66 : Object, typeof (_67 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _67 : Object, typeof (_68 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _68 : Object, typeof (_69 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _69 : Object, typeof (_70 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _70 : Object, typeof (_71 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _71 : Object, typeof (_72 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _72 : Object, typeof (_73 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _73 : Object, typeof (_74 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _74 : Object, typeof (_75 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _75 : Object, typeof (_76 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _76 : Object, typeof (_77 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _77 : Object, typeof (_78 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _78 : Object, typeof (_79 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _79 : Object, typeof (_80 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _80 : Object, typeof (_81 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _81 : Object, typeof (_82 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _82 : Object, typeof (_83 = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _83 : Object])
], ImportAllService);
exports.ImportAllService = ImportAllService;


/***/ }),

/***/ "./src/app/export_import/import/index.ts":
/*!***********************************************!*\
  !*** ./src/app/export_import/import/index.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportAllService = exports.ImportAllModule = void 0;
var import_all_module_1 = __webpack_require__(/*! ./import-all.module */ "./src/app/export_import/import/import-all.module.ts");
Object.defineProperty(exports, "ImportAllModule", { enumerable: true, get: function () { return import_all_module_1.ImportAllModule; } });
var import_all_service_1 = __webpack_require__(/*! ./import-all.service */ "./src/app/export_import/import/import-all.service.ts");
Object.defineProperty(exports, "ImportAllService", { enumerable: true, get: function () { return import_all_service_1.ImportAllService; } });


/***/ }),

/***/ "./src/app/feature/commands/feature-toggle.update.command.ts":
/*!*******************************************************************!*\
  !*** ./src/app/feature/commands/feature-toggle.update.command.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureToggleUpdateCommand = void 0;
class FeatureToggleUpdateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.FeatureToggleUpdateCommand = FeatureToggleUpdateCommand;
FeatureToggleUpdateCommand.type = '[Feature] Toggle Update';


/***/ }),

/***/ "./src/app/feature/commands/handlers/feature-toggle.update.handler.ts":
/*!****************************************************************************!*\
  !*** ./src/app/feature/commands/handlers/feature-toggle.update.handler.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureToggleUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const feature_service_1 = __webpack_require__(/*! ../../feature.service */ "./src/app/feature/feature.service.ts");
const feature_toggle_update_command_1 = __webpack_require__(/*! ../feature-toggle.update.command */ "./src/app/feature/commands/feature-toggle.update.command.ts");
let FeatureToggleUpdateHandler = class FeatureToggleUpdateHandler {
    constructor(featureService) {
        this.featureService = featureService;
    }
    async execute(command) {
        const { input } = command;
        return this.featureService.updateFeatureOrganization(input);
    }
};
FeatureToggleUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(feature_toggle_update_command_1.FeatureToggleUpdateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof feature_service_1.FeatureService !== "undefined" && feature_service_1.FeatureService) === "function" ? _a : Object])
], FeatureToggleUpdateHandler);
exports.FeatureToggleUpdateHandler = FeatureToggleUpdateHandler;


/***/ }),

/***/ "./src/app/feature/commands/handlers/index.ts":
/*!****************************************************!*\
  !*** ./src/app/feature/commands/handlers/index.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const feature_toggle_update_handler_1 = __webpack_require__(/*! ./feature-toggle.update.handler */ "./src/app/feature/commands/handlers/feature-toggle.update.handler.ts");
exports.CommandHandlers = [feature_toggle_update_handler_1.FeatureToggleUpdateHandler];


/***/ }),

/***/ "./src/app/feature/default-features.ts":
/*!*********************************************!*\
  !*** ./src/app/feature/default-features.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_FEATURES = void 0;
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const features = environment_1.gauzyToggleFeatures;
exports.DEFAULT_FEATURES = [
    {
        name: 'Dashboard',
        code: 'FEATURE_DASHBOARD',
        description: 'Go to dashboard, Manage Employee Statistics, Time Tracking Dashboard',
        image: 'dashboard.png',
        link: 'dashboard/accounting',
        isEnabled: features.FEATURE_DASHBOARD,
        icon: 'home-outline',
        status: 'info'
    },
    {
        name: 'Time Tracking',
        code: 'FEATURE_TIME_TRACKING',
        description: 'Download Desktop App, Create First Timesheet',
        image: 'time-tracking-timesheet.png',
        link: 'employees/timesheets',
        isEnabled: features.FEATURE_TIME_TRACKING,
        icon: 'file-text-outline',
        status: 'primary'
    },
    {
        name: 'Estimate',
        code: 'FEATURE_ESTIMATE',
        description: 'Manage Estimate, Create First Estimate',
        image: 'estimate.png',
        link: 'accounting/invoices/estimates',
        isEnabled: features.FEATURE_ESTIMATE,
        icon: 'file-text-outline',
        status: 'success',
        children: [
            {
                name: 'Estimate Received',
                code: 'FEATURE_ESTIMATE_RECEIVED',
                description: 'Manage Received Estimate, Accept and Reject Estimate',
                image: 'estimate-received.png',
                link: 'accounting/invoices/estimates',
                isEnabled: features.FEATURE_ESTIMATE_RECEIVED,
                icon: 'file-text-outline',
                status: 'warning'
            }
        ]
    },
    {
        name: 'Invoice',
        code: 'FEATURE_INVOICE',
        description: 'Manage Invoice, Create First Invoice',
        image: 'invoice.png',
        link: 'accounting/invoices',
        isEnabled: features.FEATURE_INVOICE,
        icon: 'file-text-outline',
        status: 'warning',
        children: [
            {
                name: 'Invoice Received',
                code: 'FEATURE_INVOICE_RECEIVED',
                description: 'View Received Invoice',
                image: 'invoice-received.png',
                link: 'accounting/invoices/received-invoices',
                isEnabled: features.FEATURE_INVOICE_RECEIVED,
                icon: 'file-text-outline',
                status: 'info'
            }
        ]
    },
    {
        name: 'Income',
        code: 'FEATURE_INCOME',
        description: 'Create First Income',
        image: 'income.png',
        link: 'accounting/income',
        isEnabled: features.FEATURE_INCOME,
        icon: 'file-text-outline',
        status: 'primary'
    },
    {
        name: 'Expense',
        code: 'FEATURE_EXPENSE',
        description: 'Create First Expense',
        image: 'expense.png',
        link: 'accounting/expenses',
        isEnabled: features.FEATURE_EXPENSE,
        icon: 'file-text-outline',
        status: 'info',
        children: [
            {
                name: 'Employee Recurring Expense',
                code: 'FEATURE_EMPLOYEE_RECURRING_EXPENSE',
                description: 'Manage Employee Recurring Expense',
                image: 'recurring-expense.png',
                link: 'employees/recurring-expenses',
                isEnabled: features.FEATURE_EMPLOYEE_RECURRING_EXPENSE,
                icon: 'file-text-outline',
                status: 'primary'
            },
            {
                name: 'Organization Recurring Expenses',
                code: 'FEATURE_ORGANIZATION_RECURRING_EXPENSE',
                description: 'Manage Organization Recurring Expenses, Create First Recurring Expenses',
                image: 'organization-recurring-expense.png',
                link: 'organization/expense-recurring',
                isEnabled: features.FEATURE_ORGANIZATION_RECURRING_EXPENSE,
                icon: 'file-text-outline',
                status: 'warning'
            }
        ]
    },
    {
        name: 'Payment',
        code: 'FEATURE_PAYMENT',
        description: 'Manage Payment, Create First Payment',
        image: 'payment.png',
        link: 'accounting/payments',
        isEnabled: features.FEATURE_PAYMENT,
        icon: 'file-text-outline',
        status: 'success'
    },
    {
        name: 'Proposal',
        code: 'FEATURE_PROPOSAL',
        description: 'Manage Proposal, Register First Proposal',
        image: 'proposal.png',
        link: 'sales/proposals',
        isEnabled: features.FEATURE_PROPOSAL,
        icon: 'file-text-outline',
        status: 'warning',
        children: [
            {
                name: 'Proposal Template',
                code: 'FEATURE_PROPOSAL_TEMPLATE',
                description: 'Create First Proposal Template',
                image: 'proposal-template.png',
                link: 'jobs/proposal-template',
                isEnabled: features.FEATURE_PROPOSAL_TEMPLATE,
                icon: 'file-text-outline',
                status: 'primary'
            }
        ]
    },
    {
        name: 'Sales Pipeline',
        code: 'FEATURE_PIPELINE',
        description: 'Create Sales Pipeline',
        image: 'pipeline.png',
        link: 'sales/pipelines',
        isEnabled: features.FEATURE_PIPELINE,
        icon: 'file-text-outline',
        status: 'info',
        children: [
            {
                name: 'Sales Pipeline Deal',
                code: 'FEATURE_PIPELINE_DEAL',
                description: 'Create Sales Pipeline Deal',
                image: 'pipeline-deal.png',
                link: 'sales/pipelines',
                isEnabled: features.FEATURE_PIPELINE_DEAL,
                icon: 'file-text-outline',
                status: 'success'
            }
        ]
    },
    {
        name: 'Task Dashboard',
        code: 'FEATURE_DASHBOARD_TASK',
        description: 'Task Dashboard',
        image: 'task-dashboard.png',
        link: 'tasks/dashboard',
        isEnabled: features.FEATURE_DASHBOARD_TASK,
        icon: 'file-text-outline',
        status: 'primary',
        children: [
            {
                name: 'Team Task Dashboard',
                code: 'FEATURE_TEAM_TASK',
                description: 'Team Task Dashboard',
                image: 'team-task.png',
                link: 'tasks/team',
                isEnabled: features.FEATURE_TEAM_TASK,
                icon: 'file-text-outline',
                status: 'info'
            },
            {
                name: 'My Task Dashboard',
                code: 'FEATURE_MY_TASK',
                description: 'My Task Dashboard',
                image: 'team-task.png',
                link: 'tasks/me',
                isEnabled: features.FEATURE_MY_TASK,
                icon: 'file-text-outline',
                status: 'success'
            }
        ]
    },
    {
        name: 'Jobs',
        code: 'FEATURE_JOB',
        description: 'Job Search & Jobs Matching',
        image: 'job.png',
        link: 'jobs/search',
        isEnabled: features.FEATURE_JOB,
        icon: 'file-text-outline',
        status: 'warning'
    },
    {
        name: 'Employees',
        code: 'FEATURE_EMPLOYEES',
        description: 'Manage Employees, Add or Invite Employees',
        image: 'employee.png',
        link: 'employees',
        isEnabled: features.FEATURE_EMPLOYEES,
        icon: 'file-text-outline',
        status: 'success',
        children: [
            {
                name: 'Employee Level',
                code: 'FEATURE_EMPLOYEE_LEVEL',
                description: 'Manage Employee Level',
                image: 'employee-level.png',
                link: 'employees/employee-level',
                isEnabled: features.FEATURE_EMPLOYEE_LEVEL,
                icon: 'file-text-outline',
                status: 'warning'
            },
            {
                name: 'Employee Position',
                code: 'FEATURE_EMPLOYEE_POSITION',
                description: 'Manage Employee Position',
                image: 'position.png',
                link: 'employees/positions',
                isEnabled: features.FEATURE_EMPLOYEE_POSITION,
                icon: 'file-text-outline',
                status: 'success'
            },
            {
                name: 'Employee Time Off',
                code: 'FEATURE_EMPLOYEE_TIMEOFF',
                description: 'Manage Employee Time Off',
                image: 'timeoff.png',
                link: 'employees/time-off',
                isEnabled: features.FEATURE_EMPLOYEE_TIMEOFF,
                icon: 'file-text-outline',
                status: 'info'
            },
            {
                name: 'Employee Approval',
                code: 'FEATURE_EMPLOYEE_APPROVAL',
                description: 'Employee Approval Request',
                image: 'approval.png',
                link: 'employees/approvals',
                isEnabled: features.FEATURE_EMPLOYEE_APPROVAL,
                icon: 'file-text-outline',
                status: 'success'
            },
            {
                name: 'Employee Approval Policy',
                code: 'FEATURE_EMPLOYEE_APPROVAL_POLICY',
                description: 'Manage Employee Approval Request Policy',
                image: 'approval-policy.png',
                link: 'organization/approval-policy',
                isEnabled: features.FEATURE_EMPLOYEE_APPROVAL_POLICY,
                icon: 'file-text-outline',
                status: 'info'
            }
        ]
    },
    {
        name: 'Time Activity',
        code: 'FEATURE_EMPLOYEE_TIME_ACTIVITY',
        description: 'Manage Time Activity, Screenshots, App, Visited Sites, Activities',
        image: 'screenshot.png',
        link: 'employees/activity',
        isEnabled: features.FEATURE_EMPLOYEE_TIME_ACTIVITY,
        icon: 'file-text-outline',
        status: 'primary'
    },
    {
        name: 'Timesheet',
        code: 'FEATURE_EMPLOYEE_TIMESHEETS',
        description: 'Manage Employee Timesheet Daily, Weekly, Calendar, Create First Timesheet',
        image: 'timesheet.png',
        link: 'employees/timesheets/daily',
        isEnabled: features.FEATURE_EMPLOYEE_TIMESHEETS,
        icon: 'file-text-outline',
        status: 'info'
    },
    {
        name: 'Appointment & Schedule',
        code: 'FEATURE_EMPLOYEE_APPOINTMENT',
        description: 'Employee Appointment, Schedules & Book Public Appointment',
        image: 'appointment.png',
        link: 'employees/appointments',
        isEnabled: features.FEATURE_EMPLOYEE_APPOINTMENT,
        icon: 'file-text-outline',
        status: 'warning'
    },
    {
        name: 'Candidate',
        code: 'FEATURE_EMPLOYEE_CANDIDATE',
        description: 'Manage Candidates, Interviews & Invites',
        image: 'candidate.png',
        link: 'employees/candidates',
        isEnabled: features.FEATURE_EMPLOYEE_CANDIDATE,
        icon: 'file-text-outline',
        status: 'success',
        children: [
            {
                name: 'Manage Interview',
                code: 'FEATURE_MANAGE_INTERVIEW',
                description: 'Manage Candidate Interviews',
                image: 'interview.png',
                link: 'employees/candidates/interviews/calendar',
                isEnabled: features.FEATURE_MANAGE_INTERVIEW,
                icon: 'file-text-outline',
                status: 'warning'
            },
            {
                name: 'Manage Invite',
                code: 'FEATURE_MANAGE_INVITE',
                description: 'Manage Invites, Create First Candidate Invites',
                image: 'invite.png',
                link: 'employees/candidates/invites',
                isEnabled: features.FEATURE_MANAGE_INVITE,
                icon: 'file-text-outline',
                status: 'primary'
            }
        ]
    },
    {
        name: 'Manage Organization',
        code: 'FEATURE_ORGANIZATION',
        description: 'Manage Organization Details, Location and Settings',
        image: 'organization-detail.png',
        link: 'organizations',
        isEnabled: features.FEATURE_ORGANIZATION,
        icon: 'file-text-outline',
        status: 'info',
        children: [
            {
                name: 'Help Center',
                code: 'FEATURE_ORGANIZATION_HELP_CENTER',
                description: 'Find out more about how to use Gauzy',
                image: 'help.png',
                link: 'help',
                isEnabled: features.FEATURE_ORGANIZATION_HELP_CENTER,
                icon: 'file-text-outline',
                status: 'primary'
            },
            {
                name: 'Organization Tag',
                code: 'FEATURE_ORGANIZATION_TAG',
                description: 'Manage Organization Tag, Create First Tag',
                image: 'tag.png',
                link: 'organization/tags',
                isEnabled: features.FEATURE_ORGANIZATION_TAG,
                icon: 'file-text-outline',
                status: 'primary'
            },
            {
                name: 'Organization Equipment',
                code: 'FEATURE_ORGANIZATION_EQUIPMENT',
                description: 'Manage Organization Equipment, Create First Equipment',
                image: 'equipment.png',
                link: 'organization/equipment',
                isEnabled: features.FEATURE_ORGANIZATION_EQUIPMENT,
                icon: 'file-text-outline',
                status: 'warning'
            },
            {
                name: 'Organization Vendor',
                code: 'FEATURE_ORGANIZATION_VENDOR',
                description: 'Manage Organization Vendor, Create First Vendor',
                image: 'vendor.png',
                link: 'organization/vendors',
                isEnabled: features.FEATURE_ORGANIZATION_VENDOR,
                icon: 'file-text-outline',
                status: 'primary'
            },
            {
                name: 'Organization Department',
                code: 'FEATURE_ORGANIZATION_DEPARTMENT',
                description: 'Manage Organization Department, Create First Department',
                image: 'department.png',
                link: 'organization/departments',
                isEnabled: features.FEATURE_ORGANIZATION_DEPARTMENT,
                icon: 'file-text-outline',
                status: 'success'
            },
            {
                name: 'Organization Employment Type',
                code: 'FEATURE_ORGANIZATION_EMPLOYMENT_TYPE',
                description: 'Manage Organization Employment Type',
                image: 'employment-type.png',
                link: 'organization/employment-types',
                isEnabled: features.FEATURE_ORGANIZATION_EMPLOYMENT_TYPE,
                icon: 'file-text-outline',
                status: 'success'
            }
        ]
    },
    {
        name: 'Product Inventory',
        code: 'FEATURE_ORGANIZATION_INVENTORY',
        description: 'Manage Product Inventory, Create First Product',
        image: 'inventory.png',
        link: 'organization/inventory/all',
        isEnabled: features.FEATURE_ORGANIZATION_INVENTORY,
        icon: 'file-text-outline',
        status: 'primary'
    },
    {
        name: 'Project',
        code: 'FEATURE_ORGANIZATION_PROJECT',
        description: 'Manage Project, Create First Project',
        image: 'project.png',
        link: 'organization/projects',
        isEnabled: features.FEATURE_ORGANIZATION_PROJECT,
        icon: 'file-text-outline',
        status: 'success'
    },
    {
        name: 'Organization Team',
        code: 'FEATURE_ORGANIZATION_TEAM',
        description: 'Manage Organization Team, Create First Team',
        image: 'team.png',
        link: 'organization/teams',
        isEnabled: features.FEATURE_ORGANIZATION_TEAM,
        icon: 'file-text-outline',
        status: 'warning'
    },
    {
        name: 'Organization Document',
        code: 'FEATURE_ORGANIZATION_DOCUMENT',
        description: 'Manage Organization Document, Create First Document',
        image: 'document.png',
        link: 'organization/documents',
        isEnabled: features.FEATURE_ORGANIZATION_DOCUMENT,
        icon: 'file-text-outline',
        status: 'primary'
    },
    {
        name: 'Lead, Customer & Client',
        code: 'FEATURE_CONTACT',
        description: 'Manage Leads, Customers and Clients, Create First Customer/Clients',
        image: 'contact.png',
        link: 'contacts/customers',
        isEnabled: features.FEATURE_CONTACT,
        icon: 'file-text-outline',
        status: 'info'
    },
    {
        name: 'Goal and Objective',
        code: 'FEATURE_GOAL',
        description: 'Manage Goals and Objectives',
        image: 'goal.png',
        link: 'goals',
        isEnabled: features.FEATURE_GOAL,
        icon: 'file-text-outline',
        status: 'warning',
        children: [
            {
                name: 'Goal Time Frame & KPI',
                code: 'FEATURE_GOAL_SETTING',
                description: 'Manage Goal Time Framework & KPIs',
                image: 'goal-setting.png',
                link: 'goals/settings',
                isEnabled: features.FEATURE_GOAL_SETTING,
                icon: 'file-text-outline',
                status: 'success'
            }
        ]
    },
    {
        name: 'All Report',
        code: 'FEATURE_REPORT',
        description: 'Manage Expense, Weekly, Time & Activity and etc reports',
        image: 'all-report.png',
        link: 'reports/all',
        isEnabled: features.FEATURE_REPORT,
        icon: 'file-text-outline',
        status: 'success'
    },
    {
        name: 'Users',
        code: 'FEATURE_USER',
        description: 'Manage Tenant Users',
        image: 'user.png',
        link: 'users',
        isEnabled: features.FEATURE_USER,
        icon: 'file-text-outline',
        status: 'primary'
    },
    {
        name: 'Organizations',
        code: 'FEATURE_ORGANIZATIONS',
        description: 'Manage Tenant Organizations',
        image: 'organization.png',
        link: 'organizations',
        isEnabled: features.FEATURE_ORGANIZATIONS,
        icon: 'file-text-outline',
        status: 'success'
    },
    {
        name: 'Apps & Integrations',
        code: 'FEATURE_APP_INTEGRATION',
        description: 'Manage Available Apps & Integrations Like Upwork & Hubstaff',
        image: 'app-integration.png',
        link: 'integrations/list',
        isEnabled: features.FEATURE_APP_INTEGRATION,
        icon: 'file-text-outline',
        status: 'warning'
    },
    {
        name: 'Email History',
        code: 'FEATURE_EMAIL_HISTORY',
        description: 'Manage Email History',
        image: 'email-history.png',
        link: 'settings/email-history',
        isEnabled: features.FEATURE_EMAIL_HISTORY,
        icon: 'file-text-outline',
        status: 'info',
        children: [
            {
                name: 'Custom Email Template',
                code: 'FEATURE_EMAIL_TEMPLATE',
                description: 'Customize Email Template',
                image: 'email-template.png',
                link: 'settings/email-templates',
                isEnabled: features.FEATURE_EMAIL_TEMPLATE,
                icon: 'file-text-outline',
                status: 'info'
            }
        ]
    },
    {
        name: 'Setting',
        code: 'FEATURE_SETTING',
        description: 'Manage Setting',
        image: 'email-history.png',
        link: 'settings',
        isEnabled: features.FEATURE_SETTING,
        icon: 'file-text-outline',
        status: 'primary',
        children: [
            {
                name: 'File Storage',
                code: 'FEATURE_FILE_STORAGE',
                description: 'Manage File Storage Provider',
                image: 'file-storage.png',
                link: 'settings/file-storage',
                isEnabled: features.FEATURE_FILE_STORAGE,
                icon: 'file-text-outline',
                status: 'info'
            },
            {
                name: 'SMS Gateway',
                code: 'FEATURE_SMS_GATEWAY',
                description: 'Manage SMS Gateway',
                image: 'sms-gateway.png',
                link: 'tasks/me',
                isEnabled: features.FEATURE_SMS_GATEWAY,
                icon: 'file-text-outline',
                status: 'primary'
            }
        ]
    },
    {
        name: 'Entity Import & Export',
        code: 'FEATURE_IMPORT_EXPORT',
        description: 'Manage Entity Import and Export',
        image: 'import.png',
        link: 'settings/import-export',
        isEnabled: features.FEATURE_IMPORT_EXPORT,
        icon: 'file-text-outline',
        status: 'warning'
    },
    {
        name: 'Custom SMTP',
        code: 'FEATURE_SMTP',
        description: 'Manage Tenant & Organization Custom SMTP',
        image: 'smtp.png',
        link: 'settings/custom-smtp',
        isEnabled: features.FEATURE_SMTP,
        icon: 'file-text-outline',
        status: 'success'
    },
    {
        name: 'Roles & Permissions',
        code: 'FEATURE_ROLES_PERMISSION',
        description: 'Manage Roles & Permissions',
        image: 'role-permission.png',
        link: 'settings/roles',
        isEnabled: features.FEATURE_ROLES_PERMISSION,
        icon: 'home-outline',
        status: 'primary'
    }
];


/***/ }),

/***/ "./src/app/feature/feature-toggle.controller.ts":
/*!******************************************************!*\
  !*** ./src/app/feature/feature-toggle.controller.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeaturesToggleController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const feature_entity_1 = __webpack_require__(/*! ./feature.entity */ "./src/app/feature/feature.entity.ts");
const feature_service_1 = __webpack_require__(/*! ./feature.service */ "./src/app/feature/feature.service.ts");
const unleash = __webpack_require__(/*! unleash-client */ "unleash-client");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const feature_toggle_update_command_1 = __webpack_require__(/*! ./commands/feature-toggle.update.command */ "./src/app/feature/commands/feature-toggle.update.command.ts");
let FeaturesToggleController = class FeaturesToggleController {
    constructor(featureService, commandBus) {
        this.featureService = featureService;
        this.commandBus = commandBus;
    }
    async get() {
        let featureToggles = unleash.getFeatureToggleDefinitions();
        const featureEnums = Object.values(models_1.FeatureEnum);
        if (featureToggles) {
            featureToggles = featureToggles.filter((toggle) => featureEnums.includes(toggle.name));
        }
        return featureToggles;
    }
    async getParentFeatureList(data) {
        return this.featureService.getParentFeatureList(data);
    }
    async getAllFeatureList() {
        return this.featureService.getAllFeatureList();
    }
    async getFeaturesOrganization(data) {
        return this.featureService.getFeatureOrganizations(data);
    }
    async enabledDisabledFeature(input) {
        return this.commandBus.execute(new feature_toggle_update_command_1.FeatureToggleUpdateCommand(input));
    }
};
tslib_1.__decorate([
    common_1.Get(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", Promise)
], FeaturesToggleController.prototype, "get", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all parent features.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found feature',
        type: feature_entity_1.Feature
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Get('parent'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Promise)
], FeaturesToggleController.prototype, "getParentFeatureList", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all features.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found feature',
        type: feature_entity_1.Feature
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Get('all'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", Promise)
], FeaturesToggleController.prototype, "getAllFeatureList", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all feature organizations.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found feature',
        type: feature_entity_1.Feature
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Get('/organizations'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Promise)
], FeaturesToggleController.prototype, "getFeaturesOrganization", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Enabled or disabled features' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created/updated.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.IFeatureOrganizationUpdateInput !== "undefined" && models_1.IFeatureOrganizationUpdateInput) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], FeaturesToggleController.prototype, "enabledDisabledFeature", null);
FeaturesToggleController = tslib_1.__decorate([
    swagger_1.ApiTags('Feature'),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof feature_service_1.FeatureService !== "undefined" && feature_service_1.FeatureService) === "function" ? _b : Object, typeof (_c = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _c : Object])
], FeaturesToggleController);
exports.FeaturesToggleController = FeaturesToggleController;


/***/ }),

/***/ "./src/app/feature/feature.entity.ts":
/*!*******************************************!*\
  !*** ./src/app/feature/feature.entity.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Feature_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Feature = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const _ = __webpack_require__(/*! underscore */ "underscore");
const base_1 = __webpack_require__(/*! ../core/entities/base */ "./src/app/core/entities/base.ts");
const feature_organization_entity_1 = __webpack_require__(/*! ./feature_organization.entity */ "./src/app/feature/feature_organization.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const file_storage_1 = __webpack_require__(/*! ../core/file-storage */ "./src/app/core/file-storage/index.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
let Feature = Feature_1 = class Feature extends base_1.Base {
    afterLoadStatus() {
        if (!this.status) {
            this.status = _.shuffle(Object.values(models_1.FeatureStatusEnum))[0];
        }
    }
    afterLoadEnabled() {
        if (environment_1.gauzyToggleFeatures.hasOwnProperty(this.code)) {
            const feature = environment_1.gauzyToggleFeatures[this.code];
            this.isEnabled = feature;
        }
        else {
            this.isEnabled = true;
        }
    }
    afterLoad() {
        if (this.image) {
            this.imageUrl = new file_storage_1.FileStorage().getProvider().url(this.image);
        }
    }
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: feature_organization_entity_1.FeatureOrganization }),
    typeorm_1.OneToMany(() => feature_organization_entity_1.FeatureOrganization, (featureOrganization) => featureOrganization.feature, {
        cascade: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Feature.prototype, "featureOrganizations", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Feature_1 }),
    typeorm_1.ManyToOne((type) => Feature_1, (feature) => feature.children),
    tslib_1.__metadata("design:type", Feature)
], Feature.prototype, "parent", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Feature.prototype, "parentId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Feature_1 }),
    typeorm_1.OneToMany((type) => Feature_1, (feature) => feature.parent, {
        cascade: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn({ name: 'parentId' }),
    tslib_1.__metadata("design:type", Array)
], Feature.prototype, "children", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Feature.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Feature.prototype, "code", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean, default: false }),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], Feature.prototype, "isPaid", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Feature.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Feature.prototype, "image", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Feature.prototype, "link", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Feature.prototype, "status", void 0);
tslib_1.__decorate([
    typeorm_1.AfterLoad(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], Feature.prototype, "afterLoadStatus", null);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Feature.prototype, "icon", void 0);
tslib_1.__decorate([
    typeorm_1.AfterLoad(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], Feature.prototype, "afterLoadEnabled", null);
tslib_1.__decorate([
    typeorm_1.AfterLoad(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], Feature.prototype, "afterLoad", null);
Feature = Feature_1 = tslib_1.__decorate([
    typeorm_1.Entity('feature')
], Feature);
exports.Feature = Feature;


/***/ }),

/***/ "./src/app/feature/feature.module.ts":
/*!*******************************************!*\
  !*** ./src/app/feature/feature.module.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const feature_entity_1 = __webpack_require__(/*! ./feature.entity */ "./src/app/feature/feature.entity.ts");
const feature_organization_entity_1 = __webpack_require__(/*! ./feature_organization.entity */ "./src/app/feature/feature_organization.entity.ts");
const feature_toggle_controller_1 = __webpack_require__(/*! ./feature-toggle.controller */ "./src/app/feature/feature-toggle.controller.ts");
const feature_service_1 = __webpack_require__(/*! ./feature.service */ "./src/app/feature/feature.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/feature/commands/handlers/index.ts");
let FeatureModule = class FeatureModule {
};
FeatureModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([feature_entity_1.Feature, feature_organization_entity_1.FeatureOrganization]),
            tenant_module_1.TenantModule,
            cqrs_1.CqrsModule
        ],
        controllers: [feature_toggle_controller_1.FeaturesToggleController],
        providers: [feature_service_1.FeatureService, ...handlers_1.CommandHandlers]
    })
], FeatureModule);
exports.FeatureModule = FeatureModule;


/***/ }),

/***/ "./src/app/feature/feature.seed.ts":
/*!*****************************************!*\
  !*** ./src/app/feature/feature.seed.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomFeatureToggle = exports.createDefaultFeatureToggle = void 0;
const path = __webpack_require__(/*! path */ "path");
const fs_1 = __webpack_require__(/*! fs */ "fs");
const chalk_1 = __webpack_require__(/*! chalk */ "chalk");
const rimraf = __webpack_require__(/*! rimraf */ "rimraf");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const default_features_1 = __webpack_require__(/*! ./default-features */ "./src/app/feature/default-features.ts");
const feature_entity_1 = __webpack_require__(/*! ./feature.entity */ "./src/app/feature/feature.entity.ts");
const feature_organization_entity_1 = __webpack_require__(/*! ./feature_organization.entity */ "./src/app/feature/feature_organization.entity.ts");
exports.createDefaultFeatureToggle = async (connection, tenant) => {
    await cleanFeature(connection);
    default_features_1.DEFAULT_FEATURES.forEach(async (item) => {
        const feature = createFeature(item, tenant);
        const parent = await connection.manager.save(feature);
        const { children = [] } = item;
        if (children.length > 0) {
            const featureChildren = [];
            children.forEach((child) => {
                const childFeature = createFeature(child, tenant);
                childFeature.parent = parent;
                featureChildren.push(childFeature);
            });
            await connection.manager.save(featureChildren);
        }
    });
    return await connection.getRepository(feature_entity_1.Feature).find();
};
exports.createRandomFeatureToggle = async (connection, tenants) => {
    const features = await connection.getRepository(feature_entity_1.Feature).find();
    const featureOrganizations = [];
    features.forEach(async (feature) => {
        tenants.forEach((tenant) => {
            const { isEnabled } = feature;
            const featureOrganization = new feature_organization_entity_1.FeatureOrganization({
                isEnabled,
                tenant,
                feature
            });
            featureOrganizations.push(featureOrganization);
        });
    });
    await connection.manager.save(featureOrganizations);
    return features;
};
function createFeature(item, tenant) {
    const { name, code, description, image, link, isEnabled, status, icon } = item;
    const feature = new feature_entity_1.Feature({
        name,
        code,
        description,
        image: copyImage(image),
        link,
        status,
        icon,
        featureOrganizations: [
            new feature_organization_entity_1.FeatureOrganization({
                isEnabled,
                tenant
            })
        ]
    });
    return feature;
}
async function cleanFeature(connection) {
    if (environment_1.environment.database.type === 'sqlite') {
        await connection.query('DELETE FROM feature');
        await connection.query('DELETE FROM feature_organization');
    }
    else {
        await connection.query('TRUNCATE TABLE feature RESTART IDENTITY CASCADE');
        await connection.query('TRUNCATE TABLE feature_organization RESTART IDENTITY CASCADE');
    }
    console.log(chalk_1.default.green(`CLEANING UP FEATURE IMAGES...`));
    const destDir = 'features';
    await new Promise((resolve, reject) => {
        const dir = environment_1.environment.isElectron
            ? path.resolve(environment_1.environment.gauzyUserPath, ...['public', destDir])
            : path.resolve('.', ...['apps', 'api', 'public', destDir]);
        rimraf(dir, () => {
            console.log(chalk_1.default.green(`CLEANED UP FEATURE IMAGES`));
            resolve(null);
        }, (error) => {
            reject(null);
        });
    });
}
function copyImage(fileName) {
    try {
        const destDir = 'features';
        const dir = environment_1.environment.isElectron
            ? path.resolve(environment_1.environment.gauzyUserPath, ...['src', 'assets', 'seed', destDir])
            : path.resolve('.', ...['apps', 'api', 'src', 'assets', 'seed', destDir]);
        const baseDir = environment_1.environment.isElectron
            ? path.resolve(environment_1.environment.gauzyUserPath, ...['public'])
            : path.resolve('.', ...['apps', 'api', 'public']);
        fs_1.mkdirSync(path.join(baseDir, destDir), { recursive: true });
        const destFilePath = path.join(destDir, fileName);
        fs_1.copyFileSync(path.join(dir, fileName), path.join(baseDir, destFilePath));
        return destFilePath;
    }
    catch (err) {
        console.log(err);
    }
}


/***/ }),

/***/ "./src/app/feature/feature.service.ts":
/*!********************************************!*\
  !*** ./src/app/feature/feature.service.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const feature_entity_1 = __webpack_require__(/*! ./feature.entity */ "./src/app/feature/feature.entity.ts");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const feature_organization_entity_1 = __webpack_require__(/*! ./feature_organization.entity */ "./src/app/feature/feature_organization.entity.ts");
let FeatureService = class FeatureService extends crud_service_1.CrudService {
    constructor(featureRepository, featureOrganizationRepository) {
        super(featureRepository);
        this.featureRepository = featureRepository;
        this.featureOrganizationRepository = featureOrganizationRepository;
    }
    async getParentFeatureList(request) {
        const { relations = [] } = request;
        return await this.findAll({
            where: {
                parentId: typeorm_2.IsNull()
            },
            relations,
            order: {
                createdAt: 'ASC'
            }
        });
    }
    async getAllFeatureList() {
        return await this.findAll({
            order: {
                createdAt: 'ASC'
            }
        });
    }
    async getFeatureOrganizations(data) {
        const { relations = [], findInput = {} } = data;
        return await this.featureOrganizationRepository.find({
            where: findInput,
            relations
        });
    }
    async updateFeatureOrganization(input) {
        const { featureId, tenantId, organizationId } = input;
        const where = {
            featureId,
            tenantId
        };
        if (organizationId) {
            where['organizationId'] = organizationId;
        }
        const featureOrganizations = await this.featureOrganizationRepository.find({
            where
        });
        if (!featureOrganizations.length) {
            const featureOrganization = new feature_organization_entity_1.FeatureOrganization(input);
            await this.featureOrganizationRepository.save(featureOrganization);
        }
        else {
            featureOrganizations.map((item) => {
                return new feature_organization_entity_1.FeatureOrganization(Object.assign(item, input));
            });
            await this.featureOrganizationRepository.save(featureOrganizations);
        }
        return featureOrganizations;
    }
    async updateTenantFeatureOrganizations(tenants) {
        if (!tenants.length) {
            return;
        }
        const features = await this.featureRepository.find();
        const featureOrganizations = [];
        features.forEach(async (feature) => {
            tenants.forEach((tenant) => {
                const { isEnabled } = feature;
                const featureOrganization = new feature_organization_entity_1.FeatureOrganization({
                    isEnabled,
                    tenant,
                    feature
                });
                featureOrganizations.push(featureOrganization);
            });
        });
        return await this.featureOrganizationRepository.save(featureOrganizations);
    }
};
FeatureService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(feature_entity_1.Feature)),
    tslib_1.__param(1, typeorm_1.InjectRepository(feature_organization_entity_1.FeatureOrganization)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], FeatureService);
exports.FeatureService = FeatureService;


/***/ }),

/***/ "./src/app/feature/feature_organization.entity.ts":
/*!********************************************************!*\
  !*** ./src/app/feature/feature_organization.entity.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureOrganization = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const feature_entity_1 = __webpack_require__(/*! ./feature.entity */ "./src/app/feature/feature.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let FeatureOrganization = class FeatureOrganization extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: feature_entity_1.Feature }),
    typeorm_1.ManyToOne(() => feature_entity_1.Feature),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IFeature !== "undefined" && models_1.IFeature) === "function" ? _a : Object)
], FeatureOrganization.prototype, "feature", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((feature) => feature.feature),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], FeatureOrganization.prototype, "featureId", void 0);
tslib_1.__decorate([
    typeorm_1.Column({ default: true }),
    tslib_1.__metadata("design:type", Boolean)
], FeatureOrganization.prototype, "isEnabled", void 0);
FeatureOrganization = tslib_1.__decorate([
    typeorm_1.Entity('feature_organization')
], FeatureOrganization);
exports.FeatureOrganization = FeatureOrganization;


/***/ }),

/***/ "./src/app/goal-general-setting/goal-general-setting.controller.ts":
/*!*************************************************************************!*\
  !*** ./src/app/goal-general-setting/goal-general-setting.controller.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalGeneralSettingController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const goal_general_setting_entity_1 = __webpack_require__(/*! ./goal-general-setting.entity */ "./src/app/goal-general-setting/goal-general-setting.entity.ts");
const goal_general_setting_service_1 = __webpack_require__(/*! ./goal-general-setting.service */ "./src/app/goal-general-setting/goal-general-setting.service.ts");
const goal_entity_1 = __webpack_require__(/*! ../goal/goal.entity */ "./src/app/goal/goal.entity.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let GoalGeneralSettingController = class GoalGeneralSettingController extends core_1.CrudController {
    constructor(goalGeneralSettingService) {
        super(goalGeneralSettingService);
        this.goalGeneralSettingService = goalGeneralSettingService;
    }
    async createGoal(entity) {
        return this.goalGeneralSettingService.create(entity);
    }
    async getAll(data) {
        const { findInput = null } = JSON.parse(data);
        return this.goalGeneralSettingService.findAll({
            where: Object.assign({}, findInput)
        });
    }
    async update(id, entity) {
        try {
            return await this.goalGeneralSettingService.create(Object.assign({ id }, entity));
        }
        catch (error) {
            console.log(error);
            return;
        }
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create Goal General Setting' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Goal general setting Created successfully',
        type: goal_general_setting_entity_1.GoalGeneralSetting
    }),
    common_1.Post('/create'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof goal_entity_1.Goal !== "undefined" && goal_entity_1.Goal) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], GoalGeneralSettingController.prototype, "createGoal", null);
tslib_1.__decorate([
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('all'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", Promise)
], GoalGeneralSettingController.prototype, "getAll", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_c = typeof goal_general_setting_entity_1.GoalGeneralSetting !== "undefined" && goal_general_setting_entity_1.GoalGeneralSetting) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], GoalGeneralSettingController.prototype, "update", null);
GoalGeneralSettingController = tslib_1.__decorate([
    swagger_1.ApiTags('GoalGeneralSetting'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof goal_general_setting_service_1.GoalGeneralSettingService !== "undefined" && goal_general_setting_service_1.GoalGeneralSettingService) === "function" ? _e : Object])
], GoalGeneralSettingController);
exports.GoalGeneralSettingController = GoalGeneralSettingController;


/***/ }),

/***/ "./src/app/goal-general-setting/goal-general-setting.entity.ts":
/*!*********************************************************************!*\
  !*** ./src/app/goal-general-setting/goal-general-setting.entity.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalGeneralSetting = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let GoalGeneralSetting = class GoalGeneralSetting extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], GoalGeneralSetting.prototype, "maxObjectives", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], GoalGeneralSetting.prototype, "maxKeyResults", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Boolean)
], GoalGeneralSetting.prototype, "employeeCanCreateObjective", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.GoalOwnershipEnum }),
    class_validator_1.IsEnum(models_1.GoalOwnershipEnum),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], GoalGeneralSetting.prototype, "canOwnObjectives", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.GoalOwnershipEnum }),
    class_validator_1.IsEnum(models_1.GoalOwnershipEnum),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], GoalGeneralSetting.prototype, "canOwnKeyResult", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Boolean)
], GoalGeneralSetting.prototype, "krTypeKPI", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Boolean)
], GoalGeneralSetting.prototype, "krTypeTask", void 0);
GoalGeneralSetting = tslib_1.__decorate([
    typeorm_1.Entity('goal_general_setting')
], GoalGeneralSetting);
exports.GoalGeneralSetting = GoalGeneralSetting;


/***/ }),

/***/ "./src/app/goal-general-setting/goal-general-setting.module.ts":
/*!*********************************************************************!*\
  !*** ./src/app/goal-general-setting/goal-general-setting.module.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalGeneralSettingModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const goal_general_setting_controller_1 = __webpack_require__(/*! ./goal-general-setting.controller */ "./src/app/goal-general-setting/goal-general-setting.controller.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const goal_general_setting_entity_1 = __webpack_require__(/*! ./goal-general-setting.entity */ "./src/app/goal-general-setting/goal-general-setting.entity.ts");
const goal_general_setting_service_1 = __webpack_require__(/*! ./goal-general-setting.service */ "./src/app/goal-general-setting/goal-general-setting.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let GoalGeneralSettingModule = class GoalGeneralSettingModule {
};
GoalGeneralSettingModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([goal_general_setting_entity_1.GoalGeneralSetting]), tenant_module_1.TenantModule],
        controllers: [goal_general_setting_controller_1.GoalGeneralSettingController],
        providers: [goal_general_setting_service_1.GoalGeneralSettingService],
        exports: [goal_general_setting_service_1.GoalGeneralSettingService]
    })
], GoalGeneralSettingModule);
exports.GoalGeneralSettingModule = GoalGeneralSettingModule;


/***/ }),

/***/ "./src/app/goal-general-setting/goal-general-setting.seed.ts":
/*!*******************************************************************!*\
  !*** ./src/app/goal-general-setting/goal-general-setting.seed.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultGeneralGoalSetting = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const goal_general_setting_entity_1 = __webpack_require__(/*! ./goal-general-setting.entity */ "./src/app/goal-general-setting/goal-general-setting.entity.ts");
exports.createDefaultGeneralGoalSetting = async (connection, tenant, organizations) => {
    const defaultGeneralGoalSetting = [];
    organizations.forEach((organization) => {
        defaultGeneralGoalSetting.push({
            maxObjectives: 5,
            maxKeyResults: 5,
            employeeCanCreateObjective: true,
            canOwnObjectives: models_1.GoalOwnershipEnum.EMPLOYEES_AND_TEAMS,
            canOwnKeyResult: models_1.GoalOwnershipEnum.EMPLOYEES_AND_TEAMS,
            krTypeKPI: true,
            krTypeTask: true,
            organization: organization,
            tenant: tenant
        });
    });
    await insertDefaultGeneralGoalSetting(connection, defaultGeneralGoalSetting);
    return defaultGeneralGoalSetting;
};
const insertDefaultGeneralGoalSetting = async (connection, defaultGeneralGoalSetting) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(goal_general_setting_entity_1.GoalGeneralSetting)
        .values(defaultGeneralGoalSetting)
        .execute();
};


/***/ }),

/***/ "./src/app/goal-general-setting/goal-general-setting.service.ts":
/*!**********************************************************************!*\
  !*** ./src/app/goal-general-setting/goal-general-setting.service.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalGeneralSettingService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const goal_general_setting_entity_1 = __webpack_require__(/*! ./goal-general-setting.entity */ "./src/app/goal-general-setting/goal-general-setting.entity.ts");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
let GoalGeneralSettingService = class GoalGeneralSettingService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(goalGeneralSettingRepository) {
        super(goalGeneralSettingRepository);
        this.goalGeneralSettingRepository = goalGeneralSettingRepository;
    }
};
GoalGeneralSettingService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(goal_general_setting_entity_1.GoalGeneralSetting)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], GoalGeneralSettingService);
exports.GoalGeneralSettingService = GoalGeneralSettingService;


/***/ }),

/***/ "./src/app/goal-kpi-template/default-goal-kpi-templates.ts":
/*!*****************************************************************!*\
  !*** ./src/app/goal-kpi-template/default-goal-kpi-templates.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_GOAL_KPI_TEMPLATES = void 0;
exports.DEFAULT_GOAL_KPI_TEMPLATES = [
    {
        name: 'Average response time',
        description: '',
        type: 'Numerical',
        unit: 'ms',
        operator: '<=',
        currentValue: 1000,
        targetValue: 500
    },
    {
        name: '# of Priority bugs in production',
        description: '',
        type: 'Numerical',
        unit: 'bugs',
        operator: '<=',
        currentValue: 15,
        targetValue: 2
    }
];


/***/ }),

/***/ "./src/app/goal-kpi-template/goal-kpi-template.controller.ts":
/*!*******************************************************************!*\
  !*** ./src/app/goal-kpi-template/goal-kpi-template.controller.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalKpiTemplateController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const goal_kpi_template_entity_1 = __webpack_require__(/*! ./goal-kpi-template.entity */ "./src/app/goal-kpi-template/goal-kpi-template.entity.ts");
const goal_kpi_template_service_1 = __webpack_require__(/*! ./goal-kpi-template.service */ "./src/app/goal-kpi-template/goal-kpi-template.service.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let GoalKpiTemplateController = class GoalKpiTemplateController extends core_1.CrudController {
    constructor(goalKpiTemplateService) {
        super(goalKpiTemplateService);
        this.goalKpiTemplateService = goalKpiTemplateService;
    }
    async createGoalKPITemplate(entity) {
        return this.goalKpiTemplateService.create(entity);
    }
    async getAll() {
        return this.goalKpiTemplateService.findAll();
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create Goal Template' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Goal Template Created successfully',
        type: goal_kpi_template_entity_1.GoalKPITemplate
    }),
    common_1.Post('/create'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof goal_kpi_template_entity_1.GoalKPITemplate !== "undefined" && goal_kpi_template_entity_1.GoalKPITemplate) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], GoalKpiTemplateController.prototype, "createGoalKPITemplate", null);
tslib_1.__decorate([
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('all'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", Promise)
], GoalKpiTemplateController.prototype, "getAll", null);
GoalKpiTemplateController = tslib_1.__decorate([
    swagger_1.ApiTags('GoalKpiTemplate'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof goal_kpi_template_service_1.GoalKpiTemplateService !== "undefined" && goal_kpi_template_service_1.GoalKpiTemplateService) === "function" ? _c : Object])
], GoalKpiTemplateController);
exports.GoalKpiTemplateController = GoalKpiTemplateController;


/***/ }),

/***/ "./src/app/goal-kpi-template/goal-kpi-template.entity.ts":
/*!***************************************************************!*\
  !*** ./src/app/goal-kpi-template/goal-kpi-template.entity.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalKPITemplate = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let GoalKPITemplate = class GoalKPITemplate extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], GoalKPITemplate.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], GoalKPITemplate.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.KpiMetricEnum }),
    typeorm_1.Column(),
    class_validator_1.IsEnum(models_1.KpiMetricEnum),
    tslib_1.__metadata("design:type", String)
], GoalKPITemplate.prototype, "type", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", String)
], GoalKPITemplate.prototype, "unit", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], GoalKPITemplate.prototype, "operator", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.ManyToOne((type) => employee_entity_1.Employee, { nullable: true }),
    typeorm_1.JoinColumn(),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IEmployee !== "undefined" && models_1.IEmployee) === "function" ? _a : Object)
], GoalKPITemplate.prototype, "lead", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column(),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", Number)
], GoalKPITemplate.prototype, "currentValue", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column(),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", Number)
], GoalKPITemplate.prototype, "targetValue", void 0);
GoalKPITemplate = tslib_1.__decorate([
    typeorm_1.Entity('goal_kpi_template')
], GoalKPITemplate);
exports.GoalKPITemplate = GoalKPITemplate;


/***/ }),

/***/ "./src/app/goal-kpi-template/goal-kpi-template.module.ts":
/*!***************************************************************!*\
  !*** ./src/app/goal-kpi-template/goal-kpi-template.module.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalKpiTemplateModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const goal_kpi_template_controller_1 = __webpack_require__(/*! ./goal-kpi-template.controller */ "./src/app/goal-kpi-template/goal-kpi-template.controller.ts");
const goal_kpi_template_service_1 = __webpack_require__(/*! ./goal-kpi-template.service */ "./src/app/goal-kpi-template/goal-kpi-template.service.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const goal_kpi_template_entity_1 = __webpack_require__(/*! ./goal-kpi-template.entity */ "./src/app/goal-kpi-template/goal-kpi-template.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let GoalKpiTemplateModule = class GoalKpiTemplateModule {
};
GoalKpiTemplateModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([goal_kpi_template_entity_1.GoalKPITemplate]), tenant_module_1.TenantModule],
        controllers: [goal_kpi_template_controller_1.GoalKpiTemplateController],
        providers: [goal_kpi_template_service_1.GoalKpiTemplateService],
        exports: [goal_kpi_template_service_1.GoalKpiTemplateService]
    })
], GoalKpiTemplateModule);
exports.GoalKpiTemplateModule = GoalKpiTemplateModule;


/***/ }),

/***/ "./src/app/goal-kpi-template/goal-kpi-template.seed.ts":
/*!*************************************************************!*\
  !*** ./src/app/goal-kpi-template/goal-kpi-template.seed.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultGoalKpiTemplate = void 0;
const default_goal_kpi_templates_1 = __webpack_require__(/*! ./default-goal-kpi-templates */ "./src/app/goal-kpi-template/default-goal-kpi-templates.ts");
const goal_kpi_template_entity_1 = __webpack_require__(/*! ./goal-kpi-template.entity */ "./src/app/goal-kpi-template/goal-kpi-template.entity.ts");
exports.createDefaultGoalKpiTemplate = async (connection, tenant, organization) => {
    const goalKpiTemplates = [];
    default_goal_kpi_templates_1.DEFAULT_GOAL_KPI_TEMPLATES.forEach((item) => {
        const goalKpi = new goal_kpi_template_entity_1.GoalKPITemplate();
        goalKpi.name = item.name;
        goalKpi.description = '';
        goalKpi.type = item.type;
        goalKpi.operator = item.operator;
        goalKpi.unit = item.unit;
        goalKpi.currentValue = item.currentValue;
        goalKpi.targetValue = item.targetValue;
        goalKpi.organization = organization;
        goalKpi.tenant = tenant;
        goalKpiTemplates.push(goalKpi);
    });
    return await insertRandomGoalKpi(connection, goalKpiTemplates);
};
const insertRandomGoalKpi = async (connection, goalKpiTemplates) => {
    return await connection.manager.save(goalKpiTemplates);
};


/***/ }),

/***/ "./src/app/goal-kpi-template/goal-kpi-template.service.ts":
/*!****************************************************************!*\
  !*** ./src/app/goal-kpi-template/goal-kpi-template.service.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalKpiTemplateService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
const goal_kpi_template_entity_1 = __webpack_require__(/*! ./goal-kpi-template.entity */ "./src/app/goal-kpi-template/goal-kpi-template.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
let GoalKpiTemplateService = class GoalKpiTemplateService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(goalKpiTemplateRepository) {
        super(goalKpiTemplateRepository);
        this.goalKpiTemplateRepository = goalKpiTemplateRepository;
    }
};
GoalKpiTemplateService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(goal_kpi_template_entity_1.GoalKPITemplate)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], GoalKpiTemplateService);
exports.GoalKpiTemplateService = GoalKpiTemplateService;


/***/ }),

/***/ "./src/app/goal-kpi/default-goal-kpis.ts":
/*!***********************************************!*\
  !*** ./src/app/goal-kpi/default-goal-kpis.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_GOAL_KPIS = void 0;
exports.DEFAULT_GOAL_KPIS = [
    {
        name: 'Average response time',
        description: '',
        type: 'Numerical',
        unit: 'ms',
        operator: '<=',
        currentValue: 1000,
        targetValue: 500
    },
    {
        name: '# of Priority bugs in production',
        description: '',
        type: 'Numerical',
        unit: 'bugs',
        operator: '<=',
        currentValue: 15,
        targetValue: 2
    }
];


/***/ }),

/***/ "./src/app/goal-kpi/goal-kpi.controller.ts":
/*!*************************************************!*\
  !*** ./src/app/goal-kpi/goal-kpi.controller.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalKpiController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const goal_kpi_entity_1 = __webpack_require__(/*! ./goal-kpi.entity */ "./src/app/goal-kpi/goal-kpi.entity.ts");
const goal_kpi_service_1 = __webpack_require__(/*! ./goal-kpi.service */ "./src/app/goal-kpi/goal-kpi.service.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let GoalKpiController = class GoalKpiController extends core_1.CrudController {
    constructor(goalKpiService) {
        super(goalKpiService);
        this.goalKpiService = goalKpiService;
    }
    async createGoal(entity) {
        return this.goalKpiService.create(entity);
    }
    async getAll(data) {
        const { findInput } = JSON.parse(data);
        return this.goalKpiService.findAll({
            where: Object.assign({}, findInput),
            relations: ['lead']
        });
    }
    async deleteKPI(id) {
        return this.goalKpiService.delete(id);
    }
    async update(id, entity) {
        try {
            return await this.goalKpiService.create(Object.assign({ id }, entity));
        }
        catch (error) {
            console.log(error);
            return;
        }
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create Goal KPI' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'KPI added successfully',
        type: goal_kpi_entity_1.GoalKPI
    }),
    common_1.Post('/create'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof goal_kpi_entity_1.GoalKPI !== "undefined" && goal_kpi_entity_1.GoalKPI) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], GoalKpiController.prototype, "createGoal", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get all KPI' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found all KPI'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'No KPI found'
    }),
    common_1.Get('all'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", Promise)
], GoalKpiController.prototype, "getAll", null);
tslib_1.__decorate([
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], GoalKpiController.prototype, "deleteKPI", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_d = typeof goal_kpi_entity_1.GoalKPI !== "undefined" && goal_kpi_entity_1.GoalKPI) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], GoalKpiController.prototype, "update", null);
GoalKpiController = tslib_1.__decorate([
    swagger_1.ApiTags('GoalKpi'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_f = typeof goal_kpi_service_1.GoalKpiService !== "undefined" && goal_kpi_service_1.GoalKpiService) === "function" ? _f : Object])
], GoalKpiController);
exports.GoalKpiController = GoalKpiController;


/***/ }),

/***/ "./src/app/goal-kpi/goal-kpi.entity.ts":
/*!*********************************************!*\
  !*** ./src/app/goal-kpi/goal-kpi.entity.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalKPI = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let GoalKPI = class GoalKPI extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], GoalKPI.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], GoalKPI.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.KpiMetricEnum }),
    typeorm_1.Column(),
    class_validator_1.IsEnum(models_1.KpiMetricEnum),
    tslib_1.__metadata("design:type", String)
], GoalKPI.prototype, "type", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", String)
], GoalKPI.prototype, "unit", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], GoalKPI.prototype, "operator", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.ManyToOne((type) => employee_entity_1.Employee, { nullable: true }),
    typeorm_1.JoinColumn(),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", typeof (_a = typeof employee_entity_1.Employee !== "undefined" && employee_entity_1.Employee) === "function" ? _a : Object)
], GoalKPI.prototype, "lead", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], GoalKPI.prototype, "currentValue", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], GoalKPI.prototype, "targetValue", void 0);
GoalKPI = tslib_1.__decorate([
    typeorm_1.Entity('goal_kpi')
], GoalKPI);
exports.GoalKPI = GoalKPI;


/***/ }),

/***/ "./src/app/goal-kpi/goal-kpi.module.ts":
/*!*********************************************!*\
  !*** ./src/app/goal-kpi/goal-kpi.module.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalKpiModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const goal_kpi_controller_1 = __webpack_require__(/*! ./goal-kpi.controller */ "./src/app/goal-kpi/goal-kpi.controller.ts");
const goal_kpi_service_1 = __webpack_require__(/*! ./goal-kpi.service */ "./src/app/goal-kpi/goal-kpi.service.ts");
const goal_kpi_entity_1 = __webpack_require__(/*! ./goal-kpi.entity */ "./src/app/goal-kpi/goal-kpi.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let GoalKpiModule = class GoalKpiModule {
};
GoalKpiModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([goal_kpi_entity_1.GoalKPI]), tenant_module_1.TenantModule],
        controllers: [goal_kpi_controller_1.GoalKpiController],
        providers: [goal_kpi_service_1.GoalKpiService],
        exports: [goal_kpi_service_1.GoalKpiService]
    })
], GoalKpiModule);
exports.GoalKpiModule = GoalKpiModule;


/***/ }),

/***/ "./src/app/goal-kpi/goal-kpi.seed.ts":
/*!*******************************************!*\
  !*** ./src/app/goal-kpi/goal-kpi.seed.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultGoalKpi = void 0;
const goal_kpi_entity_1 = __webpack_require__(/*! ./goal-kpi.entity */ "./src/app/goal-kpi/goal-kpi.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const default_goal_kpis_1 = __webpack_require__(/*! ./default-goal-kpis */ "./src/app/goal-kpi/default-goal-kpis.ts");
exports.createDefaultGoalKpi = async (connection, tenant, organizations, employees) => {
    const goalKpis = [];
    organizations.forEach((organization) => {
        default_goal_kpis_1.DEFAULT_GOAL_KPIS.forEach((goalKPI) => {
            const goalKpi = new goal_kpi_entity_1.GoalKPI();
            goalKpi.name = goalKPI.name;
            goalKpi.description = ' ';
            goalKpi.type = goalKPI.type;
            goalKpi.operator = goalKPI.operator;
            goalKpi.unit = goalKPI.unit;
            goalKpi.lead = faker.random.arrayElement(employees);
            goalKpi.currentValue = goalKPI.currentValue;
            goalKpi.targetValue = goalKPI.targetValue;
            goalKpi.organization = organization;
            goalKpi.tenant = tenant;
            goalKpis.push(goalKpi);
        });
    });
    return await insertRandomGoalKpi(connection, goalKpis);
};
const insertRandomGoalKpi = async (connection, goalKpis) => {
    return await connection.manager.save(goalKpis);
};


/***/ }),

/***/ "./src/app/goal-kpi/goal-kpi.service.ts":
/*!**********************************************!*\
  !*** ./src/app/goal-kpi/goal-kpi.service.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalKpiService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const goal_kpi_entity_1 = __webpack_require__(/*! ./goal-kpi.entity */ "./src/app/goal-kpi/goal-kpi.entity.ts");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
let GoalKpiService = class GoalKpiService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(goalKpiRepository) {
        super(goalKpiRepository);
        this.goalKpiRepository = goalKpiRepository;
    }
};
GoalKpiService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(goal_kpi_entity_1.GoalKPI)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], GoalKpiService);
exports.GoalKpiService = GoalKpiService;


/***/ }),

/***/ "./src/app/goal-template/default-goal-templates.ts":
/*!*********************************************************!*\
  !*** ./src/app/goal-template/default-goal-templates.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_GOAL_TEMPLATES = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
exports.DEFAULT_GOAL_TEMPLATES = [
    {
        name: 'Improve product performance',
        level: 'Organization',
        category: models_1.GoalTemplateCategoriesEnum.PRODUCT_MANAGEMENT
    },
    {
        name: 'Successfully launch version 2 of our main product',
        level: 'Organization',
        category: models_1.GoalTemplateCategoriesEnum.MARKETING
    },
    {
        name: 'Redesign and launch our new landing page',
        level: 'Team',
        category: models_1.GoalTemplateCategoriesEnum.PRODUCT_MANAGEMENT
    },
    {
        name: 'Increase quality of releases and make sure they are timely',
        level: 'Team',
        category: models_1.GoalTemplateCategoriesEnum.PRODUCT_MANAGEMENT
    },
    {
        name: 'Identify problems with current user interface',
        level: 'Employee',
        category: models_1.GoalTemplateCategoriesEnum.PRODUCT_MANAGEMENT
    }
];


/***/ }),

/***/ "./src/app/goal-template/goal-template.controller.ts":
/*!***********************************************************!*\
  !*** ./src/app/goal-template/goal-template.controller.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalTemplateController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const goal_template_service_1 = __webpack_require__(/*! ./goal-template.service */ "./src/app/goal-template/goal-template.service.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const goal_template_entity_1 = __webpack_require__(/*! ./goal-template.entity */ "./src/app/goal-template/goal-template.entity.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let GoalTemplateController = class GoalTemplateController extends core_1.CrudController {
    constructor(goalTemplateService) {
        super(goalTemplateService);
        this.goalTemplateService = goalTemplateService;
    }
    async createGoalTemplate(entity) {
        return this.goalTemplateService.create(entity);
    }
    async getAll(data) {
        const { findInput } = JSON.parse(data);
        return this.goalTemplateService.findAll({
            relations: ['keyResults', 'keyResults.kpi'],
            where: Object.assign({}, findInput)
        });
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create Goal Template' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Goal Template Created successfully',
        type: goal_template_entity_1.GoalTemplate
    }),
    common_1.Post('/create'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof goal_template_entity_1.GoalTemplate !== "undefined" && goal_template_entity_1.GoalTemplate) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], GoalTemplateController.prototype, "createGoalTemplate", null);
tslib_1.__decorate([
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('all'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", Promise)
], GoalTemplateController.prototype, "getAll", null);
GoalTemplateController = tslib_1.__decorate([
    swagger_1.ApiTags('GoalTemplates'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof goal_template_service_1.GoalTemplateService !== "undefined" && goal_template_service_1.GoalTemplateService) === "function" ? _c : Object])
], GoalTemplateController);
exports.GoalTemplateController = GoalTemplateController;


/***/ }),

/***/ "./src/app/goal-template/goal-template.entity.ts":
/*!*******************************************************!*\
  !*** ./src/app/goal-template/goal-template.entity.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalTemplate = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const keyresult_template_entity_1 = __webpack_require__(/*! ../keyresult-template/keyresult-template.entity */ "./src/app/keyresult-template/keyresult-template.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let GoalTemplate = class GoalTemplate extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], GoalTemplate.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.GoalLevelEnum }),
    class_validator_1.IsEnum(models_1.GoalLevelEnum),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], GoalTemplate.prototype, "level", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.GoalTemplateCategoriesEnum }),
    class_validator_1.IsEnum(models_1.GoalTemplateCategoriesEnum),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], GoalTemplate.prototype, "category", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: keyresult_template_entity_1.KeyResultTemplate }),
    typeorm_1.OneToMany((type) => keyresult_template_entity_1.KeyResultTemplate, (keyResult) => keyResult.goal),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", Array)
], GoalTemplate.prototype, "keyResults", void 0);
GoalTemplate = tslib_1.__decorate([
    typeorm_1.Entity('goal_template')
], GoalTemplate);
exports.GoalTemplate = GoalTemplate;


/***/ }),

/***/ "./src/app/goal-template/goal-template.module.ts":
/*!*******************************************************!*\
  !*** ./src/app/goal-template/goal-template.module.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalTemplateModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const goal_template_controller_1 = __webpack_require__(/*! ./goal-template.controller */ "./src/app/goal-template/goal-template.controller.ts");
const goal_template_service_1 = __webpack_require__(/*! ./goal-template.service */ "./src/app/goal-template/goal-template.service.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const goal_template_entity_1 = __webpack_require__(/*! ./goal-template.entity */ "./src/app/goal-template/goal-template.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let GoalTemplateModule = class GoalTemplateModule {
};
GoalTemplateModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([goal_template_entity_1.GoalTemplate]), tenant_module_1.TenantModule],
        controllers: [goal_template_controller_1.GoalTemplateController],
        providers: [goal_template_service_1.GoalTemplateService],
        exports: [goal_template_service_1.GoalTemplateService]
    })
], GoalTemplateModule);
exports.GoalTemplateModule = GoalTemplateModule;


/***/ }),

/***/ "./src/app/goal-template/goal-template.seed.ts":
/*!*****************************************************!*\
  !*** ./src/app/goal-template/goal-template.seed.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultGoalTemplates = void 0;
const goal_template_entity_1 = __webpack_require__(/*! ./goal-template.entity */ "./src/app/goal-template/goal-template.entity.ts");
const default_goal_templates_1 = __webpack_require__(/*! ./default-goal-templates */ "./src/app/goal-template/default-goal-templates.ts");
exports.createDefaultGoalTemplates = async (connection, tenant, organization) => {
    const defaultGoalTemplates = [];
    default_goal_templates_1.DEFAULT_GOAL_TEMPLATES.forEach((goalData) => {
        const goalTemplate = new goal_template_entity_1.GoalTemplate();
        goalTemplate.name = goalData.name;
        goalTemplate.level = goalData.level;
        goalTemplate.category = goalData.category;
        goalTemplate.tenant = tenant;
        goalTemplate.organization = organization;
        defaultGoalTemplates.push(goalTemplate);
    });
    return await insertDefaultGoalTemplates(connection, defaultGoalTemplates);
};
const insertDefaultGoalTemplates = async (connection, defaultGoalTemplates) => {
    return await connection.manager.save(defaultGoalTemplates);
};


/***/ }),

/***/ "./src/app/goal-template/goal-template.service.ts":
/*!********************************************************!*\
  !*** ./src/app/goal-template/goal-template.service.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalTemplateService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
const goal_template_entity_1 = __webpack_require__(/*! ./goal-template.entity */ "./src/app/goal-template/goal-template.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
let GoalTemplateService = class GoalTemplateService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(goalTemplateRepository) {
        super(goalTemplateRepository);
        this.goalTemplateRepository = goalTemplateRepository;
    }
};
GoalTemplateService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(goal_template_entity_1.GoalTemplate)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], GoalTemplateService);
exports.GoalTemplateService = GoalTemplateService;


/***/ }),

/***/ "./src/app/goal-time-frame/goal-time-frame.controller.ts":
/*!***************************************************************!*\
  !*** ./src/app/goal-time-frame/goal-time-frame.controller.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalTimeFrameController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const goal_time_frame_entity_1 = __webpack_require__(/*! ./goal-time-frame.entity */ "./src/app/goal-time-frame/goal-time-frame.entity.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const goal_time_frame_service_1 = __webpack_require__(/*! ./goal-time-frame.service */ "./src/app/goal-time-frame/goal-time-frame.service.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let GoalTimeFrameController = class GoalTimeFrameController extends core_1.CrudController {
    constructor(goalTimeFrameService) {
        super(goalTimeFrameService);
        this.goalTimeFrameService = goalTimeFrameService;
    }
    async createGoal(entity) {
        return this.goalTimeFrameService.create(entity);
    }
    async getAll(data) {
        const { findInput } = JSON.parse(data);
        return this.goalTimeFrameService.findAll({ where: Object.assign({}, findInput) });
    }
    async getByName(name) {
        return this.goalTimeFrameService.findAll({ where: { name: name } });
    }
    async deleteTask(id) {
        return this.goalTimeFrameService.delete(id);
    }
    async update(id, entity) {
        try {
            return await this.goalTimeFrameService.create(Object.assign({ id }, entity));
        }
        catch (error) {
            console.log(error);
            return;
        }
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create Goal Time Frame' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Time Frame added successfully',
        type: goal_time_frame_entity_1.GoalTimeFrame
    }),
    common_1.Post('/create'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof goal_time_frame_entity_1.GoalTimeFrame !== "undefined" && goal_time_frame_entity_1.GoalTimeFrame) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], GoalTimeFrameController.prototype, "createGoal", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get all Goal Time Frames' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found all Time Frames'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'No Time Frame found'
    }),
    common_1.Get('all'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", Promise)
], GoalTimeFrameController.prototype, "getAll", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find Goal Time Frames with name' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found all Time Frames'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'No Time Frame found'
    }),
    common_1.Get(':name'),
    tslib_1.__param(0, common_1.Param('name')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", Promise)
], GoalTimeFrameController.prototype, "getByName", null);
tslib_1.__decorate([
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], GoalTimeFrameController.prototype, "deleteTask", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_d = typeof goal_time_frame_entity_1.GoalTimeFrame !== "undefined" && goal_time_frame_entity_1.GoalTimeFrame) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], GoalTimeFrameController.prototype, "update", null);
GoalTimeFrameController = tslib_1.__decorate([
    swagger_1.ApiTags('GoalTimeFrame'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_f = typeof goal_time_frame_service_1.GoalTimeFrameService !== "undefined" && goal_time_frame_service_1.GoalTimeFrameService) === "function" ? _f : Object])
], GoalTimeFrameController);
exports.GoalTimeFrameController = GoalTimeFrameController;


/***/ }),

/***/ "./src/app/goal-time-frame/goal-time-frame.entity.ts":
/*!***********************************************************!*\
  !*** ./src/app/goal-time-frame/goal-time-frame.entity.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalTimeFrame = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let GoalTimeFrame = class GoalTimeFrame extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], GoalTimeFrame.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.TimeFrameStatusEnum }),
    class_validator_1.IsEnum(models_1.TimeFrameStatusEnum),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], GoalTimeFrame.prototype, "status", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", typeof (_a = typeof Date !== "undefined" && Date) === "function" ? _a : Object)
], GoalTimeFrame.prototype, "startDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], GoalTimeFrame.prototype, "endDate", void 0);
GoalTimeFrame = tslib_1.__decorate([
    typeorm_1.Entity('goal_time_frame')
], GoalTimeFrame);
exports.GoalTimeFrame = GoalTimeFrame;


/***/ }),

/***/ "./src/app/goal-time-frame/goal-time-frame.module.ts":
/*!***********************************************************!*\
  !*** ./src/app/goal-time-frame/goal-time-frame.module.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalTimeFrameModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const goal_time_frame_controller_1 = __webpack_require__(/*! ./goal-time-frame.controller */ "./src/app/goal-time-frame/goal-time-frame.controller.ts");
const goal_time_frame_service_1 = __webpack_require__(/*! ./goal-time-frame.service */ "./src/app/goal-time-frame/goal-time-frame.service.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const goal_time_frame_entity_1 = __webpack_require__(/*! ./goal-time-frame.entity */ "./src/app/goal-time-frame/goal-time-frame.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let GoalTimeFrameModule = class GoalTimeFrameModule {
};
GoalTimeFrameModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([goal_time_frame_entity_1.GoalTimeFrame]), tenant_module_1.TenantModule],
        controllers: [goal_time_frame_controller_1.GoalTimeFrameController],
        providers: [goal_time_frame_service_1.GoalTimeFrameService],
        exports: [goal_time_frame_service_1.GoalTimeFrameService]
    })
], GoalTimeFrameModule);
exports.GoalTimeFrameModule = GoalTimeFrameModule;


/***/ }),

/***/ "./src/app/goal-time-frame/goal-time-frame.seed.ts":
/*!*********************************************************!*\
  !*** ./src/app/goal-time-frame/goal-time-frame.seed.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultTimeFrames = void 0;
const goal_time_frame_entity_1 = __webpack_require__(/*! ./goal-time-frame.entity */ "./src/app/goal-time-frame/goal-time-frame.entity.ts");
const moment = __webpack_require__(/*! moment */ "moment");
exports.createDefaultTimeFrames = async (connection, tenant, organizations) => {
    const defaultTimeFrames = [];
    organizations.forEach((organization) => {
        defaultTimeFrames.push({
            name: `Annual-${moment().year()}`,
            status: 'Active',
            startDate: moment().startOf('year').toDate(),
            endDate: moment().endOf('year').toDate(),
            tenant: tenant,
            organization: organization
        });
        for (let i = 1; i <= 4; i++) {
            const start = moment().quarter(i).startOf('quarter').toDate();
            const end = moment().quarter(i).endOf('quarter').toDate();
            defaultTimeFrames.push({
                name: `Q${i}-${moment().year()}`,
                status: 'Active',
                startDate: start,
                endDate: end,
                tenant: tenant,
                organization: organization
            });
        }
    });
    await insertDefaultTimeFrames(connection, defaultTimeFrames);
    return defaultTimeFrames;
};
const insertDefaultTimeFrames = async (connection, defaultTimeFrames) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(goal_time_frame_entity_1.GoalTimeFrame)
        .values(defaultTimeFrames)
        .execute();
};


/***/ }),

/***/ "./src/app/goal-time-frame/goal-time-frame.service.ts":
/*!************************************************************!*\
  !*** ./src/app/goal-time-frame/goal-time-frame.service.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalTimeFrameService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const goal_time_frame_entity_1 = __webpack_require__(/*! ./goal-time-frame.entity */ "./src/app/goal-time-frame/goal-time-frame.entity.ts");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
let GoalTimeFrameService = class GoalTimeFrameService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(goalTimeFrameRepository) {
        super(goalTimeFrameRepository);
        this.goalTimeFrameRepository = goalTimeFrameRepository;
    }
};
GoalTimeFrameService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(goal_time_frame_entity_1.GoalTimeFrame)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], GoalTimeFrameService);
exports.GoalTimeFrameService = GoalTimeFrameService;


/***/ }),

/***/ "./src/app/goal/default-goals.ts":
/*!***************************************!*\
  !*** ./src/app/goal/default-goals.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_GOALS = void 0;
exports.DEFAULT_GOALS = [
    {
        name: 'Improve product performance',
        level: 'Organization'
    },
    {
        name: 'Successfully launch version 2 of our main product',
        level: 'Organization'
    },
    {
        name: 'Redesign and launch our new landing page',
        level: 'Team'
    },
    {
        name: 'Increase quality of releases and make sure they are timely',
        level: 'Team'
    },
    {
        name: 'Identify problems with current user interface',
        level: 'Employee'
    }
];


/***/ }),

/***/ "./src/app/goal/goal.controller.ts":
/*!*****************************************!*\
  !*** ./src/app/goal/goal.controller.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const goal_service_1 = __webpack_require__(/*! ./goal.service */ "./src/app/goal/goal.service.ts");
const goal_entity_1 = __webpack_require__(/*! ./goal.entity */ "./src/app/goal/goal.entity.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let GoalController = class GoalController extends core_1.CrudController {
    constructor(goalService) {
        super(goalService);
        this.goalService = goalService;
    }
    async createGoal(entity) {
        return this.goalService.create(entity);
    }
    async getAll(data) {
        const { relations, findInput } = JSON.parse(data);
        return this.goalService.findAll({
            where: Object.assign({}, findInput),
            relations,
            order: { createdAt: 'ASC' }
        });
    }
    async update(id, entity) {
        try {
            return await this.goalService.create(Object.assign({ id }, entity));
        }
        catch (error) {
            console.log(error);
            return;
        }
    }
    async deleteGoal(id) {
        return this.goalService.delete(id);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create Goal' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Goal Created successfully',
        type: goal_entity_1.Goal
    }),
    common_1.Post('/create'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof goal_entity_1.Goal !== "undefined" && goal_entity_1.Goal) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], GoalController.prototype, "createGoal", null);
tslib_1.__decorate([
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('all'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", Promise)
], GoalController.prototype, "getAll", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')), tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_c = typeof goal_entity_1.Goal !== "undefined" && goal_entity_1.Goal) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], GoalController.prototype, "update", null);
tslib_1.__decorate([
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], GoalController.prototype, "deleteGoal", null);
GoalController = tslib_1.__decorate([
    swagger_1.ApiTags('Goals'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_f = typeof goal_service_1.GoalService !== "undefined" && goal_service_1.GoalService) === "function" ? _f : Object])
], GoalController);
exports.GoalController = GoalController;


/***/ }),

/***/ "./src/app/goal/goal.entity.ts":
/*!*************************************!*\
  !*** ./src/app/goal/goal.entity.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Goal = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const keyresult_entity_1 = __webpack_require__(/*! ../keyresult/keyresult.entity */ "./src/app/keyresult/keyresult.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const organization_team_entity_1 = __webpack_require__(/*! ../organization-team/organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let Goal = class Goal extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Goal.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", String)
], Goal.prototype, "description", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => organization_team_entity_1.OrganizationTeam),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof organization_team_entity_1.OrganizationTeam !== "undefined" && organization_team_entity_1.OrganizationTeam) === "function" ? _a : Object)
], Goal.prototype, "ownerTeam", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => employee_entity_1.Employee),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof employee_entity_1.Employee !== "undefined" && employee_entity_1.Employee) === "function" ? _b : Object)
], Goal.prototype, "ownerEmployee", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.ManyToOne((type) => employee_entity_1.Employee, { nullable: true }),
    typeorm_1.JoinColumn(),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", typeof (_c = typeof employee_entity_1.Employee !== "undefined" && employee_entity_1.Employee) === "function" ? _c : Object)
], Goal.prototype, "lead", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Goal.prototype, "deadline", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.GoalLevelEnum }),
    class_validator_1.IsEnum(models_1.GoalLevelEnum),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Goal.prototype, "level", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], Goal.prototype, "progress", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: keyresult_entity_1.KeyResult }),
    typeorm_1.OneToMany((type) => keyresult_entity_1.KeyResult, (keyResult) => keyResult.goal),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", Array)
], Goal.prototype, "keyResults", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => keyresult_entity_1.KeyResult, (keyResult) => keyResult.id),
    tslib_1.__metadata("design:type", typeof (_d = typeof keyresult_entity_1.KeyResult !== "undefined" && keyresult_entity_1.KeyResult) === "function" ? _d : Object)
], Goal.prototype, "alignedKeyResult", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Goal.prototype, "alignedKeyResultId", void 0);
Goal = tslib_1.__decorate([
    typeorm_1.Entity('goal')
], Goal);
exports.Goal = Goal;


/***/ }),

/***/ "./src/app/goal/goal.module.ts":
/*!*************************************!*\
  !*** ./src/app/goal/goal.module.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const goal_controller_1 = __webpack_require__(/*! ./goal.controller */ "./src/app/goal/goal.controller.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const goal_entity_1 = __webpack_require__(/*! ./goal.entity */ "./src/app/goal/goal.entity.ts");
const goal_service_1 = __webpack_require__(/*! ./goal.service */ "./src/app/goal/goal.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let GoalModule = class GoalModule {
};
GoalModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([goal_entity_1.Goal]), tenant_module_1.TenantModule],
        controllers: [goal_controller_1.GoalController],
        providers: [goal_service_1.GoalService],
        exports: [goal_service_1.GoalService]
    })
], GoalModule);
exports.GoalModule = GoalModule;


/***/ }),

/***/ "./src/app/goal/goal.seed.ts":
/*!***********************************!*\
  !*** ./src/app/goal/goal.seed.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomGoal = exports.updateDefaultGoalProgress = exports.createDefaultGoals = void 0;
const goal_entity_1 = __webpack_require__(/*! ./goal.entity */ "./src/app/goal/goal.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const goal_time_frame_entity_1 = __webpack_require__(/*! ../goal-time-frame/goal-time-frame.entity */ "./src/app/goal-time-frame/goal-time-frame.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const organization_team_entity_1 = __webpack_require__(/*! ../organization-team/organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const default_goals_1 = __webpack_require__(/*! ./default-goals */ "./src/app/goal/default-goals.ts");
exports.createDefaultGoals = async (connection, tenant, organizations, employees) => {
    const defaultGoals = [];
    const goalTimeFrames = await connection.manager.find(goal_time_frame_entity_1.GoalTimeFrame);
    const orgTeams = await connection.manager.find(organization_team_entity_1.OrganizationTeam);
    organizations.forEach((organization, index) => {
        default_goals_1.DEFAULT_GOALS.forEach((goalData) => {
            const goal = new goal_entity_1.Goal();
            goal.name = goalData.name;
            goal.progress = 0;
            goal.level = goalData.level;
            if (goal.level === models_1.GoalLevelEnum.EMPLOYEE) {
                goal.ownerEmployee = faker.random.arrayElement(employees);
            }
            else if (goal.level === models_1.GoalLevelEnum.TEAM) {
                goal.ownerTeam = faker.random.arrayElement(orgTeams);
            }
            else if (goal.level === models_1.GoalLevelEnum.ORGANIZATION) {
                goal.organization = organization;
            }
            goal.lead = faker.random.arrayElement(employees);
            goal.tenant = tenant;
            goal.description = ' ';
            goal.deadline = faker.random.arrayElement(goalTimeFrames).name;
            goal.organization = organization;
            goal.organizationId = organization.id;
            defaultGoals.push(goal);
        });
    });
    await insertDefaultGoals(connection, defaultGoals);
    return defaultGoals;
};
exports.updateDefaultGoalProgress = async (connection) => {
    const goals = await connection.manager.find(goal_entity_1.Goal, {
        relations: ['keyResults']
    });
    if (goals && goals.length > 0) {
        goals.forEach(async (goal) => {
            if (goal.keyResults && goal.keyResults.length > 0) {
                const progressTotal = goal.keyResults.reduce((a, b) => a + b.progress * +b.weight, 0);
                const weightTotal = goal.keyResults.reduce((a, b) => a + +b.weight, 0);
                const goalProgress = Math.round(progressTotal / weightTotal);
                await connection.manager.update(goal_entity_1.Goal, { id: goal.id }, {
                    progress: goalProgress
                });
            }
        });
        return goals;
    }
};
const insertDefaultGoals = async (connection, defaultGoals) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(goal_entity_1.Goal)
        .values(defaultGoals)
        .execute();
};
exports.createRandomGoal = async (connection, tenants, tenantOrganizationsMap, tenantEmployeeMap) => {
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, Random Goal will not be created');
        return;
    }
    if (!tenantEmployeeMap) {
        console.warn('Warning: tenantEmployeeMap not found, Random Goal will not be created');
        return;
    }
    const goalTimeFrames = await connection.manager.find(goal_time_frame_entity_1.GoalTimeFrame);
    const goals = [];
    for (const tenant of tenants) {
        const tenantOrgs = tenantOrganizationsMap.get(tenant);
        const tenantEmployees = tenantEmployeeMap.get(tenant);
        for (const tenantOrg of tenantOrgs) {
            const organizationTeams = await connection.manager.find(organization_team_entity_1.OrganizationTeam, {
                where: [{ organizationId: tenantOrg.id }]
            });
            const goal = new goal_entity_1.Goal();
            goal.name = faker.name.jobTitle();
            goal.progress = 0;
            goal.level = faker.random.arrayElement([
                'Organization',
                'Team',
                'Employee'
            ]);
            if (goal.level === models_1.GoalLevelEnum.EMPLOYEE) {
                goal.ownerEmployee = faker.random.arrayElement(tenantEmployees);
            }
            else if (goal.level === models_1.GoalLevelEnum.TEAM) {
                goal.ownerTeam = faker.random.arrayElement(organizationTeams);
            }
            else if (goal.level === models_1.GoalLevelEnum.ORGANIZATION) {
                goal.organization = tenantOrg;
            }
            goal.lead = faker.random.arrayElement(tenantEmployees);
            goal.tenant = tenant;
            goal.description = faker.name.jobDescriptor();
            goal.deadline = faker.random.arrayElement(goalTimeFrames).name;
            goal.organization = tenantOrg;
            goal.organizationId = tenantOrg.id;
            goals.push(goal);
        }
    }
    await connection.manager.save(goals);
    return goals;
};


/***/ }),

/***/ "./src/app/goal/goal.service.ts":
/*!**************************************!*\
  !*** ./src/app/goal/goal.service.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoalService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const goal_entity_1 = __webpack_require__(/*! ./goal.entity */ "./src/app/goal/goal.entity.ts");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
let GoalService = class GoalService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(goalRepository) {
        super(goalRepository);
        this.goalRepository = goalRepository;
    }
};
GoalService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(goal_entity_1.Goal)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], GoalService);
exports.GoalService = GoalService;


/***/ }),

/***/ "./src/app/help-center-article/commands/handlers/help-center.menu.bulk.delete.handler.ts":
/*!***********************************************************************************************!*\
  !*** ./src/app/help-center-article/commands/handlers/help-center.menu.bulk.delete.handler.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KnowledgeBaseCategoryBulkDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const help_center_article_service_1 = __webpack_require__(/*! ./../../../help-center-article/help-center-article.service */ "./src/app/help-center-article/help-center-article.service.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const help_center_menu_bulk_delete_command_1 = __webpack_require__(/*! ../help-center.menu.bulk.delete.command */ "./src/app/help-center-article/commands/help-center.menu.bulk.delete.command.ts");
let KnowledgeBaseCategoryBulkDeleteHandler = class KnowledgeBaseCategoryBulkDeleteHandler {
    constructor(helpCenterArticle) {
        this.helpCenterArticle = helpCenterArticle;
    }
    async execute(command) {
        const { id } = command;
        const articles = await this.helpCenterArticle.getArticlesByCategoryId(id);
        await this.helpCenterArticle.deleteBulkByCategoryId(articles.map((item) => item.id));
        return;
    }
};
KnowledgeBaseCategoryBulkDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(help_center_menu_bulk_delete_command_1.KnowledgeBaseCategoryBulkDeleteCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof help_center_article_service_1.HelpCenterArticleService !== "undefined" && help_center_article_service_1.HelpCenterArticleService) === "function" ? _a : Object])
], KnowledgeBaseCategoryBulkDeleteHandler);
exports.KnowledgeBaseCategoryBulkDeleteHandler = KnowledgeBaseCategoryBulkDeleteHandler;


/***/ }),

/***/ "./src/app/help-center-article/commands/handlers/index.ts":
/*!****************************************************************!*\
  !*** ./src/app/help-center-article/commands/handlers/index.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const help_center_menu_bulk_delete_handler_1 = __webpack_require__(/*! ./help-center.menu.bulk.delete.handler */ "./src/app/help-center-article/commands/handlers/help-center.menu.bulk.delete.handler.ts");
exports.CommandHandlers = [help_center_menu_bulk_delete_handler_1.KnowledgeBaseCategoryBulkDeleteHandler];


/***/ }),

/***/ "./src/app/help-center-article/commands/help-center.menu.bulk.delete.command.ts":
/*!**************************************************************************************!*\
  !*** ./src/app/help-center-article/commands/help-center.menu.bulk.delete.command.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KnowledgeBaseCategoryBulkDeleteCommand = void 0;
class KnowledgeBaseCategoryBulkDeleteCommand {
    constructor(id) {
        this.id = id;
    }
}
exports.KnowledgeBaseCategoryBulkDeleteCommand = KnowledgeBaseCategoryBulkDeleteCommand;
KnowledgeBaseCategoryBulkDeleteCommand.type = '[KnowledgeBaseCategory] Delete';


/***/ }),

/***/ "./src/app/help-center-article/commands/index.ts":
/*!*******************************************************!*\
  !*** ./src/app/help-center-article/commands/index.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KnowledgeBaseCategoryBulkDeleteCommand = void 0;
var help_center_menu_bulk_delete_command_1 = __webpack_require__(/*! ./help-center.menu.bulk.delete.command */ "./src/app/help-center-article/commands/help-center.menu.bulk.delete.command.ts");
Object.defineProperty(exports, "KnowledgeBaseCategoryBulkDeleteCommand", { enumerable: true, get: function () { return help_center_menu_bulk_delete_command_1.KnowledgeBaseCategoryBulkDeleteCommand; } });


/***/ }),

/***/ "./src/app/help-center-article/help-center-article.controller.ts":
/*!***********************************************************************!*\
  !*** ./src/app/help-center-article/help-center-article.controller.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpCenterArticleController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const help_center_article_entity_1 = __webpack_require__(/*! ./help-center-article.entity */ "./src/app/help-center-article/help-center-article.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const help_center_article_service_1 = __webpack_require__(/*! ./help-center-article.service */ "./src/app/help-center-article/help-center-article.service.ts");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/help-center-article/commands/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let HelpCenterArticleController = class HelpCenterArticleController extends core_1.CrudController {
    constructor(helpCenterService, commandBus) {
        super(helpCenterService);
        this.helpCenterService = helpCenterService;
        this.commandBus = commandBus;
    }
    async createNode(entity) {
        return this.helpCenterService.create(entity);
    }
    async findByCategoryId(categoryId) {
        return this.helpCenterService.getArticlesByCategoryId(categoryId);
    }
    async deleteBulkByCategoryId(data) {
        const { id = null } = data;
        return this.commandBus.execute(new commands_1.KnowledgeBaseCategoryBulkDeleteCommand(id));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Create new article'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Success Add article',
        type: help_center_article_entity_1.HelpCenterArticle
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_HELP_CENTER_EDIT),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.IHelpCenterArticle !== "undefined" && models_1.IHelpCenterArticle) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], HelpCenterArticleController.prototype, "createNode", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find articles By Category Id.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found category articles',
        type: help_center_article_entity_1.HelpCenterArticle
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    common_1.Get(':categoryId'),
    tslib_1.__param(0, common_1.Param('categoryId')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], HelpCenterArticleController.prototype, "findByCategoryId", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Delete Articles By Category Id.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found category articles',
        type: help_center_article_entity_1.HelpCenterArticle
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    common_1.Delete('deleteBulkByCategoryId'),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], HelpCenterArticleController.prototype, "deleteBulkByCategoryId", null);
HelpCenterArticleController = tslib_1.__decorate([
    swagger_1.ApiTags('KnowledgeBaseArticle'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof help_center_article_service_1.HelpCenterArticleService !== "undefined" && help_center_article_service_1.HelpCenterArticleService) === "function" ? _e : Object, typeof (_f = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _f : Object])
], HelpCenterArticleController);
exports.HelpCenterArticleController = HelpCenterArticleController;


/***/ }),

/***/ "./src/app/help-center-article/help-center-article.entity.ts":
/*!*******************************************************************!*\
  !*** ./src/app/help-center-article/help-center-article.entity.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpCenterArticle = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let HelpCenterArticle = class HelpCenterArticle extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], HelpCenterArticle.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], HelpCenterArticle.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], HelpCenterArticle.prototype, "data", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], HelpCenterArticle.prototype, "categoryId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Boolean)
], HelpCenterArticle.prototype, "draft", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Boolean)
], HelpCenterArticle.prototype, "privacy", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], HelpCenterArticle.prototype, "index", void 0);
HelpCenterArticle = tslib_1.__decorate([
    typeorm_1.Entity('knowledge_base_article')
], HelpCenterArticle);
exports.HelpCenterArticle = HelpCenterArticle;


/***/ }),

/***/ "./src/app/help-center-article/help-center-article.module.ts":
/*!*******************************************************************!*\
  !*** ./src/app/help-center-article/help-center-article.module.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpCenterArticleModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const help_center_article_entity_1 = __webpack_require__(/*! ./help-center-article.entity */ "./src/app/help-center-article/help-center-article.entity.ts");
const help_center_article_service_1 = __webpack_require__(/*! ./help-center-article.service */ "./src/app/help-center-article/help-center-article.service.ts");
const help_center_article_controller_1 = __webpack_require__(/*! ./help-center-article.controller */ "./src/app/help-center-article/help-center-article.controller.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/help-center-article/commands/handlers/index.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let HelpCenterArticleModule = class HelpCenterArticleModule {
};
HelpCenterArticleModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([help_center_article_entity_1.HelpCenterArticle, user_entity_1.User]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        providers: [help_center_article_service_1.HelpCenterArticleService, user_service_1.UserService, ...handlers_1.CommandHandlers],
        controllers: [help_center_article_controller_1.HelpCenterArticleController],
        exports: [help_center_article_service_1.HelpCenterArticleService]
    })
], HelpCenterArticleModule);
exports.HelpCenterArticleModule = HelpCenterArticleModule;


/***/ }),

/***/ "./src/app/help-center-article/help-center-article.seed.ts":
/*!*****************************************************************!*\
  !*** ./src/app/help-center-article/help-center-article.seed.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createHelpCenterArticle = void 0;
const help_center_article_entity_1 = __webpack_require__(/*! ./help-center-article.entity */ "./src/app/help-center-article/help-center-article.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
exports.createHelpCenterArticle = async (connection, organizations, numberOfHelpCenterArticle) => {
    const helpCenterArticles = [];
    const booleanAry = [true, false];
    for (let i = 0; i <= numberOfHelpCenterArticle; i++) {
        organizations.forEach((organization) => {
            const article = new help_center_article_entity_1.HelpCenterArticle();
            article.organization = organization;
            article.tenant = organization.tenant;
            article.name = faker.name.title();
            article.description = faker.name.jobDescriptor();
            article.data = faker.commerce.productMaterial();
            article.categoryId = (Math.floor(Math.random() * 99999) + 1).toString();
            article.draft = booleanAry[Math.random() > 0.5 ? 1 : 0];
            article.privacy = booleanAry[Math.random() > 0.5 ? 1 : 0];
            article.index = Math.floor(Math.random() * 99999) + 1;
            helpCenterArticles.push(article);
        });
    }
    return await insertRandomHelpCenterArticle(connection, helpCenterArticles);
};
const insertRandomHelpCenterArticle = async (connection, data) => {
    return await connection.manager.save(data);
};


/***/ }),

/***/ "./src/app/help-center-article/help-center-article.service.ts":
/*!********************************************************************!*\
  !*** ./src/app/help-center-article/help-center-article.service.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpCenterArticleService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const help_center_article_entity_1 = __webpack_require__(/*! ./help-center-article.entity */ "./src/app/help-center-article/help-center-article.entity.ts");
let HelpCenterArticleService = class HelpCenterArticleService extends crud_service_1.CrudService {
    constructor(HelpCenterArticleRepository) {
        super(HelpCenterArticleRepository);
        this.HelpCenterArticleRepository = HelpCenterArticleRepository;
    }
    async getArticlesByCategoryId(categoryId) {
        return await this.repository
            .createQueryBuilder('knowledge_base_article')
            .where('knowledge_base_article.categoryId = :categoryId', {
            categoryId
        })
            .getMany();
    }
    async deleteBulkByCategoryId(ids) {
        return await this.repository.delete(ids);
    }
};
HelpCenterArticleService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(help_center_article_entity_1.HelpCenterArticle)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], HelpCenterArticleService);
exports.HelpCenterArticleService = HelpCenterArticleService;


/***/ }),

/***/ "./src/app/help-center-author/commands/handlers/help-center-author.bulk.create.handler.ts":
/*!************************************************************************************************!*\
  !*** ./src/app/help-center-author/commands/handlers/help-center-author.bulk.create.handler.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArticleAuthorsBulkCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const __1 = __webpack_require__(/*! .. */ "./src/app/help-center-author/commands/index.ts");
const help_center_author_service_1 = __webpack_require__(/*! ../../help-center-author.service */ "./src/app/help-center-author/help-center-author.service.ts");
let ArticleAuthorsBulkCreateHandler = class ArticleAuthorsBulkCreateHandler {
    constructor(helpCenterAuthorService) {
        this.helpCenterAuthorService = helpCenterAuthorService;
    }
    async execute(command) {
        const { input } = command;
        const { articleId, employeeIds, organizationId, tenantId } = input;
        let author;
        const createInput = [];
        for (const employeeId of employeeIds) {
            author = {
                articleId: articleId,
                employeeId: employeeId,
                organizationId,
                tenantId
            };
            createInput.push(author);
        }
        return await this.helpCenterAuthorService.createBulk(createInput);
    }
};
ArticleAuthorsBulkCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(__1.ArticleAuthorsBulkCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof help_center_author_service_1.HelpCenterAuthorService !== "undefined" && help_center_author_service_1.HelpCenterAuthorService) === "function" ? _a : Object])
], ArticleAuthorsBulkCreateHandler);
exports.ArticleAuthorsBulkCreateHandler = ArticleAuthorsBulkCreateHandler;


/***/ }),

/***/ "./src/app/help-center-author/commands/handlers/help-center-author.bulk.delete.handler.ts":
/*!************************************************************************************************!*\
  !*** ./src/app/help-center-author/commands/handlers/help-center-author.bulk.delete.handler.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KnowledgeBaseArticleBulkDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const __1 = __webpack_require__(/*! .. */ "./src/app/help-center-author/commands/index.ts");
const help_center_author_service_1 = __webpack_require__(/*! ../../help-center-author.service */ "./src/app/help-center-author/help-center-author.service.ts");
let KnowledgeBaseArticleBulkDeleteHandler = class KnowledgeBaseArticleBulkDeleteHandler {
    constructor(helpCenterAuthorService) {
        this.helpCenterAuthorService = helpCenterAuthorService;
    }
    async execute(command) {
        const { id } = command;
        const authors = await this.helpCenterAuthorService.findByArticleId(id);
        await this.helpCenterAuthorService.deleteBulkByArticleId(authors.map((item) => item.id));
        return;
    }
};
KnowledgeBaseArticleBulkDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(__1.KnowledgeBaseArticleBulkDeleteCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof help_center_author_service_1.HelpCenterAuthorService !== "undefined" && help_center_author_service_1.HelpCenterAuthorService) === "function" ? _a : Object])
], KnowledgeBaseArticleBulkDeleteHandler);
exports.KnowledgeBaseArticleBulkDeleteHandler = KnowledgeBaseArticleBulkDeleteHandler;


/***/ }),

/***/ "./src/app/help-center-author/commands/handlers/index.ts":
/*!***************************************************************!*\
  !*** ./src/app/help-center-author/commands/handlers/index.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const help_center_author_bulk_delete_handler_1 = __webpack_require__(/*! ./help-center-author.bulk.delete.handler */ "./src/app/help-center-author/commands/handlers/help-center-author.bulk.delete.handler.ts");
const help_center_author_bulk_create_handler_1 = __webpack_require__(/*! ./help-center-author.bulk.create.handler */ "./src/app/help-center-author/commands/handlers/help-center-author.bulk.create.handler.ts");
exports.CommandHandlers = [
    help_center_author_bulk_delete_handler_1.KnowledgeBaseArticleBulkDeleteHandler,
    help_center_author_bulk_create_handler_1.ArticleAuthorsBulkCreateHandler
];


/***/ }),

/***/ "./src/app/help-center-author/commands/help-center-author.bulk.create.command.ts":
/*!***************************************************************************************!*\
  !*** ./src/app/help-center-author/commands/help-center-author.bulk.create.command.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ArticleAuthorsBulkCreateCommand = void 0;
class ArticleAuthorsBulkCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.ArticleAuthorsBulkCreateCommand = ArticleAuthorsBulkCreateCommand;
ArticleAuthorsBulkCreateCommand.type = '[ArticleAuthors] Add';


/***/ }),

/***/ "./src/app/help-center-author/commands/help-center-author.bulk.delete.command.ts":
/*!***************************************************************************************!*\
  !*** ./src/app/help-center-author/commands/help-center-author.bulk.delete.command.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KnowledgeBaseArticleBulkDeleteCommand = void 0;
class KnowledgeBaseArticleBulkDeleteCommand {
    constructor(id) {
        this.id = id;
    }
}
exports.KnowledgeBaseArticleBulkDeleteCommand = KnowledgeBaseArticleBulkDeleteCommand;
KnowledgeBaseArticleBulkDeleteCommand.type = '[KnowledgeBaseArticle] Delete';


/***/ }),

/***/ "./src/app/help-center-author/commands/index.ts":
/*!******************************************************!*\
  !*** ./src/app/help-center-author/commands/index.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ArticleAuthorsBulkCreateCommand = exports.KnowledgeBaseArticleBulkDeleteCommand = void 0;
var help_center_author_bulk_delete_command_1 = __webpack_require__(/*! ./help-center-author.bulk.delete.command */ "./src/app/help-center-author/commands/help-center-author.bulk.delete.command.ts");
Object.defineProperty(exports, "KnowledgeBaseArticleBulkDeleteCommand", { enumerable: true, get: function () { return help_center_author_bulk_delete_command_1.KnowledgeBaseArticleBulkDeleteCommand; } });
var help_center_author_bulk_create_command_1 = __webpack_require__(/*! ./help-center-author.bulk.create.command */ "./src/app/help-center-author/commands/help-center-author.bulk.create.command.ts");
Object.defineProperty(exports, "ArticleAuthorsBulkCreateCommand", { enumerable: true, get: function () { return help_center_author_bulk_create_command_1.ArticleAuthorsBulkCreateCommand; } });


/***/ }),

/***/ "./src/app/help-center-author/help-center-author.controller.ts":
/*!*********************************************************************!*\
  !*** ./src/app/help-center-author/help-center-author.controller.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpCenterAuthorController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const help_center_author_entity_1 = __webpack_require__(/*! ./help-center-author.entity */ "./src/app/help-center-author/help-center-author.entity.ts");
const help_center_author_service_1 = __webpack_require__(/*! ./help-center-author.service */ "./src/app/help-center-author/help-center-author.service.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/help-center-author/commands/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let HelpCenterAuthorController = class HelpCenterAuthorController extends core_1.CrudController {
    constructor(commandBus, helpCenterAuthorService) {
        super(helpCenterAuthorService);
        this.commandBus = commandBus;
        this.helpCenterAuthorService = helpCenterAuthorService;
    }
    async findByArticleId(articleId) {
        return this.helpCenterAuthorService.findByArticleId(articleId);
    }
    async getAll(data) {
        const { relations = [], findInput = null } = data;
        return this.helpCenterAuthorService.findAll({
            relations,
            where: findInput
        });
    }
    async createBulk(input) {
        return this.commandBus.execute(new commands_1.ArticleAuthorsBulkCreateCommand(input));
    }
    async deleteBulkByArticleId(data) {
        const { id = null } = data;
        return this.commandBus.execute(new commands_1.KnowledgeBaseArticleBulkDeleteCommand(id));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find authors By Article Id.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found article authors',
        type: help_center_author_entity_1.HelpCenterAuthor
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    common_1.Get(':articleId'),
    tslib_1.__param(0, common_1.Param('articleId')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], HelpCenterAuthorController.prototype, "findByArticleId", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all authors.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found authors',
        type: help_center_author_entity_1.HelpCenterAuthor
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], HelpCenterAuthorController.prototype, "getAll", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create authors in Bulk' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Authors have been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    common_1.Post('createBulk'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], HelpCenterAuthorController.prototype, "createBulk", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Delete Authors By Article Id.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found article authors',
        type: help_center_author_entity_1.HelpCenterAuthor
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    common_1.Delete('deleteBulkByArticleId'),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], HelpCenterAuthorController.prototype, "deleteBulkByArticleId", null);
HelpCenterAuthorController = tslib_1.__decorate([
    swagger_1.ApiTags('KnowledgeBaseAuthor'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _e : Object, typeof (_f = typeof help_center_author_service_1.HelpCenterAuthorService !== "undefined" && help_center_author_service_1.HelpCenterAuthorService) === "function" ? _f : Object])
], HelpCenterAuthorController);
exports.HelpCenterAuthorController = HelpCenterAuthorController;


/***/ }),

/***/ "./src/app/help-center-author/help-center-author.entity.ts":
/*!*****************************************************************!*\
  !*** ./src/app/help-center-author/help-center-author.entity.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpCenterAuthor = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let HelpCenterAuthor = class HelpCenterAuthor extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], HelpCenterAuthor.prototype, "employeeId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], HelpCenterAuthor.prototype, "articleId", void 0);
HelpCenterAuthor = tslib_1.__decorate([
    typeorm_1.Entity('knowledge_base_author')
], HelpCenterAuthor);
exports.HelpCenterAuthor = HelpCenterAuthor;


/***/ }),

/***/ "./src/app/help-center-author/help-center-author.module.ts":
/*!*****************************************************************!*\
  !*** ./src/app/help-center-author/help-center-author.module.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpCenterAuthorModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const help_center_author_service_1 = __webpack_require__(/*! ./help-center-author.service */ "./src/app/help-center-author/help-center-author.service.ts");
const help_center_author_controller_1 = __webpack_require__(/*! ./help-center-author.controller */ "./src/app/help-center-author/help-center-author.controller.ts");
const help_center_author_entity_1 = __webpack_require__(/*! ./help-center-author.entity */ "./src/app/help-center-author/help-center-author.entity.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/help-center-author/commands/handlers/index.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let HelpCenterAuthorModule = class HelpCenterAuthorModule {
};
HelpCenterAuthorModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([help_center_author_entity_1.HelpCenterAuthor, user_entity_1.User]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        providers: [help_center_author_service_1.HelpCenterAuthorService, user_service_1.UserService, ...handlers_1.CommandHandlers],
        controllers: [help_center_author_controller_1.HelpCenterAuthorController],
        exports: [help_center_author_service_1.HelpCenterAuthorService]
    })
], HelpCenterAuthorModule);
exports.HelpCenterAuthorModule = HelpCenterAuthorModule;


/***/ }),

/***/ "./src/app/help-center-author/help-center-author.seed.ts":
/*!***************************************************************!*\
  !*** ./src/app/help-center-author/help-center-author.seed.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomHelpCenterAuthor = exports.createDefaultHelpCenterAuthor = void 0;
const help_center_author_entity_1 = __webpack_require__(/*! ./help-center-author.entity */ "./src/app/help-center-author/help-center-author.entity.ts");
const help_center_article_entity_1 = __webpack_require__(/*! ../help-center-article/help-center-article.entity */ "./src/app/help-center-article/help-center-article.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
exports.createDefaultHelpCenterAuthor = async (connection, defaultEmployees) => {
    if (!defaultEmployees) {
        console.warn('Warning: defaultEmployees not found, default help center author not be created');
        return;
    }
    let mapEmployeeToArticles = [];
    const allArticle = await connection.manager.find(help_center_article_entity_1.HelpCenterArticle, {});
    mapEmployeeToArticles = await operateData(connection, mapEmployeeToArticles, allArticle, defaultEmployees);
    return mapEmployeeToArticles;
};
exports.createRandomHelpCenterAuthor = async (connection, tenants, tenantEmployeeMap) => {
    if (!tenantEmployeeMap) {
        console.warn('Warning: tenantEmployeeMap not found, help center author not be created');
        return;
    }
    let mapEmployeeToArticles = [];
    const employees = [];
    const allArticle = await connection.manager.find(help_center_article_entity_1.HelpCenterArticle, {});
    for (const tenant of tenants) {
        const tenantEmployee = tenantEmployeeMap.get(tenant);
        for (const tenantEmp of tenantEmployee) {
            employees.push(tenantEmp);
        }
    }
    mapEmployeeToArticles = await operateData(connection, mapEmployeeToArticles, allArticle, employees);
    return mapEmployeeToArticles;
};
const insertRandomHelpCenterAuthor = async (connection, data) => {
    await connection.manager.save(data);
};
const operateData = async (connection, mapEmployeeToArticles, allArticle, employees) => {
    for (let i = 0; i < allArticle.length; i++) {
        const employee = faker.random.arrayElement(employees);
        const employeeMap = new help_center_author_entity_1.HelpCenterAuthor();
        employeeMap.employeeId = employee.id;
        employeeMap.articleId = allArticle[i].id;
        employeeMap.organization = employee.organization;
        employeeMap.tenant = employee.organization.tenant;
        mapEmployeeToArticles.push(employeeMap);
    }
    await insertRandomHelpCenterAuthor(connection, mapEmployeeToArticles);
    return mapEmployeeToArticles;
};


/***/ }),

/***/ "./src/app/help-center-author/help-center-author.service.ts":
/*!******************************************************************!*\
  !*** ./src/app/help-center-author/help-center-author.service.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpCenterAuthorService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const help_center_author_entity_1 = __webpack_require__(/*! ./help-center-author.entity */ "./src/app/help-center-author/help-center-author.entity.ts");
let HelpCenterAuthorService = class HelpCenterAuthorService extends crud_service_1.CrudService {
    constructor(HelpCenterAuthorRepository) {
        super(HelpCenterAuthorRepository);
        this.HelpCenterAuthorRepository = HelpCenterAuthorRepository;
    }
    async findByArticleId(articleId) {
        return await this.repository
            .createQueryBuilder('knowledge_base_author')
            .where('knowledge_base_author.articleId = :articleId', {
            articleId
        })
            .getMany();
    }
    async createBulk(createInput) {
        return await this.repository.save(createInput);
    }
    async deleteBulkByArticleId(ids) {
        return await this.repository.delete(ids);
    }
    async getAll() {
        return await this.repository
            .createQueryBuilder('knowledge_base_author')
            .getMany();
    }
};
HelpCenterAuthorService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(help_center_author_entity_1.HelpCenterAuthor)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], HelpCenterAuthorService);
exports.HelpCenterAuthorService = HelpCenterAuthorService;


/***/ }),

/***/ "./src/app/help-center/commands/handlers/help-center-base.bulk.handler.ts":
/*!********************************************************************************!*\
  !*** ./src/app/help-center/commands/handlers/help-center-base.bulk.handler.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KnowledgeBaseBulkDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const __1 = __webpack_require__(/*! .. */ "./src/app/help-center/commands/index.ts");
const help_center_service_1 = __webpack_require__(/*! ../../help-center.service */ "./src/app/help-center/help-center.service.ts");
let KnowledgeBaseBulkDeleteHandler = class KnowledgeBaseBulkDeleteHandler {
    constructor(helpCenterService) {
        this.helpCenterService = helpCenterService;
    }
    async execute(command) {
        const { id } = command;
        const categories = await this.helpCenterService.getCategoriesByBaseId(id);
        await this.helpCenterService.deleteBulkByBaseId(categories.map((item) => item.id));
        return;
    }
};
KnowledgeBaseBulkDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(__1.KnowledgeBaseBulkDeleteCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof help_center_service_1.HelpCenterService !== "undefined" && help_center_service_1.HelpCenterService) === "function" ? _a : Object])
], KnowledgeBaseBulkDeleteHandler);
exports.KnowledgeBaseBulkDeleteHandler = KnowledgeBaseBulkDeleteHandler;


/***/ }),

/***/ "./src/app/help-center/commands/handlers/help-center.bulk.handler.ts":
/*!***************************************************************************!*\
  !*** ./src/app/help-center/commands/handlers/help-center.bulk.handler.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpCenterUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const help_center_service_1 = __webpack_require__(/*! ../../help-center.service */ "./src/app/help-center/help-center.service.ts");
const help_center_bulk_command_1 = __webpack_require__(/*! ../help-center.bulk.command */ "./src/app/help-center/commands/help-center.bulk.command.ts");
let HelpCenterUpdateHandler = class HelpCenterUpdateHandler {
    constructor(helpCenterService) {
        this.helpCenterService = helpCenterService;
        this.diff = function (oldChildren, newChildren) {
            return oldChildren
                .filter((i) => !newChildren.includes(i))
                .concat(newChildren.filter((i) => !oldChildren.includes(i)));
        };
    }
    async execute(command) {
        const { oldChildren, newChildren } = command;
        const updateInput = await this.helpCenterService.getAllNodes();
        for (let i = 0; i < oldChildren.length; i++) {
            updateInput.forEach(async (node) => {
                if (oldChildren[i].id === node.id) {
                    await this.helpCenterService.update(node.id, {
                        index: i
                    });
                }
            });
        }
        const diffArray = this.diff(oldChildren, newChildren);
        if (diffArray.length !== 0)
            for (let i = 0; i < newChildren.length; i++) {
                updateInput.forEach(async (node) => {
                    if (newChildren[i].id === node.id) {
                        await this.helpCenterService.update(node.id, {
                            index: i
                        });
                    }
                });
            }
        return await this.helpCenterService.updateBulk(updateInput);
    }
};
HelpCenterUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(help_center_bulk_command_1.HelpCenterUpdateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof help_center_service_1.HelpCenterService !== "undefined" && help_center_service_1.HelpCenterService) === "function" ? _a : Object])
], HelpCenterUpdateHandler);
exports.HelpCenterUpdateHandler = HelpCenterUpdateHandler;


/***/ }),

/***/ "./src/app/help-center/commands/handlers/index.ts":
/*!********************************************************!*\
  !*** ./src/app/help-center/commands/handlers/index.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const help_center_bulk_handler_1 = __webpack_require__(/*! ./help-center.bulk.handler */ "./src/app/help-center/commands/handlers/help-center.bulk.handler.ts");
const help_center_base_bulk_handler_1 = __webpack_require__(/*! ./help-center-base.bulk.handler */ "./src/app/help-center/commands/handlers/help-center-base.bulk.handler.ts");
exports.CommandHandlers = [
    help_center_bulk_handler_1.HelpCenterUpdateHandler,
    help_center_base_bulk_handler_1.KnowledgeBaseBulkDeleteHandler
];


/***/ }),

/***/ "./src/app/help-center/commands/help-center-base.bulk.command.ts":
/*!***********************************************************************!*\
  !*** ./src/app/help-center/commands/help-center-base.bulk.command.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KnowledgeBaseBulkDeleteCommand = void 0;
class KnowledgeBaseBulkDeleteCommand {
    constructor(id) {
        this.id = id;
    }
}
exports.KnowledgeBaseBulkDeleteCommand = KnowledgeBaseBulkDeleteCommand;
KnowledgeBaseBulkDeleteCommand.type = '[KnowledgeBase] Delete';


/***/ }),

/***/ "./src/app/help-center/commands/help-center.bulk.command.ts":
/*!******************************************************************!*\
  !*** ./src/app/help-center/commands/help-center.bulk.command.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpCenterUpdateCommand = void 0;
class HelpCenterUpdateCommand {
    constructor(oldChildren, newChildren) {
        this.oldChildren = oldChildren;
        this.newChildren = newChildren;
    }
}
exports.HelpCenterUpdateCommand = HelpCenterUpdateCommand;
HelpCenterUpdateCommand.type = '[HelpCenter] Update';


/***/ }),

/***/ "./src/app/help-center/commands/index.ts":
/*!***********************************************!*\
  !*** ./src/app/help-center/commands/index.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KnowledgeBaseBulkDeleteCommand = exports.HelpCenterUpdateCommand = void 0;
var help_center_bulk_command_1 = __webpack_require__(/*! ./help-center.bulk.command */ "./src/app/help-center/commands/help-center.bulk.command.ts");
Object.defineProperty(exports, "HelpCenterUpdateCommand", { enumerable: true, get: function () { return help_center_bulk_command_1.HelpCenterUpdateCommand; } });
var help_center_base_bulk_command_1 = __webpack_require__(/*! ./help-center-base.bulk.command */ "./src/app/help-center/commands/help-center-base.bulk.command.ts");
Object.defineProperty(exports, "KnowledgeBaseBulkDeleteCommand", { enumerable: true, get: function () { return help_center_base_bulk_command_1.KnowledgeBaseBulkDeleteCommand; } });


/***/ }),

/***/ "./src/app/help-center/default-help-centers.ts":
/*!*****************************************************!*\
  !*** ./src/app/help-center/default-help-centers.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_HELP_CENTER_MENUS = void 0;
exports.DEFAULT_HELP_CENTER_MENUS = [
    {
        name: 'Gauzy Platform',
        icon: 'book-open-outline',
        flag: 'base',
        privacy: 'eye-outline',
        language: 'en',
        color: '#d53636',
        index: 0,
        tenant: {},
        children: [
            {
                name: 'Cookies',
                icon: 'alert-circle-outline',
                flag: 'category',
                privacy: 'eye-outline',
                description: 'Information',
                language: 'en',
                color: '#d53636',
                tenant: {},
                index: 0
            },
            {
                name: 'Device',
                icon: 'book-open-outline',
                flag: 'category',
                privacy: 'eye-off-outline',
                description: 'Device Information',
                language: 'en',
                color: '#d53636',
                tenant: {},
                index: 1
            },
            {
                flag: 'category',
                icon: 'book-open-outline',
                privacy: 'eye-off-outline',
                name: 'Privacy',
                description: 'Gauzy Privacy Statement',
                data: 'Usage Information',
                language: 'en',
                color: '#d53636',
                tenant: {},
                index: 2
            },
            {
                flag: 'category',
                icon: 'book-open-outline',
                privacy: 'eye-off-outline',
                name: 'Testing',
                description: 'Gauzy Testing',
                language: 'en',
                color: '#d53636',
                tenant: {},
                index: 3
            }
        ]
    },
    {
        name: 'Ever Platform',
        icon: 'book-open-outline',
        flag: 'base',
        privacy: 'eye-off-outline',
        language: 'en',
        color: '#d53636',
        index: 1,
        tenant: {},
        children: [
            {
                name: 'Cookies',
                icon: 'alert-circle-outline',
                flag: 'category',
                privacy: 'eye-outline',
                description: 'Information',
                language: 'en',
                color: '#d53636',
                tenant: {},
                index: 0
            }
        ]
    },
    {
        flag: 'base',
        icon: 'book-open-outline',
        privacy: 'eye-off-outline',
        name: 'Privacy',
        language: 'en',
        color: '#d53636',
        index: 2,
        tenant: {},
        children: [
            {
                name: 'Cookies',
                icon: 'alert-circle-outline',
                flag: 'category',
                privacy: 'eye-outline',
                description: 'Information',
                language: 'en',
                color: '#d53636',
                tenant: {},
                index: 0
            }
        ]
    }
];


/***/ }),

/***/ "./src/app/help-center/help-center.controller.ts":
/*!*******************************************************!*\
  !*** ./src/app/help-center/help-center.controller.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpCenterController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const help_center_service_1 = __webpack_require__(/*! ./help-center.service */ "./src/app/help-center/help-center.service.ts");
const help_center_entity_1 = __webpack_require__(/*! ./help-center.entity */ "./src/app/help-center/help-center.entity.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/help-center/commands/index.ts");
const help_center_bulk_command_1 = __webpack_require__(/*! ./commands/help-center.bulk.command */ "./src/app/help-center/commands/help-center.bulk.command.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let HelpCenterController = class HelpCenterController extends core_1.CrudController {
    constructor(helpCenterService, commandBus) {
        super(helpCenterService);
        this.helpCenterService = helpCenterService;
        this.commandBus = commandBus;
    }
    async findMenu(data) {
        const { relations = [], findInput = null } = data;
        return this.helpCenterService.findAll({
            relations,
            where: findInput
        });
    }
    async createNode(entity) {
        return this.helpCenterService.create(entity);
    }
    async updateBulk(input) {
        const { oldChildren = [], newChildren = [] } = input;
        return this.commandBus.execute(new help_center_bulk_command_1.HelpCenterUpdateCommand(oldChildren, newChildren));
    }
    async findByBaseId(baseId) {
        return this.helpCenterService.getCategoriesByBaseId(baseId);
    }
    async deleteBulkByBaseId(data) {
        const { id = null } = data;
        return this.commandBus.execute(new commands_1.KnowledgeBaseBulkDeleteCommand(id));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all menus.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found tree',
        type: help_center_entity_1.HelpCenter
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], HelpCenterController.prototype, "findMenu", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Create new category'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Success Add category',
        type: help_center_entity_1.HelpCenter
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_HELP_CENTER_EDIT),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof models_1.IHelpCenter !== "undefined" && models_1.IHelpCenter) === "function" ? _b : Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], HelpCenterController.prototype, "createNode", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update indexes in Bulk' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Indexes have been successfully updated.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_HELP_CENTER_EDIT),
    common_1.Post('updateBulk'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], HelpCenterController.prototype, "updateBulk", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find Categories By Base Id.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found base categories',
        type: help_center_entity_1.HelpCenter
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    common_1.Get(':baseId'),
    tslib_1.__param(0, common_1.Param('baseId')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], HelpCenterController.prototype, "findByBaseId", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Delete Categories By Base Id.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found base categories',
        type: help_center_entity_1.HelpCenter
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    common_1.Delete('deleteBulkByBaseId'),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], HelpCenterController.prototype, "deleteBulkByBaseId", null);
HelpCenterController = tslib_1.__decorate([
    swagger_1.ApiTags('KnowledgeBase'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_g = typeof help_center_service_1.HelpCenterService !== "undefined" && help_center_service_1.HelpCenterService) === "function" ? _g : Object, typeof (_h = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _h : Object])
], HelpCenterController);
exports.HelpCenterController = HelpCenterController;


/***/ }),

/***/ "./src/app/help-center/help-center.entity.ts":
/*!***************************************************!*\
  !*** ./src/app/help-center/help-center.entity.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var HelpCenter_1, _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpCenter = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const help_center_article_entity_1 = __webpack_require__(/*! ../help-center-article/help-center-article.entity */ "./src/app/help-center-article/help-center-article.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let HelpCenter = HelpCenter_1 = class HelpCenter extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], HelpCenter.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], HelpCenter.prototype, "flag", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], HelpCenter.prototype, "icon", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], HelpCenter.prototype, "privacy", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], HelpCenter.prototype, "language", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], HelpCenter.prototype, "color", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], HelpCenter.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], HelpCenter.prototype, "data", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], HelpCenter.prototype, "index", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => HelpCenter_1, (children) => children.children, {
        cascade: ['insert'],
        nullable: true
    }),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IHelpCenter !== "undefined" && models_1.IHelpCenter) === "function" ? _a : Object)
], HelpCenter.prototype, "parent", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany((type) => HelpCenter_1, (children) => children.parent, {
        cascade: ['insert'],
        nullable: true
    }),
    tslib_1.__metadata("design:type", Array)
], HelpCenter.prototype, "children", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => help_center_article_entity_1.HelpCenterArticle, { cascade: true }),
    typeorm_1.JoinTable({
        name: 'HelpCenterArticle'
    }),
    tslib_1.__metadata("design:type", Array)
], HelpCenter.prototype, "articles", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], HelpCenter.prototype, "parentId", void 0);
HelpCenter = HelpCenter_1 = tslib_1.__decorate([
    typeorm_1.Entity('knowledge_base')
], HelpCenter);
exports.HelpCenter = HelpCenter;


/***/ }),

/***/ "./src/app/help-center/help-center.module.ts":
/*!***************************************************!*\
  !*** ./src/app/help-center/help-center.module.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpCenterModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const help_center_controller_1 = __webpack_require__(/*! ./help-center.controller */ "./src/app/help-center/help-center.controller.ts");
const help_center_entity_1 = __webpack_require__(/*! ./help-center.entity */ "./src/app/help-center/help-center.entity.ts");
const help_center_service_1 = __webpack_require__(/*! ./help-center.service */ "./src/app/help-center/help-center.service.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/help-center/commands/handlers/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let HelpCenterModule = class HelpCenterModule {
};
HelpCenterModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([help_center_entity_1.HelpCenter, user_entity_1.User]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        providers: [help_center_service_1.HelpCenterService, user_service_1.UserService, ...handlers_1.CommandHandlers],
        controllers: [help_center_controller_1.HelpCenterController],
        exports: [help_center_service_1.HelpCenterService]
    })
], HelpCenterModule);
exports.HelpCenterModule = HelpCenterModule;


/***/ }),

/***/ "./src/app/help-center/help-center.seed.ts":
/*!*************************************************!*\
  !*** ./src/app/help-center/help-center.seed.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createHelpCenter = void 0;
const help_center_entity_1 = __webpack_require__(/*! ./help-center.entity */ "./src/app/help-center/help-center.entity.ts");
const default_help_centers_1 = __webpack_require__(/*! ./default-help-centers */ "./src/app/help-center/default-help-centers.ts");
exports.createHelpCenter = async (connection, { tenant, org }) => {
    const helpCenterMenuList = default_help_centers_1.DEFAULT_HELP_CENTER_MENUS;
    for (const node of helpCenterMenuList) {
        const helpCenter = Object.assign(Object.assign({}, node), { tenant, organization: org, organizationId: org.id });
        helpCenter.children.forEach((child) => {
            child.organization = org;
            child.tenant = tenant;
        });
        const entity = await createEntity(connection, helpCenter);
        await save(connection, entity);
    }
    return helpCenterMenuList;
};
const save = async (connection, node) => {
    await connection.manager.save(node);
};
const createEntity = async (connection, node) => {
    if (!node) {
        return;
    }
    return connection.manager.create(help_center_entity_1.HelpCenter, node);
};


/***/ }),

/***/ "./src/app/help-center/help-center.service.ts":
/*!****************************************************!*\
  !*** ./src/app/help-center/help-center.service.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelpCenterService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const help_center_entity_1 = __webpack_require__(/*! ./help-center.entity */ "./src/app/help-center/help-center.entity.ts");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
let HelpCenterService = class HelpCenterService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(HelpCenterRepository) {
        super(HelpCenterRepository);
        this.HelpCenterRepository = HelpCenterRepository;
    }
    async updateBulk(updateInput) {
        return await this.repository.save(updateInput);
    }
    async deleteBulkByBaseId(ids) {
        return await this.repository.delete(ids);
    }
    async getCategoriesByBaseId(baseId) {
        return await this.repository
            .createQueryBuilder('knowledge_base')
            .where('knowledge_base.parentId = :baseId', {
            baseId
        })
            .getMany();
    }
    async getAllNodes() {
        return await this.repository
            .createQueryBuilder('knowledge_base')
            .getMany();
    }
};
HelpCenterService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(help_center_entity_1.HelpCenter)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], HelpCenterService);
exports.HelpCenterService = HelpCenterService;


/***/ }),

/***/ "./src/app/home/home.controller.ts":
/*!*****************************************!*\
  !*** ./src/app/home/home.controller.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.HomeController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
let HomeController = class HomeController {
    home() {
        return `Gauzy API`;
    }
};
tslib_1.__decorate([
    common_1.Get('/'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], HomeController.prototype, "home", null);
HomeController = tslib_1.__decorate([
    common_1.Controller()
], HomeController);
exports.HomeController = HomeController;


/***/ }),

/***/ "./src/app/home/home.module.ts":
/*!*************************************!*\
  !*** ./src/app/home/home.module.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.HomeModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const home_controller_1 = __webpack_require__(/*! ./home.controller */ "./src/app/home/home.controller.ts");
let HomeModule = class HomeModule {
};
HomeModule = tslib_1.__decorate([
    common_1.Module({
        controllers: [home_controller_1.HomeController]
    })
], HomeModule);
exports.HomeModule = HomeModule;


/***/ }),

/***/ "./src/app/hubstaff/hubstaff.controller.ts":
/*!*************************************************!*\
  !*** ./src/app/hubstaff/hubstaff.controller.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HubstaffController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const hubstaff_service_1 = __webpack_require__(/*! ./hubstaff.service */ "./src/app/hubstaff/hubstaff.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
let HubstaffController = class HubstaffController {
    constructor(_hubstaffService) {
        this._hubstaffService = _hubstaffService;
    }
    getHubstaffToken(integrationId) {
        return this._hubstaffService.getHubstaffToken(integrationId);
    }
    refreshHubstaffToken(integrationId) {
        return this._hubstaffService.refreshToken(integrationId);
    }
    addIntegration(body) {
        return this._hubstaffService.addIntegration(body);
    }
    async getOrganizations(integrationId, body) {
        return this._hubstaffService.fetchOrganizations(Object.assign({ integrationId }, body));
    }
    async getProjects(organizationId, body) {
        return this._hubstaffService.fetchOrganizationProjects(Object.assign({ organizationId }, body));
    }
    async syncProjects(integrationId, body) {
        return await this._hubstaffService.syncProjects(Object.assign({ integrationId }, body));
    }
    async syncOrganizations(integrationId, body) {
        return await this._hubstaffService.syncOrganizations(Object.assign({ integrationId }, body));
    }
    async autoSync(integrationId, body) {
        return await this._hubstaffService.autoSync(Object.assign({ integrationId }, body));
    }
};
tslib_1.__decorate([
    common_1.Get('/get-token/:integrationId'),
    tslib_1.__param(0, common_1.Param('integrationId')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], HubstaffController.prototype, "getHubstaffToken", null);
tslib_1.__decorate([
    common_1.Get('/refresh-token/:integrationId'),
    tslib_1.__param(0, common_1.Param('integrationId')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], HubstaffController.prototype, "refreshHubstaffToken", null);
tslib_1.__decorate([
    common_1.Post('/add-integration'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], HubstaffController.prototype, "addIntegration", null);
tslib_1.__decorate([
    common_1.Post('/organizations/:integrationId'),
    tslib_1.__param(0, common_1.Param('integrationId')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], HubstaffController.prototype, "getOrganizations", null);
tslib_1.__decorate([
    common_1.Post('/projects/:organizationId'),
    tslib_1.__param(0, common_1.Param('organizationId')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], HubstaffController.prototype, "getProjects", null);
tslib_1.__decorate([
    common_1.Post('/sync-projects/:integrationId'),
    tslib_1.__param(0, common_1.Param('integrationId')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], HubstaffController.prototype, "syncProjects", null);
tslib_1.__decorate([
    common_1.Post('/sync-organizations/:integrationId'),
    tslib_1.__param(0, common_1.Param('integrationId')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], HubstaffController.prototype, "syncOrganizations", null);
tslib_1.__decorate([
    common_1.Post('/auto-sync/:integrationId'),
    tslib_1.__param(0, common_1.Param('integrationId')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], HubstaffController.prototype, "autoSync", null);
HubstaffController = tslib_1.__decorate([
    swagger_1.ApiTags('Integrations'),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_j = typeof hubstaff_service_1.HubstaffService !== "undefined" && hubstaff_service_1.HubstaffService) === "function" ? _j : Object])
], HubstaffController);
exports.HubstaffController = HubstaffController;


/***/ }),

/***/ "./src/app/hubstaff/hubstaff.module.ts":
/*!*********************************************!*\
  !*** ./src/app/hubstaff/hubstaff.module.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.HubstaffModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const hubstaff_service_1 = __webpack_require__(/*! ./hubstaff.service */ "./src/app/hubstaff/hubstaff.service.ts");
const hubstaff_controller_1 = __webpack_require__(/*! ./hubstaff.controller */ "./src/app/hubstaff/hubstaff.controller.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const integration_tenant_entity_1 = __webpack_require__(/*! ../integration-tenant/integration-tenant.entity */ "./src/app/integration-tenant/integration-tenant.entity.ts");
const integration_tenant_service_1 = __webpack_require__(/*! ../integration-tenant/integration-tenant.service */ "./src/app/integration-tenant/integration-tenant.service.ts");
const tenant_entity_1 = __webpack_require__(/*! ../tenant/tenant.entity */ "./src/app/tenant/tenant.entity.ts");
const tenant_service_1 = __webpack_require__(/*! ../tenant/tenant.service */ "./src/app/tenant/tenant.service.ts");
const integration_setting_entity_1 = __webpack_require__(/*! ../integration-setting/integration-setting.entity */ "./src/app/integration-setting/integration-setting.entity.ts");
const integration_setting_service_1 = __webpack_require__(/*! ../integration-setting/integration-setting.service */ "./src/app/integration-setting/integration-setting.service.ts");
const integration_map_entity_1 = __webpack_require__(/*! ../integration-map/integration-map.entity */ "./src/app/integration-map/integration-map.entity.ts");
const integration_map_service_1 = __webpack_require__(/*! ../integration-map/integration-map.service */ "./src/app/integration-map/integration-map.service.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const organization_projects_service_1 = __webpack_require__(/*! ../organization-projects/organization-projects.service */ "./src/app/organization-projects/organization-projects.service.ts");
const integration_entity_setting_service_1 = __webpack_require__(/*! ../integration-entity-setting/integration-entity-setting.service */ "./src/app/integration-entity-setting/integration-entity-setting.service.ts");
const integration_entity_setting_entity_1 = __webpack_require__(/*! ../integration-entity-setting/integration-entity-setting.entity */ "./src/app/integration-entity-setting/integration-entity-setting.entity.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const integration_entity_setting_tied_entity_entity_1 = __webpack_require__(/*! ../integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.entity */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.entity.ts");
const integration_entity_setting_tied_entity_service_1 = __webpack_require__(/*! ../integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.service */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.service.ts");
const role_service_1 = __webpack_require__(/*! ../role/role.service */ "./src/app/role/role.service.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const organization_service_1 = __webpack_require__(/*! ../organization/organization.service */ "./src/app/organization/organization.service.ts");
const role_entity_1 = __webpack_require__(/*! ../role/role.entity */ "./src/app/role/role.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const user_module_1 = __webpack_require__(/*! ../user/user.module */ "./src/app/user/user.module.ts");
const role_module_1 = __webpack_require__(/*! ../role/role.module */ "./src/app/role/role.module.ts");
const role_permissions_module_1 = __webpack_require__(/*! ../role-permissions/role-permissions.module */ "./src/app/role-permissions/role-permissions.module.ts");
let HubstaffModule = class HubstaffModule {
};
HubstaffModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            common_1.HttpModule,
            typeorm_1.TypeOrmModule.forFeature([
                integration_tenant_entity_1.IntegrationTenant,
                tenant_entity_1.Tenant,
                integration_setting_entity_1.IntegrationSetting,
                integration_map_entity_1.IntegrationMap,
                organization_projects_entity_1.OrganizationProject,
                integration_entity_setting_entity_1.IntegrationEntitySetting,
                integration_entity_setting_tied_entity_entity_1.IntegrationEntitySettingTiedEntity,
                role_entity_1.Role,
                organization_entity_1.Organization,
                user_entity_1.User
            ]),
            cqrs_1.CqrsModule,
            role_module_1.RoleModule,
            user_module_1.UserModule,
            role_permissions_module_1.RolePermissionsModule
        ],
        controllers: [hubstaff_controller_1.HubstaffController],
        providers: [
            hubstaff_service_1.HubstaffService,
            integration_tenant_service_1.IntegrationTenantService,
            tenant_service_1.TenantService,
            integration_setting_service_1.IntegrationSettingService,
            integration_map_service_1.IntegrationMapService,
            organization_projects_service_1.OrganizationProjectsService,
            integration_entity_setting_service_1.IntegrationEntitySettingService,
            integration_entity_setting_tied_entity_service_1.IntegrationEntitySettingTiedEntityService,
            organization_service_1.OrganizationService,
            role_service_1.RoleService,
            user_service_1.UserService
        ]
    })
], HubstaffModule);
exports.HubstaffModule = HubstaffModule;


/***/ }),

/***/ "./src/app/hubstaff/hubstaff.service.ts":
/*!**********************************************!*\
  !*** ./src/app/hubstaff/hubstaff.service.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HubstaffService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const operators_1 = __webpack_require__(/*! rxjs/operators */ "rxjs/operators");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const integration_tenant_service_1 = __webpack_require__(/*! ../integration-tenant/integration-tenant.service */ "./src/app/integration-tenant/integration-tenant.service.ts");
const integration_setting_service_1 = __webpack_require__(/*! ../integration-setting/integration-setting.service */ "./src/app/integration-setting/integration-setting.service.ts");
const integration_map_service_1 = __webpack_require__(/*! ../integration-map/integration-map.service */ "./src/app/integration-map/integration-map.service.ts");
const integration_entity_setting_service_1 = __webpack_require__(/*! ../integration-entity-setting/integration-entity-setting.service */ "./src/app/integration-entity-setting/integration-entity-setting.service.ts");
const integration_hubstaff_1 = __webpack_require__(/*! @gauzy/integration-hubstaff */ "./libs/integration-hubstaff/src/index.ts");
const commands_1 = __webpack_require__(/*! ../organization/commands */ "./src/app/organization/commands/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const organization_contact_create_command_1 = __webpack_require__(/*! ../organization-contact/commands/organization-contact-create.command */ "./src/app/organization-contact/commands/organization-contact-create.command.ts");
const commands_2 = __webpack_require__(/*! ../tasks/commands */ "./src/app/tasks/commands/index.ts");
const integration_entity_setting_tied_entity_service_1 = __webpack_require__(/*! ../integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.service */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.service.ts");
const commands_3 = __webpack_require__(/*! ../employee/commands */ "./src/app/employee/commands/index.ts");
const role_service_1 = __webpack_require__(/*! ../role/role.service */ "./src/app/role/role.service.ts");
const organization_service_1 = __webpack_require__(/*! ../organization/organization.service */ "./src/app/organization/organization.service.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const employee_get_command_1 = __webpack_require__(/*! ../employee/commands/employee.get.command */ "./src/app/employee/commands/employee.get.command.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const commands_4 = __webpack_require__(/*! ../timesheet/commands */ "./src/app/timesheet/commands/index.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const time_log_create_command_1 = __webpack_require__(/*! ../timesheet/time-log/commands/time-log-create.command */ "./src/app/timesheet/time-log/commands/time-log-create.command.ts");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const organization_project_create_command_1 = __webpack_require__(/*! ../organization-projects/commands/organization-project.create.command */ "./src/app/organization-projects/commands/organization-project.create.command.ts");
const organization_project_update_command_1 = __webpack_require__(/*! ../organization-projects/commands/organization-project.update.command */ "./src/app/organization-projects/commands/organization-project.update.command.ts");
const task_update_command_1 = __webpack_require__(/*! ../tasks/commands/task-update.command */ "./src/app/tasks/commands/task-update.command.ts");
const environment_2 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
let HubstaffService = class HubstaffService {
    constructor(_httpService, _integrationService, _integrationSettingService, _integrationMapService, _integrationEntitySettingService, _integrationEntitySettingTiedEntityService, _roleService, _organizationService, _userService, commandBus) {
        this._httpService = _httpService;
        this._integrationService = _integrationService;
        this._integrationSettingService = _integrationSettingService;
        this._integrationMapService = _integrationMapService;
        this._integrationEntitySettingService = _integrationEntitySettingService;
        this._integrationEntitySettingTiedEntityService = _integrationEntitySettingTiedEntityService;
        this._roleService = _roleService;
        this._organizationService = _organizationService;
        this._userService = _userService;
        this.commandBus = commandBus;
    }
    async fetchIntegration(url, token) {
        const headers = {
            Authorization: `Bearer ${token}`
        };
        try {
            return await this._httpService
                .get(url, { headers })
                .pipe(operators_1.map((response) => response.data))
                .toPromise();
        }
        catch (error) {
            if (error.response.status === common_1.HttpStatus.UNAUTHORIZED) {
                throw new common_1.UnauthorizedException();
            }
            throw new common_1.BadRequestException(error);
        }
    }
    async refreshToken(integrationId) {
        const { items: settings } = await this._integrationSettingService.findAll({
            where: {
                integration: { id: integrationId }
            }
        });
        const headers = {
            'Content-Type': 'application/x-www-form-urlencoded'
        };
        const urlParams = new URLSearchParams();
        const { client_id, client_secret, refresh_token } = settings.reduce((prev, current) => {
            return Object.assign(Object.assign({}, prev), { client_id: current.settingsName === 'client_id'
                    ? current.settingsValue
                    : prev.client_id, client_secret: current.settingsName === 'client_secret'
                    ? current.settingsValue
                    : prev.client_secret, refresh_token: current.settingsName === 'refresh_token'
                    ? current.settingsValue
                    : prev.refresh_token });
        }, {
            client_id: '',
            client_secret: '',
            refresh_token: ''
        });
        urlParams.append('grant_type', 'refresh_token');
        urlParams.append('refresh_token', refresh_token);
        urlParams.append('client_id', client_id);
        urlParams.append('client_secret', client_secret);
        try {
            const tokens = await this._httpService
                .post('https://account.hubstaff.com/access_tokens', urlParams, {
                headers
            })
                .pipe(operators_1.map((response) => response.data))
                .toPromise();
            const settingsDto = settings.map((setting) => {
                if (setting.settingsName === 'access_token') {
                    setting.settingsValue = tokens.access_token;
                }
                if (setting.settingsName === 'refresh_token') {
                    setting.settingsValue = tokens.refresh_token;
                }
                return setting;
            });
            await this._integrationSettingService.create(settingsDto);
            return tokens;
        }
        catch (error) {
            throw new common_1.BadRequestException(error);
        }
    }
    async getHubstaffToken(integrationId) {
        const { record: integrationSetting } = await this._integrationSettingService.findOneOrFail({
            where: {
                integration: { id: integrationId },
                settingsName: 'access_token'
            }
        });
        return integrationSetting;
    }
    async addIntegration(body) {
        var e_1, _a;
        const headers = {
            'Content-Type': 'application/x-www-form-urlencoded'
        };
        const { client_id, client_secret, code, redirect_uri, organizationId } = body;
        const urlParams = new URLSearchParams();
        urlParams.append('client_id', client_id);
        urlParams.append('code', code);
        urlParams.append('grant_type', 'authorization_code');
        urlParams.append('redirect_uri', redirect_uri);
        urlParams.append('client_secret', client_secret);
        const tenantId = context_1.RequestContext.currentTenantId();
        const tiedEntities = [];
        try {
            for (var PROJECT_TIED_ENTITIES_1 = tslib_1.__asyncValues(integration_hubstaff_1.PROJECT_TIED_ENTITIES), PROJECT_TIED_ENTITIES_1_1; PROJECT_TIED_ENTITIES_1_1 = await PROJECT_TIED_ENTITIES_1.next(), !PROJECT_TIED_ENTITIES_1_1.done;) {
                const entity = PROJECT_TIED_ENTITIES_1_1.value;
                const create = await this._integrationEntitySettingTiedEntityService.create(Object.assign(entity, { organizationId, tenantId }));
                tiedEntities.push(create);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (PROJECT_TIED_ENTITIES_1_1 && !PROJECT_TIED_ENTITIES_1_1.done && (_a = PROJECT_TIED_ENTITIES_1.return)) await _a.call(PROJECT_TIED_ENTITIES_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        const settingsForEntities = integration_hubstaff_1.DEFAULT_ENTITY_SETTINGS.map((settingEntity) => {
            return Object.assign(settingEntity, {
                organizationId,
                tenantId
            });
        }).map((settingEntity) => settingEntity.entity === models_1.IntegrationEntity.PROJECT
            ? Object.assign(Object.assign({}, settingEntity), { tiedEntities: tiedEntities }) : settingEntity);
        const entitySettings = await this._integrationEntitySettingService.create(settingsForEntities);
        return this._httpService
            .post('https://account.hubstaff.com/access_tokens', urlParams, {
            headers
        })
            .pipe(operators_1.switchMap(({ data }) => this._integrationService.addIntegration({
            organizationId,
            tenantId,
            name: models_1.IntegrationEnum.HUBSTAFF,
            entitySettings,
            settings: [
                {
                    settingsName: 'client_id',
                    settingsValue: client_id
                },
                {
                    settingsName: 'client_secret',
                    settingsValue: client_secret
                },
                {
                    settingsName: 'access_token',
                    settingsValue: data.access_token
                },
                {
                    settingsName: 'refresh_token',
                    settingsValue: data.refresh_token
                }
            ].map((setting) => {
                return Object.assign({ organizationId }, setting);
            })
        })), operators_1.catchError((err) => {
            throw new common_1.BadRequestException(err);
        }))
            .toPromise();
    }
    async fetchOrganizations({ integrationId, token }) {
        const { organizations } = await this.fetchIntegration('https://api.hubstaff.com/v2/organizations', token);
        return organizations;
    }
    async fetchOrganizationProjects({ organizationId, token }) {
        const { projects } = await this.fetchIntegration(`https://api.hubstaff.com/v2/organizations/${organizationId}/projects?status=all`, token);
        return projects;
    }
    async syncProjects({ integrationId, organizationId, projects }) {
        const tenantId = context_1.RequestContext.currentTenantId();
        const integrationMaps = await projects.map(async ({ name, sourceId, billable, description }) => {
            const payload = {
                name,
                organizationId,
                public: true,
                billing: models_1.ProjectBillingEnum.RATE,
                currency: environment_2.environment.defaultCurrency,
                billable,
                description
            };
            const { record } = await this._integrationMapService.findOneOrFail({
                where: {
                    sourceId,
                    entity: models_1.IntegrationEntity.PROJECT,
                    organizationId,
                    tenantId
                }
            });
            if (record) {
                await this.commandBus.execute(new organization_project_update_command_1.OrganizationProjectUpdateCommand(Object.assign(payload, { id: record.gauzyId })));
                return record;
            }
            const gauzyProject = await this.commandBus.execute(new organization_project_create_command_1.OrganizationProjectCreateCommand(payload));
            return await this._integrationMapService.create({
                gauzyId: gauzyProject.id,
                integrationId,
                sourceId,
                entity: models_1.IntegrationEntity.PROJECT,
                organizationId
            });
        });
        return await Promise.all(integrationMaps);
    }
    async syncOrganizations({ integrationId, organizations }) {
        const { tenantId } = context_1.RequestContext.currentUser();
        const integrationMaps = await organizations.map(async (organization) => {
            const { sourceId } = organization;
            const { record } = await this._integrationMapService.findOneOrFail({
                where: {
                    sourceId,
                    entity: models_1.IntegrationEntity.ORGANIZATION,
                    tenantId
                }
            });
            if (record) {
                delete organization['sourceId'];
                await this.commandBus.execute(new commands_1.OrganizationUpdateCommand(Object.assign(organization, {
                    gauzyId: record.gauzyId,
                    imageUrl: organization.imageUrl ||
                        core_1.getDummyImage(330, 300, organization.name
                            .charAt(0)
                            .toUpperCase())
                })));
                return record;
            }
            const gauzyOrganization = await this.commandBus.execute(new commands_1.OrganizationCreateCommand(Object.assign(Object.assign({}, organization), { imageUrl: organization.imageUrl ||
                    core_1.getDummyImage(330, 300, organization.name.charAt(0).toUpperCase()) })));
            return await this._integrationMapService.create({
                gauzyId: gauzyOrganization.id,
                integrationId,
                sourceId,
                entity: models_1.IntegrationEntity.ORGANIZATION,
                organizationId: gauzyOrganization.id
            });
        });
        return await Promise.all(integrationMaps);
    }
    async syncClients({ integrationId, organizationId, clients }) {
        const integrationMaps = await clients.map(async ({ name, id, emails }) => {
            const gauzyClient = await this.commandBus.execute(new organization_contact_create_command_1.OrganizationContactCreateCommand({
                name,
                organizationId,
                primaryEmail: emails[0],
                contactType: models_1.ContactType.CLIENT
            }));
            return await this._integrationMapService.create({
                gauzyId: gauzyClient.id,
                integrationId,
                sourceId: id,
                entity: models_1.IntegrationEntity.CLIENT,
                organizationId
            });
        });
        return await Promise.all(integrationMaps);
    }
    async syncScreenshots({ integrationId, projectId, screenshots, token, organizationId }) {
        var e_2, _a;
        let integratedScreenshots = [];
        try {
            for (var screenshots_1 = tslib_1.__asyncValues(screenshots), screenshots_1_1; screenshots_1_1 = await screenshots_1.next(), !screenshots_1_1.done;) {
                const screenshot = screenshots_1_1.value;
                const { id, time_slot, full_url, thumb_url, recorded_at, user_id } = screenshot;
                const employee = await this._getEmployeeByHubstaffUserId(user_id, token, integrationId, organizationId);
                const gauzyScreenshot = await this.commandBus.execute(new commands_4.ScreenshotCreateCommand({
                    file: full_url,
                    thumb: thumb_url,
                    recordedAt: recorded_at,
                    activityTimestamp: time_slot,
                    employeeId: employee.gauzyId,
                    organizationId
                }));
                const integratedScreenshot = await this._integrationMapService.create({
                    gauzyId: gauzyScreenshot.id,
                    integrationId,
                    sourceId: id,
                    entity: models_1.IntegrationEntity.SCREENSHOT,
                    organizationId
                });
                integratedScreenshots = integratedScreenshots.concat(integratedScreenshot);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (screenshots_1_1 && !screenshots_1_1.done && (_a = screenshots_1.return)) await _a.call(screenshots_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return integratedScreenshots;
    }
    async syncTasks({ integrationId, projectId, tasks, organizationId }) {
        const { id: creatorId, tenantId } = context_1.RequestContext.currentUser();
        const integrationMaps = await tasks.map(async ({ summary: title, id, status, due_at }) => {
            if (!due_at) {
                due_at = new Date(moment().add(2, 'week').format('YYYY-MM-DD HH:mm:ss'));
            }
            const payload = {
                title,
                projectId,
                description: 'Hubstaff Task',
                status: status.charAt(0).toUpperCase() + status.slice(1),
                creatorId,
                dueDate: due_at,
                organizationId,
                tenantId
            };
            const { record } = await this._integrationMapService.findOneOrFail({
                where: {
                    sourceId: id,
                    entity: models_1.IntegrationEntity.TASK,
                    organizationId,
                    tenantId
                }
            });
            if (record) {
                await this.commandBus.execute(new task_update_command_1.TaskUpdateCommand(Object.assign(payload, { id: record.gauzyId })));
                return record;
            }
            const gauzyTask = await this.commandBus.execute(new commands_2.TaskCreateCommand(payload));
            return await this._integrationMapService.create({
                gauzyId: gauzyTask.id,
                integrationId,
                sourceId: id,
                entity: models_1.IntegrationEntity.TASK,
                organizationId
            });
        });
        return await Promise.all(integrationMaps);
    }
    async _getEmployeeByHubstaffUserId(user_id, token, integrationId, organizationId) {
        const tenantId = context_1.RequestContext.currentTenantId();
        const { record } = await this._integrationMapService.findOneOrFail({
            where: {
                sourceId: user_id,
                entity: models_1.IntegrationEntity.EMPLOYEE,
                organizationId,
                tenantId
            }
        });
        return record
            ? record
            : await this._handleEmployee({
                user_id,
                token,
                integrationId,
                organizationId
            });
    }
    async syncTimeSlots(timeSlots, token, integrationId, organizationId) {
        var e_3, _a;
        let integratedTimeSlots = [];
        try {
            for (var timeSlots_1 = tslib_1.__asyncValues(timeSlots), timeSlots_1_1; timeSlots_1_1 = await timeSlots_1.next(), !timeSlots_1_1.done;) {
                const timeSlot = timeSlots_1_1.value;
                const employee = await this._getEmployeeByHubstaffUserId(timeSlot.user_id, token, integrationId, organizationId);
                const gauzyTimeSlot = await this.commandBus.execute(new commands_4.TimeSlotCreateCommand({
                    employeeId: employee.gauzyId,
                    startedAt: timeSlot.starts_at,
                    keyboard: timeSlot.keyboard,
                    mouse: timeSlot.mouse,
                    overall: timeSlot.overall,
                    duration: timeSlot.tracked,
                    time_slot: timeSlot.time_slot,
                    organizationId
                }));
                const integratedSlots = await this._integrationMapService.create({
                    gauzyId: gauzyTimeSlot.id,
                    integrationId,
                    sourceId: timeSlot.id,
                    entity: models_1.IntegrationEntity.TIME_SLOT,
                    organizationId
                });
                integratedTimeSlots = integratedTimeSlots.concat(integratedSlots);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (timeSlots_1_1 && !timeSlots_1_1.done && (_a = timeSlots_1.return)) await _a.call(timeSlots_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return integratedTimeSlots;
    }
    async syncTimeLogs(timeLogs, token, integrationId, organizationId, projectId, start, end) {
        var e_4, _a;
        let integratedTimeLogs = [];
        const tenantId = context_1.RequestContext.currentRequest();
        try {
            for (var timeLogs_1 = tslib_1.__asyncValues(timeLogs), timeLogs_1_1; timeLogs_1_1 = await timeLogs_1.next(), !timeLogs_1_1.done;) {
                const timeLog = timeLogs_1_1.value;
                const employee = await this._getEmployeeByHubstaffUserId(timeLog.user_id, token, integrationId, organizationId);
                let timesheet = await this.commandBus.execute(new commands_4.TimesheetGetCommand({
                    where: {
                        employeeId: employee.gauzyId,
                        organizationId,
                        tenantId
                    }
                }));
                if (!timesheet) {
                    timesheet = await this.commandBus.execute(new commands_4.TimesheetCreateCommand({
                        startedAt: start,
                        stoppedAt: end,
                        employeeId: employee.gauzyId,
                        mouse: 0,
                        keyboard: 0,
                        duration: 0,
                        organizationId
                    }));
                }
                const gauzyTimeLog = await this.commandBus.execute(new time_log_create_command_1.TimeLogCreateCommand({
                    projectId,
                    employeeId: employee.gauzyId,
                    logType: timeLog.logType,
                    duration: timeLog.tracked,
                    startedAt: timeLog.starts_at,
                    timesheetId: timesheet.id,
                    source: models_1.TimeLogSourceEnum.HUBSTAFF,
                    organizationId
                }));
                const integratedLogs = await this._integrationMapService.create({
                    gauzyId: gauzyTimeLog.id,
                    integrationId,
                    sourceId: timeLog.id,
                    entity: models_1.IntegrationEntity.TIME_LOG,
                    organizationId
                });
                integratedTimeLogs = integratedTimeLogs.concat(integratedLogs);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (timeLogs_1_1 && !timeLogs_1_1.done && (_a = timeLogs_1.return)) await _a.call(timeLogs_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return integratedTimeLogs;
    }
    async syncEmployee({ integrationId, user, organizationId }) {
        const tenantId = context_1.RequestContext.currentTenantId();
        const { record } = await this._userService.findOneOrFail({
            where: { email: user.email }
        });
        let employee;
        if (record) {
            employee = await this.commandBus.execute(new employee_get_command_1.EmployeeGetCommand({ where: { userId: record.id } }));
        }
        else {
            const [role, organization] = await Promise.all([
                await this._roleService.findOne({
                    where: { name: models_1.RolesEnum.EMPLOYEE }
                }),
                await this._organizationService.findOne({
                    where: { id: organizationId }
                })
            ]);
            const [firstName, lastName] = user.name.split(' ');
            const isActive = user.status === 'active' ? true : false;
            employee = await this.commandBus.execute(new commands_3.EmployeeCreateCommand({
                user: {
                    email: user.email,
                    firstName,
                    lastName,
                    role,
                    tags: null,
                    tenantId,
                    thirdPartyId: user.id
                },
                password: environment_1.environment.defaultHubstaffUserPass,
                organization,
                startedWorkOn: new Date(moment().format('YYYY-MM-DD HH:mm:ss')),
                isActive
            }));
        }
        return await this._integrationMapService.create({
            gauzyId: employee.id,
            integrationId,
            sourceId: user.id,
            entity: models_1.IntegrationEntity.EMPLOYEE,
            organizationId
        });
    }
    async _handleEmployee({ user_id, integrationId, token, organizationId }) {
        const { user } = await this.fetchIntegration(`https://api.hubstaff.com/v2/users/${user_id}`, token);
        return await this.syncEmployee({
            integrationId,
            user,
            organizationId
        });
    }
    async _handleProjects(sourceId, integrationId, gauzyId, token) {
        try {
            const { projects } = await this.fetchIntegration(`https://api.hubstaff.com/v2/organizations/${sourceId}/projects?status=all`, token);
            const projectMap = projects.map(({ name, id, billable, description }) => ({
                name,
                sourceId: id,
                billable,
                description
            }));
            return await this.syncProjects({
                integrationId,
                organizationId: gauzyId,
                projects: projectMap
            });
        }
        catch (error) {
            throw new common_1.BadRequestException('Cannot sync Projects');
        }
    }
    async _handleClients(sourceId, integrationId, gauzyId, token) {
        const { clients } = await this.fetchIntegration(`https://api.hubstaff.com/v2/organizations/${sourceId}/clients?status=active`, token);
        return await this.syncClients({
            integrationId,
            organizationId: gauzyId,
            clients
        });
    }
    async _handleTasks(projectsMap, integrationId, token, gauzyId) {
        const tasksMap = await Promise.all(projectsMap.map(async (project) => {
            const { tasks } = await this.fetchIntegration(`https://api.hubstaff.com/v2/projects/${project.sourceId}/tasks`, token);
            return await this.syncTasks({
                integrationId,
                tasks,
                projectId: project.gauzyId,
                organizationId: gauzyId
            });
        }));
        return tasksMap;
    }
    async syncUrlActivities({ integrationId, projectId, activities, token, organizationId }) {
        var e_5, _a;
        let integrationMaps = [];
        try {
            for (var activities_1 = tslib_1.__asyncValues(activities), activities_1_1; activities_1_1 = await activities_1.next(), !activities_1_1.done;) {
                const activity = activities_1_1.value;
                const { id, site, tracked, user_id } = activity;
                let { date } = activity;
                const { record } = await this._integrationMapService.findOneOrFail({
                    where: {
                        sourceId: id,
                        entity: models_1.IntegrationEntity.ACTIVITY
                    }
                });
                if (record) {
                    return record;
                }
                const employee = await this._getEmployeeByHubstaffUserId(user_id, token, integrationId, organizationId);
                const time = moment(date).format('HH:mm:ss');
                date = moment(date).format('YYYY-MM-DD');
                const gauzyActivity = await this.commandBus.execute(new commands_4.ActivityCreateCommand({
                    title: site,
                    duration: tracked,
                    type: 'URL',
                    date,
                    time,
                    projectId,
                    employeeId: employee.gauzyId
                }));
                const integrationMap = await this._integrationMapService.create({
                    gauzyId: gauzyActivity.id,
                    integrationId,
                    sourceId: id,
                    entity: models_1.IntegrationEntity.ACTIVITY
                });
                integrationMaps = integrationMaps.concat(integrationMap);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (activities_1_1 && !activities_1_1.done && (_a = activities_1.return)) await _a.call(activities_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return integrationMaps;
    }
    async _handleUrlActivities(projectsMap, integrationId, token, organizationId, dateRange) {
        try {
            const start = moment(dateRange.start).format('YYYY-MM-DD');
            const end = moment(dateRange.end).format('YYYY-MM-DD');
            const pageLimit = 500;
            const urlActivitiesMapped = await Promise.all(projectsMap.map(async (project) => {
                const { gauzyId, sourceId } = project;
                const syncedActivities = {
                    urlActivities: []
                };
                let stillRecordsAvailable = true;
                let nextPageStartId = null;
                while (stillRecordsAvailable) {
                    let url = `https://api.hubstaff.com/v2/projects/${sourceId}/url_activities?page_limit=${pageLimit}&time_slot[start]=${start}&time_slot[stop]=${end}`;
                    if (nextPageStartId) {
                        url += `&page_start_id=${nextPageStartId}`;
                    }
                    const { urls, pagination = {} } = await this.fetchIntegration(url, token);
                    if (pagination &&
                        pagination.hasOwnProperty('next_page_start_id')) {
                        const { next_page_start_id } = pagination;
                        nextPageStartId = next_page_start_id;
                        stillRecordsAvailable = true;
                    }
                    else {
                        nextPageStartId = null;
                        stillRecordsAvailable = false;
                    }
                    syncedActivities.urlActivities.push(urls);
                }
                const activities = [].concat.apply([], syncedActivities.urlActivities);
                return await this.syncUrlActivities({
                    integrationId,
                    projectId: gauzyId,
                    activities,
                    token,
                    organizationId
                });
            }));
            return urlActivitiesMapped;
        }
        catch (error) {
            throw new common_1.BadRequestException('Cannot sync url activities');
        }
    }
    async syncAppActivities({ integrationId, projectId, activities, token, organizationId }) {
        var e_6, _a;
        let integratedAppActivities = [];
        try {
            for (var activities_2 = tslib_1.__asyncValues(activities), activities_2_1; activities_2_1 = await activities_2.next(), !activities_2_1.done;) {
                const activity = activities_2_1.value;
                const { id, name, tracked, user_id } = activity;
                let { date } = activity;
                const { record } = await this._integrationMapService.findOneOrFail({
                    where: {
                        sourceId: id,
                        entity: models_1.IntegrationEntity.ACTIVITY,
                        organizationId
                    }
                });
                if (record) {
                    return record;
                }
                const employee = await this._getEmployeeByHubstaffUserId(user_id, token, integrationId, organizationId);
                const time = moment(date).format('HH:mm:ss');
                date = moment(date).format('YYYY-MM-DD');
                const gauzyActivity = await this.commandBus.execute(new commands_4.ActivityCreateCommand({
                    title: name,
                    duration: tracked,
                    type: 'APP',
                    time,
                    date,
                    projectId,
                    employeeId: employee.gauzyId,
                    organizationId
                }));
                const integartedActivity = await this._integrationMapService.create({
                    gauzyId: gauzyActivity.id,
                    integrationId,
                    sourceId: id,
                    entity: models_1.IntegrationEntity.ACTIVITY,
                    organizationId
                });
                integratedAppActivities = integratedAppActivities.concat(integartedActivity);
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (activities_2_1 && !activities_2_1.done && (_a = activities_2.return)) await _a.call(activities_2);
            }
            finally { if (e_6) throw e_6.error; }
        }
        return integratedAppActivities;
    }
    async _handleAppActivities(projectsMap, integrationId, token, organizationId, dateRange) {
        try {
            const start = moment(dateRange.start).format('YYYY-MM-DD');
            const end = moment(dateRange.end).format('YYYY-MM-DD');
            const pageLimit = 500;
            const appActivitiesMapped = await Promise.all(projectsMap.map(async (project) => {
                const { gauzyId, sourceId } = project;
                const syncedActivities = {
                    applicationActivities: []
                };
                let stillRecordsAvailable = true;
                let nextPageStartId = null;
                while (stillRecordsAvailable) {
                    let url = `https://api.hubstaff.com/v2/projects/${sourceId}/application_activities?page_limit=${pageLimit}&time_slot[start]=${start}&time_slot[stop]=${end}`;
                    if (nextPageStartId) {
                        url += `&page_start_id=${nextPageStartId}`;
                    }
                    const { applications, pagination = {} } = await this.fetchIntegration(url, token);
                    if (pagination &&
                        pagination.hasOwnProperty('next_page_start_id')) {
                        const { next_page_start_id } = pagination;
                        nextPageStartId = next_page_start_id;
                        stillRecordsAvailable = true;
                    }
                    else {
                        nextPageStartId = null;
                        stillRecordsAvailable = false;
                    }
                    syncedActivities.applicationActivities.push(applications);
                }
                const activities = [].concat.apply([], syncedActivities.applicationActivities);
                return await this.syncAppActivities({
                    integrationId,
                    projectId: gauzyId,
                    activities,
                    token,
                    organizationId
                });
            }));
            return appActivitiesMapped;
        }
        catch (error) {
            throw new common_1.BadRequestException('Cannot sync application activities');
        }
    }
    async _handleActivities(projectsMap, integrationId, token, organizationId, dateRange) {
        var e_7, _a;
        const start = moment(dateRange.start).format('YYYY-MM-DD');
        const end = moment(dateRange.end).format('YYYY-MM-DD');
        const syncedActivities = {
            integratedTimeLogs: [],
            integratedTimeSlots: []
        };
        try {
            for (var projectsMap_1 = tslib_1.__asyncValues(projectsMap), projectsMap_1_1; projectsMap_1_1 = await projectsMap_1.next(), !projectsMap_1_1.done;) {
                const project = projectsMap_1_1.value;
                const timeSlots = await this.fetchIntegration(`https://api.hubstaff.com/v2/projects/${project.sourceId}/activities?time_slot[start]=${start}&time_slot[stop]=${end}`, token);
                const integratedTimeLogs = await this.syncTimeLogs(this.formatedLogsFromSlots(timeSlots.activities), token, integrationId, organizationId, project.gauzyId, start, end);
                const integratedTimeSlots = await this.syncTimeSlots(timeSlots.activities, token, integrationId, organizationId);
                syncedActivities.integratedTimeLogs = syncedActivities.integratedTimeLogs.concat(integratedTimeLogs);
                syncedActivities.integratedTimeSlots = syncedActivities.integratedTimeSlots.concat(integratedTimeSlots);
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (projectsMap_1_1 && !projectsMap_1_1.done && (_a = projectsMap_1.return)) await _a.call(projectsMap_1);
            }
            finally { if (e_7) throw e_7.error; }
        }
        return syncedActivities;
    }
    async _handleScreenshots(projectsMap, integrationId, token, organizationId, dateRange) {
        try {
            const start = moment(dateRange.start).format('YYYY-MM-DD');
            const end = moment(dateRange.end).format('YYYY-MM-DD');
            const pageLimit = 500;
            const screenshotsMapped = await Promise.all(projectsMap.map(async (project) => {
                const { gauzyId, sourceId } = project;
                const syncedActivities = {
                    screenshots: []
                };
                let stillRecordsAvailable = true;
                let nextPageStartId = null;
                while (stillRecordsAvailable) {
                    let url = `https://api.hubstaff.com/v2/projects/${sourceId}/screenshots?page_limit=${pageLimit}&time_slot[start]=${start}&time_slot[stop]=${end}`;
                    if (nextPageStartId) {
                        url += `&page_start_id=${nextPageStartId}`;
                    }
                    const { screenshots: fetchScreenshots, pagination = {} } = await this.fetchIntegration(url, token);
                    if (pagination &&
                        pagination.hasOwnProperty('next_page_start_id')) {
                        const { next_page_start_id } = pagination;
                        nextPageStartId = next_page_start_id;
                        stillRecordsAvailable = true;
                    }
                    else {
                        nextPageStartId = null;
                        stillRecordsAvailable = false;
                    }
                    syncedActivities.screenshots.push(fetchScreenshots);
                }
                const screenshots = [].concat.apply([], syncedActivities.screenshots);
                return await this.syncScreenshots({
                    integrationId,
                    projectId: gauzyId,
                    screenshots,
                    token,
                    organizationId
                });
            }));
            return screenshotsMapped;
        }
        catch (error) {
            throw new common_1.BadRequestException('Cannot sync activities screenshots');
        }
    }
    async autoSync({ integrationId, entitiesToSync, gauzyId, sourceId, token, dateRange }) {
        const integratedMaps = await Promise.all(entitiesToSync.map(async (setting) => {
            switch (setting.entity) {
                case models_1.IntegrationEntity.PROJECT:
                    let tasks, activities, screenshots;
                    const projectsMap = await this._handleProjects(sourceId, integrationId, gauzyId, token);
                    const taskSetting = setting.tiedEntities.find((res) => res.entity === models_1.IntegrationEntity.TASK);
                    const activitySetting = setting.tiedEntities.find((res) => res.entity === models_1.IntegrationEntity.ACTIVITY);
                    const screenshotSetting = setting.tiedEntities.find((res) => res.entity === models_1.IntegrationEntity.SCREENSHOT);
                    if (typeof taskSetting === 'object' &&
                        taskSetting.sync) {
                        tasks = await this._handleTasks(projectsMap, integrationId, token, gauzyId);
                    }
                    if (typeof activitySetting === 'object' &&
                        activitySetting.sync) {
                        activities = await this._handleActivities(projectsMap, integrationId, token, gauzyId, dateRange);
                        activities.application = await this._handleAppActivities(projectsMap, integrationId, token, gauzyId, dateRange);
                        activities.urls = await this._handleUrlActivities(projectsMap, integrationId, token, gauzyId, dateRange);
                    }
                    if (typeof screenshotSetting === 'object' &&
                        screenshotSetting.sync) {
                        screenshots = await this._handleScreenshots(projectsMap, integrationId, token, gauzyId, dateRange);
                    }
                    return { tasks, projectsMap, activities, screenshots };
                case models_1.IntegrationEntity.CLIENT:
                    const clients = await this._handleClients(sourceId, integrationId, gauzyId, token);
                    return { clients };
            }
        }));
        return integratedMaps;
    }
    formatedLogsFromSlots(timeSlots) {
        const timeLogs = timeSlots.reduce((prev, current) => {
            const prevLog = prev[current.date];
            return Object.assign(Object.assign({}, prev), { [current.date]: prevLog
                    ? {
                        id: current.id,
                        date: current.date,
                        user_id: prevLog.user_id,
                        project_id: prevLog.project_id,
                        starts_at: moment
                            .utc(prevLog.starts_at)
                            .format('YYYY-MM-DD HH:mm:ss'),
                        keyboard: prevLog.keyboard += current.keyboard,
                        mouse: prevLog.mouse += current.mouse,
                        overall: prevLog.overall += current.overall,
                        tracked: prevLog.tracked += current.tracked,
                        logType: current.client === 'windows'
                            ? models_1.TimeLogType.TRACKED
                            : models_1.TimeLogType.MANUAL
                    }
                    : {
                        id: current.id,
                        date: current.date,
                        user_id: current.user_id,
                        project_id: current.project_id,
                        starts_at: moment
                            .utc(current.starts_at)
                            .format('YYYY-MM-DD HH:mm:ss'),
                        keyboard: current.keyboard,
                        mouse: current.mouse,
                        overall: current.overall,
                        tracked: current.tracked,
                        logType: current.client === 'windows'
                            ? models_1.TimeLogType.TRACKED
                            : models_1.TimeLogType.MANUAL
                    } });
        }, {});
        return Object.values(timeLogs);
    }
};
HubstaffService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof common_1.HttpService !== "undefined" && common_1.HttpService) === "function" ? _a : Object, typeof (_b = typeof integration_tenant_service_1.IntegrationTenantService !== "undefined" && integration_tenant_service_1.IntegrationTenantService) === "function" ? _b : Object, typeof (_c = typeof integration_setting_service_1.IntegrationSettingService !== "undefined" && integration_setting_service_1.IntegrationSettingService) === "function" ? _c : Object, typeof (_d = typeof integration_map_service_1.IntegrationMapService !== "undefined" && integration_map_service_1.IntegrationMapService) === "function" ? _d : Object, typeof (_e = typeof integration_entity_setting_service_1.IntegrationEntitySettingService !== "undefined" && integration_entity_setting_service_1.IntegrationEntitySettingService) === "function" ? _e : Object, typeof (_f = typeof integration_entity_setting_tied_entity_service_1.IntegrationEntitySettingTiedEntityService !== "undefined" && integration_entity_setting_tied_entity_service_1.IntegrationEntitySettingTiedEntityService) === "function" ? _f : Object, typeof (_g = typeof role_service_1.RoleService !== "undefined" && role_service_1.RoleService) === "function" ? _g : Object, typeof (_h = typeof organization_service_1.OrganizationService !== "undefined" && organization_service_1.OrganizationService) === "function" ? _h : Object, typeof (_j = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" ? _j : Object, typeof (_k = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _k : Object])
], HubstaffService);
exports.HubstaffService = HubstaffService;


/***/ }),

/***/ "./src/app/income/commands/handlers/income.create.handler.ts":
/*!*******************************************************************!*\
  !*** ./src/app/income/commands/handlers/income.create.handler.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IncomeCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const income_create_command_1 = __webpack_require__(/*! ../income.create.command */ "./src/app/income/commands/income.create.command.ts");
const income_service_1 = __webpack_require__(/*! ../../income.service */ "./src/app/income/income.service.ts");
const income_entity_1 = __webpack_require__(/*! ../../income.entity */ "./src/app/income/income.entity.ts");
const employee_service_1 = __webpack_require__(/*! ../../../employee/employee.service */ "./src/app/employee/employee.service.ts");
const organization_service_1 = __webpack_require__(/*! ../../../organization/organization.service */ "./src/app/organization/organization.service.ts");
const employee_statistics_1 = __webpack_require__(/*! ../../../employee-statistics */ "./src/app/employee-statistics/index.ts");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
let IncomeCreateHandler = class IncomeCreateHandler {
    constructor(incomeService, employeeService, organizationService, employeeStatisticsService) {
        this.incomeService = incomeService;
        this.employeeService = employeeService;
        this.organizationService = organizationService;
        this.employeeStatisticsService = employeeStatisticsService;
    }
    async execute(command) {
        const income = await this.createIncome(command);
        let averageIncome = 0;
        let averageBonus = 0;
        if (income && income.employeeId) {
            const id = income.employeeId;
            const stat = await this.employeeStatisticsService.getStatisticsByEmployeeId(income.employeeId);
            averageIncome = this.incomeService.countStatistic(stat.incomeStatistics);
            averageBonus = this.incomeService.countStatistic(stat.bonusStatistics);
            await this.employeeService.create({
                id,
                averageIncome: averageIncome,
                averageBonus: averageBonus
            });
        }
        return income;
    }
    async createIncome(command) {
        const { input } = command;
        const income = new income_entity_1.Income();
        const employee = input.employeeId
            ? await this.employeeService.findOne(input.employeeId)
            : null;
        const organization = await this.organizationService.findOne(input.organizationId);
        income.clientName = input.clientName;
        income.clientId = input.clientId;
        income.employee = employee;
        income.organization = organization;
        income.amount = input.amount;
        income.valueDate = input.valueDate;
        income.notes = input.notes;
        income.currency = input.currency;
        income.isBonus = input.isBonus;
        income.reference = input.reference;
        income.tags = input.tags;
        income.tenantId = context_1.RequestContext.currentTenantId();
        if (!income.currency) {
            income.currency = organization.currency;
        }
        return await this.incomeService.create(income);
    }
};
IncomeCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(income_create_command_1.IncomeCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof income_service_1.IncomeService !== "undefined" && income_service_1.IncomeService) === "function" ? _a : Object, typeof (_b = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _b : Object, typeof (_c = typeof organization_service_1.OrganizationService !== "undefined" && organization_service_1.OrganizationService) === "function" ? _c : Object, typeof (_d = typeof employee_statistics_1.EmployeeStatisticsService !== "undefined" && employee_statistics_1.EmployeeStatisticsService) === "function" ? _d : Object])
], IncomeCreateHandler);
exports.IncomeCreateHandler = IncomeCreateHandler;


/***/ }),

/***/ "./src/app/income/commands/handlers/income.delete.handler.ts":
/*!*******************************************************************!*\
  !*** ./src/app/income/commands/handlers/income.delete.handler.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IncomeDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const income_service_1 = __webpack_require__(/*! ../../income.service */ "./src/app/income/income.service.ts");
const employee_service_1 = __webpack_require__(/*! ../../../employee/employee.service */ "./src/app/employee/employee.service.ts");
const employee_statistics_1 = __webpack_require__(/*! ../../../employee-statistics */ "./src/app/employee-statistics/index.ts");
const income_delete_command_1 = __webpack_require__(/*! ../income.delete.command */ "./src/app/income/commands/income.delete.command.ts");
let IncomeDeleteHandler = class IncomeDeleteHandler {
    constructor(incomeService, employeeService, employeeStatisticsService) {
        this.incomeService = incomeService;
        this.employeeService = employeeService;
        this.employeeStatisticsService = employeeStatisticsService;
    }
    async execute(command) {
        const { employeeId, incomeId } = command;
        await this.deleteIncome(incomeId);
        if (employeeId) {
            const id = employeeId;
            let averageIncome = 0;
            let averageBonus = 0;
            const stat = await this.employeeStatisticsService.getStatisticsByEmployeeId(id);
            averageIncome = this.incomeService.countStatistic(stat.incomeStatistics);
            averageBonus = this.incomeService.countStatistic(stat.bonusStatistics);
            return await this.employeeService.create({
                id,
                averageIncome: averageIncome,
                averageBonus: averageBonus
            });
        }
    }
    async deleteIncome(incomeId) {
        return await this.incomeService.delete(incomeId);
    }
};
IncomeDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(income_delete_command_1.IncomeDeleteCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof income_service_1.IncomeService !== "undefined" && income_service_1.IncomeService) === "function" ? _a : Object, typeof (_b = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _b : Object, typeof (_c = typeof employee_statistics_1.EmployeeStatisticsService !== "undefined" && employee_statistics_1.EmployeeStatisticsService) === "function" ? _c : Object])
], IncomeDeleteHandler);
exports.IncomeDeleteHandler = IncomeDeleteHandler;


/***/ }),

/***/ "./src/app/income/commands/handlers/income.update.handler.ts":
/*!*******************************************************************!*\
  !*** ./src/app/income/commands/handlers/income.update.handler.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IncomeUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const income_service_1 = __webpack_require__(/*! ../../income.service */ "./src/app/income/income.service.ts");
const employee_service_1 = __webpack_require__(/*! ../../../employee/employee.service */ "./src/app/employee/employee.service.ts");
const employee_statistics_1 = __webpack_require__(/*! ../../../employee-statistics */ "./src/app/employee-statistics/index.ts");
const income_update_command_1 = __webpack_require__(/*! ../income.update.command */ "./src/app/income/commands/income.update.command.ts");
let IncomeUpdateHandler = class IncomeUpdateHandler {
    constructor(incomeService, employeeService, employeeStatisticsService) {
        this.incomeService = incomeService;
        this.employeeService = employeeService;
        this.employeeStatisticsService = employeeStatisticsService;
    }
    async execute(command) {
        let { id } = command;
        const { entity } = command;
        const income = await this.updateIncome(id, entity);
        let averageIncome = 0;
        let averageBonus = 0;
        if (income && income.employeeId) {
            id = income.employeeId;
            const stat = await this.employeeStatisticsService.getStatisticsByEmployeeId(id);
            averageIncome = this.incomeService.countStatistic(stat.incomeStatistics);
            averageBonus = this.incomeService.countStatistic(stat.bonusStatistics);
            return await this.employeeService.create({
                id,
                averageIncome: averageIncome,
                averageBonus: averageBonus
            });
        }
    }
    async updateIncome(incomeId, entity) {
        const id = incomeId;
        return this.incomeService.create(Object.assign({ id }, entity));
    }
};
IncomeUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(income_update_command_1.IncomeUpdateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof income_service_1.IncomeService !== "undefined" && income_service_1.IncomeService) === "function" ? _a : Object, typeof (_b = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _b : Object, typeof (_c = typeof employee_statistics_1.EmployeeStatisticsService !== "undefined" && employee_statistics_1.EmployeeStatisticsService) === "function" ? _c : Object])
], IncomeUpdateHandler);
exports.IncomeUpdateHandler = IncomeUpdateHandler;


/***/ }),

/***/ "./src/app/income/commands/handlers/index.ts":
/*!***************************************************!*\
  !*** ./src/app/income/commands/handlers/index.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const income_create_handler_1 = __webpack_require__(/*! ./income.create.handler */ "./src/app/income/commands/handlers/income.create.handler.ts");
const income_delete_handler_1 = __webpack_require__(/*! ./income.delete.handler */ "./src/app/income/commands/handlers/income.delete.handler.ts");
const income_update_handler_1 = __webpack_require__(/*! ./income.update.handler */ "./src/app/income/commands/handlers/income.update.handler.ts");
exports.CommandHandlers = [
    income_create_handler_1.IncomeCreateHandler,
    income_delete_handler_1.IncomeDeleteHandler,
    income_update_handler_1.IncomeUpdateHandler
];


/***/ }),

/***/ "./src/app/income/commands/income.create.command.ts":
/*!**********************************************************!*\
  !*** ./src/app/income/commands/income.create.command.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IncomeCreateCommand = void 0;
class IncomeCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.IncomeCreateCommand = IncomeCreateCommand;
IncomeCreateCommand.type = '[Income] Create';


/***/ }),

/***/ "./src/app/income/commands/income.delete.command.ts":
/*!**********************************************************!*\
  !*** ./src/app/income/commands/income.delete.command.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IncomeDeleteCommand = void 0;
class IncomeDeleteCommand {
    constructor(employeeId, incomeId) {
        this.employeeId = employeeId;
        this.incomeId = incomeId;
    }
}
exports.IncomeDeleteCommand = IncomeDeleteCommand;
IncomeDeleteCommand.type = '[Income] Delete';


/***/ }),

/***/ "./src/app/income/commands/income.update.command.ts":
/*!**********************************************************!*\
  !*** ./src/app/income/commands/income.update.command.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IncomeUpdateCommand = void 0;
class IncomeUpdateCommand {
    constructor(id, entity) {
        this.id = id;
        this.entity = entity;
    }
}
exports.IncomeUpdateCommand = IncomeUpdateCommand;
IncomeUpdateCommand.type = '[Income] Update';


/***/ }),

/***/ "./src/app/income/income.controller.ts":
/*!*********************************************!*\
  !*** ./src/app/income/income.controller.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IncomeController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const income_create_command_1 = __webpack_require__(/*! ./commands/income.create.command */ "./src/app/income/commands/income.create.command.ts");
const income_entity_1 = __webpack_require__(/*! ./income.entity */ "./src/app/income/income.entity.ts");
const income_service_1 = __webpack_require__(/*! ./income.service */ "./src/app/income/income.service.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const income_delete_command_1 = __webpack_require__(/*! ./commands/income.delete.command */ "./src/app/income/commands/income.delete.command.ts");
const income_update_command_1 = __webpack_require__(/*! ./commands/income.update.command */ "./src/app/income/commands/income.update.command.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let IncomeController = class IncomeController extends crud_controller_1.CrudController {
    constructor(incomeService, employeeService, commandBus) {
        super(incomeService);
        this.incomeService = incomeService;
        this.employeeService = employeeService;
        this.commandBus = commandBus;
    }
    async findMyIncome(data) {
        const { relations, findInput, filterDate } = JSON.parse(data);
        const employee = await this.employeeService.findOne({
            user: { id: context_1.RequestContext.currentUser().id }
        });
        return this.incomeService.findAllIncomes({ where: Object.assign(Object.assign({}, findInput), { employeeId: employee.id }), relations }, filterDate);
    }
    async findAllIncome(data) {
        const { relations, findInput, filterDate } = JSON.parse(data);
        return this.incomeService.findAllIncomes({ where: findInput, relations }, filterDate);
    }
    async update(id, entity, ...options) {
        return this.commandBus.execute(new income_update_command_1.IncomeUpdateCommand(id, entity));
    }
    async create(entity, ...options) {
        return this.commandBus.execute(new income_create_command_1.IncomeCreateCommand(entity));
    }
    async deleteIncome(data) {
        const { incomeId = null, employeeId = null } = data;
        return this.commandBus.execute(new income_delete_command_1.IncomeDeleteCommand(employeeId, incomeId));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all income.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found income',
        type: income_entity_1.Income
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('me'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], IncomeController.prototype, "findMyIncome", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all income.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found income',
        type: income_entity_1.Income
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_INCOMES_VIEW),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], IncomeController.prototype, "findAllIncome", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_INCOMES_EDIT),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_c = typeof income_entity_1.Income !== "undefined" && income_entity_1.Income) === "function" ? _c : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], IncomeController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_INCOMES_EDIT),
    common_1.Post('/create'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof models_1.IIncomeCreateInput !== "undefined" && models_1.IIncomeCreateInput) === "function" ? _e : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], IncomeController.prototype, "create", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Delete record'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'The record has been successfully deleted'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_INCOMES_EDIT),
    common_1.Delete('deleteIncome'),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], IncomeController.prototype, "deleteIncome", null);
IncomeController = tslib_1.__decorate([
    swagger_1.ApiTags('Income'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_h = typeof income_service_1.IncomeService !== "undefined" && income_service_1.IncomeService) === "function" ? _h : Object, typeof (_j = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _j : Object, typeof (_k = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _k : Object])
], IncomeController);
exports.IncomeController = IncomeController;


/***/ }),

/***/ "./src/app/income/income.entity.ts":
/*!*****************************************!*\
  !*** ./src/app/income/income.entity.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Income = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let Income = class Income extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.income),
    typeorm_1.JoinTable({
        name: 'tag_income'
    }),
    tslib_1.__metadata("design:type", Array)
], Income.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.ManyToOne((type) => employee_entity_1.Employee, { nullable: true, onDelete: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof employee_entity_1.Employee !== "undefined" && employee_entity_1.Employee) === "function" ? _a : Object)
], Income.prototype, "employee", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((income) => income.employee),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Income.prototype, "employeeId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column({ type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], Income.prototype, "amount", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Income.prototype, "clientId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Income.prototype, "clientName", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.CurrenciesEnum }),
    class_validator_1.IsEnum(models_1.CurrenciesEnum),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Income.prototype, "currency", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], Income.prototype, "valueDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Income.prototype, "notes", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Income.prototype, "isBonus", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String, maxLength: 256 }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Income.prototype, "reference", void 0);
Income = tslib_1.__decorate([
    typeorm_1.Entity('income')
], Income);
exports.Income = Income;


/***/ }),

/***/ "./src/app/income/income.module.ts":
/*!*****************************************!*\
  !*** ./src/app/income/income.module.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IncomeModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const income_entity_1 = __webpack_require__(/*! ./income.entity */ "./src/app/income/income.entity.ts");
const income_service_1 = __webpack_require__(/*! ./income.service */ "./src/app/income/income.service.ts");
const income_controller_1 = __webpack_require__(/*! ./income.controller */ "./src/app/income/income.controller.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/income/commands/handlers/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const organization_service_1 = __webpack_require__(/*! ../organization/organization.service */ "./src/app/organization/organization.service.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const expense_entity_1 = __webpack_require__(/*! ../expense/expense.entity */ "./src/app/expense/expense.entity.ts");
const employee_recurring_expense_1 = __webpack_require__(/*! ../employee-recurring-expense */ "./src/app/employee-recurring-expense/index.ts");
const organization_recurring_expense_entity_1 = __webpack_require__(/*! ../organization-recurring-expense/organization-recurring-expense.entity */ "./src/app/organization-recurring-expense/organization-recurring-expense.entity.ts");
const expense_service_1 = __webpack_require__(/*! ../expense/expense.service */ "./src/app/expense/expense.service.ts");
const employee_statistics_1 = __webpack_require__(/*! ../employee-statistics */ "./src/app/employee-statistics/index.ts");
const organization_recurring_expense_service_1 = __webpack_require__(/*! ../organization-recurring-expense/organization-recurring-expense.service */ "./src/app/organization-recurring-expense/organization-recurring-expense.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let IncomeModule = class IncomeModule {
};
IncomeModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([
                income_entity_1.Income,
                employee_entity_1.Employee,
                organization_entity_1.Organization,
                user_entity_1.User,
                expense_entity_1.Expense,
                employee_recurring_expense_1.EmployeeRecurringExpense,
                organization_recurring_expense_entity_1.OrganizationRecurringExpense
            ]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [income_controller_1.IncomeController],
        providers: [
            income_service_1.IncomeService,
            employee_service_1.EmployeeService,
            organization_service_1.OrganizationService,
            user_service_1.UserService,
            expense_service_1.ExpenseService,
            employee_statistics_1.EmployeeStatisticsService,
            employee_recurring_expense_1.EmployeeRecurringExpenseService,
            organization_recurring_expense_service_1.OrganizationRecurringExpenseService,
            ...handlers_1.CommandHandlers
        ],
        exports: [income_service_1.IncomeService]
    })
], IncomeModule);
exports.IncomeModule = IncomeModule;


/***/ }),

/***/ "./src/app/income/income.seed.ts":
/*!***************************************!*\
  !*** ./src/app/income/income.seed.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomIncomes = exports.createDefaultIncomes = void 0;
const income_entity_1 = __webpack_require__(/*! ./income.entity */ "./src/app/income/income.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const fs = __webpack_require__(/*! fs */ "fs");
const csv = __webpack_require__(/*! csv-parser */ "csv-parser");
const moment = __webpack_require__(/*! moment */ "moment");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
exports.createDefaultIncomes = async (connection, defaultData) => {
    const incomeFromFile = [];
    let defaultIncomes = [];
    let filePath = './src/app/income/income-seed-data/income-data.csv';
    try {
        filePath = fs.existsSync(filePath)
            ? filePath
            : `./apps/api/${filePath.slice(2)}`;
    }
    catch (error) {
        console.error('Cannot find income data csv');
    }
    for (const organization of defaultData.organizations) {
        fs.createReadStream(filePath)
            .pipe(csv())
            .on('data', (data) => incomeFromFile.push(data))
            .on('end', async () => {
            defaultIncomes = incomeFromFile.map((seedIncome) => {
                const income = new income_entity_1.Income();
                const foundEmployee = defaultData.employees.find((emp) => emp.user.email === seedIncome.email);
                income.employee = foundEmployee;
                income.clientName = seedIncome.clientName;
                income.organization = organization;
                income.tenant = organization.tenant;
                income.amount = seedIncome.amount;
                income.clientId = faker.random
                    .number({ min: 10, max: 9999 })
                    .toString();
                income.currency =
                    seedIncome.currency || environment_1.environment.defaultCurrency;
                income.valueDate = faker.date.between(new Date(), moment(new Date()).add(10, 'days').toDate());
                income.notes = seedIncome.notes;
                return income;
            });
            await insertIncome(connection, defaultIncomes);
        });
    }
    return defaultIncomes;
};
exports.createRandomIncomes = async (connection, tenants, tenantEmployeeMap) => {
    const clientsArray = ['NA', 'UR', 'CA', 'ET', 'GA'];
    const notesArray = [
        'Great job!',
        'Well done!',
        'Nice!',
        'Done',
        'Great job!'
    ];
    const randomIncomes = [];
    (tenants || []).forEach((tenant) => {
        const employees = tenantEmployeeMap.get(tenant);
        (employees || []).forEach((employee) => {
            for (let index = 0; index < 100; index++) {
                const income = new income_entity_1.Income();
                const currentIndex = faker.random.number({
                    min: 0,
                    max: index % 5
                });
                income.organization = employee.organization;
                income.tenant = tenant;
                income.employee = employee;
                income.clientName = clientsArray[currentIndex];
                income.amount = faker.random.number({ min: 10, max: 9999 });
                income.clientId = faker.random
                    .number({ min: 10, max: 9999 })
                    .toString();
                income.currency =
                    employee.organization.currency || environment_1.environment.defaultCurrency;
                income.valueDate = faker.date.between(new Date(), moment(new Date()).add(10, 'days').toDate());
                income.notes = notesArray[currentIndex];
                randomIncomes.push(income);
            }
        });
    });
    await insertIncome(connection, randomIncomes);
    return;
};
const insertIncome = async (connection, incomes) => {
    await connection.manager.save(incomes);
};


/***/ }),

/***/ "./src/app/income/income.service.ts":
/*!******************************************!*\
  !*** ./src/app/income/income.service.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IncomeService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const income_entity_1 = __webpack_require__(/*! ./income.entity */ "./src/app/income/income.entity.ts");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
const moment = __webpack_require__(/*! moment */ "moment");
let IncomeService = class IncomeService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(incomeRepository) {
        super(incomeRepository);
        this.incomeRepository = incomeRepository;
    }
    async findAllIncomes(filter, filterDate) {
        if (filterDate) {
            const startOfMonth = moment(filterDate)
                .startOf('month')
                .format('YYYY-MM-DD hh:mm:ss');
            const endOfMonth = moment(filterDate)
                .endOf('month')
                .format('YYYY-MM-DD hh:mm:ss');
            return filter
                ? await this.findAll({
                    where: Object.assign({ valueDate: typeorm_2.Between(startOfMonth, endOfMonth) }, filter.where),
                    relations: filter.relations
                })
                : await this.findAll({
                    where: {
                        valueDate: typeorm_2.Between(startOfMonth, endOfMonth)
                    }
                });
        }
        return await this.findAll(filter || {});
    }
    countStatistic(data) {
        return data.filter(Number).reduce((a, b) => a + b, 0) !== 0
            ? data.filter(Number).reduce((a, b) => a + b, 0) /
                data.filter(Number).length
            : 0;
    }
};
IncomeService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(income_entity_1.Income)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], IncomeService);
exports.IncomeService = IncomeService;


/***/ }),

/***/ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.controller.ts":
/*!*************************************************************************************************************!*\
  !*** ./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.controller.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationEntitySettingTiedEntityController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const integration_entity_setting_tied_entity_entity_1 = __webpack_require__(/*! ./integration-entity-setting-tied-entity.entity */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.entity.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const integration_entity_setting_tied_entity_service_1 = __webpack_require__(/*! ./integration-entity-setting-tied-entity.service */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let IntegrationEntitySettingTiedEntityController = class IntegrationEntitySettingTiedEntityController extends core_1.CrudController {
    constructor(integrationEntitySettingTiedEntityService) {
        super(integrationEntitySettingTiedEntityService);
        this.integrationEntitySettingTiedEntityService = integrationEntitySettingTiedEntityService;
    }
    async editSettings(integrationId, editSettingsDto) {
        return await this.integrationEntitySettingTiedEntityService.create(editSettingsDto);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update settings.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Update settings',
        type: integration_entity_setting_tied_entity_entity_1.IntegrationEntitySettingTiedEntity
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Put(':integrationId'),
    tslib_1.__param(0, common_1.Param('integrationId')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], IntegrationEntitySettingTiedEntityController.prototype, "editSettings", null);
IntegrationEntitySettingTiedEntityController = tslib_1.__decorate([
    swagger_1.ApiTags('IntegrationsEntitySetting'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof integration_entity_setting_tied_entity_service_1.IntegrationEntitySettingTiedEntityService !== "undefined" && integration_entity_setting_tied_entity_service_1.IntegrationEntitySettingTiedEntityService) === "function" ? _b : Object])
], IntegrationEntitySettingTiedEntityController);
exports.IntegrationEntitySettingTiedEntityController = IntegrationEntitySettingTiedEntityController;


/***/ }),

/***/ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.entity.ts":
/*!*********************************************************************************************************!*\
  !*** ./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.entity.ts ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationEntitySettingTiedEntity = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const integration_entity_setting_entity_1 = __webpack_require__(/*! ../integration-entity-setting/integration-entity-setting.entity */ "./src/app/integration-entity-setting/integration-entity-setting.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let IntegrationEntitySettingTiedEntity = class IntegrationEntitySettingTiedEntity extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: integration_entity_setting_entity_1.IntegrationEntitySetting }),
    typeorm_1.ManyToOne((type) => integration_entity_setting_entity_1.IntegrationEntitySetting, (integrationEntitySetting) => integrationEntitySetting.tiedEntities),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IIntegrationEntitySetting !== "undefined" && models_1.IIntegrationEntitySetting) === "function" ? _a : Object)
], IntegrationEntitySettingTiedEntity.prototype, "integrationEntitySetting", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((integrationEntityTiedSetting) => integrationEntityTiedSetting.integrationEntitySetting),
    tslib_1.__metadata("design:type", String)
], IntegrationEntitySettingTiedEntity.prototype, "integrationEntitySettingId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], IntegrationEntitySettingTiedEntity.prototype, "entity", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", Boolean)
], IntegrationEntitySettingTiedEntity.prototype, "sync", void 0);
IntegrationEntitySettingTiedEntity = tslib_1.__decorate([
    typeorm_1.Entity('integration_entity_setting_tied_entity')
], IntegrationEntitySettingTiedEntity);
exports.IntegrationEntitySettingTiedEntity = IntegrationEntitySettingTiedEntity;


/***/ }),

/***/ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.module.ts":
/*!*********************************************************************************************************!*\
  !*** ./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.module.ts ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationEntitySettingTiedEntityModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const integration_entity_setting_tied_entity_entity_1 = __webpack_require__(/*! ./integration-entity-setting-tied-entity.entity */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.entity.ts");
const integration_entity_setting_tied_entity_controller_1 = __webpack_require__(/*! ./integration-entity-setting-tied-entity.controller */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.controller.ts");
const integration_entity_setting_tied_entity_service_1 = __webpack_require__(/*! ./integration-entity-setting-tied-entity.service */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let IntegrationEntitySettingTiedEntityModule = class IntegrationEntitySettingTiedEntityModule {
};
IntegrationEntitySettingTiedEntityModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([integration_entity_setting_tied_entity_entity_1.IntegrationEntitySettingTiedEntity]),
            tenant_module_1.TenantModule
        ],
        controllers: [integration_entity_setting_tied_entity_controller_1.IntegrationEntitySettingTiedEntityController],
        providers: [integration_entity_setting_tied_entity_service_1.IntegrationEntitySettingTiedEntityService]
    })
], IntegrationEntitySettingTiedEntityModule);
exports.IntegrationEntitySettingTiedEntityModule = IntegrationEntitySettingTiedEntityModule;


/***/ }),

/***/ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.seed.ts":
/*!*******************************************************************************************************!*\
  !*** ./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.seed.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomIntegrationEntitySettingTiedEntity = void 0;
const faker = __webpack_require__(/*! faker */ "faker");
const integration_tenant_entity_1 = __webpack_require__(/*! ../integration-tenant/integration-tenant.entity */ "./src/app/integration-tenant/integration-tenant.entity.ts");
const integration_entity_setting_entity_1 = __webpack_require__(/*! ../integration-entity-setting/integration-entity-setting.entity */ "./src/app/integration-entity-setting/integration-entity-setting.entity.ts");
const integration_entity_setting_tied_entity_entity_1 = __webpack_require__(/*! ./integration-entity-setting-tied-entity.entity */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const integration_hubstaff_1 = __webpack_require__(/*! @gauzy/integration-hubstaff */ "./libs/integration-hubstaff/src/index.ts");
exports.createRandomIntegrationEntitySettingTiedEntity = async (connection, tenants) => {
    if (!tenants) {
        console.warn('Warning: tenants not found, Integration Entity Setting  will not be created');
        return;
    }
    const randomIntegrationEntitySettingsTiedEntity = [];
    for (const tenant of tenants) {
        const organizations = await connection.manager.find(organization_entity_1.Organization, {
            where: [{ tenant: tenant }]
        });
        const integrationTenants = await connection.manager.find(integration_tenant_entity_1.IntegrationTenant, {
            where: [{ tenant: tenant }]
        });
        for (const integrationTenant of integrationTenants) {
            const integrationEntitySettings = await connection.manager.find(integration_entity_setting_entity_1.IntegrationEntitySetting, {
                where: [{ integration: integrationTenant }]
            });
            for (const integrationEntitySetting of integrationEntitySettings) {
                const integrationEntitySettingTiedEntity = new integration_entity_setting_tied_entity_entity_1.IntegrationEntitySettingTiedEntity();
                integrationEntitySettingTiedEntity.integrationEntitySetting = integrationEntitySetting;
                integrationEntitySettingTiedEntity.sync = faker.random.boolean();
                integrationEntitySettingTiedEntity.organization = faker.random.arrayElement(organizations);
                integrationEntitySettingTiedEntity.tenant = tenant;
                if (integrationEntitySetting['entity'] ===
                    models_1.IntegrationEntity.PROJECT) {
                    integrationEntitySettingTiedEntity.entity = faker.random.arrayElement(integration_hubstaff_1.PROJECT_TIED_ENTITIES)['entity'];
                }
                else {
                    integrationEntitySettingTiedEntity.entity = faker.random.arrayElement(Object.values(models_1.IntegrationEntity));
                }
                randomIntegrationEntitySettingsTiedEntity.push(integrationEntitySettingTiedEntity);
            }
        }
    }
    await connection.manager.save(randomIntegrationEntitySettingsTiedEntity);
};


/***/ }),

/***/ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.service.ts":
/*!**********************************************************************************************************!*\
  !*** ./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.service.ts ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationEntitySettingTiedEntityService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const typeorm_2 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const integration_entity_setting_tied_entity_entity_1 = __webpack_require__(/*! ./integration-entity-setting-tied-entity.entity */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.entity.ts");
let IntegrationEntitySettingTiedEntityService = class IntegrationEntitySettingTiedEntityService extends core_1.CrudService {
    constructor(repository) {
        super(repository);
        this.repository = repository;
    }
};
IntegrationEntitySettingTiedEntityService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_2.InjectRepository(integration_entity_setting_tied_entity_entity_1.IntegrationEntitySettingTiedEntity)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _a : Object])
], IntegrationEntitySettingTiedEntityService);
exports.IntegrationEntitySettingTiedEntityService = IntegrationEntitySettingTiedEntityService;


/***/ }),

/***/ "./src/app/integration-entity-setting/integration-entity-setting.controller.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/integration-entity-setting/integration-entity-setting.controller.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationEntitySettingController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const integration_entity_setting_entity_1 = __webpack_require__(/*! ./integration-entity-setting.entity */ "./src/app/integration-entity-setting/integration-entity-setting.entity.ts");
const integration_entity_setting_service_1 = __webpack_require__(/*! ./integration-entity-setting.service */ "./src/app/integration-entity-setting/integration-entity-setting.service.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let IntegrationEntitySettingController = class IntegrationEntitySettingController extends core_1.CrudController {
    constructor(integrationEntitySettingService) {
        super(integrationEntitySettingService);
        this.integrationEntitySettingService = integrationEntitySettingService;
    }
    async getSettingsForIntegration(integrationId) {
        return await this.integrationEntitySettingService.findAll({
            relations: ['integration', 'tiedEntities'],
            where: {
                integration: { id: integrationId }
            }
        });
    }
    async editSettings(integrationId, editSettingsDto) {
        return await this.integrationEntitySettingService.create(editSettingsDto);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get settings.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found settings',
        type: integration_entity_setting_entity_1.IntegrationEntitySetting
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(':integrationId'),
    tslib_1.__param(0, common_1.Param('integrationId')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], IntegrationEntitySettingController.prototype, "getSettingsForIntegration", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update settings.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Update settings',
        type: integration_entity_setting_entity_1.IntegrationEntitySetting
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Put(':integrationId'),
    tslib_1.__param(0, common_1.Param('integrationId')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], IntegrationEntitySettingController.prototype, "editSettings", null);
IntegrationEntitySettingController = tslib_1.__decorate([
    swagger_1.ApiTags('IntegrationsEntitySetting'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof integration_entity_setting_service_1.IntegrationEntitySettingService !== "undefined" && integration_entity_setting_service_1.IntegrationEntitySettingService) === "function" ? _c : Object])
], IntegrationEntitySettingController);
exports.IntegrationEntitySettingController = IntegrationEntitySettingController;


/***/ }),

/***/ "./src/app/integration-entity-setting/integration-entity-setting.entity.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/integration-entity-setting/integration-entity-setting.entity.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationEntitySetting = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const integration_tenant_entity_1 = __webpack_require__(/*! ../integration-tenant/integration-tenant.entity */ "./src/app/integration-tenant/integration-tenant.entity.ts");
const integration_entity_setting_tied_entity_entity_1 = __webpack_require__(/*! ../integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.entity */ "./src/app/integration-entity-setting-tied-entity/integration-entity-setting-tied-entity.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let IntegrationEntitySetting = class IntegrationEntitySetting extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: integration_tenant_entity_1.IntegrationTenant }),
    typeorm_1.ManyToOne((type) => integration_tenant_entity_1.IntegrationTenant, (integration) => integration.entitySettings),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IIntegrationTenant !== "undefined" && models_1.IIntegrationTenant) === "function" ? _a : Object)
], IntegrationEntitySetting.prototype, "integration", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((integrationEntity) => integrationEntity.integration),
    tslib_1.__metadata("design:type", String)
], IntegrationEntitySetting.prototype, "integrationId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({
        type: integration_entity_setting_tied_entity_entity_1.IntegrationEntitySettingTiedEntity,
        isArray: true
    }),
    typeorm_1.OneToMany((type) => integration_entity_setting_tied_entity_entity_1.IntegrationEntitySettingTiedEntity, (tiedEntity) => tiedEntity.integrationEntitySetting, { cascade: true }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], IntegrationEntitySetting.prototype, "tiedEntities", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], IntegrationEntitySetting.prototype, "entity", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", Boolean)
], IntegrationEntitySetting.prototype, "sync", void 0);
IntegrationEntitySetting = tslib_1.__decorate([
    typeorm_1.Entity('integration_entity_setting')
], IntegrationEntitySetting);
exports.IntegrationEntitySetting = IntegrationEntitySetting;


/***/ }),

/***/ "./src/app/integration-entity-setting/integration-entity-setting.module.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/integration-entity-setting/integration-entity-setting.module.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationEntitySettingModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const integration_entity_setting_entity_1 = __webpack_require__(/*! ./integration-entity-setting.entity */ "./src/app/integration-entity-setting/integration-entity-setting.entity.ts");
const integration_entity_setting_controller_1 = __webpack_require__(/*! ./integration-entity-setting.controller */ "./src/app/integration-entity-setting/integration-entity-setting.controller.ts");
const integration_entity_setting_service_1 = __webpack_require__(/*! ./integration-entity-setting.service */ "./src/app/integration-entity-setting/integration-entity-setting.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let IntegrationEntitySettingModule = class IntegrationEntitySettingModule {
};
IntegrationEntitySettingModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([integration_entity_setting_entity_1.IntegrationEntitySetting]),
            tenant_module_1.TenantModule
        ],
        controllers: [integration_entity_setting_controller_1.IntegrationEntitySettingController],
        providers: [integration_entity_setting_service_1.IntegrationEntitySettingService]
    })
], IntegrationEntitySettingModule);
exports.IntegrationEntitySettingModule = IntegrationEntitySettingModule;


/***/ }),

/***/ "./src/app/integration-entity-setting/integration-entity-setting.seed.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/integration-entity-setting/integration-entity-setting.seed.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomIntegrationEntitySetting = void 0;
const integration_entity_setting_entity_1 = __webpack_require__(/*! ./integration-entity-setting.entity */ "./src/app/integration-entity-setting/integration-entity-setting.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const integration_tenant_entity_1 = __webpack_require__(/*! ../integration-tenant/integration-tenant.entity */ "./src/app/integration-tenant/integration-tenant.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const integration_hubstaff_1 = __webpack_require__(/*! @gauzy/integration-hubstaff */ "./libs/integration-hubstaff/src/index.ts");
exports.createRandomIntegrationEntitySetting = async (connection, tenants) => {
    if (!tenants) {
        console.warn('Warning: tenants not found, Integration Entity Setting will not be created.');
        return;
    }
    const integrationEntitySettings = [];
    const integrationEntitySettingTiedEntities = [];
    for (const tenant of tenants) {
        const organizations = await connection.manager.find(organization_entity_1.Organization, {
            where: [{ tenant: tenant }]
        });
        const integrationTenants = await connection.manager.find(integration_tenant_entity_1.IntegrationTenant, {
            where: [{ tenant: tenant }]
        });
        for (const integrationTenant of integrationTenants) {
            const integrationEntitySetting = new integration_entity_setting_entity_1.IntegrationEntitySetting();
            integrationEntitySetting.integration = integrationTenant;
            integrationEntitySetting.tiedEntities = integrationEntitySettingTiedEntities;
            integrationEntitySetting.sync = faker.random.boolean();
            (integrationEntitySetting.organization = faker.random.arrayElement(organizations)),
                (integrationEntitySetting.tenant = tenant);
            integrationEntitySetting.entity = faker.random.arrayElement(integration_hubstaff_1.DEFAULT_ENTITY_SETTINGS)['entity'];
            integrationEntitySettings.push(integrationEntitySetting);
        }
    }
    await connection.manager.save(integrationEntitySettings);
};


/***/ }),

/***/ "./src/app/integration-entity-setting/integration-entity-setting.service.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/integration-entity-setting/integration-entity-setting.service.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationEntitySettingService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const typeorm_2 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const integration_entity_setting_entity_1 = __webpack_require__(/*! ./integration-entity-setting.entity */ "./src/app/integration-entity-setting/integration-entity-setting.entity.ts");
let IntegrationEntitySettingService = class IntegrationEntitySettingService extends core_1.CrudService {
    constructor(repository) {
        super(repository);
        this.repository = repository;
    }
};
IntegrationEntitySettingService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_2.InjectRepository(integration_entity_setting_entity_1.IntegrationEntitySetting)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _a : Object])
], IntegrationEntitySettingService);
exports.IntegrationEntitySettingService = IntegrationEntitySettingService;


/***/ }),

/***/ "./src/app/integration-map/commands/handlers/index.ts":
/*!************************************************************!*\
  !*** ./src/app/integration-map/commands/handlers/index.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const integration_map_sync_project_handler_1 = __webpack_require__(/*! ./integration-map.sync-project.handler */ "./src/app/integration-map/commands/handlers/integration-map.sync-project.handler.ts");
const integration_map_sync_entity_handler_1 = __webpack_require__(/*! ./integration-map.sync-entity.handler */ "./src/app/integration-map/commands/handlers/integration-map.sync-entity.handler.ts");
exports.CommandHandlers = [
    integration_map_sync_project_handler_1.IntegrationMapSyncProjectHandler,
    integration_map_sync_entity_handler_1.IntegrationMapSyncEntityHandler
];


/***/ }),

/***/ "./src/app/integration-map/commands/handlers/integration-map.sync-entity.handler.ts":
/*!******************************************************************************************!*\
  !*** ./src/app/integration-map/commands/handlers/integration-map.sync-entity.handler.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationMapSyncEntityHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const __1 = __webpack_require__(/*! .. */ "./src/app/integration-map/commands/index.ts");
const integration_map_service_1 = __webpack_require__(/*! ../../integration-map.service */ "./src/app/integration-map/integration-map.service.ts");
let IntegrationMapSyncEntityHandler = class IntegrationMapSyncEntityHandler {
    constructor(_ims) {
        this._ims = _ims;
    }
    async execute(command) {
        const { input } = command;
        return await this._ims.create(input);
    }
};
IntegrationMapSyncEntityHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(__1.IntegrationMapSyncEntityCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof integration_map_service_1.IntegrationMapService !== "undefined" && integration_map_service_1.IntegrationMapService) === "function" ? _a : Object])
], IntegrationMapSyncEntityHandler);
exports.IntegrationMapSyncEntityHandler = IntegrationMapSyncEntityHandler;


/***/ }),

/***/ "./src/app/integration-map/commands/handlers/integration-map.sync-project.handler.ts":
/*!*******************************************************************************************!*\
  !*** ./src/app/integration-map/commands/handlers/integration-map.sync-project.handler.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationMapSyncProjectHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const __1 = __webpack_require__(/*! .. */ "./src/app/integration-map/commands/index.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const integration_map_service_1 = __webpack_require__(/*! ../../integration-map.service */ "./src/app/integration-map/integration-map.service.ts");
const organization_project_create_command_1 = __webpack_require__(/*! ../../../organization-projects/commands/organization-project.create.command */ "./src/app/organization-projects/commands/organization-project.create.command.ts");
let IntegrationMapSyncProjectHandler = class IntegrationMapSyncProjectHandler {
    constructor(_cb, _ims) {
        this._cb = _cb;
        this._ims = _ims;
    }
    async execute(command) {
        const { input } = command;
        const { organizationProjectCreateInput, integrationId, sourceId } = input;
        const project = await this._cb.execute(new organization_project_create_command_1.OrganizationProjectCreateCommand(organizationProjectCreateInput));
        return await this._ims.create({
            gauzyId: project.id,
            integrationId,
            sourceId,
            entity: models_1.IntegrationEntity.PROJECT
        });
    }
};
IntegrationMapSyncProjectHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(__1.IntegrationMapSyncProjectCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _a : Object, typeof (_b = typeof integration_map_service_1.IntegrationMapService !== "undefined" && integration_map_service_1.IntegrationMapService) === "function" ? _b : Object])
], IntegrationMapSyncProjectHandler);
exports.IntegrationMapSyncProjectHandler = IntegrationMapSyncProjectHandler;


/***/ }),

/***/ "./src/app/integration-map/commands/index.ts":
/*!***************************************************!*\
  !*** ./src/app/integration-map/commands/index.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./integration-map.sync-project.command */ "./src/app/integration-map/commands/integration-map.sync-project.command.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./integration-map.sync-entity.command */ "./src/app/integration-map/commands/integration-map.sync-entity.command.ts"), exports);


/***/ }),

/***/ "./src/app/integration-map/commands/integration-map.sync-entity.command.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/integration-map/commands/integration-map.sync-entity.command.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationMapSyncEntityCommand = void 0;
class IntegrationMapSyncEntityCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.IntegrationMapSyncEntityCommand = IntegrationMapSyncEntityCommand;
IntegrationMapSyncEntityCommand.type = '[Integration Map] Sync Entity';


/***/ }),

/***/ "./src/app/integration-map/commands/integration-map.sync-project.command.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/integration-map/commands/integration-map.sync-project.command.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationMapSyncProjectCommand = void 0;
class IntegrationMapSyncProjectCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.IntegrationMapSyncProjectCommand = IntegrationMapSyncProjectCommand;
IntegrationMapSyncProjectCommand.type = '[Integration Map] Sync Project';


/***/ }),

/***/ "./src/app/integration-map/integration-map.controller.ts":
/*!***************************************************************!*\
  !*** ./src/app/integration-map/integration-map.controller.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationMapController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const integration_map_service_1 = __webpack_require__(/*! ./integration-map.service */ "./src/app/integration-map/integration-map.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let IntegrationMapController = class IntegrationMapController extends core_1.CrudController {
    constructor(integrationMapService) {
        super(integrationMapService);
        this.integrationMapService = integrationMapService;
    }
};
IntegrationMapController = tslib_1.__decorate([
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof integration_map_service_1.IntegrationMapService !== "undefined" && integration_map_service_1.IntegrationMapService) === "function" ? _a : Object])
], IntegrationMapController);
exports.IntegrationMapController = IntegrationMapController;


/***/ }),

/***/ "./src/app/integration-map/integration-map.entity.ts":
/*!***********************************************************!*\
  !*** ./src/app/integration-map/integration-map.entity.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationMap = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const integration_tenant_entity_1 = __webpack_require__(/*! ../integration-tenant/integration-tenant.entity */ "./src/app/integration-tenant/integration-tenant.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let IntegrationMap = class IntegrationMap extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: integration_tenant_entity_1.IntegrationTenant }),
    typeorm_1.ManyToOne((type) => integration_tenant_entity_1.IntegrationTenant, {
        nullable: false
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof integration_tenant_entity_1.IntegrationTenant !== "undefined" && integration_tenant_entity_1.IntegrationTenant) === "function" ? _a : Object)
], IntegrationMap.prototype, "integration", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.Column(),
    typeorm_1.RelationId((integrationSetting) => integrationSetting.integration),
    tslib_1.__metadata("design:type", String)
], IntegrationMap.prototype, "integrationId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], IntegrationMap.prototype, "entity", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], IntegrationMap.prototype, "sourceId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], IntegrationMap.prototype, "gauzyId", void 0);
IntegrationMap = tslib_1.__decorate([
    typeorm_1.Entity('integration_map')
], IntegrationMap);
exports.IntegrationMap = IntegrationMap;


/***/ }),

/***/ "./src/app/integration-map/integration-map.module.ts":
/*!***********************************************************!*\
  !*** ./src/app/integration-map/integration-map.module.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationMapModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const integration_map_controller_1 = __webpack_require__(/*! ./integration-map.controller */ "./src/app/integration-map/integration-map.controller.ts");
const integration_map_service_1 = __webpack_require__(/*! ./integration-map.service */ "./src/app/integration-map/integration-map.service.ts");
const integration_map_entity_1 = __webpack_require__(/*! ./integration-map.entity */ "./src/app/integration-map/integration-map.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/integration-map/commands/handlers/index.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let IntegrationMapModule = class IntegrationMapModule {
};
IntegrationMapModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([integration_map_entity_1.IntegrationMap]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [integration_map_controller_1.IntegrationMapController],
        providers: [integration_map_service_1.IntegrationMapService, ...handlers_1.CommandHandlers]
    })
], IntegrationMapModule);
exports.IntegrationMapModule = IntegrationMapModule;


/***/ }),

/***/ "./src/app/integration-map/integration-map.seed.ts":
/*!*********************************************************!*\
  !*** ./src/app/integration-map/integration-map.seed.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomIntegrationMap = void 0;
const integration_map_entity_1 = __webpack_require__(/*! ./integration-map.entity */ "./src/app/integration-map/integration-map.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const integration_tenant_entity_1 = __webpack_require__(/*! ../integration-tenant/integration-tenant.entity */ "./src/app/integration-tenant/integration-tenant.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
exports.createRandomIntegrationMap = async (connection, tenants) => {
    if (!tenants) {
        console.warn('Warning: tenants not found, Integration Map  will not be created');
        return;
    }
    const integrationMaps = [];
    for (const tenant of tenants) {
        const integrationTenants = await connection.manager.find(integration_tenant_entity_1.IntegrationTenant, {
            where: [{ tenant: tenant }]
        });
        const organizations = await connection.manager.find(organization_entity_1.Organization, {
            where: [{ tenant: tenant }]
        });
        for (const integrationTenant of integrationTenants) {
            const integrationMap = new integration_map_entity_1.IntegrationMap();
            integrationMap.integration = integrationTenant;
            integrationMap.organization = faker.random.arrayElement(organizations);
            integrationMap.tenant = tenant;
            integrationMap.entity = faker.random.arrayElement(Object.values(models_1.IntegrationEntity));
            integrationMap.sourceId = 'sourceId-' + faker.random.number(40);
            integrationMap.gauzyId = 'gauzyId-' + faker.random.number(40);
            integrationMaps.push(integrationMap);
        }
    }
    await connection.manager.save(integrationMaps);
};


/***/ }),

/***/ "./src/app/integration-map/integration-map.service.ts":
/*!************************************************************!*\
  !*** ./src/app/integration-map/integration-map.service.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationMapService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const integration_map_entity_1 = __webpack_require__(/*! ./integration-map.entity */ "./src/app/integration-map/integration-map.entity.ts");
const typeorm_2 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
let IntegrationMapService = class IntegrationMapService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(repository) {
        super(repository);
        this.repository = repository;
    }
};
IntegrationMapService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_2.InjectRepository(integration_map_entity_1.IntegrationMap)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _a : Object])
], IntegrationMapService);
exports.IntegrationMapService = IntegrationMapService;


/***/ }),

/***/ "./src/app/integration-setting/commands/handlers/index.ts":
/*!****************************************************************!*\
  !*** ./src/app/integration-setting/commands/handlers/index.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const integration_setting_get_handler_1 = __webpack_require__(/*! ./integration-setting.get.handler */ "./src/app/integration-setting/commands/handlers/integration-setting.get.handler.ts");
const integration_setting_getMany_handler_1 = __webpack_require__(/*! ./integration-setting.getMany.handler */ "./src/app/integration-setting/commands/handlers/integration-setting.getMany.handler.ts");
const integration_setting_create_handler_1 = __webpack_require__(/*! ./integration-setting.create.handler */ "./src/app/integration-setting/commands/handlers/integration-setting.create.handler.ts");
exports.CommandHandlers = [
    integration_setting_get_handler_1.IntegrationSettingGetHandler,
    integration_setting_getMany_handler_1.IntegrationSettingGetManyHandler,
    integration_setting_create_handler_1.IntegrationSettingCreateHandler
];


/***/ }),

/***/ "./src/app/integration-setting/commands/handlers/integration-setting.create.handler.ts":
/*!*********************************************************************************************!*\
  !*** ./src/app/integration-setting/commands/handlers/integration-setting.create.handler.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationSettingCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const __1 = __webpack_require__(/*! .. */ "./src/app/integration-setting/commands/index.ts");
const integration_setting_service_1 = __webpack_require__(/*! ../../integration-setting.service */ "./src/app/integration-setting/integration-setting.service.ts");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
let IntegrationSettingCreateHandler = class IntegrationSettingCreateHandler {
    constructor(integrationSettingService) {
        this.integrationSettingService = integrationSettingService;
    }
    async execute(command) {
        const { input } = command;
        const tenantId = context_1.RequestContext.currentTenantId();
        return await this.integrationSettingService.create(Object.assign(input, { tenantId }));
    }
};
IntegrationSettingCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(__1.IntegrationSettingCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof integration_setting_service_1.IntegrationSettingService !== "undefined" && integration_setting_service_1.IntegrationSettingService) === "function" ? _a : Object])
], IntegrationSettingCreateHandler);
exports.IntegrationSettingCreateHandler = IntegrationSettingCreateHandler;


/***/ }),

/***/ "./src/app/integration-setting/commands/handlers/integration-setting.get.handler.ts":
/*!******************************************************************************************!*\
  !*** ./src/app/integration-setting/commands/handlers/integration-setting.get.handler.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationSettingGetHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const __1 = __webpack_require__(/*! .. */ "./src/app/integration-setting/commands/index.ts");
const integration_setting_service_1 = __webpack_require__(/*! ../../integration-setting.service */ "./src/app/integration-setting/integration-setting.service.ts");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
let IntegrationSettingGetHandler = class IntegrationSettingGetHandler {
    constructor(integrationSettingService) {
        this.integrationSettingService = integrationSettingService;
    }
    async execute(command) {
        const { input } = command;
        const tenantId = context_1.RequestContext.currentTenantId();
        if (input.where instanceof Object) {
            input.where = Object.assign(input.where, { tenantId });
        }
        const { record } = await this.integrationSettingService.findOneOrFail(input);
        return record;
    }
};
IntegrationSettingGetHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(__1.IntegrationSettingGetCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof integration_setting_service_1.IntegrationSettingService !== "undefined" && integration_setting_service_1.IntegrationSettingService) === "function" ? _a : Object])
], IntegrationSettingGetHandler);
exports.IntegrationSettingGetHandler = IntegrationSettingGetHandler;


/***/ }),

/***/ "./src/app/integration-setting/commands/handlers/integration-setting.getMany.handler.ts":
/*!**********************************************************************************************!*\
  !*** ./src/app/integration-setting/commands/handlers/integration-setting.getMany.handler.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationSettingGetManyHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const __1 = __webpack_require__(/*! .. */ "./src/app/integration-setting/commands/index.ts");
const integration_setting_service_1 = __webpack_require__(/*! ../../integration-setting.service */ "./src/app/integration-setting/integration-setting.service.ts");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
let IntegrationSettingGetManyHandler = class IntegrationSettingGetManyHandler {
    constructor(isService) {
        this.isService = isService;
    }
    async execute(command) {
        const { input } = command;
        const tenantId = context_1.RequestContext.currentTenantId();
        if (input.where instanceof Object) {
            input.where = Object.assign(input.where, { tenantId });
        }
        const { items } = await this.isService.findAll(input);
        return items;
    }
};
IntegrationSettingGetManyHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(__1.IntegrationSettingGetManyCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof integration_setting_service_1.IntegrationSettingService !== "undefined" && integration_setting_service_1.IntegrationSettingService) === "function" ? _a : Object])
], IntegrationSettingGetManyHandler);
exports.IntegrationSettingGetManyHandler = IntegrationSettingGetManyHandler;


/***/ }),

/***/ "./src/app/integration-setting/commands/index.ts":
/*!*******************************************************!*\
  !*** ./src/app/integration-setting/commands/index.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./integration-setting.get.command */ "./src/app/integration-setting/commands/integration-setting.get.command.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./integration-setting.getMany.command */ "./src/app/integration-setting/commands/integration-setting.getMany.command.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./integration-setting.create.command */ "./src/app/integration-setting/commands/integration-setting.create.command.ts"), exports);


/***/ }),

/***/ "./src/app/integration-setting/commands/integration-setting.create.command.ts":
/*!************************************************************************************!*\
  !*** ./src/app/integration-setting/commands/integration-setting.create.command.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationSettingCreateCommand = void 0;
class IntegrationSettingCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.IntegrationSettingCreateCommand = IntegrationSettingCreateCommand;
IntegrationSettingCreateCommand.type = '[Integration Setting] Create Integration Setting';


/***/ }),

/***/ "./src/app/integration-setting/commands/integration-setting.get.command.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/integration-setting/commands/integration-setting.get.command.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationSettingGetCommand = void 0;
class IntegrationSettingGetCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.IntegrationSettingGetCommand = IntegrationSettingGetCommand;
IntegrationSettingGetCommand.type = '[Integration Setting] Get Integration Setting';


/***/ }),

/***/ "./src/app/integration-setting/commands/integration-setting.getMany.command.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/integration-setting/commands/integration-setting.getMany.command.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationSettingGetManyCommand = void 0;
class IntegrationSettingGetManyCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.IntegrationSettingGetManyCommand = IntegrationSettingGetManyCommand;
IntegrationSettingGetManyCommand.type = '[Integration Setting] Get Many Integration Setting';


/***/ }),

/***/ "./src/app/integration-setting/integration-setting.controller.ts":
/*!***********************************************************************!*\
  !*** ./src/app/integration-setting/integration-setting.controller.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationSettingController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const integration_setting_service_1 = __webpack_require__(/*! ./integration-setting.service */ "./src/app/integration-setting/integration-setting.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let IntegrationSettingController = class IntegrationSettingController extends core_1.CrudController {
    constructor(integrationSettingService) {
        super(integrationSettingService);
        this.integrationSettingService = integrationSettingService;
    }
};
IntegrationSettingController = tslib_1.__decorate([
    swagger_1.ApiTags('IntegrationSetting'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof integration_setting_service_1.IntegrationSettingService !== "undefined" && integration_setting_service_1.IntegrationSettingService) === "function" ? _a : Object])
], IntegrationSettingController);
exports.IntegrationSettingController = IntegrationSettingController;


/***/ }),

/***/ "./src/app/integration-setting/integration-setting.entity.ts":
/*!*******************************************************************!*\
  !*** ./src/app/integration-setting/integration-setting.entity.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationSetting = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const integration_tenant_entity_1 = __webpack_require__(/*! ../integration-tenant/integration-tenant.entity */ "./src/app/integration-tenant/integration-tenant.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let IntegrationSetting = class IntegrationSetting extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: integration_tenant_entity_1.IntegrationTenant }),
    typeorm_1.ManyToOne((type) => integration_tenant_entity_1.IntegrationTenant, {
        nullable: false
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof integration_tenant_entity_1.IntegrationTenant !== "undefined" && integration_tenant_entity_1.IntegrationTenant) === "function" ? _a : Object)
], IntegrationSetting.prototype, "integration", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((integrationSetting) => integrationSetting.integration),
    tslib_1.__metadata("design:type", String)
], IntegrationSetting.prototype, "integrationId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], IntegrationSetting.prototype, "settingsName", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], IntegrationSetting.prototype, "settingsValue", void 0);
IntegrationSetting = tslib_1.__decorate([
    typeorm_1.Entity('integration_setting')
], IntegrationSetting);
exports.IntegrationSetting = IntegrationSetting;


/***/ }),

/***/ "./src/app/integration-setting/integration-setting.module.ts":
/*!*******************************************************************!*\
  !*** ./src/app/integration-setting/integration-setting.module.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationSettingModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const integration_setting_controller_1 = __webpack_require__(/*! ./integration-setting.controller */ "./src/app/integration-setting/integration-setting.controller.ts");
const integration_setting_service_1 = __webpack_require__(/*! ./integration-setting.service */ "./src/app/integration-setting/integration-setting.service.ts");
const integration_setting_entity_1 = __webpack_require__(/*! ./integration-setting.entity */ "./src/app/integration-setting/integration-setting.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/integration-setting/commands/handlers/index.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let IntegrationSettingModule = class IntegrationSettingModule {
};
IntegrationSettingModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([integration_setting_entity_1.IntegrationSetting]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [integration_setting_controller_1.IntegrationSettingController],
        providers: [integration_setting_service_1.IntegrationSettingService, ...handlers_1.CommandHandlers]
    })
], IntegrationSettingModule);
exports.IntegrationSettingModule = IntegrationSettingModule;


/***/ }),

/***/ "./src/app/integration-setting/integration-setting.seed.ts":
/*!*****************************************************************!*\
  !*** ./src/app/integration-setting/integration-setting.seed.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomIntegrationSetting = void 0;
const integration_setting_entity_1 = __webpack_require__(/*! ./integration-setting.entity */ "./src/app/integration-setting/integration-setting.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const integration_tenant_entity_1 = __webpack_require__(/*! ../integration-tenant/integration-tenant.entity */ "./src/app/integration-tenant/integration-tenant.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
exports.createRandomIntegrationSetting = async (connection, tenants) => {
    if (!tenants) {
        console.warn('Warning: tenants not found, Integration Setting  will not be created');
        return;
    }
    const integrationSettings = [];
    for (const tenant of tenants) {
        const integrationTenants = await connection.manager.find(integration_tenant_entity_1.IntegrationTenant, {
            where: [{ tenant: tenant }]
        });
        const organizations = await connection.manager.find(organization_entity_1.Organization, {
            where: [{ tenant: tenant }]
        });
        for (const integrationTenant of integrationTenants) {
            const integrationSetting = new integration_setting_entity_1.IntegrationSetting();
            integrationSetting.integration = integrationTenant;
            integrationSetting.organization = faker.random.arrayElement(organizations);
            integrationSetting.tenant = tenant;
            integrationSetting.settingsName =
                'Setting-' + faker.random.number(40);
            integrationSetting.settingsValue = faker.name.jobArea();
            integrationSettings.push(integrationSetting);
        }
    }
    await connection.manager.save(integrationSettings);
};


/***/ }),

/***/ "./src/app/integration-setting/integration-setting.service.ts":
/*!********************************************************************!*\
  !*** ./src/app/integration-setting/integration-setting.service.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationSettingService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const integration_setting_entity_1 = __webpack_require__(/*! ./integration-setting.entity */ "./src/app/integration-setting/integration-setting.entity.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const typeorm_2 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
let IntegrationSettingService = class IntegrationSettingService extends core_1.CrudService {
    constructor(repository) {
        super(repository);
        this.repository = repository;
    }
    async updateIntegrationSettings(updateIntegrationSettingsDto) { }
};
IntegrationSettingService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_2.InjectRepository(integration_setting_entity_1.IntegrationSetting)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _a : Object])
], IntegrationSettingService);
exports.IntegrationSettingService = IntegrationSettingService;


/***/ }),

/***/ "./src/app/integration-tenant/commands/handlers/index.ts":
/*!***************************************************************!*\
  !*** ./src/app/integration-tenant/commands/handlers/index.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const integration_tenant_create_handler_1 = __webpack_require__(/*! ./integration-tenant.create.handler */ "./src/app/integration-tenant/commands/handlers/integration-tenant.create.handler.ts");
const integration_tenant_get_handler_1 = __webpack_require__(/*! ./integration-tenant.get.handler */ "./src/app/integration-tenant/commands/handlers/integration-tenant.get.handler.ts");
exports.CommandHandlers = [
    integration_tenant_create_handler_1.IntegrationTenantCreateHandler,
    integration_tenant_get_handler_1.IntegrationTenantGetHandler
];


/***/ }),

/***/ "./src/app/integration-tenant/commands/handlers/integration-tenant.create.handler.ts":
/*!*******************************************************************************************!*\
  !*** ./src/app/integration-tenant/commands/handlers/integration-tenant.create.handler.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationTenantCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const integration_tenant_create_command_1 = __webpack_require__(/*! ../../../integration-tenant/commands/integration-tenant.create.command */ "./src/app/integration-tenant/commands/integration-tenant.create.command.ts");
const integration_tenant_service_1 = __webpack_require__(/*! ../../../integration-tenant/integration-tenant.service */ "./src/app/integration-tenant/integration-tenant.service.ts");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
let IntegrationTenantCreateHandler = class IntegrationTenantCreateHandler {
    constructor(_integrationTenantService) {
        this._integrationTenantService = _integrationTenantService;
    }
    async execute(command) {
        const { input } = command;
        const user = context_1.RequestContext.currentUser();
        const { tenantId } = user;
        return await this._integrationTenantService.addIntegration(Object.assign(Object.assign({}, input), { tenantId }));
    }
};
IntegrationTenantCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(integration_tenant_create_command_1.IntegrationTenantCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof integration_tenant_service_1.IntegrationTenantService !== "undefined" && integration_tenant_service_1.IntegrationTenantService) === "function" ? _a : Object])
], IntegrationTenantCreateHandler);
exports.IntegrationTenantCreateHandler = IntegrationTenantCreateHandler;


/***/ }),

/***/ "./src/app/integration-tenant/commands/handlers/integration-tenant.get.handler.ts":
/*!****************************************************************************************!*\
  !*** ./src/app/integration-tenant/commands/handlers/integration-tenant.get.handler.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationTenantGetHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const integration_tenant_get_command_1 = __webpack_require__(/*! ../../../integration-tenant/commands/integration-tenant.get.command */ "./src/app/integration-tenant/commands/integration-tenant.get.command.ts");
const integration_tenant_service_1 = __webpack_require__(/*! ../../../integration-tenant/integration-tenant.service */ "./src/app/integration-tenant/integration-tenant.service.ts");
let IntegrationTenantGetHandler = class IntegrationTenantGetHandler {
    constructor(_integrationTenantService) {
        this._integrationTenantService = _integrationTenantService;
    }
    async execute(command) {
        const { input } = command;
        return await this._integrationTenantService.findOne(input);
    }
};
IntegrationTenantGetHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(integration_tenant_get_command_1.IntegrationTenantGetCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof integration_tenant_service_1.IntegrationTenantService !== "undefined" && integration_tenant_service_1.IntegrationTenantService) === "function" ? _a : Object])
], IntegrationTenantGetHandler);
exports.IntegrationTenantGetHandler = IntegrationTenantGetHandler;


/***/ }),

/***/ "./src/app/integration-tenant/commands/index.ts":
/*!******************************************************!*\
  !*** ./src/app/integration-tenant/commands/index.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./integration-tenant.create.command */ "./src/app/integration-tenant/commands/integration-tenant.create.command.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./integration-tenant.get.command */ "./src/app/integration-tenant/commands/integration-tenant.get.command.ts"), exports);


/***/ }),

/***/ "./src/app/integration-tenant/commands/integration-tenant.create.command.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/integration-tenant/commands/integration-tenant.create.command.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationTenantCreateCommand = void 0;
class IntegrationTenantCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.IntegrationTenantCreateCommand = IntegrationTenantCreateCommand;
IntegrationTenantCreateCommand.type = '[Integration] Create Integration';


/***/ }),

/***/ "./src/app/integration-tenant/commands/integration-tenant.get.command.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/integration-tenant/commands/integration-tenant.get.command.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationTenantGetCommand = void 0;
class IntegrationTenantGetCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.IntegrationTenantGetCommand = IntegrationTenantGetCommand;
IntegrationTenantGetCommand.type = '[Integration] Get Integration';


/***/ }),

/***/ "./src/app/integration-tenant/integration-tenant.controller.ts":
/*!*********************************************************************!*\
  !*** ./src/app/integration-tenant/integration-tenant.controller.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationTenantController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const swagger_2 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const integration_tenant_entity_1 = __webpack_require__(/*! ./integration-tenant.entity */ "./src/app/integration-tenant/integration-tenant.entity.ts");
const integration_tenant_service_1 = __webpack_require__(/*! ./integration-tenant.service */ "./src/app/integration-tenant/integration-tenant.service.ts");
let IntegrationTenantController = class IntegrationTenantController extends core_1.CrudController {
    constructor(_integrationTenantService) {
        super(_integrationTenantService);
        this._integrationTenantService = _integrationTenantService;
    }
    async getById(id, data) {
        const { relations } = JSON.parse(data);
        return this._integrationTenantService.findOne(id, {
            relations
        });
    }
};
tslib_1.__decorate([
    swagger_2.ApiOperation({ summary: 'Find IntegrationTenant.' }),
    swagger_2.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found policies',
        type: integration_tenant_entity_1.IntegrationTenant
    }),
    swagger_2.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], IntegrationTenantController.prototype, "getById", null);
IntegrationTenantController = tslib_1.__decorate([
    swagger_1.ApiTags('IntegrationTenant'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof integration_tenant_service_1.IntegrationTenantService !== "undefined" && integration_tenant_service_1.IntegrationTenantService) === "function" ? _b : Object])
], IntegrationTenantController);
exports.IntegrationTenantController = IntegrationTenantController;


/***/ }),

/***/ "./src/app/integration-tenant/integration-tenant.entity.ts":
/*!*****************************************************************!*\
  !*** ./src/app/integration-tenant/integration-tenant.entity.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationTenant = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const integration_entity_setting_entity_1 = __webpack_require__(/*! ../integration-entity-setting/integration-entity-setting.entity */ "./src/app/integration-entity-setting/integration-entity-setting.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let IntegrationTenant = class IntegrationTenant extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: integration_entity_setting_entity_1.IntegrationEntitySetting, isArray: true }),
    typeorm_1.OneToMany((type) => integration_entity_setting_entity_1.IntegrationEntitySetting, (setting) => setting.integration),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], IntegrationTenant.prototype, "entitySettings", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], IntegrationTenant.prototype, "name", void 0);
IntegrationTenant = tslib_1.__decorate([
    typeorm_1.Entity('integration_tenant')
], IntegrationTenant);
exports.IntegrationTenant = IntegrationTenant;


/***/ }),

/***/ "./src/app/integration-tenant/integration-tenant.module.ts":
/*!*****************************************************************!*\
  !*** ./src/app/integration-tenant/integration-tenant.module.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationTenantModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const integration_tenant_controller_1 = __webpack_require__(/*! ./integration-tenant.controller */ "./src/app/integration-tenant/integration-tenant.controller.ts");
const integration_tenant_service_1 = __webpack_require__(/*! ./integration-tenant.service */ "./src/app/integration-tenant/integration-tenant.service.ts");
const integration_tenant_entity_1 = __webpack_require__(/*! ./integration-tenant.entity */ "./src/app/integration-tenant/integration-tenant.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const tenant_entity_1 = __webpack_require__(/*! ../tenant/tenant.entity */ "./src/app/tenant/tenant.entity.ts");
const tenant_service_1 = __webpack_require__(/*! ../tenant/tenant.service */ "./src/app/tenant/tenant.service.ts");
const integration_setting_service_1 = __webpack_require__(/*! ../integration-setting/integration-setting.service */ "./src/app/integration-setting/integration-setting.service.ts");
const integration_setting_entity_1 = __webpack_require__(/*! ../integration-setting/integration-setting.entity */ "./src/app/integration-setting/integration-setting.entity.ts");
const integration_entity_setting_service_1 = __webpack_require__(/*! ../integration-entity-setting/integration-entity-setting.service */ "./src/app/integration-entity-setting/integration-entity-setting.service.ts");
const integration_entity_setting_entity_1 = __webpack_require__(/*! ../integration-entity-setting/integration-entity-setting.entity */ "./src/app/integration-entity-setting/integration-entity-setting.entity.ts");
const role_module_1 = __webpack_require__(/*! ../role/role.module */ "./src/app/role/role.module.ts");
const user_module_1 = __webpack_require__(/*! ../user/user.module */ "./src/app/user/user.module.ts");
const role_permissions_module_1 = __webpack_require__(/*! ../role-permissions/role-permissions.module */ "./src/app/role-permissions/role-permissions.module.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/integration-tenant/commands/handlers/index.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let IntegrationTenantModule = class IntegrationTenantModule {
};
IntegrationTenantModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([
                integration_tenant_entity_1.IntegrationTenant,
                integration_setting_entity_1.IntegrationSetting,
                tenant_entity_1.Tenant,
                integration_entity_setting_entity_1.IntegrationEntitySetting
            ]),
            role_module_1.RoleModule,
            user_module_1.UserModule,
            role_permissions_module_1.RolePermissionsModule,
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        exports: [
            integration_tenant_service_1.IntegrationTenantService,
            integration_setting_service_1.IntegrationSettingService,
            tenant_service_1.TenantService,
            integration_entity_setting_service_1.IntegrationEntitySettingService
        ],
        controllers: [integration_tenant_controller_1.IntegrationTenantController],
        providers: [
            integration_tenant_service_1.IntegrationTenantService,
            integration_setting_service_1.IntegrationSettingService,
            tenant_service_1.TenantService,
            integration_entity_setting_service_1.IntegrationEntitySettingService,
            ...handlers_1.CommandHandlers
        ]
    })
], IntegrationTenantModule);
exports.IntegrationTenantModule = IntegrationTenantModule;


/***/ }),

/***/ "./src/app/integration-tenant/integration-tenant.seed.ts":
/*!***************************************************************!*\
  !*** ./src/app/integration-tenant/integration-tenant.seed.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomIntegrationTenant = void 0;
const integration_tenant_entity_1 = __webpack_require__(/*! ./integration-tenant.entity */ "./src/app/integration-tenant/integration-tenant.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
exports.createRandomIntegrationTenant = async (connection, tenants) => {
    if (!tenants) {
        console.warn('Warning: tenants not found, Integration Tenant  will not be created');
        return;
    }
    const integrationTenants = [];
    for (const tenant of tenants) {
        const organizations = await connection.manager.find(organization_entity_1.Organization, {
            where: [{ tenant: tenant }]
        });
        const integrationTenant = new integration_tenant_entity_1.IntegrationTenant();
        integrationTenant.name = faker.company.companyName();
        integrationTenant.entitySettings = [];
        integrationTenant.tenant = tenant;
        integrationTenant.organization = faker.random.arrayElement(organizations);
        integrationTenants.push(integrationTenant);
    }
    await connection.manager.save(integrationTenants);
};


/***/ }),

/***/ "./src/app/integration-tenant/integration-tenant.service.ts":
/*!******************************************************************!*\
  !*** ./src/app/integration-tenant/integration-tenant.service.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationTenantService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const typeorm_2 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const integration_tenant_entity_1 = __webpack_require__(/*! ./integration-tenant.entity */ "./src/app/integration-tenant/integration-tenant.entity.ts");
const tenant_service_1 = __webpack_require__(/*! ../tenant/tenant.service */ "./src/app/tenant/tenant.service.ts");
const integration_setting_service_1 = __webpack_require__(/*! ../integration-setting/integration-setting.service */ "./src/app/integration-setting/integration-setting.service.ts");
let IntegrationTenantService = class IntegrationTenantService extends core_1.CrudService {
    constructor(repository, _tenantService, _integrationSettingService) {
        super(repository);
        this.repository = repository;
        this._tenantService = _tenantService;
        this._integrationSettingService = _integrationSettingService;
    }
    async addIntegration(createIntegrationDto) {
        const { tenantId, organizationId } = createIntegrationDto;
        const { record: tenant } = await this._tenantService.findOneOrFail(tenantId);
        const integration = await this.create({
            tenant,
            organizationId,
            name: createIntegrationDto.name,
            entitySettings: createIntegrationDto.entitySettings
        });
        const settingsDto = createIntegrationDto.settings.map((setting) => (Object.assign(Object.assign({}, setting), { integration,
            tenantId })));
        await this._integrationSettingService.create(settingsDto);
        return integration;
    }
    async updateIntegration(updateIntegrationDto) { }
};
IntegrationTenantService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_2.InjectRepository(integration_tenant_entity_1.IntegrationTenant)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _a : Object, typeof (_b = typeof tenant_service_1.TenantService !== "undefined" && tenant_service_1.TenantService) === "function" ? _b : Object, typeof (_c = typeof integration_setting_service_1.IntegrationSettingService !== "undefined" && integration_setting_service_1.IntegrationSettingService) === "function" ? _c : Object])
], IntegrationTenantService);
exports.IntegrationTenantService = IntegrationTenantService;


/***/ }),

/***/ "./src/app/integration/commands/handlers/index.ts":
/*!********************************************************!*\
  !*** ./src/app/integration/commands/handlers/index.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const integration_type_get_handler_1 = __webpack_require__(/*! ./integration-type.get.handler */ "./src/app/integration/commands/handlers/integration-type.get.handler.ts");
const integration_get_handler_1 = __webpack_require__(/*! ./integration.get.handler */ "./src/app/integration/commands/handlers/integration.get.handler.ts");
exports.CommandHandlers = [
    integration_type_get_handler_1.IntegrationTypeGetHandler,
    integration_get_handler_1.IntegrationGetHandler
];


/***/ }),

/***/ "./src/app/integration/commands/handlers/integration-type.get.handler.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/integration/commands/handlers/integration-type.get.handler.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationTypeGetHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const __1 = __webpack_require__(/*! .. */ "./src/app/integration/commands/index.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const integration_type_entity_1 = __webpack_require__(/*! ../../integration-type.entity */ "./src/app/integration/integration-type.entity.ts");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
let IntegrationTypeGetHandler = class IntegrationTypeGetHandler {
    constructor(repository) {
        this.repository = repository;
    }
    async execute(command) {
        return await this.repository.find({
            order: {
                order: 'ASC'
            }
        });
    }
};
IntegrationTypeGetHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(__1.IntegrationTypeGetCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(integration_type_entity_1.IntegrationType)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], IntegrationTypeGetHandler);
exports.IntegrationTypeGetHandler = IntegrationTypeGetHandler;


/***/ }),

/***/ "./src/app/integration/commands/handlers/integration.get.handler.ts":
/*!**************************************************************************!*\
  !*** ./src/app/integration/commands/handlers/integration.get.handler.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationGetHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const __1 = __webpack_require__(/*! .. */ "./src/app/integration/commands/index.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const integration_entity_1 = __webpack_require__(/*! ../../integration.entity */ "./src/app/integration/integration.entity.ts");
let IntegrationGetHandler = class IntegrationGetHandler {
    constructor(repository) {
        this.repository = repository;
    }
    async execute(command) {
        const { input } = command;
        const query = this.repository.createQueryBuilder('integration');
        query
            .leftJoinAndSelect('integration.integrationTypes', 'integrationTypes')
            .where('"integrationTypes"."id" = :id', {
            id: input.integrationTypeId
        })
            .andWhere('LOWER(integration.name) LIKE :name', {
            name: `${input.searchQuery.toLowerCase()}%`
        });
        if (input['filter'] === 'true') {
            query.andWhere('integration.isPaid = :isPaid', {
                isPaid: true
            });
        }
        if (input['filter'] === 'false') {
            query.andWhere('integration.isPaid = :isPaid', {
                isPaid: false
            });
        }
        return await query.orderBy('integration.order', 'ASC').getMany();
    }
};
IntegrationGetHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(__1.IntegrationGetCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(integration_entity_1.Integration)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], IntegrationGetHandler);
exports.IntegrationGetHandler = IntegrationGetHandler;


/***/ }),

/***/ "./src/app/integration/commands/index.ts":
/*!***********************************************!*\
  !*** ./src/app/integration/commands/index.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./integration-type.get.command */ "./src/app/integration/commands/integration-type.get.command.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./integration.get.command */ "./src/app/integration/commands/integration.get.command.ts"), exports);


/***/ }),

/***/ "./src/app/integration/commands/integration-type.get.command.ts":
/*!**********************************************************************!*\
  !*** ./src/app/integration/commands/integration-type.get.command.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationTypeGetCommand = void 0;
class IntegrationTypeGetCommand {
    constructor() { }
}
exports.IntegrationTypeGetCommand = IntegrationTypeGetCommand;
IntegrationTypeGetCommand.type = '[Integration] Get Integration Types';


/***/ }),

/***/ "./src/app/integration/commands/integration.get.command.ts":
/*!*****************************************************************!*\
  !*** ./src/app/integration/commands/integration.get.command.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationGetCommand = void 0;
class IntegrationGetCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.IntegrationGetCommand = IntegrationGetCommand;
IntegrationGetCommand.type = '[Integration] Get Integrations';


/***/ }),

/***/ "./src/app/integration/integration-type.entity.ts":
/*!********************************************************!*\
  !*** ./src/app/integration/integration-type.entity.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationType = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const base_1 = __webpack_require__(/*! ../core/entities/base */ "./src/app/core/entities/base.ts");
let IntegrationType = class IntegrationType extends base_1.Base {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], IntegrationType.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], IntegrationType.prototype, "groupName", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", Number)
], IntegrationType.prototype, "order", void 0);
IntegrationType = tslib_1.__decorate([
    typeorm_1.Entity('integration_type')
], IntegrationType);
exports.IntegrationType = IntegrationType;


/***/ }),

/***/ "./src/app/integration/integration-type.seed.ts":
/*!******************************************************!*\
  !*** ./src/app/integration/integration-type.seed.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultIntegrationTypes = void 0;
const integration_type_entity_1 = __webpack_require__(/*! ./integration-type.entity */ "./src/app/integration/integration-type.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const DEFAULT_INTEGRATION_TYPES = [
    {
        name: models_1.IntegrationTypeNameEnum.ALL_INTEGRATIONS,
        groupName: models_1.IntegrationTypeGroupEnum.FEATURED,
        order: 1
    },
    {
        name: models_1.IntegrationTypeNameEnum.FOR_SALES_TEAMS,
        groupName: models_1.IntegrationTypeGroupEnum.FEATURED,
        order: 1
    },
    {
        name: models_1.IntegrationTypeNameEnum.FOR_ACCOUNTANTS,
        groupName: models_1.IntegrationTypeGroupEnum.FEATURED,
        order: 1
    },
    {
        name: models_1.IntegrationTypeNameEnum.FOR_SUPPORT_TEAMS,
        groupName: models_1.IntegrationTypeGroupEnum.FEATURED,
        order: 1
    },
    {
        name: models_1.IntegrationTypeNameEnum.CRM,
        groupName: models_1.IntegrationTypeGroupEnum.CATEGORIES,
        order: 2
    },
    {
        name: models_1.IntegrationTypeNameEnum.SCHEDULING,
        groupName: models_1.IntegrationTypeGroupEnum.CATEGORIES,
        order: 2
    },
    {
        name: models_1.IntegrationTypeNameEnum.TOOLS,
        groupName: models_1.IntegrationTypeGroupEnum.CATEGORIES,
        order: 2
    }
];
exports.createDefaultIntegrationTypes = async (connection) => {
    const integrationTypes = DEFAULT_INTEGRATION_TYPES.map(({ name, groupName, order }) => {
        const entity = new integration_type_entity_1.IntegrationType();
        entity.name = name;
        entity.groupName = groupName;
        entity.order = order;
        return entity;
    });
    return await insertIntegrationTypes(connection, integrationTypes);
};
const insertIntegrationTypes = async (connection, integrationTypes) => await connection.manager.save(integrationTypes);


/***/ }),

/***/ "./src/app/integration/integration.controller.ts":
/*!*******************************************************!*\
  !*** ./src/app/integration/integration.controller.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const integration_service_1 = __webpack_require__(/*! ./integration.service */ "./src/app/integration/integration.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const integration_type_entity_1 = __webpack_require__(/*! ./integration-type.entity */ "./src/app/integration/integration-type.entity.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/integration/commands/index.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
let IntegrationController = class IntegrationController extends core_1.CrudController {
    constructor(_integrationService, _commandBus) {
        super(_integrationService);
        this._integrationService = _integrationService;
        this._commandBus = _commandBus;
    }
    async getIntegrationTypes() {
        return await this._commandBus.execute(new commands_1.IntegrationTypeGetCommand());
    }
    async getIntegrations(filters) {
        const integrationFilter = JSON.parse(filters);
        return await this._commandBus.execute(new commands_1.IntegrationGetCommand(integrationFilter));
    }
    async checkRememberState(integration, organizationId) {
        return await this._integrationService.checkIntegrationRemeberState(integration, organizationId);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all integration types.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found integration types',
        type: integration_type_entity_1.IntegrationType
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('/types'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], IntegrationController.prototype, "getIntegrationTypes", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all integrations.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found integrations',
        type: integration_type_entity_1.IntegrationType
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('filters')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], IntegrationController.prototype, "getIntegrations", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Check integration remember state for tenant user.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Checked state'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid request'
    }),
    common_1.Get('check/state/:integration/:organizationId'),
    tslib_1.__param(0, common_1.Param('integration')),
    tslib_1.__param(1, common_1.Param('organizationId')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.IntegrationEnum !== "undefined" && models_1.IntegrationEnum) === "function" ? _c : Object, String]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], IntegrationController.prototype, "checkRememberState", null);
IntegrationController = tslib_1.__decorate([
    swagger_1.ApiTags('Integrations'),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof integration_service_1.IntegrationService !== "undefined" && integration_service_1.IntegrationService) === "function" ? _e : Object, typeof (_f = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _f : Object])
], IntegrationController);
exports.IntegrationController = IntegrationController;


/***/ }),

/***/ "./src/app/integration/integration.entity.ts":
/*!***************************************************!*\
  !*** ./src/app/integration/integration.entity.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Integration = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const integration_type_entity_1 = __webpack_require__(/*! ./integration-type.entity */ "./src/app/integration/integration-type.entity.ts");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const base_1 = __webpack_require__(/*! ../core/entities/base */ "./src/app/core/entities/base.ts");
let Integration = class Integration extends base_1.Base {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], Integration.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Integration.prototype, "imgSrc", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean, default: false }),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], Integration.prototype, "isComingSoon", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean, default: false }),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], Integration.prototype, "isPaid", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Integration.prototype, "version", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Integration.prototype, "docUrl", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean, default: false }),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], Integration.prototype, "isFreeTrial", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ default: 0, type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], Integration.prototype, "freeTrialPeriod", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], Integration.prototype, "order", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => integration_type_entity_1.IntegrationType),
    typeorm_1.JoinTable({
        name: 'integration_integration_type'
    }),
    tslib_1.__metadata("design:type", Array)
], Integration.prototype, "integrationTypes", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany(() => tag_entity_1.Tag),
    typeorm_1.JoinTable({
        name: 'tag_integration'
    }),
    tslib_1.__metadata("design:type", Array)
], Integration.prototype, "tags", void 0);
Integration = tslib_1.__decorate([
    typeorm_1.Entity('integration')
], Integration);
exports.Integration = Integration;


/***/ }),

/***/ "./src/app/integration/integration.module.ts":
/*!***************************************************!*\
  !*** ./src/app/integration/integration.module.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const integration_type_entity_1 = __webpack_require__(/*! ./integration-type.entity */ "./src/app/integration/integration-type.entity.ts");
const integration_entity_1 = __webpack_require__(/*! ./integration.entity */ "./src/app/integration/integration.entity.ts");
const integration_service_1 = __webpack_require__(/*! ./integration.service */ "./src/app/integration/integration.service.ts");
const integration_controller_1 = __webpack_require__(/*! ./integration.controller */ "./src/app/integration/integration.controller.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/integration/commands/handlers/index.ts");
const integration_tenant_module_1 = __webpack_require__(/*! ../integration-tenant/integration-tenant.module */ "./src/app/integration-tenant/integration-tenant.module.ts");
let IntegrationModule = class IntegrationModule {
};
IntegrationModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([integration_entity_1.Integration, integration_type_entity_1.IntegrationType]),
            cqrs_1.CqrsModule,
            integration_tenant_module_1.IntegrationTenantModule
        ],
        controllers: [integration_controller_1.IntegrationController],
        providers: [integration_service_1.IntegrationService, ...handlers_1.CommandHandlers]
    })
], IntegrationModule);
exports.IntegrationModule = IntegrationModule;


/***/ }),

/***/ "./src/app/integration/integration.seed.ts":
/*!*************************************************!*\
  !*** ./src/app/integration/integration.seed.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultIntegrations = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const integration_entity_1 = __webpack_require__(/*! ./integration.entity */ "./src/app/integration/integration.entity.ts");
exports.createDefaultIntegrations = async (connection, integrationTypes) => {
    if (!integrationTypes) {
        console.warn('Warning: integrationTypes not found, DefaultIntegrations will not be created');
        return;
    }
    const integrations = [];
    models_1.DEFAULT_INTEGRATIONS.forEach(({ name, imgSrc, isComingSoon, integrationTypesMap, order }) => {
        const entity = new integration_entity_1.Integration();
        entity.name = name;
        entity.imgSrc = imgSrc;
        entity.isComingSoon = isComingSoon;
        entity.order = order;
        entity.integrationTypes = integrationTypes.filter((it) => integrationTypesMap.includes(it.name));
        integrations.push(entity);
    });
    return insertIntegrations(connection, integrations);
};
const insertIntegrations = async (connection, integrations) => await connection.manager.save(integrations);


/***/ }),

/***/ "./src/app/integration/integration.service.ts":
/*!****************************************************!*\
  !*** ./src/app/integration/integration.service.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const typeorm_2 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const integration_entity_1 = __webpack_require__(/*! ./integration.entity */ "./src/app/integration/integration.entity.ts");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const integration_tenant_service_1 = __webpack_require__(/*! ../integration-tenant/integration-tenant.service */ "./src/app/integration-tenant/integration-tenant.service.ts");
const tenant_service_1 = __webpack_require__(/*! ../tenant/tenant.service */ "./src/app/tenant/tenant.service.ts");
let IntegrationService = class IntegrationService extends core_1.CrudService {
    constructor(repository, _integrationTenantService, _tenantService) {
        super(repository);
        this.repository = repository;
        this._integrationTenantService = _integrationTenantService;
        this._tenantService = _tenantService;
    }
    async checkIntegrationRemeberState(integration, organizationId) {
        try {
            const user = context_1.RequestContext.currentUser();
            const { tenantId } = user;
            const { record: tenant } = await this._tenantService.findOneOrFail(tenantId);
            return await this._integrationTenantService.findOneOrFail({
                where: {
                    tenant: tenant,
                    name: integration,
                    organizationId
                },
                order: {
                    updatedAt: 'DESC'
                }
            });
        }
        catch (error) {
            throw new common_1.BadRequestException(error);
        }
    }
};
IntegrationService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_2.InjectRepository(integration_entity_1.Integration)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _a : Object, typeof (_b = typeof integration_tenant_service_1.IntegrationTenantService !== "undefined" && integration_tenant_service_1.IntegrationTenantService) === "function" ? _b : Object, typeof (_c = typeof tenant_service_1.TenantService !== "undefined" && tenant_service_1.TenantService) === "function" ? _c : Object])
], IntegrationService);
exports.IntegrationService = IntegrationService;


/***/ }),

/***/ "./src/app/invite/commands/handlers/index.ts":
/*!***************************************************!*\
  !*** ./src/app/invite/commands/handlers/index.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const invite_accept_employee_handler_1 = __webpack_require__(/*! ./invite.accept-employee.handler */ "./src/app/invite/commands/handlers/invite.accept-employee.handler.ts");
const invite_accept_user_handler_1 = __webpack_require__(/*! ./invite.accept-user.handler */ "./src/app/invite/commands/handlers/invite.accept-user.handler.ts");
const invite_resend_handler_1 = __webpack_require__(/*! ./invite.resend.handler */ "./src/app/invite/commands/handlers/invite.resend.handler.ts");
const invite_organization_contact_handler_1 = __webpack_require__(/*! ./invite.organization-contact.handler */ "./src/app/invite/commands/handlers/invite.organization-contact.handler.ts");
const invite_accept_organization_contact_handler_1 = __webpack_require__(/*! ./invite.accept-organization-contact.handler */ "./src/app/invite/commands/handlers/invite.accept-organization-contact.handler.ts");
exports.CommandHandlers = [
    invite_accept_employee_handler_1.InviteAcceptEmployeeHandler,
    invite_accept_user_handler_1.InviteAcceptUserHandler,
    invite_accept_organization_contact_handler_1.InviteAcceptOrganizationContactHandler,
    invite_resend_handler_1.InviteResendHandler,
    invite_organization_contact_handler_1.InviteOrganizationContactHandler
];


/***/ }),

/***/ "./src/app/invite/commands/handlers/invite.accept-employee.handler.ts":
/*!****************************************************************************!*\
  !*** ./src/app/invite/commands/handlers/invite.accept-employee.handler.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InviteAcceptEmployeeHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const auth_service_1 = __webpack_require__(/*! ../../../auth/auth.service */ "./src/app/auth/auth.service.ts");
const core_1 = __webpack_require__(/*! ../../../core */ "./src/app/core/index.ts");
const employee_service_1 = __webpack_require__(/*! ../../../employee/employee.service */ "./src/app/employee/employee.service.ts");
const organization_service_1 = __webpack_require__(/*! ../../../organization/organization.service */ "./src/app/organization/organization.service.ts");
const organization_contact_service_1 = __webpack_require__(/*! ../../../organization-contact/organization-contact.service */ "./src/app/organization-contact/organization-contact.service.ts");
const organization_department_service_1 = __webpack_require__(/*! ../../../organization-department/organization-department.service */ "./src/app/organization-department/organization-department.service.ts");
const organization_projects_service_1 = __webpack_require__(/*! ../../../organization-projects/organization-projects.service */ "./src/app/organization-projects/organization-projects.service.ts");
const invite_service_1 = __webpack_require__(/*! ../../invite.service */ "./src/app/invite/invite.service.ts");
const invite_accept_employee_command_1 = __webpack_require__(/*! ../invite.accept-employee.command */ "./src/app/invite/commands/invite.accept-employee.command.ts");
let InviteAcceptEmployeeHandler = class InviteAcceptEmployeeHandler {
    constructor(inviteService, employeeService, organizationService, organizationProjectService, organizationContactService, organizationDepartmentsService, authService) {
        this.inviteService = inviteService;
        this.employeeService = employeeService;
        this.organizationService = organizationService;
        this.organizationProjectService = organizationProjectService;
        this.organizationContactService = organizationContactService;
        this.organizationDepartmentsService = organizationDepartmentsService;
        this.authService = authService;
        this.updateEmployeeMemberships = (invite, employee) => {
            if (invite.projects)
                invite.projects.forEach((project) => {
                    let members = project.members || [];
                    members = [...members, employee];
                    this.organizationProjectService.create(Object.assign(Object.assign({}, project), { members }));
                });
            invite.organizationContacts.forEach((organizationContact) => {
                let members = organizationContact.members || [];
                members = [...members, employee];
                this.organizationContactService.create(Object.assign(Object.assign({}, organizationContact), { members }));
            });
            invite.departments.forEach((department) => {
                let members = department.members || [];
                members = [...members, employee];
                this.organizationDepartmentsService.create(Object.assign(Object.assign({}, department), { members }));
            });
        };
    }
    async execute(command) {
        const { input, languageCode } = command;
        const invite = await this.inviteService.findOne({
            where: { id: input.inviteId },
            relations: [
                'projects',
                'organizationContact',
                'departments',
                'projects.members',
                'organizationContact.members',
                'departments.members'
            ]
        });
        if (!invite) {
            throw Error('Invite does not exist');
        }
        const organization = await this.organizationService.findOne(input.organization.id);
        if (!organization.invitesAllowed) {
            throw Error('Organization no longer allows invites');
        }
        if (!input.user.imageUrl) {
            input.user.imageUrl = core_1.getUserDummyImage(input.user);
        }
        const user = await this.authService.register(Object.assign(Object.assign({}, input), { user: Object.assign(Object.assign({}, input.user), { tenant: {
                    id: organization.tenantId
                } }), organizationId: input.organization.id }), languageCode);
        const employee = await this.employeeService.create({
            user,
            organization: input.organization,
            tenant: {
                id: organization.tenantId
            }
        });
        this.updateEmployeeMemberships(invite, employee);
        return await this.inviteService.update(input.inviteId, {
            status: models_1.InviteStatusEnum.ACCEPTED
        });
    }
};
InviteAcceptEmployeeHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(invite_accept_employee_command_1.InviteAcceptEmployeeCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof invite_service_1.InviteService !== "undefined" && invite_service_1.InviteService) === "function" ? _a : Object, typeof (_b = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _b : Object, typeof (_c = typeof organization_service_1.OrganizationService !== "undefined" && organization_service_1.OrganizationService) === "function" ? _c : Object, typeof (_d = typeof organization_projects_service_1.OrganizationProjectsService !== "undefined" && organization_projects_service_1.OrganizationProjectsService) === "function" ? _d : Object, typeof (_e = typeof organization_contact_service_1.OrganizationContactService !== "undefined" && organization_contact_service_1.OrganizationContactService) === "function" ? _e : Object, typeof (_f = typeof organization_department_service_1.OrganizationDepartmentService !== "undefined" && organization_department_service_1.OrganizationDepartmentService) === "function" ? _f : Object, typeof (_g = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _g : Object])
], InviteAcceptEmployeeHandler);
exports.InviteAcceptEmployeeHandler = InviteAcceptEmployeeHandler;


/***/ }),

/***/ "./src/app/invite/commands/handlers/invite.accept-organization-contact.handler.ts":
/*!****************************************************************************************!*\
  !*** ./src/app/invite/commands/handlers/invite.accept-organization-contact.handler.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InviteAcceptOrganizationContactHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const auth_service_1 = __webpack_require__(/*! ../../../auth/auth.service */ "./src/app/auth/auth.service.ts");
const organization_contact_service_1 = __webpack_require__(/*! ../../../organization-contact/organization-contact.service */ "./src/app/organization-contact/organization-contact.service.ts");
const organization_service_1 = __webpack_require__(/*! ../../../organization/organization.service */ "./src/app/organization/organization.service.ts");
const role_permissions_service_1 = __webpack_require__(/*! ../../../role-permissions/role-permissions.service */ "./src/app/role-permissions/role-permissions.service.ts");
const tenant_role_bulk_create_command_1 = __webpack_require__(/*! ../../../role/commands/tenant-role-bulk-create.command */ "./src/app/role/commands/tenant-role-bulk-create.command.ts");
const role_service_1 = __webpack_require__(/*! ../../../role/role.service */ "./src/app/role/role.service.ts");
const tenant_service_1 = __webpack_require__(/*! ../../../tenant/tenant.service */ "./src/app/tenant/tenant.service.ts");
const invite_service_1 = __webpack_require__(/*! ../../invite.service */ "./src/app/invite/invite.service.ts");
const invite_accept_organization_contact_command_1 = __webpack_require__(/*! ../invite.accept-organization-contact.command */ "./src/app/invite/commands/invite.accept-organization-contact.command.ts");
let InviteAcceptOrganizationContactHandler = class InviteAcceptOrganizationContactHandler {
    constructor(inviteService, authService, organizationService, organizationContactService, tenantService, roleService, rolePermissionService, commandBus) {
        this.inviteService = inviteService;
        this.authService = authService;
        this.organizationService = organizationService;
        this.organizationContactService = organizationContactService;
        this.tenantService = tenantService;
        this.roleService = roleService;
        this.rolePermissionService = rolePermissionService;
        this.commandBus = commandBus;
    }
    async execute(command) {
        const { input: { user, password, contactOrganization, inviteId, originalUrl }, languageCode } = command;
        const tenant = await this.tenantService.create({
            name: contactOrganization.name
        });
        const contactOrg = await this.organizationService.create(Object.assign(Object.assign({}, contactOrganization), { tenant }));
        const roles = await this.commandBus.execute(new tenant_role_bulk_create_command_1.TenantRoleBulkCreateCommand([tenant]));
        const role = await roles.find((defaultRole) => defaultRole.name === models_1.RolesEnum.SUPER_ADMIN);
        await this.authService.register({
            user: Object.assign(Object.assign({}, user), { tenant, role }),
            password,
            originalUrl,
            organizationId: contactOrg.id
        }, languageCode);
        const { organizationContact } = await this.inviteService.findOne(inviteId, {
            relations: ['organizationContact']
        });
        const organizationContactId = organizationContact[0].id;
        await this.organizationContactService.update(organizationContactId, {
            tenant: tenant,
            organizationId: contactOrg.id,
            inviteStatus: models_1.InviteStatusEnum.ACCEPTED
        });
        return this.inviteService.update(inviteId, {
            status: models_1.InviteStatusEnum.ACCEPTED
        });
    }
};
InviteAcceptOrganizationContactHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(invite_accept_organization_contact_command_1.InviteAcceptOrganizationContactCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof invite_service_1.InviteService !== "undefined" && invite_service_1.InviteService) === "function" ? _a : Object, typeof (_b = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _b : Object, typeof (_c = typeof organization_service_1.OrganizationService !== "undefined" && organization_service_1.OrganizationService) === "function" ? _c : Object, typeof (_d = typeof organization_contact_service_1.OrganizationContactService !== "undefined" && organization_contact_service_1.OrganizationContactService) === "function" ? _d : Object, typeof (_e = typeof tenant_service_1.TenantService !== "undefined" && tenant_service_1.TenantService) === "function" ? _e : Object, typeof (_f = typeof role_service_1.RoleService !== "undefined" && role_service_1.RoleService) === "function" ? _f : Object, typeof (_g = typeof role_permissions_service_1.RolePermissionsService !== "undefined" && role_permissions_service_1.RolePermissionsService) === "function" ? _g : Object, typeof (_h = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _h : Object])
], InviteAcceptOrganizationContactHandler);
exports.InviteAcceptOrganizationContactHandler = InviteAcceptOrganizationContactHandler;


/***/ }),

/***/ "./src/app/invite/commands/handlers/invite.accept-user.handler.ts":
/*!************************************************************************!*\
  !*** ./src/app/invite/commands/handlers/invite.accept-user.handler.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InviteAcceptUserHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const auth_service_1 = __webpack_require__(/*! ../../../auth/auth.service */ "./src/app/auth/auth.service.ts");
const invite_service_1 = __webpack_require__(/*! ../../invite.service */ "./src/app/invite/invite.service.ts");
const invite_accept_user_command_1 = __webpack_require__(/*! ../invite.accept-user.command */ "./src/app/invite/commands/invite.accept-user.command.ts");
const core_1 = __webpack_require__(/*! ../../../core */ "./src/app/core/index.ts");
const organization_service_1 = __webpack_require__(/*! ../../../organization/organization.service */ "./src/app/organization/organization.service.ts");
let InviteAcceptUserHandler = class InviteAcceptUserHandler {
    constructor(inviteService, authService, organizationService) {
        this.inviteService = inviteService;
        this.authService = authService;
        this.organizationService = organizationService;
    }
    async execute(command) {
        const { input, languageCode } = command;
        const organization = await this.organizationService.findOne(input.organization.id, { relations: ['tenant'] });
        if (!input.user.imageUrl) {
            input.user.imageUrl = core_1.getUserDummyImage(input.user);
        }
        await this.authService.register(Object.assign(Object.assign({}, input), { user: Object.assign(Object.assign({}, input.user), { tenant: organization.tenant }), organizationId: organization.id }), languageCode);
        return await this.inviteService.update(input.inviteId, {
            status: models_1.InviteStatusEnum.ACCEPTED
        });
    }
};
InviteAcceptUserHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(invite_accept_user_command_1.InviteAcceptUserCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof invite_service_1.InviteService !== "undefined" && invite_service_1.InviteService) === "function" ? _a : Object, typeof (_b = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _b : Object, typeof (_c = typeof organization_service_1.OrganizationService !== "undefined" && organization_service_1.OrganizationService) === "function" ? _c : Object])
], InviteAcceptUserHandler);
exports.InviteAcceptUserHandler = InviteAcceptUserHandler;


/***/ }),

/***/ "./src/app/invite/commands/handlers/invite.organization-contact.handler.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/invite/commands/handlers/invite.organization-contact.handler.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InviteOrganizationContactHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const user_service_1 = __webpack_require__(/*! ../../../user/user.service */ "./src/app/user/user.service.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const invite_organization_contact_command_1 = __webpack_require__(/*! ../invite.organization-contact.command */ "./src/app/invite/commands/invite.organization-contact.command.ts");
const organization_contact_service_1 = __webpack_require__(/*! ../../../organization-contact/organization-contact.service */ "./src/app/organization-contact/organization-contact.service.ts");
const invite_service_1 = __webpack_require__(/*! ../../invite.service */ "./src/app/invite/invite.service.ts");
const role_service_1 = __webpack_require__(/*! ../../../role/role.service */ "./src/app/role/role.service.ts");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
let InviteOrganizationContactHandler = class InviteOrganizationContactHandler {
    constructor(organizationContactService, inviteService, userService, roleService) {
        this.organizationContactService = organizationContactService;
        this.inviteService = inviteService;
        this.userService = userService;
        this.roleService = roleService;
    }
    async execute(command) {
        const { input: { id, originalUrl, inviterUser, languageCode } } = command;
        const organizationContact = await this.organizationContactService.findOne(id);
        if (!organizationContact.primaryEmail) {
            throw new common_1.InternalServerErrorException('No Primary Email');
        }
        const alreadyExists = await this.userExistsForSameTenant(organizationContact.primaryEmail, inviterUser.tenantId);
        if (alreadyExists) {
            throw new common_1.InternalServerErrorException('Contact email already exists in the account as a user');
        }
        const { id: roleId } = await this.roleService.findOne({
            where: { name: models_1.RolesEnum.VIEWER }
        });
        this.inviteService.createOrganizationContactInvite({
            emailId: organizationContact.primaryEmail,
            roleId,
            organizationContactId: organizationContact.id,
            organizationId: organizationContact.organizationId,
            tenantId: context_1.RequestContext.currentTenantId(),
            invitedById: inviterUser.id,
            originalUrl,
            languageCode
        });
        await this.organizationContactService.update(id, {
            inviteStatus: models_1.ContactOrganizationInviteStatus.INVITED
        });
        return Object.assign(Object.assign({}, organizationContact), { inviteStatus: models_1.ContactOrganizationInviteStatus.INVITED });
    }
    async userExistsForSameTenant(email, tenantId) {
        let user;
        try {
            user = await this.userService.getUserByEmail(email);
        }
        catch (error) { }
        if (!user) {
            return false;
        }
        return true;
    }
};
InviteOrganizationContactHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(invite_organization_contact_command_1.InviteOrganizationContactCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof organization_contact_service_1.OrganizationContactService !== "undefined" && organization_contact_service_1.OrganizationContactService) === "function" ? _a : Object, typeof (_b = typeof invite_service_1.InviteService !== "undefined" && invite_service_1.InviteService) === "function" ? _b : Object, typeof (_c = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" ? _c : Object, typeof (_d = typeof role_service_1.RoleService !== "undefined" && role_service_1.RoleService) === "function" ? _d : Object])
], InviteOrganizationContactHandler);
exports.InviteOrganizationContactHandler = InviteOrganizationContactHandler;


/***/ }),

/***/ "./src/app/invite/commands/handlers/invite.resend.handler.ts":
/*!*******************************************************************!*\
  !*** ./src/app/invite/commands/handlers/invite.resend.handler.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InviteResendHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const invite_service_1 = __webpack_require__(/*! ../../invite.service */ "./src/app/invite/invite.service.ts");
const invite_resend_command_1 = __webpack_require__(/*! ../invite.resend.command */ "./src/app/invite/commands/invite.resend.command.ts");
let InviteResendHandler = class InviteResendHandler {
    constructor(inviteService) {
        this.inviteService = inviteService;
    }
    async execute(command) {
        const { input } = command;
        const expireDate = new Date();
        expireDate.setDate(expireDate.getDate() + 7);
        return await this.inviteService.update(input.id, {
            status: models_1.InviteStatusEnum.INVITED,
            expireDate,
            invitedById: input.invitedById
        });
    }
};
InviteResendHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(invite_resend_command_1.InviteResendCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof invite_service_1.InviteService !== "undefined" && invite_service_1.InviteService) === "function" ? _a : Object])
], InviteResendHandler);
exports.InviteResendHandler = InviteResendHandler;


/***/ }),

/***/ "./src/app/invite/commands/invite.accept-employee.command.ts":
/*!*******************************************************************!*\
  !*** ./src/app/invite/commands/invite.accept-employee.command.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InviteAcceptEmployeeCommand = void 0;
class InviteAcceptEmployeeCommand {
    constructor(input, languageCode) {
        this.input = input;
        this.languageCode = languageCode;
    }
}
exports.InviteAcceptEmployeeCommand = InviteAcceptEmployeeCommand;
InviteAcceptEmployeeCommand.type = '[Invite] Accept Employee';


/***/ }),

/***/ "./src/app/invite/commands/invite.accept-organization-contact.command.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/invite/commands/invite.accept-organization-contact.command.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InviteAcceptOrganizationContactCommand = void 0;
class InviteAcceptOrganizationContactCommand {
    constructor(input, languageCode) {
        this.input = input;
        this.languageCode = languageCode;
    }
}
exports.InviteAcceptOrganizationContactCommand = InviteAcceptOrganizationContactCommand;
InviteAcceptOrganizationContactCommand.type = '[Invite] Accept Organization Contact';


/***/ }),

/***/ "./src/app/invite/commands/invite.accept-user.command.ts":
/*!***************************************************************!*\
  !*** ./src/app/invite/commands/invite.accept-user.command.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InviteAcceptUserCommand = void 0;
class InviteAcceptUserCommand {
    constructor(input, languageCode) {
        this.input = input;
        this.languageCode = languageCode;
    }
}
exports.InviteAcceptUserCommand = InviteAcceptUserCommand;
InviteAcceptUserCommand.type = '[Invite] Accept User';


/***/ }),

/***/ "./src/app/invite/commands/invite.organization-contact.command.ts":
/*!************************************************************************!*\
  !*** ./src/app/invite/commands/invite.organization-contact.command.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InviteOrganizationContactCommand = void 0;
class InviteOrganizationContactCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.InviteOrganizationContactCommand = InviteOrganizationContactCommand;
InviteOrganizationContactCommand.type = '[OrganizationContact] Invite';


/***/ }),

/***/ "./src/app/invite/commands/invite.resend.command.ts":
/*!**********************************************************!*\
  !*** ./src/app/invite/commands/invite.resend.command.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InviteResendCommand = void 0;
class InviteResendCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.InviteResendCommand = InviteResendCommand;
InviteResendCommand.type = '[Invite] Resend';


/***/ }),

/***/ "./src/app/invite/invite.controller.ts":
/*!*********************************************!*\
  !*** ./src/app/invite/invite.controller.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InviteController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const invite_accept_employee_command_1 = __webpack_require__(/*! ./commands/invite.accept-employee.command */ "./src/app/invite/commands/invite.accept-employee.command.ts");
const invite_accept_user_command_1 = __webpack_require__(/*! ./commands/invite.accept-user.command */ "./src/app/invite/commands/invite.accept-user.command.ts");
const invite_organization_contact_command_1 = __webpack_require__(/*! ./commands/invite.organization-contact.command */ "./src/app/invite/commands/invite.organization-contact.command.ts");
const invite_entity_1 = __webpack_require__(/*! ./invite.entity */ "./src/app/invite/invite.entity.ts");
const invite_service_1 = __webpack_require__(/*! ./invite.service */ "./src/app/invite/invite.service.ts");
const invite_resend_command_1 = __webpack_require__(/*! ./commands/invite.resend.command */ "./src/app/invite/commands/invite.resend.command.ts");
const permissions_1 = __webpack_require__(/*! ./../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const permission_guard_1 = __webpack_require__(/*! ./../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const express_1 = __webpack_require__(/*! express */ "express");
const nestjs_i18n_1 = __webpack_require__(/*! nestjs-i18n */ "nestjs-i18n");
const invite_accept_organization_contact_command_1 = __webpack_require__(/*! ./commands/invite.accept-organization-contact.command */ "./src/app/invite/commands/invite.accept-organization-contact.command.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let InviteController = class InviteController {
    constructor(inviteService, commandBus) {
        this.inviteService = inviteService;
        this.commandBus = commandBus;
    }
    async createManyWithEmailsId(entity, request, languageCode) {
        return this.inviteService.createBulk(entity, request.get('Origin'), languageCode);
    }
    async validateInvite(data) {
        const { relations, findInput: { email, token } } = JSON.parse(data);
        if (!email && !token) {
            throw new common_1.BadRequestException('Email & Token Mandatory');
        }
        return this.inviteService.validate(relations, email, token);
    }
    async findAllInvites(data) {
        const { relations, findInput } = JSON.parse(data);
        return this.inviteService.findAll({
            where: findInput,
            relations
        });
    }
    async acceptEmployeeInvite(entity, request, languageCode) {
        entity.originalUrl = request.get('Origin');
        return this.commandBus.execute(new invite_accept_employee_command_1.InviteAcceptEmployeeCommand(entity, languageCode));
    }
    async acceptUserInvite(entity, request, languageCode) {
        entity.originalUrl = request.get('Origin');
        return this.commandBus.execute(new invite_accept_user_command_1.InviteAcceptUserCommand(entity, languageCode));
    }
    async acceptOrganizationContactInvite(input, request, languageCode) {
        input.originalUrl = request.get('Origin');
        return this.commandBus.execute(new invite_accept_organization_contact_command_1.InviteAcceptOrganizationContactCommand(input, languageCode));
    }
    async resendInvite(entity) {
        return this.commandBus.execute(new invite_resend_command_1.InviteResendCommand(entity));
    }
    async delete(id, ...options) {
        return this.inviteService.delete(id);
    }
    async update(id, ...options) {
        throw new common_1.BadRequestException('Invalid route');
    }
    async inviteOrganizationContact(id, request, languageCode) {
        return this.commandBus.execute(new invite_organization_contact_command_1.InviteOrganizationContactCommand({
            id,
            originalUrl: request.get('Origin'),
            inviterUser: request.user,
            languageCode
        }));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create email invites' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.CREATED),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard, permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_INVITE_EDIT),
    common_1.Post('/emails'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__param(1, common_1.Req()),
    tslib_1.__param(2, nestjs_i18n_1.I18nLang()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.ICreateEmailInvitesInput !== "undefined" && models_1.ICreateEmailInvitesInput) === "function" ? _a : Object, typeof (_b = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _b : Object, typeof (_c = typeof models_1.LanguagesEnum !== "undefined" && models_1.LanguagesEnum) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], InviteController.prototype, "createManyWithEmailsId", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get invite.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found invite',
        type: invite_entity_1.Invite
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('validate'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], InviteController.prototype, "validateInvite", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all invites.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found invites',
        type: invite_entity_1.Invite
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard, permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_INVITE_VIEW, models_1.PermissionsEnum.ORG_INVITE_EDIT),
    common_1.Get('all'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], InviteController.prototype, "findAllInvites", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Accept employee invite.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Post('employee'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__param(1, common_1.Req()),
    tslib_1.__param(2, nestjs_i18n_1.I18nLang()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_g = typeof models_1.IInviteAcceptInput !== "undefined" && models_1.IInviteAcceptInput) === "function" ? _g : Object, typeof (_h = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _h : Object, typeof (_j = typeof models_1.LanguagesEnum !== "undefined" && models_1.LanguagesEnum) === "function" ? _j : Object]),
    tslib_1.__metadata("design:returntype", typeof (_k = typeof Promise !== "undefined" && Promise) === "function" ? _k : Object)
], InviteController.prototype, "acceptEmployeeInvite", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Accept user invite.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Post('user'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__param(1, common_1.Req()),
    tslib_1.__param(2, nestjs_i18n_1.I18nLang()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_l = typeof models_1.IInviteAcceptInput !== "undefined" && models_1.IInviteAcceptInput) === "function" ? _l : Object, typeof (_m = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _m : Object, typeof (_o = typeof models_1.LanguagesEnum !== "undefined" && models_1.LanguagesEnum) === "function" ? _o : Object]),
    tslib_1.__metadata("design:returntype", typeof (_p = typeof Promise !== "undefined" && Promise) === "function" ? _p : Object)
], InviteController.prototype, "acceptUserInvite", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Accept organization contact invite.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Post('contact'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__param(1, common_1.Req()),
    tslib_1.__param(2, nestjs_i18n_1.I18nLang()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_q = typeof models_1.IOrganizationContactAcceptInviteInput !== "undefined" && models_1.IOrganizationContactAcceptInviteInput) === "function" ? _q : Object, typeof (_r = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _r : Object, typeof (_s = typeof models_1.LanguagesEnum !== "undefined" && models_1.LanguagesEnum) === "function" ? _s : Object]),
    tslib_1.__metadata("design:returntype", typeof (_t = typeof Promise !== "undefined" && Promise) === "function" ? _t : Object)
], InviteController.prototype, "acceptOrganizationContactInvite", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Resend invite.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard, permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_INVITE_EDIT),
    common_1.Post('resend'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_u = typeof models_1.IInviteResendInput !== "undefined" && models_1.IInviteResendInput) === "function" ? _u : Object]),
    tslib_1.__metadata("design:returntype", typeof (_v = typeof Promise !== "undefined" && Promise) === "function" ? _v : Object)
], InviteController.prototype, "resendInvite", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Delete record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NO_CONTENT,
        description: 'The record has been successfully deleted'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard, permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_INVITE_EDIT),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_w = typeof Promise !== "undefined" && Promise) === "function" ? _w : Object)
], InviteController.prototype, "delete", null);
tslib_1.__decorate([
    swagger_1.ApiExcludeEndpoint(),
    common_1.Put(),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_x = typeof Promise !== "undefined" && Promise) === "function" ? _x : Object)
], InviteController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard, permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_INVITE_EDIT),
    common_1.Put('organization-contact/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Req()),
    tslib_1.__param(2, nestjs_i18n_1.I18nLang()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object, typeof (_y = typeof models_1.LanguagesEnum !== "undefined" && models_1.LanguagesEnum) === "function" ? _y : Object]),
    tslib_1.__metadata("design:returntype", typeof (_z = typeof Promise !== "undefined" && Promise) === "function" ? _z : Object)
], InviteController.prototype, "inviteOrganizationContact", null);
InviteController = tslib_1.__decorate([
    swagger_1.ApiTags('Invite'),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_0 = typeof invite_service_1.InviteService !== "undefined" && invite_service_1.InviteService) === "function" ? _0 : Object, typeof (_1 = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _1 : Object])
], InviteController);
exports.InviteController = InviteController;


/***/ }),

/***/ "./src/app/invite/invite.entity.ts":
/*!*****************************************!*\
  !*** ./src/app/invite/invite.entity.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Invite = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const role_entity_1 = __webpack_require__(/*! ../role/role.entity */ "./src/app/role/role.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const organization_department_entity_1 = __webpack_require__(/*! ../organization-department/organization-department.entity */ "./src/app/organization-department/organization-department.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let Invite = class Invite extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Index({ unique: true }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Invite.prototype, "token", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, minLength: 3, maxLength: 100 }),
    class_validator_1.IsEmail(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index({ unique: true }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Invite.prototype, "email", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.RelationId((invite) => invite.role),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Invite.prototype, "roleId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.RelationId((invite) => invite.invitedBy),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Invite.prototype, "invitedById", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.InviteStatusEnum }),
    class_validator_1.IsEnum(models_1.InviteStatusEnum),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Invite.prototype, "status", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", typeof (_a = typeof Date !== "undefined" && Date) === "function" ? _a : Object)
], Invite.prototype, "expireDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: role_entity_1.Role }),
    typeorm_1.ManyToOne((type) => role_entity_1.Role, { nullable: true, onDelete: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof models_1.IRole !== "undefined" && models_1.IRole) === "function" ? _b : Object)
], Invite.prototype, "role", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: user_entity_1.User }),
    typeorm_1.ManyToOne((type) => user_entity_1.User, { nullable: true, onDelete: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_c = typeof models_1.IUser !== "undefined" && models_1.IUser) === "function" ? _c : Object)
], Invite.prototype, "invitedBy", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => organization_projects_entity_1.OrganizationProject),
    typeorm_1.JoinTable({
        name: 'invite_organization_project'
    }),
    tslib_1.__metadata("design:type", Array)
], Invite.prototype, "projects", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => organization_contact_entity_1.OrganizationContact),
    typeorm_1.JoinTable({
        name: 'invite_organization_contact'
    }),
    tslib_1.__metadata("design:type", Array)
], Invite.prototype, "organizationContact", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => organization_department_entity_1.OrganizationDepartment),
    typeorm_1.JoinTable({
        name: 'invite_organization_department'
    }),
    tslib_1.__metadata("design:type", Array)
], Invite.prototype, "departments", void 0);
Invite = tslib_1.__decorate([
    typeorm_1.Entity('invite')
], Invite);
exports.Invite = Invite;


/***/ }),

/***/ "./src/app/invite/invite.module.ts":
/*!*****************************************!*\
  !*** ./src/app/invite/invite.module.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InviteModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const auth_service_1 = __webpack_require__(/*! ../auth/auth.service */ "./src/app/auth/auth.service.ts");
const email_module_1 = __webpack_require__(/*! ../email/email.module */ "./src/app/email/email.module.ts");
const email_service_1 = __webpack_require__(/*! ../email/email.service */ "./src/app/email/email.service.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const organization_contact_service_1 = __webpack_require__(/*! ../organization-contact/organization-contact.service */ "./src/app/organization-contact/organization-contact.service.ts");
const organization_department_entity_1 = __webpack_require__(/*! ../organization-department/organization-department.entity */ "./src/app/organization-department/organization-department.entity.ts");
const organization_department_service_1 = __webpack_require__(/*! ../organization-department/organization-department.service */ "./src/app/organization-department/organization-department.service.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const organization_projects_service_1 = __webpack_require__(/*! ../organization-projects/organization-projects.service */ "./src/app/organization-projects/organization-projects.service.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const user_organization_entity_1 = __webpack_require__(/*! ../user-organization/user-organization.entity */ "./src/app/user-organization/user-organization.entity.ts");
const user_organization_services_1 = __webpack_require__(/*! ../user-organization/user-organization.services */ "./src/app/user-organization/user-organization.services.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/invite/commands/handlers/index.ts");
const invite_controller_1 = __webpack_require__(/*! ./invite.controller */ "./src/app/invite/invite.controller.ts");
const invite_entity_1 = __webpack_require__(/*! ./invite.entity */ "./src/app/invite/invite.entity.ts");
const invite_service_1 = __webpack_require__(/*! ./invite.service */ "./src/app/invite/invite.service.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const organization_service_1 = __webpack_require__(/*! ../organization/organization.service */ "./src/app/organization/organization.service.ts");
const role_entity_1 = __webpack_require__(/*! ../role/role.entity */ "./src/app/role/role.entity.ts");
const role_service_1 = __webpack_require__(/*! ../role/role.service */ "./src/app/role/role.service.ts");
const tenant_service_1 = __webpack_require__(/*! ../tenant/tenant.service */ "./src/app/tenant/tenant.service.ts");
const tenant_entity_1 = __webpack_require__(/*! ../tenant/tenant.entity */ "./src/app/tenant/tenant.entity.ts");
const role_permissions_service_1 = __webpack_require__(/*! ../role-permissions/role-permissions.service */ "./src/app/role-permissions/role-permissions.service.ts");
const role_permissions_entity_1 = __webpack_require__(/*! ../role-permissions/role-permissions.entity */ "./src/app/role-permissions/role-permissions.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let InviteModule = class InviteModule {
};
InviteModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([
                role_entity_1.Role,
                invite_entity_1.Invite,
                employee_entity_1.Employee,
                user_entity_1.User,
                user_organization_entity_1.UserOrganization,
                organization_projects_entity_1.OrganizationProject,
                organization_contact_entity_1.OrganizationContact,
                organization_department_entity_1.OrganizationDepartment,
                organization_entity_1.Organization,
                tenant_entity_1.Tenant,
                role_permissions_entity_1.RolePermissions
            ]),
            shared_1.SharedModule,
            cqrs_1.CqrsModule,
            email_module_1.EmailModule,
            tenant_module_1.TenantModule
        ],
        controllers: [invite_controller_1.InviteController],
        providers: [
            invite_service_1.InviteService,
            ...handlers_1.CommandHandlers,
            employee_service_1.EmployeeService,
            role_service_1.RoleService,
            user_service_1.UserService,
            auth_service_1.AuthService,
            user_organization_services_1.UserOrganizationService,
            email_service_1.EmailService,
            organization_projects_service_1.OrganizationProjectsService,
            organization_contact_service_1.OrganizationContactService,
            organization_department_service_1.OrganizationDepartmentService,
            organization_service_1.OrganizationService,
            tenant_service_1.TenantService,
            role_permissions_service_1.RolePermissionsService
        ],
        exports: [invite_service_1.InviteService]
    })
], InviteModule);
exports.InviteModule = InviteModule;


/***/ }),

/***/ "./src/app/invite/invite.seed.ts":
/*!***************************************!*\
  !*** ./src/app/invite/invite.seed.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomEmployeeInviteSent = exports.createDefaultEmployeeInviteSent = void 0;
const invite_entity_1 = __webpack_require__(/*! ./invite.entity */ "./src/app/invite/invite.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const role_entity_1 = __webpack_require__(/*! ../role/role.entity */ "./src/app/role/role.entity.ts");
const jsonwebtoken_1 = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const moment = __webpack_require__(/*! moment */ "moment");
exports.createDefaultEmployeeInviteSent = async (connection, tenant, organizations, SuperAdmin) => {
    const totalInvites = [];
    const invitationStatus = Object.values(models_1.InviteStatusEnum);
    const employeeRole = await connection.getRepository(role_entity_1.Role).find({
        where: [{ tenant: tenant, name: models_1.RolesEnum.EMPLOYEE }]
    });
    const candidateRole = await connection.getRepository(role_entity_1.Role).find({
        where: [{ tenant: tenant, name: models_1.RolesEnum.CANDIDATE }]
    });
    organizations.forEach((org) => {
        for (let i = 0; i < 10; i++) {
            const invitee = new invite_entity_1.Invite();
            invitee.email = faker.internet.email();
            invitee.expireDate = faker.date.between(new Date(), moment(new Date()).add(30, 'days').toDate());
            invitee.invitedBy = faker.random.arrayElement(SuperAdmin);
            invitee.organizationId = org.id;
            invitee.organization = org;
            invitee.role = faker.random.arrayElement([
                employeeRole[0],
                candidateRole[0]
            ]);
            invitee.status = faker.random.arrayElement(invitationStatus);
            invitee.token = createToken(invitee.email);
            invitee.tenant = tenant;
            totalInvites.push(invitee);
        }
    });
    await connection.manager.save(totalInvites);
};
exports.createRandomEmployeeInviteSent = async (connection, tenants, tenantOrganizationsMap, tenantSuperAdminMap, noOfInvitesPerOrganization) => {
    const totalInvites = [];
    const invitationStatus = Object.values(models_1.InviteStatusEnum);
    for (const tenant of tenants) {
        const employeeRole = await connection.getRepository(role_entity_1.Role).find({
            where: [{ tenant: tenant, name: models_1.RolesEnum.EMPLOYEE }]
        });
        const candidateRole = await connection.getRepository(role_entity_1.Role).find({
            where: [{ tenant: tenant, name: models_1.RolesEnum.CANDIDATE }]
        });
        const orgs = tenantOrganizationsMap.get(tenant);
        const admins = tenantSuperAdminMap.get(tenant);
        orgs.forEach((org) => {
            for (let i = 0; i < noOfInvitesPerOrganization; i++) {
                const invitee = new invite_entity_1.Invite();
                invitee.email = faker.internet.email();
                invitee.expireDate = faker.date.between(new Date(), moment(new Date()).add(30, 'days').toDate());
                invitee.invitedBy = faker.random.arrayElement(admins);
                invitee.organizationId = org.id;
                invitee.organization = org;
                invitee.role = faker.random.arrayElement([
                    employeeRole[0],
                    candidateRole[0]
                ]);
                invitee.status = faker.random.arrayElement(invitationStatus);
                invitee.token = createToken(invitee.email);
                invitee.tenant = tenant;
                totalInvites.push(invitee);
            }
        });
    }
    await connection.manager.save(totalInvites);
};
function createToken(email) {
    const token = jsonwebtoken_1.sign({ email }, environment_1.environment.JWT_SECRET, {});
    return token;
}


/***/ }),

/***/ "./src/app/invite/invite.service.ts":
/*!******************************************!*\
  !*** ./src/app/invite/invite.service.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InviteService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const jsonwebtoken_1 = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const invite_entity_1 = __webpack_require__(/*! ./invite.entity */ "./src/app/invite/invite.entity.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const organization_department_entity_1 = __webpack_require__(/*! ../organization-department/organization-department.entity */ "./src/app/organization-department/organization-department.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const email_service_1 = __webpack_require__(/*! ../email/email.service */ "./src/app/email/email.service.ts");
const role_entity_1 = __webpack_require__(/*! ../role/role.entity */ "./src/app/role/role.entity.ts");
const date_fns_1 = __webpack_require__(/*! date-fns */ "date-fns");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
let InviteService = class InviteService extends crud_service_1.CrudService {
    constructor(inviteRepository, organizationProjectsRepository, organizationContactRepository, organizationDepartmentRepository, organizationRepository, roleRepository, emailService, userService) {
        super(inviteRepository);
        this.organizationProjectsRepository = organizationProjectsRepository;
        this.organizationContactRepository = organizationContactRepository;
        this.organizationDepartmentRepository = organizationDepartmentRepository;
        this.organizationRepository = organizationRepository;
        this.roleRepository = roleRepository;
        this.emailService = emailService;
        this.userService = userService;
    }
    async createBulk(emailInvites, originUrl, languageCode) {
        const invites = [];
        const { emailIds, roleId, projectIds, organizationContactIds, departmentIds, organizationId, tenantId, invitedById } = emailInvites;
        const projects = await this.organizationProjectsRepository.findByIds(projectIds || []);
        const departments = await this.organizationDepartmentRepository.findByIds(departmentIds || []);
        const organizationContacts = await this.organizationContactRepository.findByIds(organizationContactIds || []);
        const organization = await this.organizationRepository.findOne(organizationId);
        const role = await this.roleRepository.findOne(roleId);
        const user = await this.userService.findOne(invitedById, {
            relations: ['role']
        });
        if (role.name === models_1.RolesEnum.SUPER_ADMIN) {
            const { role: inviterRole } = user;
            if (inviterRole.name !== models_1.RolesEnum.SUPER_ADMIN)
                throw new common_1.UnauthorizedException();
        }
        const inviteExpiryPeriod = organization && organization.inviteExpiryPeriod
            ? organization.inviteExpiryPeriod
            : 7;
        const expireDate = date_fns_1.addDays(new Date(), inviteExpiryPeriod);
        const existingInvites = (await this.repository
            .createQueryBuilder('invite')
            .select('invite.email')
            .where('invite.email IN (:...emails)', { emails: emailIds })
            .getMany()).map((invite) => invite.email);
        const invitesToCreate = emailIds.filter((email) => existingInvites.indexOf(email) < 0);
        for (let i = 0; i < invitesToCreate.length; i++) {
            const email = invitesToCreate[i];
            const token = this.createToken(email);
            const invite = new invite_entity_1.Invite();
            invite.token = token;
            invite.email = email;
            invite.roleId = roleId;
            invite.organizationId = organizationId;
            invite.tenantId = tenantId;
            invite.invitedById = invitedById;
            invite.status = models_1.InviteStatusEnum.INVITED;
            invite.expireDate = expireDate;
            invite.projects = projects;
            invite.departments = departments;
            invite.organizationContact = organizationContacts;
            invites.push(invite);
        }
        const items = await this.repository.save(invites);
        items.forEach((item) => {
            const registerUrl = `${originUrl || environment_1.environment.host}/#/auth/accept-invite?email=${item.email}&token=${item.token}`;
            if (emailInvites.inviteType.indexOf('/pages/users') > -1) {
                this.emailService.inviteUser({
                    email: item.email,
                    role: role.name,
                    organization: organization,
                    registerUrl,
                    originUrl,
                    languageCode,
                    invitedBy: user
                });
            }
            else if (emailInvites.inviteType.indexOf('/pages/employees') > -1) {
                this.emailService.inviteEmployee({
                    email: item.email,
                    registerUrl,
                    organizationContacts,
                    departments,
                    originUrl,
                    organization: organization,
                    languageCode,
                    invitedBy: user
                });
            }
        });
        return { items, total: items.length, ignored: existingInvites.length };
    }
    async createOrganizationContactInvite(inviteInput) {
        const { emailId, roleId, organizationContactId, organizationId, invitedById, originalUrl, languageCode } = inviteInput;
        const organizationContact = await this.organizationContactRepository.findOne(organizationContactId);
        const organization = await this.organizationRepository.findOne(organizationId);
        const inviterUser = await this.userService.findOne(invitedById);
        const inviteExpiryPeriod = organization && organization.inviteExpiryPeriod
            ? organization.inviteExpiryPeriod
            : 7;
        const expireDate = date_fns_1.addDays(new Date(), inviteExpiryPeriod);
        const invite = new invite_entity_1.Invite();
        invite.token = this.createToken(emailId);
        invite.email = emailId;
        invite.roleId = roleId;
        invite.organizationId = organizationId;
        invite.invitedById = invitedById;
        invite.status = models_1.InviteStatusEnum.INVITED;
        invite.expireDate = expireDate;
        invite.organizationContact = [organizationContact];
        const createdInvite = await this.repository.save(invite);
        this.emailService.inviteOrganizationContact(organizationContact, inviterUser, organization, createdInvite, languageCode, originalUrl);
        return createdInvite;
    }
    async validate(relations, email, token) {
        return this.findOne({
            relations,
            where: {
                email,
                token,
                expireDate: typeorm_2.MoreThanOrEqual(new Date()),
                status: models_1.InviteStatusEnum.INVITED
            }
        });
    }
    createToken(email) {
        const token = jsonwebtoken_1.sign({ email }, environment_1.environment.JWT_SECRET, {});
        return token;
    }
};
InviteService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(invite_entity_1.Invite)),
    tslib_1.__param(1, typeorm_1.InjectRepository(organization_projects_entity_1.OrganizationProject)),
    tslib_1.__param(2, typeorm_1.InjectRepository(organization_contact_entity_1.OrganizationContact)),
    tslib_1.__param(3, typeorm_1.InjectRepository(organization_department_entity_1.OrganizationDepartment)),
    tslib_1.__param(4, typeorm_1.InjectRepository(organization_entity_1.Organization)),
    tslib_1.__param(5, typeorm_1.InjectRepository(role_entity_1.Role)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _d : Object, typeof (_e = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _e : Object, typeof (_f = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _f : Object, typeof (_g = typeof email_service_1.EmailService !== "undefined" && email_service_1.EmailService) === "function" ? _g : Object, typeof (_h = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" ? _h : Object])
], InviteService);
exports.InviteService = InviteService;


/***/ }),

/***/ "./src/app/invoice-estimate-history/invoice-estimate-history.controller.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/invoice-estimate-history/invoice-estimate-history.controller.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceEstimateHistoryController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const invoice_estimate_history_service_1 = __webpack_require__(/*! ./invoice-estimate-history.service */ "./src/app/invoice-estimate-history/invoice-estimate-history.service.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let InvoiceEstimateHistoryController = class InvoiceEstimateHistoryController extends core_1.CrudController {
    constructor(invoiceEstimateHistoryService) {
        super(invoiceEstimateHistoryService);
        this.invoiceEstimateHistoryService = invoiceEstimateHistoryService;
    }
    async findAllHistories(data) {
        const { relations = [], findInput = null } = data;
        return this.invoiceEstimateHistoryService.findAll({
            where: findInput,
            relations
        });
    }
};
tslib_1.__decorate([
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard, permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.INVOICES_VIEW),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], InvoiceEstimateHistoryController.prototype, "findAllHistories", null);
InvoiceEstimateHistoryController = tslib_1.__decorate([
    swagger_1.ApiTags('InvoiceEstimateHistory'),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof invoice_estimate_history_service_1.InvoiceEstimateHistoryService !== "undefined" && invoice_estimate_history_service_1.InvoiceEstimateHistoryService) === "function" ? _b : Object])
], InvoiceEstimateHistoryController);
exports.InvoiceEstimateHistoryController = InvoiceEstimateHistoryController;


/***/ }),

/***/ "./src/app/invoice-estimate-history/invoice-estimate-history.entity.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/invoice-estimate-history/invoice-estimate-history.entity.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceEstimateHistory = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const invoice_entity_1 = __webpack_require__(/*! ../invoice/invoice.entity */ "./src/app/invoice/invoice.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let InvoiceEstimateHistory = class InvoiceEstimateHistory extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], InvoiceEstimateHistory.prototype, "action", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    tslib_1.__metadata("design:type", String)
], InvoiceEstimateHistory.prototype, "userId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: user_entity_1.User }),
    typeorm_1.ManyToOne((type) => user_entity_1.User),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof user_entity_1.User !== "undefined" && user_entity_1.User) === "function" ? _a : Object)
], InvoiceEstimateHistory.prototype, "user", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    tslib_1.__metadata("design:type", String)
], InvoiceEstimateHistory.prototype, "invoiceId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: invoice_entity_1.Invoice }),
    typeorm_1.ManyToOne((type) => invoice_entity_1.Invoice, (invoice) => invoice.invoiceItems, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof invoice_entity_1.Invoice !== "undefined" && invoice_entity_1.Invoice) === "function" ? _b : Object)
], InvoiceEstimateHistory.prototype, "invoice", void 0);
InvoiceEstimateHistory = tslib_1.__decorate([
    typeorm_1.Entity('invoice_estimate_history')
], InvoiceEstimateHistory);
exports.InvoiceEstimateHistory = InvoiceEstimateHistory;


/***/ }),

/***/ "./src/app/invoice-estimate-history/invoice-estimate-history.module.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/invoice-estimate-history/invoice-estimate-history.module.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceEstimateHistoryModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const invoice_estimate_history_controller_1 = __webpack_require__(/*! ./invoice-estimate-history.controller */ "./src/app/invoice-estimate-history/invoice-estimate-history.controller.ts");
const invoice_estimate_history_service_1 = __webpack_require__(/*! ./invoice-estimate-history.service */ "./src/app/invoice-estimate-history/invoice-estimate-history.service.ts");
const invoice_estimate_history_entity_1 = __webpack_require__(/*! ./invoice-estimate-history.entity */ "./src/app/invoice-estimate-history/invoice-estimate-history.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let InvoiceEstimateHistoryModule = class InvoiceEstimateHistoryModule {
};
InvoiceEstimateHistoryModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([user_entity_1.User, invoice_estimate_history_entity_1.InvoiceEstimateHistory]),
            tenant_module_1.TenantModule
        ],
        controllers: [invoice_estimate_history_controller_1.InvoiceEstimateHistoryController],
        providers: [invoice_estimate_history_service_1.InvoiceEstimateHistoryService, user_service_1.UserService],
        exports: [invoice_estimate_history_service_1.InvoiceEstimateHistoryService, user_service_1.UserService]
    })
], InvoiceEstimateHistoryModule);
exports.InvoiceEstimateHistoryModule = InvoiceEstimateHistoryModule;


/***/ }),

/***/ "./src/app/invoice-estimate-history/invoice-estimate-history.service.ts":
/*!******************************************************************************!*\
  !*** ./src/app/invoice-estimate-history/invoice-estimate-history.service.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceEstimateHistoryService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const invoice_estimate_history_entity_1 = __webpack_require__(/*! ./invoice-estimate-history.entity */ "./src/app/invoice-estimate-history/invoice-estimate-history.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
let InvoiceEstimateHistoryService = class InvoiceEstimateHistoryService extends core_1.CrudService {
    constructor(invoiceEstimateHistoryRepository) {
        super(invoiceEstimateHistoryRepository);
        this.invoiceEstimateHistoryRepository = invoiceEstimateHistoryRepository;
    }
};
InvoiceEstimateHistoryService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(invoice_estimate_history_entity_1.InvoiceEstimateHistory)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], InvoiceEstimateHistoryService);
exports.InvoiceEstimateHistoryService = InvoiceEstimateHistoryService;


/***/ }),

/***/ "./src/app/invoice-item/commands/handlers/index.ts":
/*!*********************************************************!*\
  !*** ./src/app/invoice-item/commands/handlers/index.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const invoice_item_bulk_create_handler_1 = __webpack_require__(/*! ./invoice-item.bulk.create.handler */ "./src/app/invoice-item/commands/handlers/invoice-item.bulk.create.handler.ts");
exports.CommandHandlers = [invoice_item_bulk_create_handler_1.InvoiceItemBulkCreateHandler];


/***/ }),

/***/ "./src/app/invoice-item/commands/handlers/invoice-item.bulk.create.handler.ts":
/*!************************************************************************************!*\
  !*** ./src/app/invoice-item/commands/handlers/invoice-item.bulk.create.handler.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceItemBulkCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const invoice_item_bulk_create_command_1 = __webpack_require__(/*! ../invoice-item.bulk.create.command */ "./src/app/invoice-item/commands/invoice-item.bulk.create.command.ts");
const invoice_item_service_1 = __webpack_require__(/*! ../../invoice-item.service */ "./src/app/invoice-item/invoice-item.service.ts");
let InvoiceItemBulkCreateHandler = class InvoiceItemBulkCreateHandler {
    constructor(invoiceItemService) {
        this.invoiceItemService = invoiceItemService;
    }
    async execute(command) {
        const { invoiceId, input } = command;
        return await this.invoiceItemService.createBulk(invoiceId, input);
    }
};
InvoiceItemBulkCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(invoice_item_bulk_create_command_1.InvoiceItemBulkCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof invoice_item_service_1.InvoiceItemService !== "undefined" && invoice_item_service_1.InvoiceItemService) === "function" ? _a : Object])
], InvoiceItemBulkCreateHandler);
exports.InvoiceItemBulkCreateHandler = InvoiceItemBulkCreateHandler;


/***/ }),

/***/ "./src/app/invoice-item/commands/index.ts":
/*!************************************************!*\
  !*** ./src/app/invoice-item/commands/index.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceItemBulkCreateCommand = void 0;
var invoice_item_bulk_create_command_1 = __webpack_require__(/*! ./invoice-item.bulk.create.command */ "./src/app/invoice-item/commands/invoice-item.bulk.create.command.ts");
Object.defineProperty(exports, "InvoiceItemBulkCreateCommand", { enumerable: true, get: function () { return invoice_item_bulk_create_command_1.InvoiceItemBulkCreateCommand; } });


/***/ }),

/***/ "./src/app/invoice-item/commands/invoice-item.bulk.create.command.ts":
/*!***************************************************************************!*\
  !*** ./src/app/invoice-item/commands/invoice-item.bulk.create.command.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceItemBulkCreateCommand = void 0;
class InvoiceItemBulkCreateCommand {
    constructor(invoiceId, input) {
        this.invoiceId = invoiceId;
        this.input = input;
    }
}
exports.InvoiceItemBulkCreateCommand = InvoiceItemBulkCreateCommand;
InvoiceItemBulkCreateCommand.type = '[InvoiceItem] Create';


/***/ }),

/***/ "./src/app/invoice-item/invoice-item.controller.ts":
/*!*********************************************************!*\
  !*** ./src/app/invoice-item/invoice-item.controller.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceItemController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const invoice_item_service_1 = __webpack_require__(/*! ./invoice-item.service */ "./src/app/invoice-item/invoice-item.service.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/invoice-item/commands/index.ts");
let InvoiceItemController = class InvoiceItemController extends core_1.CrudController {
    constructor(invoiceItemService, commandBus) {
        super(invoiceItemService);
        this.invoiceItemService = invoiceItemService;
        this.commandBus = commandBus;
    }
    async findAllInvoiceItems(data) {
        const { relations = [], findInput = null } = data;
        return this.invoiceItemService.findAll({
            where: findInput,
            relations
        });
    }
    async createBulk(invoiceId, input) {
        return this.commandBus.execute(new commands_1.InvoiceItemBulkCreateCommand(invoiceId, input));
    }
};
tslib_1.__decorate([
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], InvoiceItemController.prototype, "findAllInvoiceItems", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create invoice item in Bulk' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Invoice item have been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    common_1.Post('/createBulk/:invoiceId'),
    tslib_1.__param(0, common_1.Param('invoiceId')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Array]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], InvoiceItemController.prototype, "createBulk", null);
InvoiceItemController = tslib_1.__decorate([
    swagger_1.ApiTags('InvoiceItem'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof invoice_item_service_1.InvoiceItemService !== "undefined" && invoice_item_service_1.InvoiceItemService) === "function" ? _c : Object, typeof (_d = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _d : Object])
], InvoiceItemController);
exports.InvoiceItemController = InvoiceItemController;


/***/ }),

/***/ "./src/app/invoice-item/invoice-item.entity.ts":
/*!*****************************************************!*\
  !*** ./src/app/invoice-item/invoice-item.entity.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceItem = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const invoice_entity_1 = __webpack_require__(/*! ../invoice/invoice.entity */ "./src/app/invoice/invoice.entity.ts");
const task_entity_1 = __webpack_require__(/*! ../tasks/task.entity */ "./src/app/tasks/task.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const product_entity_1 = __webpack_require__(/*! ../product/product.entity */ "./src/app/product/product.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
const expense_entity_1 = __webpack_require__(/*! ../expense/expense.entity */ "./src/app/expense/expense.entity.ts");
let InvoiceItem = class InvoiceItem extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", String)
], InvoiceItem.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], InvoiceItem.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], InvoiceItem.prototype, "price", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], InvoiceItem.prototype, "quantity", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], InvoiceItem.prototype, "totalValue", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], InvoiceItem.prototype, "invoiceId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], InvoiceItem.prototype, "taskId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], InvoiceItem.prototype, "employeeId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], InvoiceItem.prototype, "projectId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], InvoiceItem.prototype, "productId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], InvoiceItem.prototype, "expenseId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: expense_entity_1.Expense }),
    typeorm_1.ManyToOne((type) => expense_entity_1.Expense, (expense) => expense.invoiceItems, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IExpense !== "undefined" && models_1.IExpense) === "function" ? _a : Object)
], InvoiceItem.prototype, "expense", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: invoice_entity_1.Invoice }),
    typeorm_1.ManyToOne((type) => invoice_entity_1.Invoice, (invoice) => invoice.invoiceItems, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof models_1.IInvoice !== "undefined" && models_1.IInvoice) === "function" ? _b : Object)
], InvoiceItem.prototype, "invoice", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: task_entity_1.Task }),
    typeorm_1.ManyToOne((type) => task_entity_1.Task, (task) => task.invoiceItems),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_c = typeof models_1.ITask !== "undefined" && models_1.ITask) === "function" ? _c : Object)
], InvoiceItem.prototype, "task", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: employee_entity_1.Employee }),
    typeorm_1.ManyToOne((type) => employee_entity_1.Employee, (employee) => employee.invoiceItems),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_d = typeof models_1.IEmployee !== "undefined" && models_1.IEmployee) === "function" ? _d : Object)
], InvoiceItem.prototype, "employee", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: organization_projects_entity_1.OrganizationProject }),
    typeorm_1.ManyToOne((type) => organization_projects_entity_1.OrganizationProject, (project) => project.invoiceItems),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_e = typeof models_1.IOrganizationProject !== "undefined" && models_1.IOrganizationProject) === "function" ? _e : Object)
], InvoiceItem.prototype, "project", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: product_entity_1.Product }),
    typeorm_1.ManyToOne((type) => product_entity_1.Product, (product) => product.invoiceItems),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_f = typeof models_1.IProduct !== "undefined" && models_1.IProduct) === "function" ? _f : Object)
], InvoiceItem.prototype, "product", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], InvoiceItem.prototype, "applyTax", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], InvoiceItem.prototype, "applyDiscount", void 0);
InvoiceItem = tslib_1.__decorate([
    typeorm_1.Entity('invoice_item')
], InvoiceItem);
exports.InvoiceItem = InvoiceItem;


/***/ }),

/***/ "./src/app/invoice-item/invoice-item.module.ts":
/*!*****************************************************!*\
  !*** ./src/app/invoice-item/invoice-item.module.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceItemModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const invoice_item_entity_1 = __webpack_require__(/*! ./invoice-item.entity */ "./src/app/invoice-item/invoice-item.entity.ts");
const invoice_item_controller_1 = __webpack_require__(/*! ./invoice-item.controller */ "./src/app/invoice-item/invoice-item.controller.ts");
const invoice_item_service_1 = __webpack_require__(/*! ./invoice-item.service */ "./src/app/invoice-item/invoice-item.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/invoice-item/commands/handlers/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
let InvoiceItemModule = class InvoiceItemModule {
};
InvoiceItemModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([invoice_item_entity_1.InvoiceItem, user_entity_1.User]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [invoice_item_controller_1.InvoiceItemController],
        providers: [invoice_item_service_1.InvoiceItemService, user_service_1.UserService, ...handlers_1.CommandHandlers],
        exports: [invoice_item_service_1.InvoiceItemService]
    })
], InvoiceItemModule);
exports.InvoiceItemModule = InvoiceItemModule;


/***/ }),

/***/ "./src/app/invoice-item/invoice-item.seed.ts":
/*!***************************************************!*\
  !*** ./src/app/invoice-item/invoice-item.seed.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomInvoiceItem = exports.createDefaultInvoiceItem = void 0;
const invoice_item_entity_1 = __webpack_require__(/*! ./invoice-item.entity */ "./src/app/invoice-item/invoice-item.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const task_entity_1 = __webpack_require__(/*! ../tasks/task.entity */ "./src/app/tasks/task.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const invoice_entity_1 = __webpack_require__(/*! ../invoice/invoice.entity */ "./src/app/invoice/invoice.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const expense_entity_1 = __webpack_require__(/*! ../expense/expense.entity */ "./src/app/expense/expense.entity.ts");
const product_entity_1 = __webpack_require__(/*! ../product/product.entity */ "./src/app/product/product.entity.ts");
const invoiceItems = [];
exports.createDefaultInvoiceItem = async (connection, tenant, organizations, numberOfInvoiceItemPerInvoice) => {
    for (const organization of organizations) {
        await invoiceItemForInvoiceType(connection, tenant, organization, numberOfInvoiceItemPerInvoice);
    }
    await connection.manager.save(invoiceItems);
};
exports.createRandomInvoiceItem = async (connection, tenants, tenantOrganizationsMap, numberOfInvoiceItemPerInvoice) => {
    for (const tenant of tenants) {
        const organizations = tenantOrganizationsMap.get(tenant);
        for (const organization of organizations) {
            await invoiceItemForInvoiceType(connection, tenant, organization, numberOfInvoiceItemPerInvoice);
        }
    }
    await connection.manager.save(invoiceItems);
};
async function invoiceItemForInvoiceType(connection, tenant, organization, numberOfInvoiceItemPerInvoice) {
    const where = {
        organizationId: organization.id,
        tenantId: tenant.id
    };
    const invoices = await connection.manager.find(invoice_entity_1.Invoice, {
        where
    });
    const employees = await connection.manager.find(employee_entity_1.Employee, {
        where
    });
    const tasks = await connection.manager.find(task_entity_1.Task, { where });
    const expenses = await connection.manager.find(expense_entity_1.Expense, {
        where
    });
    const projects = await connection.manager.find(organization_projects_entity_1.OrganizationProject, { where });
    const products = await connection.manager.find(product_entity_1.Product, {
        where
    });
    for (let i = 0; i < numberOfInvoiceItemPerInvoice; i++) {
        const invoiceItem = new invoice_item_entity_1.InvoiceItem();
        invoiceItem.name = faker.company.companyName();
        invoiceItem.description = faker.random.words();
        invoiceItem.price = faker.random.number({ min: 1000, max: 10000 });
        invoiceItem.quantity = faker.random.number({ min: 10, max: 150 });
        invoiceItem.totalValue = faker.random.number({
            min: 10000,
            max: 100000
        });
        const invoice = faker.random.arrayElement(invoices);
        invoiceItem.invoiceId = invoice.id;
        switch (invoice.invoiceType) {
            case models_1.InvoiceTypeEnum.BY_EMPLOYEE_HOURS:
                invoiceItem.employee = faker.random.arrayElement(employees);
                break;
            case models_1.InvoiceTypeEnum.BY_PROJECT_HOURS:
                invoiceItem.project = faker.random.arrayElement(projects);
                break;
            case models_1.InvoiceTypeEnum.BY_TASK_HOURS:
                invoiceItem.task = faker.random.arrayElement(tasks);
                break;
            case models_1.InvoiceTypeEnum.BY_PRODUCTS:
                invoiceItem.product = faker.random.arrayElement(products);
                break;
            case models_1.InvoiceTypeEnum.BY_EXPENSES:
                invoiceItem.expense = faker.random.arrayElement(expenses);
                break;
        }
        invoiceItem.applyDiscount = faker.random.boolean();
        invoiceItem.applyTax = faker.random.boolean();
        invoiceItem.tenant = tenant;
        invoiceItem.organization = organization;
        invoiceItems.push(invoiceItem);
    }
}


/***/ }),

/***/ "./src/app/invoice-item/invoice-item.service.ts":
/*!******************************************************!*\
  !*** ./src/app/invoice-item/invoice-item.service.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceItemService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const invoice_item_entity_1 = __webpack_require__(/*! ./invoice-item.entity */ "./src/app/invoice-item/invoice-item.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
let InvoiceItemService = class InvoiceItemService extends core_1.CrudService {
    constructor(invoiceItemRepository) {
        super(invoiceItemRepository);
        this.invoiceItemRepository = invoiceItemRepository;
    }
    async createBulk(invoiceId, createInput) {
        await this.repository.delete({ invoiceId: invoiceId });
        return await this.repository.save(createInput);
    }
};
InvoiceItemService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(invoice_item_entity_1.InvoiceItem)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], InvoiceItemService);
exports.InvoiceItemService = InvoiceItemService;


/***/ }),

/***/ "./src/app/invoice/commands/handlers/invoice.create.handler.ts":
/*!*********************************************************************!*\
  !*** ./src/app/invoice/commands/handlers/invoice.create.handler.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const invoice_service_1 = __webpack_require__(/*! ../../invoice.service */ "./src/app/invoice/invoice.service.ts");
const invoice_create_command_1 = __webpack_require__(/*! ../invoice.create.command */ "./src/app/invoice/commands/invoice.create.command.ts");
let InvoiceCreateHandler = class InvoiceCreateHandler {
    constructor(invoiceService) {
        this.invoiceService = invoiceService;
    }
    async execute(command) {
        const { input } = command;
        return this.invoiceService.create(input);
    }
};
InvoiceCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(invoice_create_command_1.InvoiceCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof invoice_service_1.InvoiceService !== "undefined" && invoice_service_1.InvoiceService) === "function" ? _a : Object])
], InvoiceCreateHandler);
exports.InvoiceCreateHandler = InvoiceCreateHandler;


/***/ }),

/***/ "./src/app/invoice/commands/handlers/invoice.delete.handler.ts":
/*!*********************************************************************!*\
  !*** ./src/app/invoice/commands/handlers/invoice.delete.handler.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const invoice_service_1 = __webpack_require__(/*! ../../invoice.service */ "./src/app/invoice/invoice.service.ts");
const invoice_delete_command_1 = __webpack_require__(/*! ../invoice.delete.command */ "./src/app/invoice/commands/invoice.delete.command.ts");
let InvoiceDeleteHandler = class InvoiceDeleteHandler {
    constructor(invoiceService) {
        this.invoiceService = invoiceService;
    }
    async execute(command) {
        const { invoiceId } = command;
        return this.invoiceService.delete(invoiceId);
    }
};
InvoiceDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(invoice_delete_command_1.InvoiceDeleteCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof invoice_service_1.InvoiceService !== "undefined" && invoice_service_1.InvoiceService) === "function" ? _a : Object])
], InvoiceDeleteHandler);
exports.InvoiceDeleteHandler = InvoiceDeleteHandler;


/***/ }),

/***/ "./src/app/invoice/commands/handlers/invoice.send.email.handler.ts":
/*!*************************************************************************!*\
  !*** ./src/app/invoice/commands/handlers/invoice.send.email.handler.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceSendEmailHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const invoice_service_1 = __webpack_require__(/*! ../../invoice.service */ "./src/app/invoice/invoice.service.ts");
const invoice_send_email_command_1 = __webpack_require__(/*! ../invoice.send.email.command */ "./src/app/invoice/commands/invoice.send.email.command.ts");
let InvoiceSendEmailHandler = class InvoiceSendEmailHandler {
    constructor(invoiceService) {
        this.invoiceService = invoiceService;
    }
    async execute(command) {
        const { languageCode, email, params, origin } = command;
        return this.invoiceService.sendEmail(languageCode, email, params.base64, params.invoiceNumber, params.invoiceId, params.isEstimate, origin, params.tenantId, params.organizationId);
    }
};
InvoiceSendEmailHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(invoice_send_email_command_1.InvoiceSendEmailCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof invoice_service_1.InvoiceService !== "undefined" && invoice_service_1.InvoiceService) === "function" ? _a : Object])
], InvoiceSendEmailHandler);
exports.InvoiceSendEmailHandler = InvoiceSendEmailHandler;


/***/ }),

/***/ "./src/app/invoice/commands/handlers/invoice.update.handler.ts":
/*!*********************************************************************!*\
  !*** ./src/app/invoice/commands/handlers/invoice.update.handler.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const invoice_service_1 = __webpack_require__(/*! ../../invoice.service */ "./src/app/invoice/invoice.service.ts");
const invoice_update_command_1 = __webpack_require__(/*! ../invoice.update.command */ "./src/app/invoice/commands/invoice.update.command.ts");
let InvoiceUpdateHandler = class InvoiceUpdateHandler {
    constructor(invoiceService) {
        this.invoiceService = invoiceService;
    }
    async execute(command) {
        const { input } = command;
        const { id } = input;
        return this.invoiceService.create(Object.assign({ id }, input));
    }
};
InvoiceUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(invoice_update_command_1.InvoiceUpdateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof invoice_service_1.InvoiceService !== "undefined" && invoice_service_1.InvoiceService) === "function" ? _a : Object])
], InvoiceUpdateHandler);
exports.InvoiceUpdateHandler = InvoiceUpdateHandler;


/***/ }),

/***/ "./src/app/invoice/commands/index.ts":
/*!*******************************************!*\
  !*** ./src/app/invoice/commands/index.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = exports.InvoiceUpdateCommand = exports.InvoiceSendEmailCommand = exports.InvoiceDeleteCommand = exports.InvoiceCreateCommand = void 0;
const invoice_create_handler_1 = __webpack_require__(/*! ./handlers/invoice.create.handler */ "./src/app/invoice/commands/handlers/invoice.create.handler.ts");
const invoice_delete_handler_1 = __webpack_require__(/*! ./handlers/invoice.delete.handler */ "./src/app/invoice/commands/handlers/invoice.delete.handler.ts");
const invoice_send_email_handler_1 = __webpack_require__(/*! ./handlers/invoice.send.email.handler */ "./src/app/invoice/commands/handlers/invoice.send.email.handler.ts");
const invoice_update_handler_1 = __webpack_require__(/*! ./handlers/invoice.update.handler */ "./src/app/invoice/commands/handlers/invoice.update.handler.ts");
var invoice_create_command_1 = __webpack_require__(/*! ./invoice.create.command */ "./src/app/invoice/commands/invoice.create.command.ts");
Object.defineProperty(exports, "InvoiceCreateCommand", { enumerable: true, get: function () { return invoice_create_command_1.InvoiceCreateCommand; } });
var invoice_delete_command_1 = __webpack_require__(/*! ./invoice.delete.command */ "./src/app/invoice/commands/invoice.delete.command.ts");
Object.defineProperty(exports, "InvoiceDeleteCommand", { enumerable: true, get: function () { return invoice_delete_command_1.InvoiceDeleteCommand; } });
var invoice_send_email_command_1 = __webpack_require__(/*! ./invoice.send.email.command */ "./src/app/invoice/commands/invoice.send.email.command.ts");
Object.defineProperty(exports, "InvoiceSendEmailCommand", { enumerable: true, get: function () { return invoice_send_email_command_1.InvoiceSendEmailCommand; } });
var invoice_update_command_1 = __webpack_require__(/*! ./invoice.update.command */ "./src/app/invoice/commands/invoice.update.command.ts");
Object.defineProperty(exports, "InvoiceUpdateCommand", { enumerable: true, get: function () { return invoice_update_command_1.InvoiceUpdateCommand; } });
exports.CommandHandlers = [
    invoice_create_handler_1.InvoiceCreateHandler,
    invoice_update_handler_1.InvoiceUpdateHandler,
    invoice_send_email_handler_1.InvoiceSendEmailHandler,
    invoice_delete_handler_1.InvoiceDeleteHandler
];


/***/ }),

/***/ "./src/app/invoice/commands/invoice.create.command.ts":
/*!************************************************************!*\
  !*** ./src/app/invoice/commands/invoice.create.command.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceCreateCommand = void 0;
class InvoiceCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.InvoiceCreateCommand = InvoiceCreateCommand;
InvoiceCreateCommand.type = '[Invoice] Create';


/***/ }),

/***/ "./src/app/invoice/commands/invoice.delete.command.ts":
/*!************************************************************!*\
  !*** ./src/app/invoice/commands/invoice.delete.command.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceDeleteCommand = void 0;
class InvoiceDeleteCommand {
    constructor(invoiceId) {
        this.invoiceId = invoiceId;
    }
}
exports.InvoiceDeleteCommand = InvoiceDeleteCommand;
InvoiceDeleteCommand.type = '[Invoice] Delete';


/***/ }),

/***/ "./src/app/invoice/commands/invoice.send.email.command.ts":
/*!****************************************************************!*\
  !*** ./src/app/invoice/commands/invoice.send.email.command.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceSendEmailCommand = void 0;
class InvoiceSendEmailCommand {
    constructor(languageCode, email, params, origin) {
        this.languageCode = languageCode;
        this.email = email;
        this.params = params;
        this.origin = origin;
    }
}
exports.InvoiceSendEmailCommand = InvoiceSendEmailCommand;
InvoiceSendEmailCommand.type = '[Invoice] Send Email';


/***/ }),

/***/ "./src/app/invoice/commands/invoice.update.command.ts":
/*!************************************************************!*\
  !*** ./src/app/invoice/commands/invoice.update.command.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceUpdateCommand = void 0;
class InvoiceUpdateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.InvoiceUpdateCommand = InvoiceUpdateCommand;
InvoiceUpdateCommand.type = '[Invoice] Update';


/***/ }),

/***/ "./src/app/invoice/invoice.controller.ts":
/*!***********************************************!*\
  !*** ./src/app/invoice/invoice.controller.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const invoice_service_1 = __webpack_require__(/*! ./invoice.service */ "./src/app/invoice/invoice.service.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const nestjs_i18n_1 = __webpack_require__(/*! nestjs-i18n */ "nestjs-i18n");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/invoice/commands/index.ts");
const invoice_send_email_command_1 = __webpack_require__(/*! ./commands/invoice.send.email.command */ "./src/app/invoice/commands/invoice.send.email.command.ts");
let InvoiceController = class InvoiceController extends core_1.CrudController {
    constructor(invoiceService, commandBus) {
        super(invoiceService);
        this.invoiceService = invoiceService;
        this.commandBus = commandBus;
    }
    async findAllInvoices(data) {
        const { relations = [], findInput = null } = data;
        return this.invoiceService.findAll({
            where: findInput,
            relations
        });
    }
    async findHighestInvoiceNumber() {
        return this.invoiceService.getHighestInvoiceNumber();
    }
    async findByIdWithRelations(id, data) {
        const { relations = [], findInput = null } = data;
        return this.invoiceService.findOne(id, {
            where: findInput,
            relations
        });
    }
    async createInvoice(entity) {
        return this.commandBus.execute(new commands_1.InvoiceCreateCommand(entity));
    }
    async updateInvoice(id, entity) {
        return this.commandBus.execute(new commands_1.InvoiceUpdateCommand(Object.assign({ id }, entity)));
    }
    async updateWithoutGuard(id, entity) {
        return this.commandBus.execute(new commands_1.InvoiceUpdateCommand(Object.assign({ id }, entity)));
    }
    async emailInvoice(email, request, languageCode) {
        return this.commandBus.execute(new invoice_send_email_command_1.InvoiceSendEmailCommand(languageCode, email, request.body.params, request.get('Origin')));
    }
    async delete(id) {
        return this.commandBus.execute(new commands_1.InvoiceDeleteCommand(id));
    }
};
tslib_1.__decorate([
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard, permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.INVOICES_VIEW),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], InvoiceController.prototype, "findAllInvoices", null);
tslib_1.__decorate([
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard, permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.INVOICES_VIEW),
    common_1.Get('highest'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], InvoiceController.prototype, "findHighestInvoiceNumber", null);
tslib_1.__decorate([
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard, permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.INVOICES_VIEW),
    common_1.Get(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], InvoiceController.prototype, "findByIdWithRelations", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard, permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.INVOICES_EDIT),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof models_1.IInvoiceCreateInput !== "undefined" && models_1.IInvoiceCreateInput) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], InvoiceController.prototype, "createInvoice", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard, permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.INVOICES_EDIT),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id', shared_1.UUIDValidationPipe)),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_f = typeof models_1.IInvoiceUpdateInput !== "undefined" && models_1.IInvoiceUpdateInput) === "function" ? _f : Object]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], InvoiceController.prototype, "updateInvoice", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put('estimate/:id'),
    tslib_1.__param(0, common_1.Param('id', shared_1.UUIDValidationPipe)),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_h = typeof models_1.IInvoice !== "undefined" && models_1.IInvoice) === "function" ? _h : Object]),
    tslib_1.__metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], InvoiceController.prototype, "updateWithoutGuard", null);
tslib_1.__decorate([
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Put('email/:email'),
    tslib_1.__param(0, common_1.Param('email')),
    tslib_1.__param(1, common_1.Req()),
    tslib_1.__param(2, nestjs_i18n_1.I18nLang()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object, typeof (_k = typeof models_1.LanguagesEnum !== "undefined" && models_1.LanguagesEnum) === "function" ? _k : Object]),
    tslib_1.__metadata("design:returntype", typeof (_l = typeof Promise !== "undefined" && Promise) === "function" ? _l : Object)
], InvoiceController.prototype, "emailInvoice", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Delete record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NO_CONTENT,
        description: 'The record has been successfully deleted'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id', shared_1.UUIDValidationPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_m = typeof Promise !== "undefined" && Promise) === "function" ? _m : Object)
], InvoiceController.prototype, "delete", null);
InvoiceController = tslib_1.__decorate([
    swagger_1.ApiTags('Invoice'),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_o = typeof invoice_service_1.InvoiceService !== "undefined" && invoice_service_1.InvoiceService) === "function" ? _o : Object, typeof (_p = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _p : Object])
], InvoiceController);
exports.InvoiceController = InvoiceController;


/***/ }),

/***/ "./src/app/invoice/invoice.entity.ts":
/*!*******************************************!*\
  !*** ./src/app/invoice/invoice.entity.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Invoice = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const invoice_item_entity_1 = __webpack_require__(/*! ../invoice-item/invoice-item.entity */ "./src/app/invoice-item/invoice-item.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const payment_entity_1 = __webpack_require__(/*! ../payment/payment.entity */ "./src/app/payment/payment.entity.ts");
const invoice_estimate_history_entity_1 = __webpack_require__(/*! ../invoice-estimate-history/invoice-estimate-history.entity */ "./src/app/invoice-estimate-history/invoice-estimate-history.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let Invoice = class Invoice extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: tag_entity_1.Tag }),
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.invoice),
    typeorm_1.JoinTable({
        name: 'tag_invoice'
    }),
    tslib_1.__metadata("design:type", Array)
], Invoice.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    class_validator_1.IsDate(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_a = typeof Date !== "undefined" && Date) === "function" ? _a : Object)
], Invoice.prototype, "invoiceDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ name: 'invoiceNumber', nullable: true, type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], Invoice.prototype, "invoiceNumber", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    class_validator_1.IsDate(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], Invoice.prototype, "dueDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.CurrenciesEnum }),
    class_validator_1.IsEnum(models_1.CurrenciesEnum),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Invoice.prototype, "currency", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], Invoice.prototype, "discountValue", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Invoice.prototype, "paid", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ nullable: true, type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], Invoice.prototype, "tax", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ nullable: true, type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], Invoice.prototype, "tax2", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Invoice.prototype, "terms", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true, type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], Invoice.prototype, "totalValue", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Invoice.prototype, "status", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Invoice.prototype, "isEstimate", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Invoice.prototype, "isAccepted", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.DiscountTaxTypeEnum }),
    class_validator_1.IsEnum(models_1.DiscountTaxTypeEnum),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Invoice.prototype, "discountType", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.DiscountTaxTypeEnum }),
    class_validator_1.IsEnum(models_1.DiscountTaxTypeEnum),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Invoice.prototype, "taxType", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.DiscountTaxTypeEnum }),
    class_validator_1.IsEnum(models_1.DiscountTaxTypeEnum),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Invoice.prototype, "tax2Type", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String, enum: models_1.InvoiceTypeEnum }),
    class_validator_1.IsEnum(models_1.InvoiceTypeEnum),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Invoice.prototype, "invoiceType", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Invoice.prototype, "sentTo", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Invoice.prototype, "organizationContactId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Invoice.prototype, "internalNote", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: organization_entity_1.Organization }),
    typeorm_1.ManyToOne((type) => organization_entity_1.Organization),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_c = typeof organization_entity_1.Organization !== "undefined" && organization_entity_1.Organization) === "function" ? _c : Object)
], Invoice.prototype, "fromOrganization", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: organization_contact_entity_1.OrganizationContact }),
    typeorm_1.ManyToOne((type) => organization_contact_entity_1.OrganizationContact),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_d = typeof organization_contact_entity_1.OrganizationContact !== "undefined" && organization_contact_entity_1.OrganizationContact) === "function" ? _d : Object)
], Invoice.prototype, "toContact", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: invoice_item_entity_1.InvoiceItem, isArray: true }),
    typeorm_1.OneToMany((type) => invoice_item_entity_1.InvoiceItem, (invoiceItem) => invoiceItem.invoice, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Invoice.prototype, "invoiceItems", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: payment_entity_1.Payment, isArray: true }),
    typeorm_1.OneToMany((type) => payment_entity_1.Payment, (payment) => payment.invoice, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Invoice.prototype, "payments", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: invoice_estimate_history_entity_1.InvoiceEstimateHistory, isArray: true }),
    typeorm_1.OneToMany((type) => invoice_estimate_history_entity_1.InvoiceEstimateHistory, (invoiceEstimateHistory) => invoiceEstimateHistory.invoice, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Invoice.prototype, "historyRecords", void 0);
Invoice = tslib_1.__decorate([
    typeorm_1.Entity('invoice'),
    typeorm_1.Unique(['invoiceNumber'])
], Invoice);
exports.Invoice = Invoice;


/***/ }),

/***/ "./src/app/invoice/invoice.module.ts":
/*!*******************************************!*\
  !*** ./src/app/invoice/invoice.module.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const invoice_controller_1 = __webpack_require__(/*! ./invoice.controller */ "./src/app/invoice/invoice.controller.ts");
const invoice_service_1 = __webpack_require__(/*! ./invoice.service */ "./src/app/invoice/invoice.service.ts");
const invoice_entity_1 = __webpack_require__(/*! ./invoice.entity */ "./src/app/invoice/invoice.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const email_1 = __webpack_require__(/*! ../email */ "./src/app/email/index.ts");
const estimate_email_service_1 = __webpack_require__(/*! ../estimate-email/estimate-email.service */ "./src/app/estimate-email/estimate-email.service.ts");
const estimate_email_module_1 = __webpack_require__(/*! ../estimate-email/estimate-email.module */ "./src/app/estimate-email/estimate-email.module.ts");
const estimate_email_controller_1 = __webpack_require__(/*! ../estimate-email/estimate-email.controller */ "./src/app/estimate-email/estimate-email.controller.ts");
const estimate_email_entity_1 = __webpack_require__(/*! ../estimate-email/estimate-email.entity */ "./src/app/estimate-email/estimate-email.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/invoice/commands/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
let InvoiceModule = class InvoiceModule {
};
InvoiceModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([user_entity_1.User, invoice_entity_1.Invoice, estimate_email_entity_1.EstimateEmail]),
            email_1.EmailModule,
            estimate_email_module_1.EstimateEmailModule,
            tenant_module_1.TenantModule,
            cqrs_1.CqrsModule
        ],
        controllers: [invoice_controller_1.InvoiceController, estimate_email_controller_1.EstimateEmailController],
        providers: [
            invoice_service_1.InvoiceService,
            user_service_1.UserService,
            email_1.EmailService,
            estimate_email_service_1.EstimateEmailService,
            ...commands_1.CommandHandlers
        ],
        exports: [invoice_service_1.InvoiceService, user_service_1.UserService, estimate_email_service_1.EstimateEmailService]
    })
], InvoiceModule);
exports.InvoiceModule = InvoiceModule;


/***/ }),

/***/ "./src/app/invoice/invoice.seed.ts":
/*!*****************************************!*\
  !*** ./src/app/invoice/invoice.seed.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomInvoice = exports.createDefaultInvoice = void 0;
const invoice_entity_1 = __webpack_require__(/*! ./invoice.entity */ "./src/app/invoice/invoice.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const _ = __webpack_require__(/*! underscore */ "underscore");
exports.createDefaultInvoice = async (connection, tenant, defaultOrganizations, noOfInvoicePerOrganization) => {
    for (const organization of defaultOrganizations) {
        const invoices = [];
        const tags = await connection.manager.find(tag_entity_1.Tag, {
            where: { organization: organization }
        });
        const organizationContacts = await connection.manager.find(organization_contact_entity_1.OrganizationContact, { where: { organizationId: organization.id } });
        for (let i = 0; i < noOfInvoicePerOrganization; i++) {
            const invoice = new invoice_entity_1.Invoice();
            invoice.tags = _.chain(tags)
                .shuffle()
                .take(faker.random.number({ min: 1, max: 3 }))
                .values()
                .value();
            invoice.invoiceDate = faker.date.past(0.2);
            invoice.invoiceNumber = faker.random.number({
                min: 1,
                max: 9999999
            });
            invoice.dueDate = faker.date.recent(50);
            if (organizationContacts.length) {
                invoice.organizationContactId = faker.random.arrayElement(organizationContacts).id;
            }
            invoice.sentTo = organization.id;
            invoice.fromOrganization = organization;
            invoice.toContact = faker.random.arrayElement(organizationContacts);
            invoice.currency = organization.currency;
            invoice.discountValue = faker.random.number({
                min: 1,
                max: 10
            });
            invoice.paid = faker.random.boolean();
            invoice.tax = faker.random.number({ min: 1, max: 10 });
            invoice.tax2 = faker.random.number({ min: 1, max: 10 });
            invoice.terms = 'Term and Setting Applied';
            invoice.isEstimate = faker.random.boolean();
            if (invoice.isEstimate) {
                invoice.isAccepted = faker.random.boolean();
            }
            invoice.discountType = faker.random.arrayElement(Object.values(models_1.DiscountTaxTypeEnum));
            invoice.taxType = faker.random.arrayElement(Object.values(models_1.DiscountTaxTypeEnum));
            invoice.tax2Type = faker.random.arrayElement(Object.values(models_1.DiscountTaxTypeEnum));
            invoice.invoiceType = faker.random.arrayElement(Object.values(models_1.InvoiceTypeEnum));
            invoice.organizationId = organization.id;
            invoice.status = 'ACTIVE';
            invoice.totalValue = faker.random.number(99999);
            invoice.tenant = tenant;
            invoices.push(invoice);
        }
        await connection.manager.save(invoices);
    }
};
exports.createRandomInvoice = async (connection, tenants, tenantOrganizationsMap, noOfInvoicePerOrganization) => {
    for (const tenant of tenants) {
        const organizations = tenantOrganizationsMap.get(tenant);
        for (const organization of organizations) {
            const invoices = [];
            const tags = await connection.manager.find(tag_entity_1.Tag, {
                where: { organization: organization }
            });
            const organizationContacts = await connection.manager.find(organization_contact_entity_1.OrganizationContact, { where: { organizationId: organization.id } });
            for (let i = 0; i < noOfInvoicePerOrganization; i++) {
                const invoice = new invoice_entity_1.Invoice();
                invoice.tags = _.chain(tags)
                    .shuffle()
                    .take(faker.random.number({ min: 1, max: 3 }))
                    .values()
                    .value();
                invoice.invoiceDate = faker.date.past(0.2);
                invoice.invoiceNumber = faker.random.number({
                    min: 1,
                    max: 9999999
                });
                invoice.dueDate = faker.date.recent(50);
                if (organizationContacts.length) {
                    invoice.organizationContactId = faker.random.arrayElement(organizationContacts).id;
                }
                invoice.sentTo = organization.id;
                invoice.fromOrganization = organization;
                invoice.toContact = faker.random.arrayElement(organizationContacts);
                invoice.currency = organization.currency;
                invoice.discountValue = faker.random.number({
                    min: 1,
                    max: 10
                });
                invoice.paid = faker.random.boolean();
                invoice.tax = faker.random.number({ min: 1, max: 10 });
                invoice.tax2 = faker.random.number({ min: 1, max: 10 });
                invoice.terms = 'Term and Setting Applied';
                invoice.isEstimate = faker.random.boolean();
                if (invoice.isEstimate) {
                    invoice.isAccepted = faker.random.boolean();
                }
                invoice.discountType = faker.random.arrayElement(Object.values(models_1.DiscountTaxTypeEnum));
                invoice.taxType = faker.random.arrayElement(Object.values(models_1.DiscountTaxTypeEnum));
                invoice.tax2Type = faker.random.arrayElement(Object.values(models_1.DiscountTaxTypeEnum));
                invoice.invoiceType = faker.random.arrayElement(Object.values(models_1.InvoiceTypeEnum));
                invoice.organizationId = organization.id;
                invoice.status = 'ACTIVE';
                invoice.totalValue = faker.random.number(99999);
                invoice.tenant = tenant;
                invoices.push(invoice);
            }
            await connection.manager.save(invoices);
        }
    }
};


/***/ }),

/***/ "./src/app/invoice/invoice.service.ts":
/*!********************************************!*\
  !*** ./src/app/invoice/invoice.service.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvoiceService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const invoice_entity_1 = __webpack_require__(/*! ./invoice.entity */ "./src/app/invoice/invoice.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_3 = __webpack_require__(/*! typeorm */ "typeorm");
const email_1 = __webpack_require__(/*! ../email */ "./src/app/email/index.ts");
const jsonwebtoken_1 = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const estimate_email_service_1 = __webpack_require__(/*! ../estimate-email/estimate-email.service */ "./src/app/estimate-email/estimate-email.service.ts");
let InvoiceService = class InvoiceService extends core_1.CrudService {
    constructor(invoiceRepository, emailService, estimateEmailService) {
        super(invoiceRepository);
        this.invoiceRepository = invoiceRepository;
        this.emailService = emailService;
        this.estimateEmailService = estimateEmailService;
    }
    async getHighestInvoiceNumber() {
        const invoice = await typeorm_3.getConnection()
            .createQueryBuilder(invoice_entity_1.Invoice, 'invoice')
            .select('MAX(invoice.invoiceNumber)', 'max')
            .getRawOne();
        return invoice;
    }
    async sendEmail(languageCode, email, base64, invoiceNumber, invoiceId, isEstimate, originUrl, tenantId, organizationId) {
        const token = this.createToken(email);
        await this.estimateEmailService.createEstimateEmail(invoiceId, email, token);
        this.emailService.emailInvoice(languageCode, email, base64, invoiceNumber, invoiceId, isEstimate, token, originUrl, tenantId, organizationId);
    }
    createToken(email) {
        const token = jsonwebtoken_1.sign({ email }, environment_1.environment.JWT_SECRET, {});
        return token;
    }
};
InvoiceService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(invoice_entity_1.Invoice)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof email_1.EmailService !== "undefined" && email_1.EmailService) === "function" ? _b : Object, typeof (_c = typeof estimate_email_service_1.EstimateEmailService !== "undefined" && estimate_email_service_1.EstimateEmailService) === "function" ? _c : Object])
], InvoiceService);
exports.InvoiceService = InvoiceService;


/***/ }),

/***/ "./src/app/keyresult-template/default-keyresult-templates.ts":
/*!*******************************************************************!*\
  !*** ./src/app/keyresult-template/default-keyresult-templates.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_KEY_RESULT_TEMPLATES = void 0;
exports.DEFAULT_KEY_RESULT_TEMPLATES = [
    {
        name: 'Improve product performance',
        level: 'Organization',
        keyResults: [
            {
                name: 'Get over 10000 new signups',
                type: 'Numerical',
                targetValue: 10000,
                initialValue: 0,
                unit: 'signups',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            },
            {
                name: 'Publish product reviews in over 50 publications',
                type: 'Numerical',
                targetValue: 50,
                initialValue: 0,
                unit: 'publications',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            }
        ]
    },
    {
        name: 'Successfully launch version 2 of our main product',
        level: 'Organization',
        keyResults: [
            {
                name: 'Reduce the average response time on the app to less than 500ms',
                type: 'KPI',
                targetValue: 500,
                initialValue: 1000,
                unit: '',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            }
        ]
    },
    {
        name: 'Redesign and launch our new landing page',
        level: 'Team',
        keyResults: [
            {
                name: 'Design new version of our site structure, navigation and all pages',
                type: 'True/False',
                targetValue: 1,
                initialValue: 0,
                unit: '',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            },
            {
                name: 'Conduct stakeholder interviews with 10 people from sales and marketing',
                type: 'Numerical',
                targetValue: 10,
                initialValue: 0,
                unit: 'interviews',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            },
            {
                name: 'With development and marketing, launch by September 1st',
                type: 'True/False',
                targetValue: 1,
                initialValue: 0,
                unit: '',
                deadline: 'Hard Deadline',
                hardDeadline: '2020-08-31T18:30:00.000Z',
                softDeadline: null
            },
            {
                name: 'User-test page prototypes on 10 people',
                type: 'Numerical',
                targetValue: 10,
                initialValue: 0,
                unit: 'people',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            },
            {
                name: 'Test existing landing page and sub-pages on external users for understanding issues',
                type: 'True/False',
                targetValue: 1,
                initialValue: 0,
                unit: '',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            }
        ]
    },
    {
        name: 'Increase quality of releases and make sure they are timely',
        level: 'Team',
        keyResults: [
            {
                name: 'Reduce the number of priority bugs found in production to be less than 2',
                type: 'KPI',
                targetValue: 2,
                initialValue: 15,
                unit: '',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            },
            {
                name: 'Increase unit test coverage to 75% from current 45%',
                type: 'Numerical',
                targetValue: 45,
                initialValue: 75,
                unit: '%',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            }
        ]
    },
    {
        name: 'Identify problems with current user interface',
        level: 'Employee',
        keyResults: [
            {
                name: 'Learn new skills to enhance creativity',
                type: 'True/False',
                targetValue: 1,
                initialValue: 0,
                unit: '',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            },
            {
                name: 'Provide solution to reduce time Lag by 85%',
                type: 'True/False',
                targetValue: 1,
                initialValue: 0,
                unit: '',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            },
            {
                name: 'Identify areas where the product lags in more than 20% cases',
                type: 'True/False',
                targetValue: 1,
                initialValue: 0,
                unit: '',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            },
            {
                name: 'Test all features in real time',
                description: '',
                type: 'True/False',
                targetValue: 1,
                initialValue: 0,
                unit: '',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            }
        ]
    }
];


/***/ }),

/***/ "./src/app/keyresult-template/keyresult-template.controller.ts":
/*!*********************************************************************!*\
  !*** ./src/app/keyresult-template/keyresult-template.controller.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyresultTemplateController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const keyresult_template_entity_1 = __webpack_require__(/*! ./keyresult-template.entity */ "./src/app/keyresult-template/keyresult-template.entity.ts");
const keyresult_template_service_1 = __webpack_require__(/*! ./keyresult-template.service */ "./src/app/keyresult-template/keyresult-template.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let KeyresultTemplateController = class KeyresultTemplateController extends core_1.CrudController {
    constructor(keyResultTemplateService) {
        super(keyResultTemplateService);
        this.keyResultTemplateService = keyResultTemplateService;
    }
    async createGoal(entity) {
        return this.keyResultTemplateService.create(entity);
    }
    async getAll() {
        return this.keyResultTemplateService.findAll();
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create KeyResult Template' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'KeyResult Template Created successfully',
        type: keyresult_template_entity_1.KeyResultTemplate
    }),
    common_1.Post('/create'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof keyresult_template_entity_1.KeyResultTemplate !== "undefined" && keyresult_template_entity_1.KeyResultTemplate) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], KeyresultTemplateController.prototype, "createGoal", null);
tslib_1.__decorate([
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('all'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", Promise)
], KeyresultTemplateController.prototype, "getAll", null);
KeyresultTemplateController = tslib_1.__decorate([
    swagger_1.ApiTags('keyResultTemplate'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof keyresult_template_service_1.KeyresultTemplateService !== "undefined" && keyresult_template_service_1.KeyresultTemplateService) === "function" ? _c : Object])
], KeyresultTemplateController);
exports.KeyresultTemplateController = KeyresultTemplateController;


/***/ }),

/***/ "./src/app/keyresult-template/keyresult-template.entity.ts":
/*!*****************************************************************!*\
  !*** ./src/app/keyresult-template/keyresult-template.entity.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyResultTemplate = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const goal_template_entity_1 = __webpack_require__(/*! ../goal-template/goal-template.entity */ "./src/app/goal-template/goal-template.entity.ts");
const goal_kpi_template_entity_1 = __webpack_require__(/*! ../goal-kpi-template/goal-kpi-template.entity */ "./src/app/goal-kpi-template/goal-kpi-template.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let KeyResultTemplate = class KeyResultTemplate extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], KeyResultTemplate.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.KeyResultTypeEnum }),
    class_validator_1.IsEnum(models_1.KeyResultTypeEnum),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], KeyResultTemplate.prototype, "type", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", String)
], KeyResultTemplate.prototype, "unit", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column({ nullable: true }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", Number)
], KeyResultTemplate.prototype, "targetValue", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column({ nullable: true }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", Number)
], KeyResultTemplate.prototype, "initialValue", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.KeyResultDeadlineEnum }),
    class_validator_1.IsEnum(models_1.KeyResultDeadlineEnum),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], KeyResultTemplate.prototype, "deadline", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: goal_kpi_template_entity_1.GoalKPITemplate }),
    typeorm_1.ManyToOne((type) => goal_kpi_template_entity_1.GoalKPITemplate, { nullable: true }),
    typeorm_1.JoinColumn({ name: 'kpiId' }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", typeof (_a = typeof goal_kpi_template_entity_1.GoalKPITemplate !== "undefined" && goal_kpi_template_entity_1.GoalKPITemplate) === "function" ? _a : Object)
], KeyResultTemplate.prototype, "kpi", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((keyResult) => keyResult.kpi),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], KeyResultTemplate.prototype, "kpiId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: goal_template_entity_1.GoalTemplate }),
    typeorm_1.ManyToOne((type) => goal_template_entity_1.GoalTemplate, (goalTemplate) => goalTemplate.keyResults, {
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn({ name: 'goalId' }),
    tslib_1.__metadata("design:type", typeof (_b = typeof goal_template_entity_1.GoalTemplate !== "undefined" && goal_template_entity_1.GoalTemplate) === "function" ? _b : Object)
], KeyResultTemplate.prototype, "goal", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((keyResult) => keyResult.goal),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], KeyResultTemplate.prototype, "goalId", void 0);
KeyResultTemplate = tslib_1.__decorate([
    typeorm_1.Entity('key_result_template')
], KeyResultTemplate);
exports.KeyResultTemplate = KeyResultTemplate;


/***/ }),

/***/ "./src/app/keyresult-template/keyresult-template.module.ts":
/*!*****************************************************************!*\
  !*** ./src/app/keyresult-template/keyresult-template.module.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyresultTemplateModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const keyresult_template_controller_1 = __webpack_require__(/*! ./keyresult-template.controller */ "./src/app/keyresult-template/keyresult-template.controller.ts");
const keyresult_template_service_1 = __webpack_require__(/*! ./keyresult-template.service */ "./src/app/keyresult-template/keyresult-template.service.ts");
const keyresult_template_entity_1 = __webpack_require__(/*! ./keyresult-template.entity */ "./src/app/keyresult-template/keyresult-template.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let KeyresultTemplateModule = class KeyresultTemplateModule {
};
KeyresultTemplateModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([keyresult_template_entity_1.KeyResultTemplate]), tenant_module_1.TenantModule],
        controllers: [keyresult_template_controller_1.KeyresultTemplateController],
        providers: [keyresult_template_service_1.KeyresultTemplateService],
        exports: [keyresult_template_service_1.KeyresultTemplateService]
    })
], KeyresultTemplateModule);
exports.KeyresultTemplateModule = KeyresultTemplateModule;


/***/ }),

/***/ "./src/app/keyresult-template/keyresult-template.seed.ts":
/*!***************************************************************!*\
  !*** ./src/app/keyresult-template/keyresult-template.seed.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultKeyResultTemplates = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const keyresult_template_entity_1 = __webpack_require__(/*! ./keyresult-template.entity */ "./src/app/keyresult-template/keyresult-template.entity.ts");
const goal_template_entity_1 = __webpack_require__(/*! ../goal-template/goal-template.entity */ "./src/app/goal-template/goal-template.entity.ts");
const goal_kpi_template_entity_1 = __webpack_require__(/*! ../goal-kpi-template/goal-kpi-template.entity */ "./src/app/goal-kpi-template/goal-kpi-template.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const default_keyresult_templates_1 = __webpack_require__(/*! ./default-keyresult-templates */ "./src/app/keyresult-template/default-keyresult-templates.ts");
exports.createDefaultKeyResultTemplates = async (connection, tenant) => {
    const defaultKeyResultTemplates = [];
    const goalTemplates = await connection.manager.find(goal_template_entity_1.GoalTemplate);
    const goalKPITemplates = await connection.manager.find(goal_kpi_template_entity_1.GoalKPITemplate);
    if (goalTemplates && goalTemplates.length > 0) {
        goalTemplates.forEach((goal) => {
            const keyResultsOfGoal = default_keyresult_templates_1.DEFAULT_KEY_RESULT_TEMPLATES.find((goalData) => goalData.name === goal.name);
            keyResultsOfGoal.keyResults.forEach(async (keyResultData) => {
                const keyResult = new keyresult_template_entity_1.KeyResultTemplate();
                keyResult.type = keyResultData.type;
                if (keyResult.type === models_1.KeyResultTypeEnum.TRUE_OR_FALSE) {
                    keyResult.initialValue = 0;
                    keyResult.targetValue = 1;
                }
                else {
                    if (keyResult.type === models_1.KeyResultTypeEnum.KPI) {
                        keyResult.kpi = faker.random.arrayElement(goalKPITemplates);
                    }
                    keyResult.initialValue = keyResultData.initialValue;
                    keyResult.targetValue = keyResultData.targetValue;
                }
                keyResult.unit = keyResultData.unit;
                keyResult.name = keyResultData.name;
                keyResult.deadline = keyResultData.deadline;
                keyResult.goal = goal;
                keyResult.organizationId = goal.organizationId;
                keyResult.tenant = tenant;
                defaultKeyResultTemplates.push(keyResult);
            });
        });
        return await insertDefaultKeyResults(connection, defaultKeyResultTemplates);
    }
};
const insertDefaultKeyResults = async (connection, defaultKeyResults) => {
    return await connection.manager.save(defaultKeyResults);
};


/***/ }),

/***/ "./src/app/keyresult-template/keyresult-template.service.ts":
/*!******************************************************************!*\
  !*** ./src/app/keyresult-template/keyresult-template.service.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyresultTemplateService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
const keyresult_template_entity_1 = __webpack_require__(/*! ./keyresult-template.entity */ "./src/app/keyresult-template/keyresult-template.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
let KeyresultTemplateService = class KeyresultTemplateService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(keyResultTemplateRepository) {
        super(keyResultTemplateRepository);
        this.keyResultTemplateRepository = keyResultTemplateRepository;
    }
};
KeyresultTemplateService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(keyresult_template_entity_1.KeyResultTemplate)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], KeyresultTemplateService);
exports.KeyresultTemplateService = KeyresultTemplateService;


/***/ }),

/***/ "./src/app/keyresult-update/commands/handlers/index.ts":
/*!*************************************************************!*\
  !*** ./src/app/keyresult-update/commands/handlers/index.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const keyresult_update_bulk_delete_handler_1 = __webpack_require__(/*! ./keyresult-update.bulk.delete.handler */ "./src/app/keyresult-update/commands/handlers/keyresult-update.bulk.delete.handler.ts");
exports.CommandHandlers = [keyresult_update_bulk_delete_handler_1.KeyResultUpdateBulKDeleteHandler];


/***/ }),

/***/ "./src/app/keyresult-update/commands/handlers/keyresult-update.bulk.delete.handler.ts":
/*!********************************************************************************************!*\
  !*** ./src/app/keyresult-update/commands/handlers/keyresult-update.bulk.delete.handler.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyResultUpdateBulKDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const __1 = __webpack_require__(/*! .. */ "./src/app/keyresult-update/commands/index.ts");
const keyresult_update_service_1 = __webpack_require__(/*! ../../keyresult-update.service */ "./src/app/keyresult-update/keyresult-update.service.ts");
let KeyResultUpdateBulKDeleteHandler = class KeyResultUpdateBulKDeleteHandler {
    constructor(keyResultUpdateService) {
        this.keyResultUpdateService = keyResultUpdateService;
    }
    async execute(command) {
        const { id } = command;
        const updates = await this.keyResultUpdateService.findByKeyResultId(id);
        await this.keyResultUpdateService.deleteBulkByKeyResultId(updates.map((item) => item.id));
        return;
    }
};
KeyResultUpdateBulKDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(__1.KeyResultUpdateBulkDeleteCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof keyresult_update_service_1.KeyResultUpdateService !== "undefined" && keyresult_update_service_1.KeyResultUpdateService) === "function" ? _a : Object])
], KeyResultUpdateBulKDeleteHandler);
exports.KeyResultUpdateBulKDeleteHandler = KeyResultUpdateBulKDeleteHandler;


/***/ }),

/***/ "./src/app/keyresult-update/commands/index.ts":
/*!****************************************************!*\
  !*** ./src/app/keyresult-update/commands/index.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyResultUpdateBulkDeleteCommand = void 0;
var keyresult_update_bulk_delete_command_1 = __webpack_require__(/*! ./keyresult-update.bulk.delete.command */ "./src/app/keyresult-update/commands/keyresult-update.bulk.delete.command.ts");
Object.defineProperty(exports, "KeyResultUpdateBulkDeleteCommand", { enumerable: true, get: function () { return keyresult_update_bulk_delete_command_1.KeyResultUpdateBulkDeleteCommand; } });


/***/ }),

/***/ "./src/app/keyresult-update/commands/keyresult-update.bulk.delete.command.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/keyresult-update/commands/keyresult-update.bulk.delete.command.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyResultUpdateBulkDeleteCommand = void 0;
class KeyResultUpdateBulkDeleteCommand {
    constructor(id) {
        this.id = id;
    }
}
exports.KeyResultUpdateBulkDeleteCommand = KeyResultUpdateBulkDeleteCommand;
KeyResultUpdateBulkDeleteCommand.type = '[KeyResultUpdate] Delete';


/***/ }),

/***/ "./src/app/keyresult-update/keyresult-update.controller.ts":
/*!*****************************************************************!*\
  !*** ./src/app/keyresult-update/keyresult-update.controller.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyResultUpdateController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const keyresult_update_entity_1 = __webpack_require__(/*! ./keyresult-update.entity */ "./src/app/keyresult-update/keyresult-update.entity.ts");
const keyresult_update_service_1 = __webpack_require__(/*! ./keyresult-update.service */ "./src/app/keyresult-update/keyresult-update.service.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/keyresult-update/commands/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let KeyResultUpdateController = class KeyResultUpdateController extends core_1.CrudController {
    constructor(commandBus, keyResultUpdateService) {
        super(keyResultUpdateService);
        this.commandBus = commandBus;
        this.keyResultUpdateService = keyResultUpdateService;
    }
    async createKeyResult(entity) {
        return this.keyResultUpdateService.create(entity);
    }
    async getAll(findInput) {
        return this.keyResultUpdateService.findAll({
            where: { key_result_id: findInput },
            relations: ['keyResult']
        });
    }
    async update(id, entity) {
        try {
            return await this.keyResultUpdateService.create(Object.assign({ id }, entity));
        }
        catch (error) {
            console.log(error);
            return;
        }
    }
    async deleteBulkByKeyResultId(data) {
        const { id = null } = data;
        return this.commandBus.execute(new commands_1.KeyResultUpdateBulkDeleteCommand(id));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create an update' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Update created',
        type: keyresult_update_entity_1.KeyResultUpdate
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Post('/create'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.IKeyResultUpdate !== "undefined" && models_1.IKeyResultUpdate) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], KeyResultUpdateController.prototype, "createKeyResult", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get all updates of keyresult' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found updates',
        type: keyresult_update_entity_1.KeyResultUpdate
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Updates not found'
    }),
    common_1.Get(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", Promise)
], KeyResultUpdateController.prototype, "getAll", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing keyresult update' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The update has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Update not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_c = typeof models_1.IKeyResultUpdate !== "undefined" && models_1.IKeyResultUpdate) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], KeyResultUpdateController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Delete updates by Key Result Id'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: "Found key result's updates",
        type: keyresult_update_entity_1.KeyResultUpdate
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'updates not found'
    }),
    common_1.Delete('deleteBulkByKeyResultId'),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], KeyResultUpdateController.prototype, "deleteBulkByKeyResultId", null);
KeyResultUpdateController = tslib_1.__decorate([
    swagger_1.ApiTags('KeyResultsUpdate'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_f = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _f : Object, typeof (_g = typeof keyresult_update_service_1.KeyResultUpdateService !== "undefined" && keyresult_update_service_1.KeyResultUpdateService) === "function" ? _g : Object])
], KeyResultUpdateController);
exports.KeyResultUpdateController = KeyResultUpdateController;


/***/ }),

/***/ "./src/app/keyresult-update/keyresult-update.entity.ts":
/*!*************************************************************!*\
  !*** ./src/app/keyresult-update/keyresult-update.entity.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyResultUpdate = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const keyresult_entity_1 = __webpack_require__(/*! ../keyresult/keyresult.entity */ "./src/app/keyresult/keyresult.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let KeyResultUpdate = class KeyResultUpdate extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], KeyResultUpdate.prototype, "update", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], KeyResultUpdate.prototype, "progress", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], KeyResultUpdate.prototype, "owner", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.KeyResultUpdateStatusEnum }),
    class_validator_1.IsEnum(models_1.KeyResultUpdateStatusEnum),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], KeyResultUpdate.prototype, "status", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: keyresult_entity_1.KeyResult }),
    typeorm_1.ManyToOne((type) => keyresult_entity_1.KeyResult, (keyResult) => keyResult.update, {
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn({ name: 'keyResultId' }),
    tslib_1.__metadata("design:type", typeof (_a = typeof keyresult_entity_1.KeyResult !== "undefined" && keyresult_entity_1.KeyResult) === "function" ? _a : Object)
], KeyResultUpdate.prototype, "keyResult", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((keyResult) => keyResult.keyResult),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], KeyResultUpdate.prototype, "keyResultId", void 0);
KeyResultUpdate = tslib_1.__decorate([
    typeorm_1.Entity('key_result_update')
], KeyResultUpdate);
exports.KeyResultUpdate = KeyResultUpdate;


/***/ }),

/***/ "./src/app/keyresult-update/keyresult-update.module.ts":
/*!*************************************************************!*\
  !*** ./src/app/keyresult-update/keyresult-update.module.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyResultUpdateModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const keyresult_update_service_1 = __webpack_require__(/*! ./keyresult-update.service */ "./src/app/keyresult-update/keyresult-update.service.ts");
const keyresult_update_controller_1 = __webpack_require__(/*! ./keyresult-update.controller */ "./src/app/keyresult-update/keyresult-update.controller.ts");
const keyresult_update_entity_1 = __webpack_require__(/*! ./keyresult-update.entity */ "./src/app/keyresult-update/keyresult-update.entity.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/keyresult-update/commands/handlers/index.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let KeyResultUpdateModule = class KeyResultUpdateModule {
};
KeyResultUpdateModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([keyresult_update_entity_1.KeyResultUpdate]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [keyresult_update_controller_1.KeyResultUpdateController],
        providers: [keyresult_update_service_1.KeyResultUpdateService, ...handlers_1.CommandHandlers],
        exports: [keyresult_update_service_1.KeyResultUpdateService]
    })
], KeyResultUpdateModule);
exports.KeyResultUpdateModule = KeyResultUpdateModule;


/***/ }),

/***/ "./src/app/keyresult-update/keyresult-update.seed.ts":
/*!***********************************************************!*\
  !*** ./src/app/keyresult-update/keyresult-update.seed.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultKeyResultUpdates = void 0;
const keyresult_update_entity_1 = __webpack_require__(/*! ./keyresult-update.entity */ "./src/app/keyresult-update/keyresult-update.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const goal_time_frame_entity_1 = __webpack_require__(/*! ../goal-time-frame/goal-time-frame.entity */ "./src/app/goal-time-frame/goal-time-frame.entity.ts");
exports.createDefaultKeyResultUpdates = async (connection, tenant, organization, keyResults) => {
    const defaultKeyResultUpdates = [];
    const goalTimeFrames = await connection.manager.find(goal_time_frame_entity_1.GoalTimeFrame);
    if (!keyResults) {
        console.warn('Warning: keyResults not found, DefaultKeyResultUpdates will not be created');
        return;
    }
    keyResults.forEach(async (keyResult) => {
        const numberOfUpdates = faker.random.number({ min: 2, max: 10 });
        for (let i = 0; i < numberOfUpdates; i++) {
            const startDate = goalTimeFrames.find((element) => element.name === keyResult.goal.deadline).startDate;
            const endDate = goalTimeFrames.find((element) => element.name === keyResult.goal.deadline).endDate;
            if (moment().isAfter(startDate)) {
                const keyResultUpdate = new keyresult_update_entity_1.KeyResultUpdate();
                keyResultUpdate.owner = keyResult.owner.id;
                keyResultUpdate.keyResult = keyResult;
                keyResultUpdate.tenant = tenant;
                keyResultUpdate.organization = organization;
                keyResultUpdate.status = faker.random.arrayElement(Object.values(models_1.KeyResultUpdateStatusEnum));
                keyResultUpdate.update = faker.random.number({
                    min: keyResult.initialValue + 1,
                    max: keyResult.targetValue
                });
                if (keyResult.deadline ===
                    models_1.KeyResultDeadlineEnum.NO_CUSTOM_DEADLINE) {
                    keyResultUpdate.createdAt = faker.date.between(startDate, endDate);
                }
                else {
                    keyResultUpdate.createdAt = faker.date.between(startDate, keyResult.hardDeadline);
                }
                if (keyResult.type !== models_1.KeyResultTypeEnum.TRUE_OR_FALSE) {
                    const diff = keyResult.targetValue - keyResult.initialValue;
                    const updateDiff = keyResultUpdate.update - keyResult.initialValue;
                    keyResultUpdate.progress = Math.round((Math.abs(updateDiff) / Math.abs(diff)) * 100);
                }
                else {
                    keyResultUpdate.progress =
                        keyResultUpdate.update === 1 ? 100 : 0;
                }
                defaultKeyResultUpdates.push(keyResultUpdate);
            }
        }
    });
    return await insertDefaultKeyResultUpdates(connection, defaultKeyResultUpdates);
};
const insertDefaultKeyResultUpdates = async (connection, defaultKeyResultUpdates) => {
    return await connection.manager.save(defaultKeyResultUpdates);
};


/***/ }),

/***/ "./src/app/keyresult-update/keyresult-update.service.ts":
/*!**************************************************************!*\
  !*** ./src/app/keyresult-update/keyresult-update.service.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyResultUpdateService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const keyresult_update_entity_1 = __webpack_require__(/*! ./keyresult-update.entity */ "./src/app/keyresult-update/keyresult-update.entity.ts");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
let KeyResultUpdateService = class KeyResultUpdateService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(keyResultUpdateRepository) {
        super(keyResultUpdateRepository);
        this.keyResultUpdateRepository = keyResultUpdateRepository;
    }
    async findByKeyResultId(keyResultId) {
        return await this.repository
            .createQueryBuilder('key_result_update')
            .where('key_result_update.keyResultId = :keyResultId', {
            keyResultId
        })
            .getMany();
    }
    async deleteBulkByKeyResultId(ids) {
        return await this.repository.delete(ids);
    }
};
KeyResultUpdateService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(keyresult_update_entity_1.KeyResultUpdate)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], KeyResultUpdateService);
exports.KeyResultUpdateService = KeyResultUpdateService;


/***/ }),

/***/ "./src/app/keyresult/default-keyresults.ts":
/*!*************************************************!*\
  !*** ./src/app/keyresult/default-keyresults.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_KEY_RESULTS = void 0;
exports.DEFAULT_KEY_RESULTS = [
    {
        name: 'Improve product performance',
        level: 'Organization',
        keyResults: [
            {
                name: 'Get over 10000 new signups',
                type: 'Numerical',
                targetValue: 10000,
                initialValue: 0,
                unit: 'signups',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            },
            {
                name: 'Publish product reviews in over 50 publications',
                type: 'Numerical',
                targetValue: 50,
                initialValue: 0,
                unit: 'publications',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            }
        ]
    },
    {
        name: 'Successfully launch version 2 of our main product',
        level: 'Organization',
        keyResults: [
            {
                name: 'Reduce the average response time on the app to less than 500ms',
                type: 'KPI',
                targetValue: 500,
                initialValue: 1000,
                unit: '',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            }
        ]
    },
    {
        name: 'Redesign and launch our new landing page',
        level: 'Team',
        keyResults: [
            {
                name: 'Design new version of our site structure, navigation and all pages',
                type: 'True/False',
                targetValue: 1,
                initialValue: 0,
                unit: '',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            },
            {
                name: 'Conduct stakeholder interviews with 10 people from sales and marketing',
                type: 'Numerical',
                targetValue: 10,
                initialValue: 0,
                unit: 'interviews',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            },
            {
                name: 'With development and marketing, launch by September 1st',
                type: 'True/False',
                targetValue: 1,
                initialValue: 0,
                unit: '',
                deadline: 'Hard Deadline',
                hardDeadline: '2020-08-31T18:30:00.000Z',
                softDeadline: null
            },
            {
                name: 'User-test page prototypes on 10 people',
                type: 'Numerical',
                targetValue: 10,
                initialValue: 0,
                unit: 'people',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            },
            {
                name: 'Test existing landing page and sub-pages on external users for understanding issues',
                type: 'True/False',
                targetValue: 1,
                initialValue: 0,
                unit: '',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            }
        ]
    },
    {
        name: 'Increase quality of releases and make sure they are timely',
        level: 'Team',
        keyResults: [
            {
                name: 'Reduce the number of priority bugs found in production to be less than 2',
                type: 'KPI',
                targetValue: 2,
                initialValue: 15,
                unit: '',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            },
            {
                name: 'Increase unit test coverage to 75% from current 45%',
                type: 'Numerical',
                targetValue: 45,
                initialValue: 75,
                unit: '%',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            }
        ]
    },
    {
        name: 'Identify problems with current user interface',
        level: 'Employee',
        keyResults: [
            {
                name: 'Learn new skills to enhance creativity',
                type: 'True/False',
                targetValue: 1,
                initialValue: 0,
                unit: '',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            },
            {
                name: 'Provide solution to reduce time Lag by 85%',
                type: 'True/False',
                targetValue: 1,
                initialValue: 0,
                unit: '',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            },
            {
                name: 'Identify areas where the product lags in more than 20% cases',
                type: 'True/False',
                targetValue: 1,
                initialValue: 0,
                unit: '',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            },
            {
                name: 'Test all features in real time',
                description: '',
                type: 'True/False',
                targetValue: 1,
                initialValue: 0,
                unit: '',
                deadline: 'No Custom Deadline',
                hardDeadline: null,
                softDeadline: null
            }
        ]
    }
];


/***/ }),

/***/ "./src/app/keyresult/keyresult.controller.ts":
/*!***************************************************!*\
  !*** ./src/app/keyresult/keyresult.controller.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyResultController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const keyresult_entity_1 = __webpack_require__(/*! ./keyresult.entity */ "./src/app/keyresult/keyresult.entity.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const keyresult_service_1 = __webpack_require__(/*! ./keyresult.service */ "./src/app/keyresult/keyresult.service.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let KeyResultController = class KeyResultController extends core_1.CrudController {
    constructor(keyResultService) {
        super(keyResultService);
        this.keyResultService = keyResultService;
    }
    async createKeyResult(entity) {
        return this.keyResultService.create(entity);
    }
    async createBulkKeyResults(entity) {
        return this.keyResultService.createBulk(entity);
    }
    async getAll(findInput) {
        return this.keyResultService.findAll({
            where: { id: findInput },
            relations: ['updates', 'goal', 'lead', 'owner']
        });
    }
    async update(id, entity) {
        try {
            return await this.keyResultService.create(Object.assign({ id }, entity));
        }
        catch (error) {
            console.log(error);
            return;
        }
    }
    async deleteKeyResult(id) {
        return this.keyResultService.delete(id);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create a key result' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Key Result Created',
        type: keyresult_entity_1.KeyResult
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Key Result not found'
    }),
    common_1.Post('/create'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof keyresult_entity_1.KeyResult !== "undefined" && keyresult_entity_1.KeyResult) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], KeyResultController.prototype, "createKeyResult", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create Bulk key result' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Key Results Created',
        type: keyresult_entity_1.KeyResult
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Key Result not found'
    }),
    common_1.Post('/createBulk'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Array]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], KeyResultController.prototype, "createBulkKeyResults", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get key result by ID' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found Key Result',
        type: keyresult_entity_1.KeyResult
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Key Result not found'
    }),
    common_1.Get(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", Promise)
], KeyResultController.prototype, "getAll", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing keyresult' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The keyresult has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Key Result not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_d = typeof keyresult_entity_1.KeyResult !== "undefined" && keyresult_entity_1.KeyResult) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], KeyResultController.prototype, "update", null);
tslib_1.__decorate([
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], KeyResultController.prototype, "deleteKeyResult", null);
KeyResultController = tslib_1.__decorate([
    swagger_1.ApiTags('KeyResults'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_g = typeof keyresult_service_1.KeyResultService !== "undefined" && keyresult_service_1.KeyResultService) === "function" ? _g : Object])
], KeyResultController);
exports.KeyResultController = KeyResultController;


/***/ }),

/***/ "./src/app/keyresult/keyresult.entity.ts":
/*!***********************************************!*\
  !*** ./src/app/keyresult/keyresult.entity.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyResult = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const goal_entity_1 = __webpack_require__(/*! ../goal/goal.entity */ "./src/app/goal/goal.entity.ts");
const keyresult_update_entity_1 = __webpack_require__(/*! ../keyresult-update/keyresult-update.entity */ "./src/app/keyresult-update/keyresult-update.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const task_entity_1 = __webpack_require__(/*! ../tasks/task.entity */ "./src/app/tasks/task.entity.ts");
const goal_kpi_entity_1 = __webpack_require__(/*! ../goal-kpi/goal-kpi.entity */ "./src/app/goal-kpi/goal-kpi.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let KeyResult = class KeyResult extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], KeyResult.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", String)
], KeyResult.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.KeyResultTypeEnum }),
    class_validator_1.IsEnum(models_1.KeyResultTypeEnum),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], KeyResult.prototype, "type", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column({ nullable: true }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", Number)
], KeyResult.prototype, "targetValue", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column({ nullable: true }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", Number)
], KeyResult.prototype, "initialValue", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", String)
], KeyResult.prototype, "unit", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], KeyResult.prototype, "update", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], KeyResult.prototype, "progress", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.ManyToOne((type) => employee_entity_1.Employee),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof employee_entity_1.Employee !== "undefined" && employee_entity_1.Employee) === "function" ? _a : Object)
], KeyResult.prototype, "owner", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.ManyToOne((type) => employee_entity_1.Employee, { nullable: true }),
    typeorm_1.JoinColumn(),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", typeof (_b = typeof employee_entity_1.Employee !== "undefined" && employee_entity_1.Employee) === "function" ? _b : Object)
], KeyResult.prototype, "lead", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: organization_projects_entity_1.OrganizationProject }),
    typeorm_1.ManyToOne((type) => organization_projects_entity_1.OrganizationProject, { nullable: true }),
    typeorm_1.JoinColumn({ name: 'projectId' }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", typeof (_c = typeof organization_projects_entity_1.OrganizationProject !== "undefined" && organization_projects_entity_1.OrganizationProject) === "function" ? _c : Object)
], KeyResult.prototype, "project", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((keyResult) => keyResult.project),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], KeyResult.prototype, "projectId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: task_entity_1.Task }),
    typeorm_1.ManyToOne((type) => task_entity_1.Task, { nullable: true }),
    typeorm_1.JoinColumn({ name: 'taskId' }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", typeof (_d = typeof task_entity_1.Task !== "undefined" && task_entity_1.Task) === "function" ? _d : Object)
], KeyResult.prototype, "task", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((keyResult) => keyResult.task),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], KeyResult.prototype, "taskId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: goal_kpi_entity_1.GoalKPI }),
    typeorm_1.ManyToOne((type) => goal_kpi_entity_1.GoalKPI, { nullable: true }),
    typeorm_1.JoinColumn({ name: 'kpiId' }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", typeof (_e = typeof goal_kpi_entity_1.GoalKPI !== "undefined" && goal_kpi_entity_1.GoalKPI) === "function" ? _e : Object)
], KeyResult.prototype, "kpi", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((keyResult) => keyResult.kpi),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], KeyResult.prototype, "kpiId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.KeyResultDeadlineEnum }),
    class_validator_1.IsEnum(models_1.KeyResultDeadlineEnum),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], KeyResult.prototype, "deadline", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    typeorm_1.Column({ nullable: true }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", typeof (_f = typeof Date !== "undefined" && Date) === "function" ? _f : Object)
], KeyResult.prototype, "hardDeadline", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    typeorm_1.Column({ nullable: true }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", typeof (_g = typeof Date !== "undefined" && Date) === "function" ? _g : Object)
], KeyResult.prototype, "softDeadline", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", String)
], KeyResult.prototype, "status", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", String)
], KeyResult.prototype, "weight", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: goal_entity_1.Goal }),
    typeorm_1.ManyToOne((type) => goal_entity_1.Goal, (goal) => goal.keyResults, {
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn({ name: 'goalId' }),
    tslib_1.__metadata("design:type", typeof (_h = typeof goal_entity_1.Goal !== "undefined" && goal_entity_1.Goal) === "function" ? _h : Object)
], KeyResult.prototype, "goal", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((keyResult) => keyResult.goal),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], KeyResult.prototype, "goalId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: keyresult_update_entity_1.KeyResultUpdate }),
    typeorm_1.OneToMany((type) => keyresult_update_entity_1.KeyResultUpdate, (keyResultUpdate) => keyResultUpdate.keyResult),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", Array)
], KeyResult.prototype, "updates", void 0);
KeyResult = tslib_1.__decorate([
    typeorm_1.Entity('key_result')
], KeyResult);
exports.KeyResult = KeyResult;


/***/ }),

/***/ "./src/app/keyresult/keyresult.module.ts":
/*!***********************************************!*\
  !*** ./src/app/keyresult/keyresult.module.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyResultModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const keyresult_entity_1 = __webpack_require__(/*! ./keyresult.entity */ "./src/app/keyresult/keyresult.entity.ts");
const keyresult_service_1 = __webpack_require__(/*! ./keyresult.service */ "./src/app/keyresult/keyresult.service.ts");
const keyresult_controller_1 = __webpack_require__(/*! ./keyresult.controller */ "./src/app/keyresult/keyresult.controller.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let KeyResultModule = class KeyResultModule {
};
KeyResultModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([keyresult_entity_1.KeyResult]), cqrs_1.CqrsModule, tenant_module_1.TenantModule],
        controllers: [keyresult_controller_1.KeyResultController],
        providers: [keyresult_service_1.KeyResultService],
        exports: [keyresult_service_1.KeyResultService]
    })
], KeyResultModule);
exports.KeyResultModule = KeyResultModule;


/***/ }),

/***/ "./src/app/keyresult/keyresult.seed.ts":
/*!*********************************************!*\
  !*** ./src/app/keyresult/keyresult.seed.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomKeyResult = exports.updateDefaultKeyResultProgress = exports.createDefaultKeyResults = void 0;
const faker = __webpack_require__(/*! faker */ "faker");
const keyresult_entity_1 = __webpack_require__(/*! ./keyresult.entity */ "./src/app/keyresult/keyresult.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const date_fns_1 = __webpack_require__(/*! date-fns */ "date-fns");
const moment = __webpack_require__(/*! moment */ "moment");
const goal_kpi_entity_1 = __webpack_require__(/*! ../goal-kpi/goal-kpi.entity */ "./src/app/goal-kpi/goal-kpi.entity.ts");
const default_keyresults_1 = __webpack_require__(/*! ./default-keyresults */ "./src/app/keyresult/default-keyresults.ts");
exports.createDefaultKeyResults = async (connection, tenant, employees, goals) => {
    const defaultKeyResults = [];
    const goalKPIs = await connection.manager.find(goal_kpi_entity_1.GoalKPI);
    if (goals && goals.length > 0) {
        goals.forEach((goal) => {
            const keyResultsOfGoal = default_keyresults_1.DEFAULT_KEY_RESULTS.find((goalData) => goalData.name === goal.name);
            keyResultsOfGoal.keyResults.forEach((keyResultData) => {
                const keyResult = new keyresult_entity_1.KeyResult();
                keyResult.deadline = keyResultData.deadline;
                if (keyResult.deadline !==
                    models_1.KeyResultDeadlineEnum.NO_CUSTOM_DEADLINE) {
                    keyResult.hardDeadline = keyResultData.hardDeadline;
                    keyResult.softDeadline = null;
                    if (keyResult.deadline ===
                        models_1.KeyResultDeadlineEnum.HARD_AND_SOFT_DEADLINE) {
                        keyResult.softDeadline = keyResultData.softDeadline;
                    }
                }
                else {
                    keyResult.hardDeadline = null;
                    keyResult.softDeadline = null;
                }
                keyResult.owner = faker.random.arrayElement(employees);
                keyResult.lead = faker.random.arrayElement(employees);
                keyResult.type = keyResultData.type;
                if (keyResult.type === models_1.KeyResultTypeEnum.TRUE_OR_FALSE) {
                    keyResult.initialValue = 0;
                    keyResult.targetValue = 1;
                }
                else {
                    if (keyResultData.type === models_1.KeyResultTypeEnum.KPI) {
                        keyResult.kpi = faker.random.arrayElement(goalKPIs);
                    }
                    keyResult.initialValue = keyResultData.initialValue;
                    keyResult.targetValue = keyResultData.targetValue;
                }
                keyResult.unit = keyResultData.unit;
                keyResult.progress = 0;
                keyResult.name = keyResultData.name;
                keyResult.goal = goal;
                keyResult.organizationId = goal.organizationId;
                keyResult.tenant = tenant;
                keyResult.update = keyResult.initialValue;
                keyResult.status = 'none';
                keyResult.description = ' ';
                keyResult.weight = faker.random.arrayElement([
                    models_1.KeyResultWeightEnum.DEFAULT,
                    models_1.KeyResultWeightEnum.INCREASE_BY_2X,
                    models_1.KeyResultWeightEnum.INCREASE_BY_4X
                ]);
                defaultKeyResults.push(keyResult);
            });
        });
        await insertDefaultKeyResults(connection, defaultKeyResults);
        return defaultKeyResults;
    }
};
exports.updateDefaultKeyResultProgress = async (connection) => {
    const keyResults = await connection.manager.find(keyresult_entity_1.KeyResult, {
        relations: ['updates']
    });
    keyResults.forEach(async (keyResult) => {
        const sortedUpdates = [...keyResult.updates].sort((a, b) => {
            return date_fns_1.compareAsc(new Date(a.createdAt), new Date(b.createdAt));
        });
        const recentUpdate = sortedUpdates[sortedUpdates.length - 1];
        if (recentUpdate) {
            await connection.manager.update(keyresult_entity_1.KeyResult, { id: keyResult.id }, {
                progress: recentUpdate.progress,
                update: recentUpdate.update
            });
        }
    });
    return keyResults;
};
const insertDefaultKeyResults = async (connection, defaultKeyResults) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(keyresult_entity_1.KeyResult)
        .values(defaultKeyResults)
        .execute();
};
exports.createRandomKeyResult = async (connection, tenants, tenantEmployeeMap, goals) => {
    if (!tenantEmployeeMap) {
        console.warn('Warning: tenantEmployeeMap not found, Random KeyResult will not be created');
        return;
    }
    const keyResults = [];
    for (const tenant of tenants) {
        const tenantEmployees = tenantEmployeeMap.get(tenant);
        for (const goal of goals) {
            const keyResult = new keyresult_entity_1.KeyResult();
            keyResult.deadline = faker.random.arrayElement(Object.keys(models_1.KeyResultDeadlineEnum));
            if (keyResult.deadline !== models_1.KeyResultDeadlineEnum.NO_CUSTOM_DEADLINE) {
                keyResult.hardDeadline = moment(new Date())
                    .add(1, 'days')
                    .toDate();
                keyResult.softDeadline = null;
                if (keyResult.deadline ===
                    models_1.KeyResultDeadlineEnum.HARD_AND_SOFT_DEADLINE) {
                    keyResult.softDeadline = moment(new Date())
                        .add(3, 'days')
                        .toDate();
                }
            }
            else {
                keyResult.hardDeadline = null;
                keyResult.softDeadline = null;
            }
            keyResult.owner = faker.random.arrayElement(tenantEmployees);
            keyResult.lead = faker.random.arrayElement(tenantEmployees);
            keyResult.type = faker.random.arrayElement(Object.keys(models_1.KeyResultTypeEnum));
            if (keyResult.type === models_1.KeyResultTypeEnum.TRUE_OR_FALSE) {
                keyResult.initialValue = 0;
                keyResult.targetValue = 1;
            }
            else {
                keyResult.targetValue = faker.random.number(5000);
                keyResult.initialValue = faker.random.number(keyResult.targetValue);
            }
            keyResult.unit = faker.random.arrayElement([
                'signups',
                'publications',
                'interviews',
                'people',
                '%'
            ]);
            keyResult.progress = 0;
            keyResult.name = faker.name.jobTitle();
            keyResult.goal = goal;
            keyResult.organizationId = goal.organizationId;
            keyResult.tenant = tenant;
            keyResult.update = keyResult.initialValue;
            keyResult.status = 'none';
            keyResult.description = ' ';
            keyResult.weight = faker.random.arrayElement([
                models_1.KeyResultWeightEnum.DEFAULT,
                models_1.KeyResultWeightEnum.INCREASE_BY_2X,
                models_1.KeyResultWeightEnum.INCREASE_BY_4X
            ]);
            keyResults.push(keyResult);
        }
    }
    await connection.manager.save(keyResults);
};


/***/ }),

/***/ "./src/app/keyresult/keyresult.service.ts":
/*!************************************************!*\
  !*** ./src/app/keyresult/keyresult.service.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyResultService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const keyresult_entity_1 = __webpack_require__(/*! ./keyresult.entity */ "./src/app/keyresult/keyresult.entity.ts");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
let KeyResultService = class KeyResultService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(keyResultRepository) {
        super(keyResultRepository);
        this.keyResultRepository = keyResultRepository;
    }
    async createBulk(input) {
        return await this.repository.save(input);
    }
};
KeyResultService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(keyresult_entity_1.KeyResult)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], KeyResultService);
exports.KeyResultService = KeyResultService;


/***/ }),

/***/ "./src/app/language/language.controller.ts":
/*!*************************************************!*\
  !*** ./src/app/language/language.controller.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const language_entity_1 = __webpack_require__(/*! ./language.entity */ "./src/app/language/language.entity.ts");
const language_service_1 = __webpack_require__(/*! ./language.service */ "./src/app/language/language.service.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
let LanguageController = class LanguageController extends core_1.CrudController {
    constructor(languageService) {
        super(languageService);
        this.languageService = languageService;
    }
    async findByName(name) {
        return this.languageService.findOneByName(name);
    }
    async createRecord(entity) {
        return this.languageService.create(entity);
    }
};
tslib_1.__decorate([
    common_1.Get('getByName/:name'),
    tslib_1.__param(0, common_1.Param('name')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], LanguageController.prototype, "findByName", null);
tslib_1.__decorate([
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_TAGS_EDIT),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof language_entity_1.Language !== "undefined" && language_entity_1.Language) === "function" ? _b : Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], LanguageController.prototype, "createRecord", null);
LanguageController = tslib_1.__decorate([
    swagger_1.ApiTags('Languages'),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof language_service_1.LanguageService !== "undefined" && language_service_1.LanguageService) === "function" ? _d : Object])
], LanguageController);
exports.LanguageController = LanguageController;


/***/ }),

/***/ "./src/app/language/language.entity.ts":
/*!*********************************************!*\
  !*** ./src/app/language/language.entity.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Language = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const base_1 = __webpack_require__(/*! ../core/entities/base */ "./src/app/core/entities/base.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
let Language = class Language extends base_1.Base {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Language.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", String)
], Language.prototype, "code", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean, default: false }),
    typeorm_1.Column({ default: true, nullable: true }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", Boolean)
], Language.prototype, "is_system", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Language.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Language.prototype, "color", void 0);
Language = tslib_1.__decorate([
    typeorm_1.Entity('language'),
    typeorm_1.Unique(['name'])
], Language);
exports.Language = Language;


/***/ }),

/***/ "./src/app/language/language.module.ts":
/*!*********************************************!*\
  !*** ./src/app/language/language.module.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const language_service_1 = __webpack_require__(/*! ./language.service */ "./src/app/language/language.service.ts");
const language_controller_1 = __webpack_require__(/*! ./language.controller */ "./src/app/language/language.controller.ts");
const language_entity_1 = __webpack_require__(/*! ./language.entity */ "./src/app/language/language.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const user_module_1 = __webpack_require__(/*! ../user/user.module */ "./src/app/user/user.module.ts");
let LanguageModule = class LanguageModule {
};
LanguageModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([language_entity_1.Language]), user_module_1.UserModule],
        controllers: [language_controller_1.LanguageController],
        providers: [language_service_1.LanguageService],
        exports: [language_service_1.LanguageService]
    })
], LanguageModule);
exports.LanguageModule = LanguageModule;


/***/ }),

/***/ "./src/app/language/language.seed.ts":
/*!*******************************************!*\
  !*** ./src/app/language/language.seed.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createLanguages = void 0;
const language_entity_1 = __webpack_require__(/*! ./language.entity */ "./src/app/language/language.entity.ts");
exports.createLanguages = async (connection) => {
    const languages = [];
    const languageItems = [
        { name: 'English', code: 'en', is_system: true },
        { name: 'Bulgarian', code: 'bg', is_system: true },
        { name: 'Hebrew', code: 'he', is_system: true },
        { name: 'Russian', code: 'ru', is_system: true }
    ];
    for (const item of languageItems) {
        const language = new language_entity_1.Language();
        language.name = item.name;
        language.code = item.code;
        language.is_system = item.is_system || false;
        language.description = '';
        language.color = '#479bfa';
        languages.push(language);
    }
    await connection
        .createQueryBuilder()
        .insert()
        .into(language_entity_1.Language)
        .values(languages)
        .execute();
    return languages;
};


/***/ }),

/***/ "./src/app/language/language.service.ts":
/*!**********************************************!*\
  !*** ./src/app/language/language.service.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const language_entity_1 = __webpack_require__(/*! ./language.entity */ "./src/app/language/language.entity.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_2 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
let LanguageService = class LanguageService extends core_1.CrudService {
    constructor(tagRepository) {
        super(tagRepository);
        this.tagRepository = tagRepository;
    }
    async findOneByName(name) {
        const query = this.repository
            .createQueryBuilder('tag')
            .where('"tag"."name" = :name', {
            name
        });
        const item = await query.getOne();
        return item;
    }
};
LanguageService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_2.InjectRepository(language_entity_1.Language)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _a : Object])
], LanguageService);
exports.LanguageService = LanguageService;


/***/ }),

/***/ "./src/app/organization-awards/default-organization-awards.ts":
/*!********************************************************************!*\
  !*** ./src/app/organization-awards/default-organization-awards.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_ORGANIZATION_AWARDS = void 0;
exports.DEFAULT_ORGANIZATION_AWARDS = {
    'Top Software Development Company': 2015,
    'Upwork Top Rated Development Company 2019': 2019,
    'Upwork Top Rated Development Company 2018': 2018,
    'Upwork Top Rated Development Company 2017': 2017
};


/***/ }),

/***/ "./src/app/organization-awards/organization-awards.controller.ts":
/*!***********************************************************************!*\
  !*** ./src/app/organization-awards/organization-awards.controller.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationAwardsController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const organization_awards_service_1 = __webpack_require__(/*! ./organization-awards.service */ "./src/app/organization-awards/organization-awards.service.ts");
const organization_awards_entity_1 = __webpack_require__(/*! ./organization-awards.entity */ "./src/app/organization-awards/organization-awards.entity.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const QueryPartialEntity_1 = __webpack_require__(/*! typeorm/query-builder/QueryPartialEntity */ "typeorm/query-builder/QueryPartialEntity");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let OrganizationAwardsController = class OrganizationAwardsController extends crud_controller_1.CrudController {
    constructor(organizationAwardsService) {
        super(organizationAwardsService);
        this.organizationAwardsService = organizationAwardsService;
    }
    async create(entity) {
        return this.organizationAwardsService.create(entity);
    }
    async update(id, entity) {
        return this.organizationAwardsService.update(id, entity);
    }
    async delete(id) {
        return this.organizationAwardsService.delete(id);
    }
    async findAwardsByOrgId(data) {
        const { findInput } = JSON.parse(data);
        return this.organizationAwardsService.findAll({
            where: findInput
        });
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.CREATED),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.DeepPartial !== "undefined" && typeorm_1.DeepPartial) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], OrganizationAwardsController.prototype, "create", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_c = typeof QueryPartialEntity_1.QueryDeepPartialEntity !== "undefined" && QueryPartialEntity_1.QueryDeepPartialEntity) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], OrganizationAwardsController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Delete record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NO_CONTENT,
        description: 'The record has been successfully deleted'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], OrganizationAwardsController.prototype, "delete", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find Organization Awards.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found Organization Awards',
        type: organization_awards_entity_1.OrganizationAwards
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], OrganizationAwardsController.prototype, "findAwardsByOrgId", null);
OrganizationAwardsController = tslib_1.__decorate([
    swagger_1.ApiTags('OrganizationAwards'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_g = typeof organization_awards_service_1.OrganizationAwardsService !== "undefined" && organization_awards_service_1.OrganizationAwardsService) === "function" ? _g : Object])
], OrganizationAwardsController);
exports.OrganizationAwardsController = OrganizationAwardsController;


/***/ }),

/***/ "./src/app/organization-awards/organization-awards.entity.ts":
/*!*******************************************************************!*\
  !*** ./src/app/organization-awards/organization-awards.entity.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationAwards = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let OrganizationAwards = class OrganizationAwards extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationAwards.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationAwards.prototype, "year", void 0);
OrganizationAwards = tslib_1.__decorate([
    typeorm_1.Entity('organization_award')
], OrganizationAwards);
exports.OrganizationAwards = OrganizationAwards;


/***/ }),

/***/ "./src/app/organization-awards/organization-awards.module.ts":
/*!*******************************************************************!*\
  !*** ./src/app/organization-awards/organization-awards.module.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationAwardsModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const organization_awards_entity_1 = __webpack_require__(/*! ./organization-awards.entity */ "./src/app/organization-awards/organization-awards.entity.ts");
const organization_awards_controller_1 = __webpack_require__(/*! ./organization-awards.controller */ "./src/app/organization-awards/organization-awards.controller.ts");
const organization_awards_service_1 = __webpack_require__(/*! ./organization-awards.service */ "./src/app/organization-awards/organization-awards.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let OrganizationAwardsModule = class OrganizationAwardsModule {
};
OrganizationAwardsModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([organization_awards_entity_1.OrganizationAwards]), tenant_module_1.TenantModule],
        controllers: [organization_awards_controller_1.OrganizationAwardsController],
        providers: [organization_awards_service_1.OrganizationAwardsService],
        exports: [organization_awards_service_1.OrganizationAwardsService]
    })
], OrganizationAwardsModule);
exports.OrganizationAwardsModule = OrganizationAwardsModule;


/***/ }),

/***/ "./src/app/organization-awards/organization-awards.seed.ts":
/*!*****************************************************************!*\
  !*** ./src/app/organization-awards/organization-awards.seed.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomAwards = exports.createDefaultAwards = void 0;
const organization_awards_entity_1 = __webpack_require__(/*! ./organization-awards.entity */ "./src/app/organization-awards/organization-awards.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const default_organization_awards_1 = __webpack_require__(/*! ./default-organization-awards */ "./src/app/organization-awards/default-organization-awards.ts");
exports.createDefaultAwards = async (connection, tenant, organizations) => {
    const awards = [];
    const awardsNames = Object.keys(default_organization_awards_1.DEFAULT_ORGANIZATION_AWARDS);
    for (const org of organizations) {
        for (const awardsName of awardsNames) {
            const award = new organization_awards_entity_1.OrganizationAwards();
            award.name = awardsName;
            award.year = default_organization_awards_1.DEFAULT_ORGANIZATION_AWARDS[awardsName];
            award.organization = org;
            award.tenant = tenant;
            awards.push(award);
        }
    }
    return await connection.manager.save(awards);
};
exports.createRandomAwards = async (connection, tenants, tenantOrganizationsMap) => {
    const awards = [];
    for (const tenant of tenants) {
        const organizations = tenantOrganizationsMap.get(tenant);
        const awardsData = [
            'Best Product',
            'Best Revenue',
            'Best Idea',
            'Rising Star Product'
        ];
        for (const org of organizations) {
            for (let i = 0; i < awardsData.length; i++) {
                const award = new organization_awards_entity_1.OrganizationAwards();
                award.name = awardsData[i];
                award.year = faker.random
                    .number({ min: 1990, max: 2020 })
                    .toString();
                award.organization = org;
                award.tenant = tenant;
                awards.push(award);
            }
        }
    }
    return await connection.manager.save(awards);
};


/***/ }),

/***/ "./src/app/organization-awards/organization-awards.service.ts":
/*!********************************************************************!*\
  !*** ./src/app/organization-awards/organization-awards.service.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationAwardsService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const organization_awards_entity_1 = __webpack_require__(/*! ./organization-awards.entity */ "./src/app/organization-awards/organization-awards.entity.ts");
let OrganizationAwardsService = class OrganizationAwardsService extends crud_service_1.CrudService {
    constructor(organizationAwardsRepository) {
        super(organizationAwardsRepository);
        this.organizationAwardsRepository = organizationAwardsRepository;
    }
};
OrganizationAwardsService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(organization_awards_entity_1.OrganizationAwards)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], OrganizationAwardsService);
exports.OrganizationAwardsService = OrganizationAwardsService;


/***/ }),

/***/ "./src/app/organization-contact/commands/handlers/index.ts":
/*!*****************************************************************!*\
  !*** ./src/app/organization-contact/commands/handlers/index.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const organization_contact_edit_by_employee_handler_1 = __webpack_require__(/*! ./organization-contact.edit-by-employee.handler */ "./src/app/organization-contact/commands/handlers/organization-contact.edit-by-employee.handler.ts");
const organization_contact_create_handler_1 = __webpack_require__(/*! ./organization-contact-create.handler */ "./src/app/organization-contact/commands/handlers/organization-contact-create.handler.ts");
exports.CommandHandlers = [
    organization_contact_edit_by_employee_handler_1.OrganizationContactEditByEmployeeHandler,
    organization_contact_create_handler_1.OrganizationContactCreateHandler
];


/***/ }),

/***/ "./src/app/organization-contact/commands/handlers/organization-contact-create.handler.ts":
/*!***********************************************************************************************!*\
  !*** ./src/app/organization-contact/commands/handlers/organization-contact-create.handler.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationContactCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const organization_contact_create_command_1 = __webpack_require__(/*! ../organization-contact-create.command */ "./src/app/organization-contact/commands/organization-contact-create.command.ts");
const organization_contact_service_1 = __webpack_require__(/*! ../../organization-contact.service */ "./src/app/organization-contact/organization-contact.service.ts");
let OrganizationContactCreateHandler = class OrganizationContactCreateHandler {
    constructor(organizationContactService) {
        this.organizationContactService = organizationContactService;
    }
    async execute(command) {
        const { input } = command;
        return await this.organizationContactService.create(input);
    }
};
OrganizationContactCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(organization_contact_create_command_1.OrganizationContactCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof organization_contact_service_1.OrganizationContactService !== "undefined" && organization_contact_service_1.OrganizationContactService) === "function" ? _a : Object])
], OrganizationContactCreateHandler);
exports.OrganizationContactCreateHandler = OrganizationContactCreateHandler;


/***/ }),

/***/ "./src/app/organization-contact/commands/handlers/organization-contact.edit-by-employee.handler.ts":
/*!*********************************************************************************************************!*\
  !*** ./src/app/organization-contact/commands/handlers/organization-contact.edit-by-employee.handler.ts ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationContactEditByEmployeeHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const shared_1 = __webpack_require__(/*! ../../../shared */ "./src/app/shared/index.ts");
const organization_contact_service_1 = __webpack_require__(/*! ../../organization-contact.service */ "./src/app/organization-contact/organization-contact.service.ts");
const organization_contact_edit_by_employee_command_1 = __webpack_require__(/*! ../organization-contact.edit-by-employee.command */ "./src/app/organization-contact/commands/organization-contact.edit-by-employee.command.ts");
let OrganizationContactEditByEmployeeHandler = class OrganizationContactEditByEmployeeHandler extends shared_1.UpdateEntityByMembersHandler {
    constructor(organizationContactService) {
        super(organizationContactService);
        this.organizationContactService = organizationContactService;
    }
    async execute(command) {
        return this.executeCommand(command.input);
    }
};
OrganizationContactEditByEmployeeHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(organization_contact_edit_by_employee_command_1.OrganizationContactEditByEmployeeCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof organization_contact_service_1.OrganizationContactService !== "undefined" && organization_contact_service_1.OrganizationContactService) === "function" ? _a : Object])
], OrganizationContactEditByEmployeeHandler);
exports.OrganizationContactEditByEmployeeHandler = OrganizationContactEditByEmployeeHandler;


/***/ }),

/***/ "./src/app/organization-contact/commands/organization-contact-create.command.ts":
/*!**************************************************************************************!*\
  !*** ./src/app/organization-contact/commands/organization-contact-create.command.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationContactCreateCommand = void 0;
class OrganizationContactCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.OrganizationContactCreateCommand = OrganizationContactCreateCommand;
OrganizationContactCreateCommand.type = '[OrganizationContact] Create Organization Contact';


/***/ }),

/***/ "./src/app/organization-contact/commands/organization-contact.edit-by-employee.command.ts":
/*!************************************************************************************************!*\
  !*** ./src/app/organization-contact/commands/organization-contact.edit-by-employee.command.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationContactEditByEmployeeCommand = void 0;
class OrganizationContactEditByEmployeeCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.OrganizationContactEditByEmployeeCommand = OrganizationContactEditByEmployeeCommand;
OrganizationContactEditByEmployeeCommand.type = '[OrganizationContact] Edit By Employee';


/***/ }),

/***/ "./src/app/organization-contact/organization-contact.controller.ts":
/*!*************************************************************************!*\
  !*** ./src/app/organization-contact/organization-contact.controller.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationContactController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const organization_contact_edit_by_employee_command_1 = __webpack_require__(/*! ./commands/organization-contact.edit-by-employee.command */ "./src/app/organization-contact/commands/organization-contact.edit-by-employee.command.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ./organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const organization_contact_service_1 = __webpack_require__(/*! ./organization-contact.service */ "./src/app/organization-contact/organization-contact.service.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const parse_json_pipe_1 = __webpack_require__(/*! ../shared/pipes/parse-json.pipe */ "./src/app/shared/pipes/parse-json.pipe.ts");
let OrganizationContactController = class OrganizationContactController extends crud_controller_1.CrudController {
    constructor(organizationContactService, commandBus) {
        super(organizationContactService);
        this.organizationContactService = organizationContactService;
        this.commandBus = commandBus;
    }
    async findByEmployee(id, data) {
        return this.organizationContactService.findByEmployee(id, data);
    }
    async findAllOrganizationContacts(data) {
        return this.organizationContactService.findAllOrganizationContacts(data);
    }
    async updateEmployee(entity) {
        return this.commandBus.execute(new organization_contact_edit_by_employee_command_1.OrganizationContactEditByEmployeeCommand(entity));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all organization projects by Employee.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found projects',
        type: organization_contact_entity_1.OrganizationContact
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('employee/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], OrganizationContactController.prototype, "findByEmployee", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all organization contacts recurring expense.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found contacts recurring expense',
        type: organization_contact_entity_1.OrganizationContact
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], OrganizationContactController.prototype, "findAllOrganizationContacts", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_EMPLOYEES_EDIT),
    common_1.Put('employee'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.IEditEntityByMemberInput !== "undefined" && models_1.IEditEntityByMemberInput) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], OrganizationContactController.prototype, "updateEmployee", null);
OrganizationContactController = tslib_1.__decorate([
    swagger_1.ApiTags('OrganizationContact'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof organization_contact_service_1.OrganizationContactService !== "undefined" && organization_contact_service_1.OrganizationContactService) === "function" ? _e : Object, typeof (_f = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _f : Object])
], OrganizationContactController);
exports.OrganizationContactController = OrganizationContactController;


/***/ }),

/***/ "./src/app/organization-contact/organization-contact.entity.ts":
/*!*********************************************************************!*\
  !*** ./src/app/organization-contact/organization-contact.entity.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationContact = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const invoice_entity_1 = __webpack_require__(/*! ../invoice/invoice.entity */ "./src/app/invoice/invoice.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const contact_entity_1 = __webpack_require__(/*! ../contact/contact.entity */ "./src/app/contact/contact.entity.ts");
const payment_entity_1 = __webpack_require__(/*! ../payment/payment.entity */ "./src/app/payment/payment.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
const proposal_entity_1 = __webpack_require__(/*! ../proposal/proposal.entity */ "./src/app/proposal/proposal.entity.ts");
let OrganizationContact = class OrganizationContact extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty(),
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.organizationContact),
    typeorm_1.JoinTable({
        name: 'tag_organization_contact'
    }),
    tslib_1.__metadata("design:type", Array)
], OrganizationContact.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: contact_entity_1.Contact }),
    typeorm_1.ManyToOne(() => contact_entity_1.Contact, (contact) => contact.organization_contacts, {
        cascade: true,
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IContact !== "undefined" && models_1.IContact) === "function" ? _a : Object)
], OrganizationContact.prototype, "contact", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((organizationContact) => organizationContact.contact),
    tslib_1.__metadata("design:type", String)
], OrganizationContact.prototype, "contactId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationContact.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsEmail(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationContact.prototype, "primaryEmail", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String, isArray: true }),
    tslib_1.__metadata("design:type", Array)
], OrganizationContact.prototype, "emailAddresses", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationContact.prototype, "primaryPhone", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String, isArray: true }),
    tslib_1.__metadata("design:type", Array)
], OrganizationContact.prototype, "phones", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.ContactOrganizationInviteStatus }),
    class_validator_1.IsEnum(models_1.ContactOrganizationInviteStatus),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationContact.prototype, "inviteStatus", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: organization_projects_entity_1.OrganizationProject, isArray: true }),
    typeorm_1.OneToMany((type) => organization_projects_entity_1.OrganizationProject, (project) => project.organizationContact),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], OrganizationContact.prototype, "projects", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: invoice_entity_1.Invoice, isArray: true }),
    typeorm_1.OneToMany((type) => invoice_entity_1.Invoice, (invoices) => invoices.toContact),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], OrganizationContact.prototype, "invoices", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationContact.prototype, "notes", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => employee_entity_1.Employee, { cascade: ['update'] }),
    typeorm_1.JoinTable({
        name: 'organization_contact_employee'
    }),
    tslib_1.__metadata("design:type", Array)
], OrganizationContact.prototype, "members", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.ContactType }),
    class_validator_1.IsEnum(models_1.ContactType),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], OrganizationContact.prototype, "contactType", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String, maxLength: 500 }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ length: 500, nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationContact.prototype, "imageUrl", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: payment_entity_1.Payment, isArray: true }),
    typeorm_1.OneToMany((type) => payment_entity_1.Payment, (payment) => payment.contact, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], OrganizationContact.prototype, "payments", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: proposal_entity_1.Proposal, isArray: true }),
    typeorm_1.OneToMany((type) => proposal_entity_1.Proposal, (proposal) => proposal.organizationContact),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], OrganizationContact.prototype, "proposals", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], OrganizationContact.prototype, "budget", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({
        type: 'text',
        nullable: true,
        default: models_1.OrganizationContactBudgetTypeEnum.COST
    }),
    tslib_1.__metadata("design:type", typeof (_b = typeof models_1.OrganizationContactBudgetTypeEnum !== "undefined" && models_1.OrganizationContactBudgetTypeEnum) === "function" ? _b : Object)
], OrganizationContact.prototype, "budgetType", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationContact.prototype, "createdBy", void 0);
OrganizationContact = tslib_1.__decorate([
    typeorm_1.Entity('organization_contact')
], OrganizationContact);
exports.OrganizationContact = OrganizationContact;


/***/ }),

/***/ "./src/app/organization-contact/organization-contact.module.ts":
/*!*********************************************************************!*\
  !*** ./src/app/organization-contact/organization-contact.module.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationContactModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const organization_contact_entity_1 = __webpack_require__(/*! ./organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const organization_contact_controller_1 = __webpack_require__(/*! ./organization-contact.controller */ "./src/app/organization-contact/organization-contact.controller.ts");
const organization_contact_service_1 = __webpack_require__(/*! ./organization-contact.service */ "./src/app/organization-contact/organization-contact.service.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/organization-contact/commands/handlers/index.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const email_1 = __webpack_require__(/*! ../email */ "./src/app/email/index.ts");
const email_template_1 = __webpack_require__(/*! ../email-template */ "./src/app/email-template/index.ts");
const organization_service_1 = __webpack_require__(/*! ../organization/organization.service */ "./src/app/organization/organization.service.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let OrganizationContactModule = class OrganizationContactModule {
};
OrganizationContactModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([
                organization_contact_entity_1.OrganizationContact,
                organization_entity_1.Organization,
                user_entity_1.User,
                email_1.Email,
                email_template_1.EmailTemplate
            ]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [organization_contact_controller_1.OrganizationContactController],
        providers: [
            organization_contact_service_1.OrganizationContactService,
            user_service_1.UserService,
            email_1.EmailService,
            organization_service_1.OrganizationService,
            ...handlers_1.CommandHandlers
        ],
        exports: [organization_contact_service_1.OrganizationContactService]
    })
], OrganizationContactModule);
exports.OrganizationContactModule = OrganizationContactModule;


/***/ }),

/***/ "./src/app/organization-contact/organization-contact.seed.ts":
/*!*******************************************************************!*\
  !*** ./src/app/organization-contact/organization-contact.seed.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomOrganizationContact = exports.createDefaultOrganizationContact = void 0;
const tenant_entity_1 = __webpack_require__(/*! ../tenant/tenant.entity */ "./src/app/tenant/tenant.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ./organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const contact_entity_1 = __webpack_require__(/*! ../contact/contact.entity */ "./src/app/contact/contact.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const _ = __webpack_require__(/*! underscore */ "underscore");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
exports.createDefaultOrganizationContact = async (connection) => {
    const tenants = await connection.getRepository(tenant_entity_1.Tenant).find();
    const organizationContacts = [];
    const contactTypes = Object.values(models_1.ContactType);
    const contactInvitationTypes = Object.values(models_1.ContactOrganizationInviteStatus);
    const contacts = await connection.manager.find(contact_entity_1.Contact);
    for (const tenant of tenants) {
        const organizations = await connection
            .getRepository(organization_entity_1.Organization)
            .find({
            where: { tenant: tenant },
            relations: ['employees', 'tags']
        });
        for (const org of organizations) {
            const employees = org.employees;
            const tags = org.tags;
            for (let i = 0; i < faker.random.number({ min: 5, max: 6 }); i++) {
                const orgContact = new organization_contact_entity_1.OrganizationContact();
                const contact = faker.random.arrayElement(contacts);
                orgContact.contact = contact;
                orgContact.organizationId = org.id;
                orgContact.organization = org;
                orgContact.contactType = faker.random.arrayElement(contactTypes);
                orgContact.emailAddresses = [
                    faker.internet.email(contact.firstName, contact.lastName)
                ];
                orgContact.inviteStatus = faker.random.arrayElement(contactInvitationTypes);
                orgContact.members = _.chain(employees)
                    .shuffle()
                    .take(faker.random.number({ min: 1, max: 3 }))
                    .values()
                    .value();
                orgContact.name = contact.name;
                orgContact.phones = [faker.phone.phoneNumber()];
                orgContact.primaryEmail = orgContact.emailAddresses[0];
                orgContact.primaryPhone = orgContact.phones[0];
                orgContact.tenant = tenant;
                orgContact.imageUrl = core_1.getDummyImage(330, 300, orgContact.name.charAt(0).toUpperCase());
                orgContact.tags = _.chain(tags)
                    .shuffle()
                    .take(faker.random.number({ min: 1, max: 2 }))
                    .values()
                    .value();
                organizationContacts.push(orgContact);
            }
        }
    }
    return await connection.manager.save(organizationContacts);
};
exports.createRandomOrganizationContact = async (connection, tenants, tenantEmployeeMap, tenantOrganizationsMap, noOfContactsPerOrganization) => {
    const organizationContacts = [];
    const contactTypes = Object.values(models_1.ContactType);
    const contactInvitationTypes = Object.values(models_1.ContactOrganizationInviteStatus);
    const contacts = await connection.manager.find(contact_entity_1.Contact);
    for (const tenant of tenants) {
        const organizations = tenantOrganizationsMap.get(tenant);
        const employees = tenantEmployeeMap.get(tenant);
        for (const org of organizations) {
            const tags = await connection.manager.find(tag_entity_1.Tag, {
                where: [{ organization: org }]
            });
            for (let i = 0; i < noOfContactsPerOrganization; i++) {
                const orgContact = new organization_contact_entity_1.OrganizationContact();
                orgContact.contact = faker.random.arrayElement(contacts);
                orgContact.organization = org;
                orgContact.contactType = faker.random.arrayElement(contactTypes);
                orgContact.emailAddresses = [
                    faker.internet.email(orgContact.contact.firstName, orgContact.contact.lastName)
                ];
                orgContact.inviteStatus = faker.random.arrayElement(contactInvitationTypes);
                orgContact.members = _.chain(employees)
                    .shuffle()
                    .take(faker.random.number({ min: 1, max: 3 }))
                    .values()
                    .value();
                orgContact.name = orgContact.contact.name;
                orgContact.phones = [faker.phone.phoneNumber()];
                orgContact.primaryEmail = orgContact.emailAddresses[0];
                orgContact.primaryPhone = orgContact.phones[0];
                orgContact.tenant = tenant;
                orgContact.imageUrl = core_1.getDummyImage(330, 300, orgContact.name.charAt(0).toUpperCase());
                orgContact.tags = _.chain(tags)
                    .shuffle()
                    .take(faker.random.number({ min: 1, max: 2 }))
                    .values()
                    .value();
                organizationContacts.push(orgContact);
            }
        }
    }
    await connection.manager.save(organizationContacts);
    return organizationContacts;
};


/***/ }),

/***/ "./src/app/organization-contact/organization-contact.service.ts":
/*!**********************************************************************!*\
  !*** ./src/app/organization-contact/organization-contact.service.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationContactService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ./organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
let OrganizationContactService = class OrganizationContactService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(organizationContactRepository) {
        super(organizationContactRepository);
        this.organizationContactRepository = organizationContactRepository;
    }
    async findByEmployee(id, data) {
        const { findInput = null } = data;
        const query = this.organizationContactRepository
            .createQueryBuilder('organization_contact')
            .leftJoin('organization_contact.members', 'member')
            .where('member.id = :id', { id });
        if (findInput) {
            const { organizationId, tenantId } = findInput;
            query
                .andWhere(`${query.alias}.organizationId = :organizationId`, {
                organizationId
            })
                .andWhere(`${query.alias}.tenantId = :tenantId`, {
                tenantId
            });
        }
        return await query.getMany();
    }
    async findAllOrganizationContacts(data) {
        const { relations, findInput } = data;
        if (findInput && findInput['employeeId']) {
            return await this.getOrganizationContactByEmployee(data);
        }
        return this.findAll({
            where: findInput,
            relations
        });
    }
    async getOrganizationContactByEmployee(data) {
        const { relations, findInput } = data;
        const { employeeId, organizationId, contactType } = findInput;
        const { tenantId, id: createdBy } = context_1.RequestContext.currentUser();
        const query = this.organizationContactRepository.createQueryBuilder('organization_contact');
        if (relations.length > 0) {
            relations.forEach((relation) => {
                if (relation.indexOf('.') !== -1) {
                    const alias = relation.split('.').slice(-1)[0];
                    query.leftJoinAndSelect(`${relation}`, alias);
                }
                else {
                    const alias = relation;
                    query.leftJoinAndSelect(`${query.alias}.${relation}`, alias);
                }
            });
        }
        query.where(new typeorm_2.Brackets((subQuery) => {
            subQuery
                .where('members.id =:employeeId', { employeeId })
                .orWhere(`${query.alias}.createdBy = :createdBy`, {
                createdBy
            });
        }));
        query.andWhere(`${query.alias}.contactType = :contactType`, {
            contactType
        });
        if (organizationId) {
            query.andWhere(`${query.alias}.organizationId = :organizationId`, {
                organizationId
            });
        }
        query.andWhere(`${query.alias}.tenantId = :tenantId`, {
            tenantId
        });
        const [items, total] = await query.getManyAndCount();
        return { items, total };
    }
};
OrganizationContactService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(organization_contact_entity_1.OrganizationContact)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], OrganizationContactService);
exports.OrganizationContactService = OrganizationContactService;


/***/ }),

/***/ "./src/app/organization-department/commands/handlers/index.ts":
/*!********************************************************************!*\
  !*** ./src/app/organization-department/commands/handlers/index.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const organization_department_edit_by_employee_handler_1 = __webpack_require__(/*! ./organization-department.edit-by-employee.handler */ "./src/app/organization-department/commands/handlers/organization-department.edit-by-employee.handler.ts");
const organization_department_update_handler_1 = __webpack_require__(/*! ./organization-department.update.handler */ "./src/app/organization-department/commands/handlers/organization-department.update.handler.ts");
exports.CommandHandlers = [
    organization_department_edit_by_employee_handler_1.OrganizationDepartmentEditByEmployeeHandler,
    organization_department_update_handler_1.OrganizationDepartmentUpdateHandler
];


/***/ }),

/***/ "./src/app/organization-department/commands/handlers/organization-department.edit-by-employee.handler.ts":
/*!***************************************************************************************************************!*\
  !*** ./src/app/organization-department/commands/handlers/organization-department.edit-by-employee.handler.ts ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationDepartmentEditByEmployeeHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const organization_department_edit_by_employee_command_1 = __webpack_require__(/*! ../organization-department.edit-by-employee.command */ "./src/app/organization-department/commands/organization-department.edit-by-employee.command.ts");
const organization_department_service_1 = __webpack_require__(/*! ../../organization-department.service */ "./src/app/organization-department/organization-department.service.ts");
const shared_1 = __webpack_require__(/*! ../../../shared */ "./src/app/shared/index.ts");
let OrganizationDepartmentEditByEmployeeHandler = class OrganizationDepartmentEditByEmployeeHandler extends shared_1.UpdateEntityByMembersHandler {
    constructor(organizationDepartmentService) {
        super(organizationDepartmentService);
        this.organizationDepartmentService = organizationDepartmentService;
    }
    async execute(command) {
        return this.executeCommand(command.input);
    }
};
OrganizationDepartmentEditByEmployeeHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(organization_department_edit_by_employee_command_1.OrganizationDepartmentEditByEmployeeCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof organization_department_service_1.OrganizationDepartmentService !== "undefined" && organization_department_service_1.OrganizationDepartmentService) === "function" ? _a : Object])
], OrganizationDepartmentEditByEmployeeHandler);
exports.OrganizationDepartmentEditByEmployeeHandler = OrganizationDepartmentEditByEmployeeHandler;


/***/ }),

/***/ "./src/app/organization-department/commands/handlers/organization-department.update.handler.ts":
/*!*****************************************************************************************************!*\
  !*** ./src/app/organization-department/commands/handlers/organization-department.update.handler.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationDepartmentUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const organization_department_service_1 = __webpack_require__(/*! ../../organization-department.service */ "./src/app/organization-department/organization-department.service.ts");
const organization_department_update_command_1 = __webpack_require__(/*! ../organization-department.update.command */ "./src/app/organization-department/commands/organization-department.update.command.ts");
let OrganizationDepartmentUpdateHandler = class OrganizationDepartmentUpdateHandler {
    constructor(organizationDepartmentService) {
        this.organizationDepartmentService = organizationDepartmentService;
    }
    async execute(command) {
        const { id, input } = command;
        return this.organizationDepartmentService.create(Object.assign({ id }, input));
    }
};
OrganizationDepartmentUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(organization_department_update_command_1.OrganizationDepartmentUpdateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof organization_department_service_1.OrganizationDepartmentService !== "undefined" && organization_department_service_1.OrganizationDepartmentService) === "function" ? _a : Object])
], OrganizationDepartmentUpdateHandler);
exports.OrganizationDepartmentUpdateHandler = OrganizationDepartmentUpdateHandler;


/***/ }),

/***/ "./src/app/organization-department/commands/organization-department.edit-by-employee.command.ts":
/*!******************************************************************************************************!*\
  !*** ./src/app/organization-department/commands/organization-department.edit-by-employee.command.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationDepartmentEditByEmployeeCommand = void 0;
class OrganizationDepartmentEditByEmployeeCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.OrganizationDepartmentEditByEmployeeCommand = OrganizationDepartmentEditByEmployeeCommand;
OrganizationDepartmentEditByEmployeeCommand.type = '[OrganizationDepartment] Edit By Employee';


/***/ }),

/***/ "./src/app/organization-department/commands/organization-department.update.command.ts":
/*!********************************************************************************************!*\
  !*** ./src/app/organization-department/commands/organization-department.update.command.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationDepartmentUpdateCommand = void 0;
class OrganizationDepartmentUpdateCommand {
    constructor(id, input) {
        this.id = id;
        this.input = input;
    }
}
exports.OrganizationDepartmentUpdateCommand = OrganizationDepartmentUpdateCommand;
OrganizationDepartmentUpdateCommand.type = '[OrganizationDepartment] Update';


/***/ }),

/***/ "./src/app/organization-department/default-organization-departments.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/organization-department/default-organization-departments.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_ORGANIZATION_DEPARTMENTS = void 0;
exports.DEFAULT_ORGANIZATION_DEPARTMENTS = [
    'Designers',
    'QA',
    'Engineering',
    'Management',
    'Sales',
    'Marketing',
    'Frontend Developers',
    'Backend Developers'
];


/***/ }),

/***/ "./src/app/organization-department/organization-department.controller.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/organization-department/organization-department.controller.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationDepartmentController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const organization_department_edit_by_employee_command_1 = __webpack_require__(/*! ./commands/organization-department.edit-by-employee.command */ "./src/app/organization-department/commands/organization-department.edit-by-employee.command.ts");
const organization_department_update_command_1 = __webpack_require__(/*! ./commands/organization-department.update.command */ "./src/app/organization-department/commands/organization-department.update.command.ts");
const organization_department_entity_1 = __webpack_require__(/*! ./organization-department.entity */ "./src/app/organization-department/organization-department.entity.ts");
const organization_department_service_1 = __webpack_require__(/*! ./organization-department.service */ "./src/app/organization-department/organization-department.service.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let OrganizationDepartmentController = class OrganizationDepartmentController extends crud_controller_1.CrudController {
    constructor(organizationDepartmentService, commandBus) {
        super(organizationDepartmentService);
        this.organizationDepartmentService = organizationDepartmentService;
        this.commandBus = commandBus;
    }
    async findByEmployee(id) {
        return this.organizationDepartmentService.findByEmployee(id);
    }
    async findAllOrganizationDepartments(data) {
        const { findInput, relations } = JSON.parse(data);
        return this.organizationDepartmentService.findAll({
            where: findInput,
            relations
        });
    }
    async updateEmployee(entity) {
        return this.commandBus.execute(new organization_department_edit_by_employee_command_1.OrganizationDepartmentEditByEmployeeCommand(entity));
    }
    async update(id, entity) {
        return this.commandBus.execute(new organization_department_update_command_1.OrganizationDepartmentUpdateCommand(id, entity));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all organization departments.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found departments',
        type: organization_department_entity_1.OrganizationDepartment
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('employee/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], OrganizationDepartmentController.prototype, "findByEmployee", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all organization departments.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found departments',
        type: organization_department_entity_1.OrganizationDepartment
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], OrganizationDepartmentController.prototype, "findAllOrganizationDepartments", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_EMPLOYEES_EDIT),
    common_1.Put('employee'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.IEditEntityByMemberInput !== "undefined" && models_1.IEditEntityByMemberInput) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], OrganizationDepartmentController.prototype, "updateEmployee", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_e = typeof models_1.IOrganizationDepartmentCreateInput !== "undefined" && models_1.IOrganizationDepartmentCreateInput) === "function" ? _e : Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], OrganizationDepartmentController.prototype, "update", null);
OrganizationDepartmentController = tslib_1.__decorate([
    swagger_1.ApiTags('OrganizationDepartment'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_g = typeof organization_department_service_1.OrganizationDepartmentService !== "undefined" && organization_department_service_1.OrganizationDepartmentService) === "function" ? _g : Object, typeof (_h = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _h : Object])
], OrganizationDepartmentController);
exports.OrganizationDepartmentController = OrganizationDepartmentController;


/***/ }),

/***/ "./src/app/organization-department/organization-department.entity.ts":
/*!***************************************************************************!*\
  !*** ./src/app/organization-department/organization-department.entity.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationDepartment = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
const candidate_entity_1 = __webpack_require__(/*! ../candidate/candidate.entity */ "./src/app/candidate/candidate.entity.ts");
let OrganizationDepartment = class OrganizationDepartment extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty(),
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.organizationDepartment),
    typeorm_1.JoinTable({
        name: 'tag_organization_department'
    }),
    tslib_1.__metadata("design:type", Array)
], OrganizationDepartment.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationDepartment.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationDepartment.prototype, "organizationId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => employee_entity_1.Employee, (employee) => employee.organizationDepartments, { cascade: ['update'] }),
    typeorm_1.JoinTable({
        name: 'organization_department_employee'
    }),
    tslib_1.__metadata("design:type", Array)
], OrganizationDepartment.prototype, "members", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => organization_entity_1.Organization, (organization) => organization.id),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IOrganization !== "undefined" && models_1.IOrganization) === "function" ? _a : Object)
], OrganizationDepartment.prototype, "organization", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => candidate_entity_1.Candidate, (candidate) => candidate.organizationDepartments, { cascade: ['update'] }),
    typeorm_1.JoinTable({
        name: 'candidate_department'
    }),
    tslib_1.__metadata("design:type", Array)
], OrganizationDepartment.prototype, "candidates", void 0);
OrganizationDepartment = tslib_1.__decorate([
    typeorm_1.Entity('organization_department')
], OrganizationDepartment);
exports.OrganizationDepartment = OrganizationDepartment;


/***/ }),

/***/ "./src/app/organization-department/organization-department.module.ts":
/*!***************************************************************************!*\
  !*** ./src/app/organization-department/organization-department.module.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationDepartmentModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const organization_department_entity_1 = __webpack_require__(/*! ./organization-department.entity */ "./src/app/organization-department/organization-department.entity.ts");
const organization_department_controller_1 = __webpack_require__(/*! ./organization-department.controller */ "./src/app/organization-department/organization-department.controller.ts");
const organization_department_service_1 = __webpack_require__(/*! ./organization-department.service */ "./src/app/organization-department/organization-department.service.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/organization-department/commands/handlers/index.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let OrganizationDepartmentModule = class OrganizationDepartmentModule {
};
OrganizationDepartmentModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([organization_department_entity_1.OrganizationDepartment, user_entity_1.User]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [organization_department_controller_1.OrganizationDepartmentController],
        providers: [organization_department_service_1.OrganizationDepartmentService, user_service_1.UserService, ...handlers_1.CommandHandlers],
        exports: [organization_department_service_1.OrganizationDepartmentService]
    })
], OrganizationDepartmentModule);
exports.OrganizationDepartmentModule = OrganizationDepartmentModule;


/***/ }),

/***/ "./src/app/organization-department/organization-department.seed.ts":
/*!*************************************************************************!*\
  !*** ./src/app/organization-department/organization-department.seed.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.seedRandomOrganizationDepartments = exports.createDefaultOrganizationDepartments = void 0;
const organization_department_entity_1 = __webpack_require__(/*! ./organization-department.entity */ "./src/app/organization-department/organization-department.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const default_organization_departments_1 = __webpack_require__(/*! ./default-organization-departments */ "./src/app/organization-department/default-organization-departments.ts");
exports.createDefaultOrganizationDepartments = async (connection, defaultOrganizations) => {
    const tag = await connection.getRepository(tag_entity_1.Tag).create({
        name: 'API',
        description: '',
        color: faker.commerce.color()
    });
    const departments = [];
    for (const defaultOrganization of defaultOrganizations) {
        default_organization_departments_1.DEFAULT_ORGANIZATION_DEPARTMENTS.forEach((name) => {
            const department = new organization_department_entity_1.OrganizationDepartment();
            department.tags = [tag];
            department.name = name;
            department.organizationId = defaultOrganization.id;
            department.tenant = defaultOrganization.tenant;
            departments.push(department);
        });
    }
    return await connection.manager.save(departments);
};
exports.seedRandomOrganizationDepartments = async (connection, tenants, tenantOrganizationsMap) => {
    let departments = [];
    for (const tenant of tenants) {
        const organizations = tenantOrganizationsMap.get(tenant);
        organizations.forEach(({ id: organizationId }) => {
            const organizationDepartments = default_organization_departments_1.DEFAULT_ORGANIZATION_DEPARTMENTS.map((name) => {
                const employmentDepartment = new organization_department_entity_1.OrganizationDepartment();
                employmentDepartment.name = name;
                employmentDepartment.organizationId = organizationId;
                employmentDepartment.tenant = tenant;
                return employmentDepartment;
            });
            departments = [...departments, ...organizationDepartments];
        });
        await insertEmploymentDepartment(connection, departments);
    }
};
const insertEmploymentDepartment = async (connection, employmentDepartment) => {
    await connection.manager.save(employmentDepartment);
};


/***/ }),

/***/ "./src/app/organization-department/organization-department.service.ts":
/*!****************************************************************************!*\
  !*** ./src/app/organization-department/organization-department.service.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationDepartmentService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const organization_department_entity_1 = __webpack_require__(/*! ./organization-department.entity */ "./src/app/organization-department/organization-department.entity.ts");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
let OrganizationDepartmentService = class OrganizationDepartmentService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(organizationDepartmentRepository) {
        super(organizationDepartmentRepository);
        this.organizationDepartmentRepository = organizationDepartmentRepository;
    }
    async findByEmployee(id) {
        return await this.organizationDepartmentRepository
            .createQueryBuilder('organization_department')
            .leftJoin('organization_department.members', 'member')
            .where('member.id = :id', { id })
            .getMany();
    }
};
OrganizationDepartmentService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(organization_department_entity_1.OrganizationDepartment)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], OrganizationDepartmentService);
exports.OrganizationDepartmentService = OrganizationDepartmentService;


/***/ }),

/***/ "./src/app/organization-documents/organization-documents.controler.ts":
/*!****************************************************************************!*\
  !*** ./src/app/organization-documents/organization-documents.controler.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationDocumentsController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const organization_documents_entity_1 = __webpack_require__(/*! ./organization-documents.entity */ "./src/app/organization-documents/organization-documents.entity.ts");
const organization_documents_service_1 = __webpack_require__(/*! ./organization-documents.service */ "./src/app/organization-documents/organization-documents.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let OrganizationDocumentsController = class OrganizationDocumentsController extends core_1.CrudController {
    constructor(organizationDocumentsService) {
        super(organizationDocumentsService);
        this.organizationDocumentsService = organizationDocumentsService;
    }
    async findDocument(data) {
        const { findInput } = JSON.parse(data);
        return this.organizationDocumentsService.findAll({ where: findInput });
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all organization documents.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found candidate document',
        type: organization_documents_entity_1.OrganizationDocuments
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], OrganizationDocumentsController.prototype, "findDocument", null);
OrganizationDocumentsController = tslib_1.__decorate([
    swagger_1.ApiTags('OrganizationDocuments'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof organization_documents_service_1.OrganizationDocumentsService !== "undefined" && organization_documents_service_1.OrganizationDocumentsService) === "function" ? _b : Object])
], OrganizationDocumentsController);
exports.OrganizationDocumentsController = OrganizationDocumentsController;


/***/ }),

/***/ "./src/app/organization-documents/organization-documents.entity.ts":
/*!*************************************************************************!*\
  !*** ./src/app/organization-documents/organization-documents.entity.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationDocuments = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let OrganizationDocuments = class OrganizationDocuments extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationDocuments.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationDocuments.prototype, "documentUrl", void 0);
OrganizationDocuments = tslib_1.__decorate([
    typeorm_1.Entity('organization_document')
], OrganizationDocuments);
exports.OrganizationDocuments = OrganizationDocuments;


/***/ }),

/***/ "./src/app/organization-documents/organization-documents.module.ts":
/*!*************************************************************************!*\
  !*** ./src/app/organization-documents/organization-documents.module.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationDocumentsModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const organization_documents_entity_1 = __webpack_require__(/*! ./organization-documents.entity */ "./src/app/organization-documents/organization-documents.entity.ts");
const organization_documents_service_1 = __webpack_require__(/*! ./organization-documents.service */ "./src/app/organization-documents/organization-documents.service.ts");
const organization_documents_controler_1 = __webpack_require__(/*! ./organization-documents.controler */ "./src/app/organization-documents/organization-documents.controler.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let OrganizationDocumentsModule = class OrganizationDocumentsModule {
};
OrganizationDocumentsModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([organization_documents_entity_1.OrganizationDocuments]), tenant_module_1.TenantModule],
        providers: [organization_documents_service_1.OrganizationDocumentsService],
        controllers: [organization_documents_controler_1.OrganizationDocumentsController],
        exports: [typeorm_1.TypeOrmModule]
    })
], OrganizationDocumentsModule);
exports.OrganizationDocumentsModule = OrganizationDocumentsModule;


/***/ }),

/***/ "./src/app/organization-documents/organization-documents.seed.ts":
/*!***********************************************************************!*\
  !*** ./src/app/organization-documents/organization-documents.seed.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomOrganizationDocuments = exports.createOrganizationDocuments = void 0;
const organization_documents_entity_1 = __webpack_require__(/*! ./organization-documents.entity */ "./src/app/organization-documents/organization-documents.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
exports.createOrganizationDocuments = async (connection, tenant, organizations) => {
    const documents = [];
    for (const organization of organizations) {
        const requestPaidDaysOff = new organization_documents_entity_1.OrganizationDocuments();
        const requestUnpaidDaysOff = new organization_documents_entity_1.OrganizationDocuments();
        requestPaidDaysOff.name = 'Paid Days off Request';
        requestPaidDaysOff.organizationId = organization.id;
        requestPaidDaysOff.tenant = tenant;
        requestPaidDaysOff.documentUrl =
            'http://res.cloudinary.com/evereq/image/upload/v1595424362/everbie-products-images/qanadywgn3gxte7kwtwu.pdf';
        requestUnpaidDaysOff.name = 'Unpaid Days off Request';
        requestUnpaidDaysOff.documentUrl =
            'http://res.cloudinary.com/evereq/image/upload/v1595506200/everbie-products-images/am3ujibzu660swicfcsw.pdf';
        requestUnpaidDaysOff.organizationId = organization.id;
        requestUnpaidDaysOff.tenant = tenant;
        documents.push(requestPaidDaysOff);
        documents.push(requestUnpaidDaysOff);
    }
    return await connection.manager.save(documents);
};
exports.createRandomOrganizationDocuments = async (connection, tenants, tenantOrganizationsMap) => {
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, Organization Documents will not be created');
        return;
    }
    const organizationDocuments = [];
    const json = {
        'Paid Days off Request': 'http://res.cloudinary.com/evereq/image/upload/v1595424362/everbie-products-images/qanadywgn3gxte7kwtwu.pdf',
        'Unpaid Days off Request': 'http://res.cloudinary.com/evereq/image/upload/v1595506200/everbie-products-images/am3ujibzu660swicfcsw.pdf'
    };
    for (const tenant of tenants) {
        const tenantOrgs = tenantOrganizationsMap.get(tenant);
        for (const tenantOrg of tenantOrgs) {
            const organizationDocument = new organization_documents_entity_1.OrganizationDocuments();
            organizationDocument.name = faker.random.arrayElement([
                'Paid Days off Request',
                'Unpaid Days off Request'
            ]);
            organizationDocument.organizationId = tenantOrg.id;
            organizationDocument.tenant = tenant;
            organizationDocument.documentUrl = json[organizationDocument.name];
            organizationDocuments.push(organizationDocument);
        }
    }
    await connection.manager.save(organizationDocuments);
};


/***/ }),

/***/ "./src/app/organization-documents/organization-documents.service.ts":
/*!**************************************************************************!*\
  !*** ./src/app/organization-documents/organization-documents.service.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationDocumentsService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const organization_documents_entity_1 = __webpack_require__(/*! ./organization-documents.entity */ "./src/app/organization-documents/organization-documents.entity.ts");
let OrganizationDocumentsService = class OrganizationDocumentsService extends crud_service_1.CrudService {
    constructor(candidateDocumentRepository) {
        super(candidateDocumentRepository);
        this.candidateDocumentRepository = candidateDocumentRepository;
    }
};
OrganizationDocumentsService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(organization_documents_entity_1.OrganizationDocuments)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], OrganizationDocumentsService);
exports.OrganizationDocumentsService = OrganizationDocumentsService;


/***/ }),

/***/ "./src/app/organization-employment-type/organization-employment-type.controller.ts":
/*!*****************************************************************************************!*\
  !*** ./src/app/organization-employment-type/organization-employment-type.controller.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationEmploymentTypeController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_1 = __webpack_require__(/*! ../core/crud */ "./src/app/core/crud/index.ts");
const organization_employment_type_entity_1 = __webpack_require__(/*! ./organization-employment-type.entity */ "./src/app/organization-employment-type/organization-employment-type.entity.ts");
const organization_employment_type_service_1 = __webpack_require__(/*! ./organization-employment-type.service */ "./src/app/organization-employment-type/organization-employment-type.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let OrganizationEmploymentTypeController = class OrganizationEmploymentTypeController extends crud_1.CrudController {
    constructor(organizationEmploymentTypeService) {
        super(organizationEmploymentTypeService);
        this.organizationEmploymentTypeService = organizationEmploymentTypeService;
    }
    async findAllOrganizationEmploymentTypes(data) {
        const { findInput, relations } = JSON.parse(data);
        return this.organizationEmploymentTypeService.findAll({
            where: findInput,
            relations
        });
    }
    async updateOrganizationExpenseCategories(id, entity, ...options) {
        return this.organizationEmploymentTypeService.create(Object.assign({ id }, entity));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all organization employment types.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found employment types',
        type: organization_employment_type_entity_1.OrganizationEmploymentType
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], OrganizationEmploymentTypeController.prototype, "findAllOrganizationEmploymentTypes", null);
tslib_1.__decorate([
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_b = typeof organization_employment_type_entity_1.OrganizationEmploymentType !== "undefined" && organization_employment_type_entity_1.OrganizationEmploymentType) === "function" ? _b : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], OrganizationEmploymentTypeController.prototype, "updateOrganizationExpenseCategories", null);
OrganizationEmploymentTypeController = tslib_1.__decorate([
    swagger_1.ApiTags('OrganizationEmploymentType'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof organization_employment_type_service_1.OrganizationEmploymentTypeService !== "undefined" && organization_employment_type_service_1.OrganizationEmploymentTypeService) === "function" ? _d : Object])
], OrganizationEmploymentTypeController);
exports.OrganizationEmploymentTypeController = OrganizationEmploymentTypeController;


/***/ }),

/***/ "./src/app/organization-employment-type/organization-employment-type.entity.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/organization-employment-type/organization-employment-type.entity.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationEmploymentType = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
const candidate_entity_1 = __webpack_require__(/*! ../candidate/candidate.entity */ "./src/app/candidate/candidate.entity.ts");
let OrganizationEmploymentType = class OrganizationEmploymentType extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty(),
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.organizationEmploymentType),
    typeorm_1.JoinTable({
        name: 'tag_organization_employment_type'
    }),
    tslib_1.__metadata("design:type", Array)
], OrganizationEmploymentType.prototype, "tags", void 0);
tslib_1.__decorate([
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationEmploymentType.prototype, "name", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => employee_entity_1.Employee, (employee) => employee.organizationEmploymentTypes, { cascade: ['update'] }),
    typeorm_1.JoinTable({
        name: 'organization_employment_type_employee'
    }),
    tslib_1.__metadata("design:type", Array)
], OrganizationEmploymentType.prototype, "members", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => candidate_entity_1.Candidate, (candidate) => candidate.organizationEmploymentTypes, { cascade: ['update'] }),
    typeorm_1.JoinTable({
        name: 'candidate_employment_type'
    }),
    tslib_1.__metadata("design:type", Array)
], OrganizationEmploymentType.prototype, "candidates", void 0);
OrganizationEmploymentType = tslib_1.__decorate([
    typeorm_1.Entity('organization_employment_type')
], OrganizationEmploymentType);
exports.OrganizationEmploymentType = OrganizationEmploymentType;


/***/ }),

/***/ "./src/app/organization-employment-type/organization-employment-type.module.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/organization-employment-type/organization-employment-type.module.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationEmploymentTypeModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
const organization_employment_type_controller_1 = __webpack_require__(/*! ./organization-employment-type.controller */ "./src/app/organization-employment-type/organization-employment-type.controller.ts");
const organization_employment_type_entity_1 = __webpack_require__(/*! ./organization-employment-type.entity */ "./src/app/organization-employment-type/organization-employment-type.entity.ts");
const organization_employment_type_service_1 = __webpack_require__(/*! ./organization-employment-type.service */ "./src/app/organization-employment-type/organization-employment-type.service.ts");
let OrganizationEmploymentTypeModule = class OrganizationEmploymentTypeModule {
};
OrganizationEmploymentTypeModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([organization_employment_type_entity_1.OrganizationEmploymentType]),
            tenant_module_1.TenantModule
        ],
        controllers: [organization_employment_type_controller_1.OrganizationEmploymentTypeController],
        providers: [organization_employment_type_service_1.OrganizationEmploymentTypeService],
        exports: [organization_employment_type_service_1.OrganizationEmploymentTypeService]
    })
], OrganizationEmploymentTypeModule);
exports.OrganizationEmploymentTypeModule = OrganizationEmploymentTypeModule;


/***/ }),

/***/ "./src/app/organization-employment-type/organization-employment-type.seed.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/organization-employment-type/organization-employment-type.seed.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.seedRandomEmploymentTypes = exports.seedDefaultEmploymentTypes = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const organization_employment_type_entity_1 = __webpack_require__(/*! ./organization-employment-type.entity */ "./src/app/organization-employment-type/organization-employment-type.entity.ts");
const default_organization_teams_1 = __webpack_require__(/*! ../organization-team/default-organization-teams */ "./src/app/organization-team/default-organization-teams.ts");
exports.seedDefaultEmploymentTypes = async (connection, tenant, employees, defaultOrganization) => {
    const defaultTeams = default_organization_teams_1.DEFAULT_ORGANIZATION_TEAMS;
    const fullTimeEmployees = defaultTeams[0].defaultMembers;
    const contractors = defaultTeams[1].defaultMembers;
    const employmentTypes = Object.values(models_1.GenericEmploymentTypes).map((name) => {
        const employmentType = new organization_employment_type_entity_1.OrganizationEmploymentType();
        employmentType.name = name;
        employmentType.organizationId = defaultOrganization.id;
        employmentType.tenant = tenant;
        if (name === 'Contract') {
            employmentType.members = employees;
        }
        else if (name === 'Full-time') {
            employmentType.members = employees.filter((e) => fullTimeEmployees.includes(e.user.email));
        }
        else if (name === 'Contractor') {
            employmentType.members = employees.filter((e) => contractors.includes(e.user.email));
        }
        else {
            employmentType.members = [];
        }
        return employmentType;
    });
    for (const employmentType of employmentTypes) {
        insertEmploymentType(connection, [employmentType]);
    }
};
exports.seedRandomEmploymentTypes = async (connection, tenants, tenantOrganizationsMap) => {
    let employmentTypes = [];
    for (const tenant of tenants) {
        const organizations = tenantOrganizationsMap.get(tenant);
        organizations.forEach(({ id: organizationId }) => {
            const organizationEmploymentTypes = Object.values(models_1.GenericEmploymentTypes).map((name) => {
                const employmentType = new organization_employment_type_entity_1.OrganizationEmploymentType();
                employmentType.name = name;
                employmentType.organizationId = organizationId;
                employmentType.tenant = tenant;
                return employmentType;
            });
            employmentTypes = [
                ...employmentTypes,
                ...organizationEmploymentTypes
            ];
        });
        await insertEmploymentType(connection, employmentTypes);
    }
};
const insertEmploymentType = async (connection, employmentType) => {
    await connection.manager.save(employmentType);
};


/***/ }),

/***/ "./src/app/organization-employment-type/organization-employment-type.service.ts":
/*!**************************************************************************************!*\
  !*** ./src/app/organization-employment-type/organization-employment-type.service.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationEmploymentTypeService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const organization_employment_type_entity_1 = __webpack_require__(/*! ./organization-employment-type.entity */ "./src/app/organization-employment-type/organization-employment-type.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
let OrganizationEmploymentTypeService = class OrganizationEmploymentTypeService extends core_1.CrudService {
    constructor(employmentTypesRepo) {
        super(employmentTypesRepo);
        this.employmentTypesRepo = employmentTypesRepo;
    }
};
OrganizationEmploymentTypeService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(organization_employment_type_entity_1.OrganizationEmploymentType)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], OrganizationEmploymentTypeService);
exports.OrganizationEmploymentTypeService = OrganizationEmploymentTypeService;


/***/ }),

/***/ "./src/app/organization-languages/default-organization-languages.ts":
/*!**************************************************************************!*\
  !*** ./src/app/organization-languages/default-organization-languages.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_ORGANIZATION_LANGUAGES = void 0;
exports.DEFAULT_ORGANIZATION_LANGUAGES = {
    Bulgarian: 'Native or Bilingual',
    Russian: 'Native or Bilingual',
    Ukrainian: 'Native or Bilingual',
    English: 'Fluent',
    Hebrew: 'Conversational'
};


/***/ }),

/***/ "./src/app/organization-languages/organization-languages.controller.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/organization-languages/organization-languages.controller.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationLanguagesController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const organization_languages_service_1 = __webpack_require__(/*! ./organization-languages.service */ "./src/app/organization-languages/organization-languages.service.ts");
const organization_languages_entity_1 = __webpack_require__(/*! ./organization-languages.entity */ "./src/app/organization-languages/organization-languages.entity.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const QueryPartialEntity_1 = __webpack_require__(/*! typeorm/query-builder/QueryPartialEntity */ "typeorm/query-builder/QueryPartialEntity");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let OrganizationLanguagesController = class OrganizationLanguagesController extends crud_controller_1.CrudController {
    constructor(organizationLanguagesService) {
        super(organizationLanguagesService);
        this.organizationLanguagesService = organizationLanguagesService;
    }
    async create(entity) {
        return this.organizationLanguagesService.create(entity);
    }
    async update(id, entity) {
        return this.organizationLanguagesService.update(id, entity);
    }
    async delete(id) {
        return this.organizationLanguagesService.delete(id);
    }
    async findLanguageByOrgId(data) {
        const { relations, findInput } = JSON.parse(data);
        return this.organizationLanguagesService.findAll({
            where: findInput,
            relations
        });
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.CREATED),
    common_1.Post(),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.DeepPartial !== "undefined" && typeorm_1.DeepPartial) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], OrganizationLanguagesController.prototype, "create", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_c = typeof QueryPartialEntity_1.QueryDeepPartialEntity !== "undefined" && QueryPartialEntity_1.QueryDeepPartialEntity) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], OrganizationLanguagesController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Delete record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NO_CONTENT,
        description: 'The record has been successfully deleted'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Delete(':id'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], OrganizationLanguagesController.prototype, "delete", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find Organization Language.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found Organization Language',
        type: organization_languages_entity_1.OrganizationLanguages
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], OrganizationLanguagesController.prototype, "findLanguageByOrgId", null);
OrganizationLanguagesController = tslib_1.__decorate([
    swagger_1.ApiTags('OrganizationLanguages'),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_g = typeof organization_languages_service_1.OrganizationLanguagesService !== "undefined" && organization_languages_service_1.OrganizationLanguagesService) === "function" ? _g : Object])
], OrganizationLanguagesController);
exports.OrganizationLanguagesController = OrganizationLanguagesController;


/***/ }),

/***/ "./src/app/organization-languages/organization-languages.entity.ts":
/*!*************************************************************************!*\
  !*** ./src/app/organization-languages/organization-languages.entity.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationLanguages = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const language_entity_1 = __webpack_require__(/*! ../language/language.entity */ "./src/app/language/language.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let OrganizationLanguages = class OrganizationLanguages extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: language_entity_1.Language }),
    typeorm_1.ManyToOne((type) => language_entity_1.Language, { nullable: false, onDelete: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof language_entity_1.Language !== "undefined" && language_entity_1.Language) === "function" ? _a : Object)
], OrganizationLanguages.prototype, "language", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((organization_language) => organization_language.language),
    tslib_1.__metadata("design:type", String)
], OrganizationLanguages.prototype, "languageId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationLanguages.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationLanguages.prototype, "level", void 0);
OrganizationLanguages = tslib_1.__decorate([
    typeorm_1.Entity('organization_language')
], OrganizationLanguages);
exports.OrganizationLanguages = OrganizationLanguages;


/***/ }),

/***/ "./src/app/organization-languages/organization-languages.module.ts":
/*!*************************************************************************!*\
  !*** ./src/app/organization-languages/organization-languages.module.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationLanguagesModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const organization_languages_entity_1 = __webpack_require__(/*! ./organization-languages.entity */ "./src/app/organization-languages/organization-languages.entity.ts");
const organization_languages_controller_1 = __webpack_require__(/*! ./organization-languages.controller */ "./src/app/organization-languages/organization-languages.controller.ts");
const organization_languages_service_1 = __webpack_require__(/*! ./organization-languages.service */ "./src/app/organization-languages/organization-languages.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let OrganizationLanguagesModule = class OrganizationLanguagesModule {
};
OrganizationLanguagesModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([organization_languages_entity_1.OrganizationLanguages]), tenant_module_1.TenantModule],
        controllers: [organization_languages_controller_1.OrganizationLanguagesController],
        providers: [organization_languages_service_1.OrganizationLanguagesService],
        exports: [organization_languages_service_1.OrganizationLanguagesService]
    })
], OrganizationLanguagesModule);
exports.OrganizationLanguagesModule = OrganizationLanguagesModule;


/***/ }),

/***/ "./src/app/organization-languages/organization-languages.seed.ts":
/*!***********************************************************************!*\
  !*** ./src/app/organization-languages/organization-languages.seed.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomOrganizationLanguage = exports.createDefaultOrganizationLanguage = void 0;
const organization_languages_entity_1 = __webpack_require__(/*! ./organization-languages.entity */ "./src/app/organization-languages/organization-languages.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const language_entity_1 = __webpack_require__(/*! ../language/language.entity */ "./src/app/language/language.entity.ts");
const default_organization_languages_1 = __webpack_require__(/*! ./default-organization-languages */ "./src/app/organization-languages/default-organization-languages.ts");
exports.createDefaultOrganizationLanguage = async (connection, tenant, defaultOrganizations) => {
    const mapOrganizationLanguage = [];
    const allLanguage = await connection.manager.find(language_entity_1.Language, {});
    for (const defaultOrganization of defaultOrganizations) {
        for (const language of allLanguage) {
            const organization = new organization_languages_entity_1.OrganizationLanguages();
            organization.organization = defaultOrganization;
            organization.tenant = tenant;
            organization.language = language;
            organization.name = language.name;
            organization.level = default_organization_languages_1.DEFAULT_ORGANIZATION_LANGUAGES[language.name]
                ? default_organization_languages_1.DEFAULT_ORGANIZATION_LANGUAGES[language.name]
                : 'intermediate';
            mapOrganizationLanguage.push(organization);
        }
    }
    await insertRandomOrganizationLanguage(connection, mapOrganizationLanguage);
    return mapOrganizationLanguage;
};
exports.createRandomOrganizationLanguage = async (connection, tenants, tenantOrganizationsMap) => {
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, organization language not be created');
        return;
    }
    const mapOrganizationLanguage = [];
    const allLanguage = await connection.manager.find(language_entity_1.Language, {});
    for (const tenant of tenants) {
        const tenantOrganization = tenantOrganizationsMap.get(tenant);
        for (const tenantOrg of tenantOrganization) {
            const language = faker.random.arrayElement(allLanguage);
            const organization = new organization_languages_entity_1.OrganizationLanguages();
            organization.organization = tenantOrg;
            organization.tenant = tenant;
            organization.language = language;
            organization.name = language.name;
            organization.level = default_organization_languages_1.DEFAULT_ORGANIZATION_LANGUAGES[language.name]
                ? default_organization_languages_1.DEFAULT_ORGANIZATION_LANGUAGES[language.name]
                : 'intermediate';
            mapOrganizationLanguage.push(organization);
        }
    }
    await insertRandomOrganizationLanguage(connection, mapOrganizationLanguage);
    return mapOrganizationLanguage;
};
const insertRandomOrganizationLanguage = async (connection, data) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(organization_languages_entity_1.OrganizationLanguages)
        .values(data)
        .execute();
};


/***/ }),

/***/ "./src/app/organization-languages/organization-languages.service.ts":
/*!**************************************************************************!*\
  !*** ./src/app/organization-languages/organization-languages.service.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationLanguagesService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const organization_languages_entity_1 = __webpack_require__(/*! ./organization-languages.entity */ "./src/app/organization-languages/organization-languages.entity.ts");
let OrganizationLanguagesService = class OrganizationLanguagesService extends crud_service_1.CrudService {
    constructor(organizationLanguagesRepository) {
        super(organizationLanguagesRepository);
        this.organizationLanguagesRepository = organizationLanguagesRepository;
    }
};
OrganizationLanguagesService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(organization_languages_entity_1.OrganizationLanguages)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], OrganizationLanguagesService);
exports.OrganizationLanguagesService = OrganizationLanguagesService;


/***/ }),

/***/ "./src/app/organization-positions/default-organization-positions.ts":
/*!**************************************************************************!*\
  !*** ./src/app/organization-positions/default-organization-positions.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_ORGANIZATION_POSITIONS = void 0;
exports.DEFAULT_ORGANIZATION_POSITIONS = [
    'Web Software Developer',
    'CEO',
    'Team Lead',
    'Staff Engineer',
    'Junior Software Developer',
    'Senior Software Developer',
    'CTO',
    'COO',
    'Mobile Application Developer',
    'Associate Engineer',
    'Project Manager',
    'Tester'
];


/***/ }),

/***/ "./src/app/organization-positions/organization-position.seed.ts":
/*!**********************************************************************!*\
  !*** ./src/app/organization-positions/organization-position.seed.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.seedRandomOrganizationPosition = exports.seedDefaultOrganizationPosition = void 0;
const organization_positions_entity_1 = __webpack_require__(/*! ./organization-positions.entity */ "./src/app/organization-positions/organization-positions.entity.ts");
const default_organization_positions_1 = __webpack_require__(/*! ./default-organization-positions */ "./src/app/organization-positions/default-organization-positions.ts");
exports.seedDefaultOrganizationPosition = async (connection, tenant, organizations) => {
    let positions = [];
    const organizationPositions = default_organization_positions_1.DEFAULT_ORGANIZATION_POSITIONS.map((name) => {
        const employmentPosition = new organization_positions_entity_1.OrganizationPositions();
        employmentPosition.name = name;
        employmentPosition.organizationId = organizations.id;
        employmentPosition.tenant = tenant;
        return employmentPosition;
    });
    positions = [...positions, ...organizationPositions];
    await insertEmploymentPosition(connection, positions);
};
exports.seedRandomOrganizationPosition = async (connection, tenants, tenantOrganizationsMap) => {
    let positions = [];
    for (const tenant of tenants) {
        const organizations = tenantOrganizationsMap.get(tenant);
        organizations.forEach(({ id: organizationId }) => {
            const organizationPositions = default_organization_positions_1.DEFAULT_ORGANIZATION_POSITIONS.map((name) => {
                const employmentPosition = new organization_positions_entity_1.OrganizationPositions();
                employmentPosition.name = name;
                employmentPosition.organizationId = organizationId;
                employmentPosition.tenant = tenant;
                return employmentPosition;
            });
            positions = [...positions, ...organizationPositions];
        });
        await insertEmploymentPosition(connection, positions);
    }
};
const insertEmploymentPosition = async (connection, employmentPosition) => {
    await connection.manager.save(employmentPosition);
};


/***/ }),

/***/ "./src/app/organization-positions/organization-positions.controller.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/organization-positions/organization-positions.controller.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationPositionsController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const organization_positions_service_1 = __webpack_require__(/*! ./organization-positions.service */ "./src/app/organization-positions/organization-positions.service.ts");
const organization_positions_entity_1 = __webpack_require__(/*! ./organization-positions.entity */ "./src/app/organization-positions/organization-positions.entity.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const parse_json_pipe_1 = __webpack_require__(/*! ../shared/pipes/parse-json.pipe */ "./src/app/shared/pipes/parse-json.pipe.ts");
let OrganizationPositionsController = class OrganizationPositionsController extends crud_controller_1.CrudController {
    constructor(organizationPositionsService) {
        super(organizationPositionsService);
        this.organizationPositionsService = organizationPositionsService;
    }
    async findAllOrganizationPositions(data) {
        const { relations = [], findInput } = data;
        return this.organizationPositionsService.findAll({
            where: findInput,
            relations
        });
    }
    async updateOrganizationTeam(id, entity, ...options) {
        return this.organizationPositionsService.create(Object.assign({ id }, entity));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all organization positions recurring expense.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found positions recurring expense',
        type: organization_positions_entity_1.OrganizationPositions
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], OrganizationPositionsController.prototype, "findAllOrganizationPositions", null);
tslib_1.__decorate([
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_b = typeof organization_positions_entity_1.OrganizationPositions !== "undefined" && organization_positions_entity_1.OrganizationPositions) === "function" ? _b : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], OrganizationPositionsController.prototype, "updateOrganizationTeam", null);
OrganizationPositionsController = tslib_1.__decorate([
    swagger_1.ApiTags('OrganizationPositions'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof organization_positions_service_1.OrganizationPositionsService !== "undefined" && organization_positions_service_1.OrganizationPositionsService) === "function" ? _d : Object])
], OrganizationPositionsController);
exports.OrganizationPositionsController = OrganizationPositionsController;


/***/ }),

/***/ "./src/app/organization-positions/organization-positions.entity.ts":
/*!*************************************************************************!*\
  !*** ./src/app/organization-positions/organization-positions.entity.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationPositions = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let OrganizationPositions = class OrganizationPositions extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty(),
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.organizationPosition),
    typeorm_1.JoinTable({
        name: 'tag_organization_position'
    }),
    tslib_1.__metadata("design:type", Array)
], OrganizationPositions.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationPositions.prototype, "name", void 0);
OrganizationPositions = tslib_1.__decorate([
    typeorm_1.Entity('organization_position')
], OrganizationPositions);
exports.OrganizationPositions = OrganizationPositions;


/***/ }),

/***/ "./src/app/organization-positions/organization-positions.module.ts":
/*!*************************************************************************!*\
  !*** ./src/app/organization-positions/organization-positions.module.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationPositionsModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const organization_positions_entity_1 = __webpack_require__(/*! ./organization-positions.entity */ "./src/app/organization-positions/organization-positions.entity.ts");
const organization_positions_controller_1 = __webpack_require__(/*! ./organization-positions.controller */ "./src/app/organization-positions/organization-positions.controller.ts");
const organization_positions_service_1 = __webpack_require__(/*! ./organization-positions.service */ "./src/app/organization-positions/organization-positions.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let OrganizationPositionsModule = class OrganizationPositionsModule {
};
OrganizationPositionsModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([organization_positions_entity_1.OrganizationPositions]), tenant_module_1.TenantModule],
        controllers: [organization_positions_controller_1.OrganizationPositionsController],
        providers: [organization_positions_service_1.OrganizationPositionsService],
        exports: [organization_positions_service_1.OrganizationPositionsService]
    })
], OrganizationPositionsModule);
exports.OrganizationPositionsModule = OrganizationPositionsModule;


/***/ }),

/***/ "./src/app/organization-positions/organization-positions.service.ts":
/*!**************************************************************************!*\
  !*** ./src/app/organization-positions/organization-positions.service.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationPositionsService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const organization_positions_entity_1 = __webpack_require__(/*! ./organization-positions.entity */ "./src/app/organization-positions/organization-positions.entity.ts");
let OrganizationPositionsService = class OrganizationPositionsService extends crud_service_1.CrudService {
    constructor(organizationPositionsRepository) {
        super(organizationPositionsRepository);
        this.organizationPositionsRepository = organizationPositionsRepository;
    }
};
OrganizationPositionsService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(organization_positions_entity_1.OrganizationPositions)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], OrganizationPositionsService);
exports.OrganizationPositionsService = OrganizationPositionsService;


/***/ }),

/***/ "./src/app/organization-projects/commands/handlers/index.ts":
/*!******************************************************************!*\
  !*** ./src/app/organization-projects/commands/handlers/index.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const organization_project_edit_by_employee_handler_1 = __webpack_require__(/*! ./organization-project.edit-by-employee.handler */ "./src/app/organization-projects/commands/handlers/organization-project.edit-by-employee.handler.ts");
const organization_project_create_handler_1 = __webpack_require__(/*! ./organization-project.create.handler */ "./src/app/organization-projects/commands/handlers/organization-project.create.handler.ts");
const organization_project_update_handler_1 = __webpack_require__(/*! ./organization-project.update.handler */ "./src/app/organization-projects/commands/handlers/organization-project.update.handler.ts");
exports.CommandHandlers = [
    organization_project_edit_by_employee_handler_1.OrganizationProjectEditByEmployeeHandler,
    organization_project_create_handler_1.OrganizationProjectCreateHandler,
    organization_project_update_handler_1.OrganizationProjectUpdateHandler
];


/***/ }),

/***/ "./src/app/organization-projects/commands/handlers/organization-project.create.handler.ts":
/*!************************************************************************************************!*\
  !*** ./src/app/organization-projects/commands/handlers/organization-project.create.handler.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationProjectCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const organization_project_create_command_1 = __webpack_require__(/*! ../organization-project.create.command */ "./src/app/organization-projects/commands/organization-project.create.command.ts");
const organization_projects_service_1 = __webpack_require__(/*! ../../organization-projects.service */ "./src/app/organization-projects/organization-projects.service.ts");
let OrganizationProjectCreateHandler = class OrganizationProjectCreateHandler {
    constructor(ops) {
        this.ops = ops;
    }
    async execute(command) {
        return this.ops.create(command.input);
    }
};
OrganizationProjectCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(organization_project_create_command_1.OrganizationProjectCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof organization_projects_service_1.OrganizationProjectsService !== "undefined" && organization_projects_service_1.OrganizationProjectsService) === "function" ? _a : Object])
], OrganizationProjectCreateHandler);
exports.OrganizationProjectCreateHandler = OrganizationProjectCreateHandler;


/***/ }),

/***/ "./src/app/organization-projects/commands/handlers/organization-project.edit-by-employee.handler.ts":
/*!**********************************************************************************************************!*\
  !*** ./src/app/organization-projects/commands/handlers/organization-project.edit-by-employee.handler.ts ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationProjectEditByEmployeeHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const shared_1 = __webpack_require__(/*! ../../../shared */ "./src/app/shared/index.ts");
const organization_projects_service_1 = __webpack_require__(/*! ../../organization-projects.service */ "./src/app/organization-projects/organization-projects.service.ts");
const organization_project_edit_by_employee_command_1 = __webpack_require__(/*! ../organization-project.edit-by-employee.command */ "./src/app/organization-projects/commands/organization-project.edit-by-employee.command.ts");
let OrganizationProjectEditByEmployeeHandler = class OrganizationProjectEditByEmployeeHandler extends shared_1.UpdateEntityByMembersHandler {
    constructor(organizationDepartmentService) {
        super(organizationDepartmentService);
        this.organizationDepartmentService = organizationDepartmentService;
    }
    async execute(command) {
        return this.executeCommand(command.input);
    }
};
OrganizationProjectEditByEmployeeHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(organization_project_edit_by_employee_command_1.OrganizationProjectEditByEmployeeCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof organization_projects_service_1.OrganizationProjectsService !== "undefined" && organization_projects_service_1.OrganizationProjectsService) === "function" ? _a : Object])
], OrganizationProjectEditByEmployeeHandler);
exports.OrganizationProjectEditByEmployeeHandler = OrganizationProjectEditByEmployeeHandler;


/***/ }),

/***/ "./src/app/organization-projects/commands/handlers/organization-project.update.handler.ts":
/*!************************************************************************************************!*\
  !*** ./src/app/organization-projects/commands/handlers/organization-project.update.handler.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationProjectUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const organization_project_update_command_1 = __webpack_require__(/*! ../organization-project.update.command */ "./src/app/organization-projects/commands/organization-project.update.command.ts");
const organization_projects_service_1 = __webpack_require__(/*! ../../organization-projects.service */ "./src/app/organization-projects/organization-projects.service.ts");
let OrganizationProjectUpdateHandler = class OrganizationProjectUpdateHandler {
    constructor(_organizationProjectsService) {
        this._organizationProjectsService = _organizationProjectsService;
    }
    async execute(command) {
        const { input } = command;
        const { id } = input;
        return this.updateProject(id, input);
    }
    async updateProject(id, request) {
        const project = await this._organizationProjectsService.findOne(id);
        if (project) {
            delete request.id;
            await this._organizationProjectsService.update(id, request);
            return await this._organizationProjectsService.findOne(id);
        }
        return project;
    }
};
OrganizationProjectUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(organization_project_update_command_1.OrganizationProjectUpdateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof organization_projects_service_1.OrganizationProjectsService !== "undefined" && organization_projects_service_1.OrganizationProjectsService) === "function" ? _a : Object])
], OrganizationProjectUpdateHandler);
exports.OrganizationProjectUpdateHandler = OrganizationProjectUpdateHandler;


/***/ }),

/***/ "./src/app/organization-projects/commands/organization-project.create.command.ts":
/*!***************************************************************************************!*\
  !*** ./src/app/organization-projects/commands/organization-project.create.command.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationProjectCreateCommand = void 0;
class OrganizationProjectCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.OrganizationProjectCreateCommand = OrganizationProjectCreateCommand;
OrganizationProjectCreateCommand.type = '[OrganizationProject] Create Project';


/***/ }),

/***/ "./src/app/organization-projects/commands/organization-project.edit-by-employee.command.ts":
/*!*************************************************************************************************!*\
  !*** ./src/app/organization-projects/commands/organization-project.edit-by-employee.command.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationProjectEditByEmployeeCommand = void 0;
class OrganizationProjectEditByEmployeeCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.OrganizationProjectEditByEmployeeCommand = OrganizationProjectEditByEmployeeCommand;
OrganizationProjectEditByEmployeeCommand.type = '[OrganizationProject] Edit By Employee';


/***/ }),

/***/ "./src/app/organization-projects/commands/organization-project.update.command.ts":
/*!***************************************************************************************!*\
  !*** ./src/app/organization-projects/commands/organization-project.update.command.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationProjectUpdateCommand = void 0;
class OrganizationProjectUpdateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.OrganizationProjectUpdateCommand = OrganizationProjectUpdateCommand;
OrganizationProjectUpdateCommand.type = '[OrganizationProject] Update Project';


/***/ }),

/***/ "./src/app/organization-projects/default-organization-projects.ts":
/*!************************************************************************!*\
  !*** ./src/app/organization-projects/default-organization-projects.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_ORGANIZATION_PROJECTS = void 0;
exports.DEFAULT_ORGANIZATION_PROJECTS = [
    'Gauzy Platform (Open-Source)',
    'Gauzy Web Site',
    'Gauzy Platform SaaS',
    'Gauzy Platform DevOps'
];


/***/ }),

/***/ "./src/app/organization-projects/organization-projects.controller.ts":
/*!***************************************************************************!*\
  !*** ./src/app/organization-projects/organization-projects.controller.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationProjectsController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const organization_project_edit_by_employee_command_1 = __webpack_require__(/*! ./commands/organization-project.edit-by-employee.command */ "./src/app/organization-projects/commands/organization-project.edit-by-employee.command.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ./organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const organization_projects_service_1 = __webpack_require__(/*! ./organization-projects.service */ "./src/app/organization-projects/organization-projects.service.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const parse_json_pipe_1 = __webpack_require__(/*! ../shared/pipes/parse-json.pipe */ "./src/app/shared/pipes/parse-json.pipe.ts");
let OrganizationProjectsController = class OrganizationProjectsController extends crud_controller_1.CrudController {
    constructor(organizationProjectsService, commandBus) {
        super(organizationProjectsService);
        this.organizationProjectsService = organizationProjectsService;
        this.commandBus = commandBus;
    }
    async findByEmployee(id, data) {
        const { findInput = null } = data;
        return this.organizationProjectsService.findByEmployee(id, findInput);
    }
    async findAllEmployees(data, req) {
        const { relations, findInput } = data;
        return this.organizationProjectsService.findAll({
            where: findInput,
            relations
        });
    }
    async findProjectsCount(data, req) {
        const { relations, findInput } = data;
        return this.organizationProjectsService.count({
            where: findInput,
            relations
        });
    }
    async updateEmployee(entity) {
        return this.commandBus.execute(new organization_project_edit_by_employee_command_1.OrganizationProjectEditByEmployeeCommand(entity));
    }
    async updateTaskViewMode(id, entity) {
        return this.organizationProjectsService.updateTaskViewMode(id, entity.taskViewMode);
    }
    async updateProject(id, entity) {
        try {
            return await this.organizationProjectsService.create(Object.assign({ id }, entity));
        }
        catch (error) {
            console.log(error);
            return;
        }
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all organization projects by Employee.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found projects',
        type: organization_projects_entity_1.OrganizationProject
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('employee/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], OrganizationProjectsController.prototype, "findByEmployee", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all organization projects.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found projects',
        type: organization_projects_entity_1.OrganizationProject
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__param(1, common_1.Request()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], OrganizationProjectsController.prototype, "findAllEmployees", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find organization projects count.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found count',
        type: organization_projects_entity_1.OrganizationProject
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('count'),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__param(1, common_1.Request()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], OrganizationProjectsController.prototype, "findProjectsCount", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_EMPLOYEES_EDIT),
    common_1.Put('employee'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof models_1.IEditEntityByMemberInput !== "undefined" && models_1.IEditEntityByMemberInput) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], OrganizationProjectsController.prototype, "updateEmployee", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Put('/task-view/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], OrganizationProjectsController.prototype, "updateTaskViewMode", null);
tslib_1.__decorate([
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_g = typeof organization_projects_entity_1.OrganizationProject !== "undefined" && organization_projects_entity_1.OrganizationProject) === "function" ? _g : Object]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], OrganizationProjectsController.prototype, "updateProject", null);
OrganizationProjectsController = tslib_1.__decorate([
    swagger_1.ApiTags('OrganizationProjects'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_j = typeof organization_projects_service_1.OrganizationProjectsService !== "undefined" && organization_projects_service_1.OrganizationProjectsService) === "function" ? _j : Object, typeof (_k = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _k : Object])
], OrganizationProjectsController);
exports.OrganizationProjectsController = OrganizationProjectsController;


/***/ }),

/***/ "./src/app/organization-projects/organization-projects.entity.ts":
/*!***********************************************************************!*\
  !*** ./src/app/organization-projects/organization-projects.entity.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationProject = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const invoice_item_entity_1 = __webpack_require__(/*! ../invoice-item/invoice-item.entity */ "./src/app/invoice-item/invoice-item.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
const task_entity_1 = __webpack_require__(/*! ../tasks/task.entity */ "./src/app/tasks/task.entity.ts");
const organization_sprint_entity_1 = __webpack_require__(/*! ../organization-sprint/organization-sprint.entity */ "./src/app/organization-sprint/organization-sprint.entity.ts");
const payment_entity_1 = __webpack_require__(/*! ../payment/payment.entity */ "./src/app/payment/payment.entity.ts");
const time_log_entity_1 = __webpack_require__(/*! ../timesheet/time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
let OrganizationProject = class OrganizationProject extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty(),
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.organizationProject),
    typeorm_1.JoinTable({
        name: 'tag_organization_project'
    }),
    tslib_1.__metadata("design:type", Array)
], OrganizationProject.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationProject.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: organization_contact_entity_1.OrganizationContact }),
    typeorm_1.ManyToOne((type) => organization_contact_entity_1.OrganizationContact, (organizationContact) => organizationContact.projects, {
        nullable: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IOrganizationContact !== "undefined" && models_1.IOrganizationContact) === "function" ? _a : Object)
], OrganizationProject.prototype, "organizationContact", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.RelationId((contact) => contact.organizationContact),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationProject.prototype, "organizationContactId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: task_entity_1.Task }),
    typeorm_1.OneToMany((type) => task_entity_1.Task, (task) => task.project),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], OrganizationProject.prototype, "tasks", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany((type) => time_log_entity_1.TimeLog, (timeLog) => timeLog.project),
    tslib_1.__metadata("design:type", Array)
], OrganizationProject.prototype, "timeLogs", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], OrganizationProject.prototype, "startDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], OrganizationProject.prototype, "endDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationProject.prototype, "billing", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.CurrenciesEnum }),
    class_validator_1.IsEnum(models_1.CurrenciesEnum),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationProject.prototype, "currency", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], OrganizationProject.prototype, "public", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => employee_entity_1.Employee, { cascade: ['update'] }),
    typeorm_1.JoinTable({
        name: 'organization_project_employee'
    }),
    tslib_1.__metadata("design:type", Array)
], OrganizationProject.prototype, "members", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: invoice_item_entity_1.InvoiceItem, isArray: true }),
    typeorm_1.OneToMany((type) => invoice_item_entity_1.InvoiceItem, (invoiceItem) => invoiceItem.project, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], OrganizationProject.prototype, "invoiceItems", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationProject.prototype, "owner", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: organization_sprint_entity_1.OrganizationSprint }),
    typeorm_1.OneToMany((type) => organization_sprint_entity_1.OrganizationSprint, (sprints) => sprints.project),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], OrganizationProject.prototype, "organizationSprints", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.TaskListTypeEnum }),
    class_validator_1.IsEnum(models_1.TaskListTypeEnum),
    typeorm_1.Column({ default: models_1.TaskListTypeEnum.GRID }),
    tslib_1.__metadata("design:type", String)
], OrganizationProject.prototype, "taskListType", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: payment_entity_1.Payment, isArray: true }),
    typeorm_1.OneToMany((type) => payment_entity_1.Payment, (payment) => payment.project, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], OrganizationProject.prototype, "payments", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationProject.prototype, "code", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationProject.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationProject.prototype, "color", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], OrganizationProject.prototype, "billable", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], OrganizationProject.prototype, "billingFlat", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], OrganizationProject.prototype, "openSource", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationProject.prototype, "projectUrl", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationProject.prototype, "openSourceProjectUrl", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], OrganizationProject.prototype, "budget", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({
        type: 'text',
        nullable: true,
        default: models_1.OrganizationProjectBudgetTypeEnum.COST
    }),
    tslib_1.__metadata("design:type", typeof (_d = typeof models_1.OrganizationProjectBudgetTypeEnum !== "undefined" && models_1.OrganizationProjectBudgetTypeEnum) === "function" ? _d : Object)
], OrganizationProject.prototype, "budgetType", void 0);
OrganizationProject = tslib_1.__decorate([
    typeorm_1.Entity('organization_project')
], OrganizationProject);
exports.OrganizationProject = OrganizationProject;


/***/ }),

/***/ "./src/app/organization-projects/organization-projects.module.ts":
/*!***********************************************************************!*\
  !*** ./src/app/organization-projects/organization-projects.module.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationProjectsModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const organization_projects_entity_1 = __webpack_require__(/*! ./organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const organization_projects_controller_1 = __webpack_require__(/*! ./organization-projects.controller */ "./src/app/organization-projects/organization-projects.controller.ts");
const organization_projects_service_1 = __webpack_require__(/*! ./organization-projects.service */ "./src/app/organization-projects/organization-projects.service.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/organization-projects/commands/handlers/index.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let OrganizationProjectsModule = class OrganizationProjectsModule {
};
OrganizationProjectsModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([organization_projects_entity_1.OrganizationProject, user_entity_1.User]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [organization_projects_controller_1.OrganizationProjectsController],
        providers: [organization_projects_service_1.OrganizationProjectsService, user_service_1.UserService, ...handlers_1.CommandHandlers],
        exports: [organization_projects_service_1.OrganizationProjectsService]
    })
], OrganizationProjectsModule);
exports.OrganizationProjectsModule = OrganizationProjectsModule;


/***/ }),

/***/ "./src/app/organization-projects/organization-projects.seed.ts":
/*!*********************************************************************!*\
  !*** ./src/app/organization-projects/organization-projects.seed.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomOrganizationProjects = exports.createDefaultOrganizationProjects = void 0;
const faker = __webpack_require__(/*! faker */ "faker");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ./organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const default_organization_projects_1 = __webpack_require__(/*! ./default-organization-projects */ "./src/app/organization-projects/default-organization-projects.ts");
exports.createDefaultOrganizationProjects = async (connection, defaultOrganizations) => {
    const tag = await connection.getRepository(tag_entity_1.Tag).create({
        name: 'Web',
        description: '',
        color: faker.commerce.color()
    });
    const projects = [];
    for (let index = 0; index < default_organization_projects_1.DEFAULT_ORGANIZATION_PROJECTS.length; index++) {
        const name = default_organization_projects_1.DEFAULT_ORGANIZATION_PROJECTS[index];
        const organization = faker.random.arrayElement(defaultOrganizations);
        const organizationContacts = await connection
            .getRepository(organization_contact_entity_1.OrganizationContact)
            .find({
            where: {
                organizationId: organization.id,
                tenantId: organization.tenantId
            }
        });
        const organizationContact = faker.random.arrayElement(organizationContacts);
        const project = new organization_projects_entity_1.OrganizationProject();
        project.tags = [tag];
        project.name = name;
        project.organizationContact = organizationContact;
        project.organizationId = organization.id;
        project.tenant = organization.tenant;
        project.budgetType = faker.random.arrayElement(Object.values(models_1.OrganizationProjectBudgetTypeEnum));
        project.budget =
            project.budgetType == models_1.OrganizationProjectBudgetTypeEnum.COST
                ? faker.random.number({ min: 2000, max: 40000 })
                : faker.random.number({ min: 20, max: 40 });
        project.taskListType = faker.random.arrayElement(Object.values(models_1.TaskListTypeEnum));
        projects.push(project);
    }
    return await connection.manager.save(projects);
};
exports.createRandomOrganizationProjects = async (connection, tenants, tenantOrganizationsMap, tags, maxProjectsPerOrganization) => {
    if (!tags) {
        console.warn('Warning: tags not found, RandomOrganizationProjects will not be created');
        return;
    }
    const projects = [];
    for (const tenant of tenants) {
        const projectsPerOrganization = Math.floor(Math.random() * (maxProjectsPerOrganization - 5)) + 5;
        const orgs = tenantOrganizationsMap.get(tenant);
        for (const org of orgs) {
            const organizationContacts = await connection
                .getRepository(organization_contact_entity_1.OrganizationContact)
                .find({
                where: { organizationId: org.id, tenantId: org.tenantId }
            });
            const organizationContact = faker.random.arrayElement(organizationContacts);
            let orgTags = [];
            orgTags = tags.filter((x) => (x.organization = org));
            for (let i = 0; i < projectsPerOrganization; i++) {
                const project = new organization_projects_entity_1.OrganizationProject();
                project.tags = [tags[Math.floor(Math.random() * tags.length)]];
                project.name = faker.company.companyName();
                project.organizationContact = organizationContact;
                project.organizationId = org.id;
                project.tenant = tenant;
                project.budgetType = faker.random.arrayElement(Object.values(models_1.OrganizationProjectBudgetTypeEnum));
                project.budget =
                    project.budgetType == models_1.OrganizationProjectBudgetTypeEnum.COST
                        ? faker.random.number({ min: 2000, max: 40000 })
                        : faker.random.number({ min: 20, max: 40 });
                project.startDate = faker.date.past(5);
                project.endDate = faker.date.past(2);
                projects.push(project);
            }
        }
    }
    await connection.manager.save(projects);
};


/***/ }),

/***/ "./src/app/organization-projects/organization-projects.service.ts":
/*!************************************************************************!*\
  !*** ./src/app/organization-projects/organization-projects.service.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationProjectsService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const organization_projects_entity_1 = __webpack_require__(/*! ./organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
let OrganizationProjectsService = class OrganizationProjectsService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(organizationProjectsRepository) {
        super(organizationProjectsRepository);
        this.organizationProjectsRepository = organizationProjectsRepository;
    }
    async findByEmployee(id, findInput) {
        const tenantId = context_1.RequestContext.currentTenantId();
        const query = this.organizationProjectsRepository.createQueryBuilder('organization_project');
        query
            .leftJoin('organization_project.members', 'member')
            .where('member.id = :id', { id })
            .andWhere(`${query.alias}.tenantId = :tenantId`, {
            tenantId
        });
        if (findInput && findInput['organizationId']) {
            const { organizationId } = findInput;
            query.andWhere(`${query.alias}.organizationId = :organizationId`, {
                organizationId
            });
        }
        if (findInput && findInput['organizationContactId']) {
            const { organizationContactId } = findInput;
            query.andWhere(`${query.alias}.organizationContactId = :organizationContactId`, {
                organizationContactId
            });
        }
        return await query.getMany();
    }
    async updateTaskViewMode(id, taskViewMode) {
        const project = await this.organizationProjectsRepository.findOne(id);
        project.taskListType = taskViewMode;
        return await this.organizationProjectsRepository.save(project);
    }
};
OrganizationProjectsService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(organization_projects_entity_1.OrganizationProject)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], OrganizationProjectsService);
exports.OrganizationProjectsService = OrganizationProjectsService;


/***/ }),

/***/ "./src/app/organization-recurring-expense/commands/handlers/index.ts":
/*!***************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/commands/handlers/index.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const organization_recurring_expense_delete_handler_1 = __webpack_require__(/*! ./organization-recurring-expense.delete.handler */ "./src/app/organization-recurring-expense/commands/handlers/organization-recurring-expense.delete.handler.ts");
const organization_recurring_expense_edit_handler_1 = __webpack_require__(/*! ./organization-recurring-expense.edit.handler */ "./src/app/organization-recurring-expense/commands/handlers/organization-recurring-expense.edit.handler.ts");
const organization_recurring_expense_create_handler_1 = __webpack_require__(/*! ./organization-recurring-expense.create.handler */ "./src/app/organization-recurring-expense/commands/handlers/organization-recurring-expense.create.handler.ts");
exports.CommandHandlers = [
    organization_recurring_expense_edit_handler_1.OrganizationRecurringExpenseEditHandler,
    organization_recurring_expense_delete_handler_1.OrganizationRecurringExpenseDeleteHandler,
    organization_recurring_expense_create_handler_1.OrganizationRecurringExpenseCreateHandler
];


/***/ }),

/***/ "./src/app/organization-recurring-expense/commands/handlers/organization-recurring-expense.create.handler.ts":
/*!*******************************************************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/commands/handlers/organization-recurring-expense.create.handler.ts ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationRecurringExpenseCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const organization_recurring_expense_service_1 = __webpack_require__(/*! ../../organization-recurring-expense.service */ "./src/app/organization-recurring-expense/organization-recurring-expense.service.ts");
const organization_recurring_expense_create_command_1 = __webpack_require__(/*! ../organization-recurring-expense.create.command */ "./src/app/organization-recurring-expense/commands/organization-recurring-expense.create.command.ts");
let OrganizationRecurringExpenseCreateHandler = class OrganizationRecurringExpenseCreateHandler {
    constructor(organizationRecurringExpenseService) {
        this.organizationRecurringExpenseService = organizationRecurringExpenseService;
    }
    async execute(command) {
        const { input } = command;
        const createdExpense = await this.organizationRecurringExpenseService.create(input);
        await this.organizationRecurringExpenseService.update(createdExpense.id, {
            parentRecurringExpenseId: createdExpense.id
        });
        return Object.assign(Object.assign({}, createdExpense), { parentRecurringExpenseId: createdExpense.id });
    }
};
OrganizationRecurringExpenseCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(organization_recurring_expense_create_command_1.OrganizationRecurringExpenseCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof organization_recurring_expense_service_1.OrganizationRecurringExpenseService !== "undefined" && organization_recurring_expense_service_1.OrganizationRecurringExpenseService) === "function" ? _a : Object])
], OrganizationRecurringExpenseCreateHandler);
exports.OrganizationRecurringExpenseCreateHandler = OrganizationRecurringExpenseCreateHandler;


/***/ }),

/***/ "./src/app/organization-recurring-expense/commands/handlers/organization-recurring-expense.delete.handler.ts":
/*!*******************************************************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/commands/handlers/organization-recurring-expense.delete.handler.ts ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationRecurringExpenseDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const shared_1 = __webpack_require__(/*! ../../../shared */ "./src/app/shared/index.ts");
const organization_recurring_expense_service_1 = __webpack_require__(/*! ../../organization-recurring-expense.service */ "./src/app/organization-recurring-expense/organization-recurring-expense.service.ts");
const organization_recurring_expense_delete_command_1 = __webpack_require__(/*! ../organization-recurring-expense.delete.command */ "./src/app/organization-recurring-expense/commands/organization-recurring-expense.delete.command.ts");
let OrganizationRecurringExpenseDeleteHandler = class OrganizationRecurringExpenseDeleteHandler extends shared_1.RecurringExpenseDeleteHandler {
    constructor(organizationRecurringExpenseService) {
        super(organizationRecurringExpenseService);
        this.organizationRecurringExpenseService = organizationRecurringExpenseService;
    }
    async execute(command) {
        const { id, deleteInput } = command;
        return await this.executeCommand(id, deleteInput);
    }
};
OrganizationRecurringExpenseDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(organization_recurring_expense_delete_command_1.OrganizationRecurringExpenseDeleteCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof organization_recurring_expense_service_1.OrganizationRecurringExpenseService !== "undefined" && organization_recurring_expense_service_1.OrganizationRecurringExpenseService) === "function" ? _a : Object])
], OrganizationRecurringExpenseDeleteHandler);
exports.OrganizationRecurringExpenseDeleteHandler = OrganizationRecurringExpenseDeleteHandler;


/***/ }),

/***/ "./src/app/organization-recurring-expense/commands/handlers/organization-recurring-expense.edit.handler.ts":
/*!*****************************************************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/commands/handlers/organization-recurring-expense.edit.handler.ts ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationRecurringExpenseEditHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const shared_1 = __webpack_require__(/*! ../../../shared */ "./src/app/shared/index.ts");
const organization_recurring_expense_service_1 = __webpack_require__(/*! ../../organization-recurring-expense.service */ "./src/app/organization-recurring-expense/organization-recurring-expense.service.ts");
const organization_recurring_expense_update_type_query_1 = __webpack_require__(/*! ../../queries/organization-recurring-expense.update-type.query */ "./src/app/organization-recurring-expense/queries/organization-recurring-expense.update-type.query.ts");
const organization_recurring_expense_edit_command_1 = __webpack_require__(/*! ../organization-recurring-expense.edit.command */ "./src/app/organization-recurring-expense/commands/organization-recurring-expense.edit.command.ts");
let OrganizationRecurringExpenseEditHandler = class OrganizationRecurringExpenseEditHandler extends shared_1.RecurringExpenseEditHandler {
    constructor(organizationRecurringExpenseService, queryBus) {
        super(organizationRecurringExpenseService);
        this.organizationRecurringExpenseService = organizationRecurringExpenseService;
        this.queryBus = queryBus;
    }
    async execute(command) {
        const { id, input } = command;
        const updateType = await this.queryBus.execute(new organization_recurring_expense_update_type_query_1.OrganizationRecurringExpenseStartDateUpdateTypeQuery({
            newStartDate: new Date(input.startYear, input.startMonth, input.startDay),
            recurringExpenseId: id
        }));
        return await this.executeCommand(id, Object.assign(Object.assign({}, input), { startDateUpdateType: updateType.value }));
    }
};
OrganizationRecurringExpenseEditHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(organization_recurring_expense_edit_command_1.OrganizationRecurringExpenseEditCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof organization_recurring_expense_service_1.OrganizationRecurringExpenseService !== "undefined" && organization_recurring_expense_service_1.OrganizationRecurringExpenseService) === "function" ? _a : Object, typeof (_b = typeof cqrs_1.QueryBus !== "undefined" && cqrs_1.QueryBus) === "function" ? _b : Object])
], OrganizationRecurringExpenseEditHandler);
exports.OrganizationRecurringExpenseEditHandler = OrganizationRecurringExpenseEditHandler;


/***/ }),

/***/ "./src/app/organization-recurring-expense/commands/organization-recurring-expense.create.command.ts":
/*!**********************************************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/commands/organization-recurring-expense.create.command.ts ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationRecurringExpenseCreateCommand = void 0;
class OrganizationRecurringExpenseCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.OrganizationRecurringExpenseCreateCommand = OrganizationRecurringExpenseCreateCommand;
OrganizationRecurringExpenseCreateCommand.type = '[OrganizationRecurringExpense] Create';


/***/ }),

/***/ "./src/app/organization-recurring-expense/commands/organization-recurring-expense.delete.command.ts":
/*!**********************************************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/commands/organization-recurring-expense.delete.command.ts ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationRecurringExpenseDeleteCommand = void 0;
class OrganizationRecurringExpenseDeleteCommand {
    constructor(id, deleteInput) {
        this.id = id;
        this.deleteInput = deleteInput;
    }
}
exports.OrganizationRecurringExpenseDeleteCommand = OrganizationRecurringExpenseDeleteCommand;
OrganizationRecurringExpenseDeleteCommand.type = '[OrganizationRecurringExpense] Delete';


/***/ }),

/***/ "./src/app/organization-recurring-expense/commands/organization-recurring-expense.edit.command.ts":
/*!********************************************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/commands/organization-recurring-expense.edit.command.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationRecurringExpenseEditCommand = void 0;
class OrganizationRecurringExpenseEditCommand {
    constructor(id, input) {
        this.id = id;
        this.input = input;
    }
}
exports.OrganizationRecurringExpenseEditCommand = OrganizationRecurringExpenseEditCommand;
OrganizationRecurringExpenseEditCommand.type = '[OrganizationRecurringExpense] Edit';


/***/ }),

/***/ "./src/app/organization-recurring-expense/organization-recurring-expense.controller.ts":
/*!*********************************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/organization-recurring-expense.controller.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationRecurringExpenseController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const organization_recurring_expense_create_command_1 = __webpack_require__(/*! ./commands/organization-recurring-expense.create.command */ "./src/app/organization-recurring-expense/commands/organization-recurring-expense.create.command.ts");
const organization_recurring_expense_delete_command_1 = __webpack_require__(/*! ./commands/organization-recurring-expense.delete.command */ "./src/app/organization-recurring-expense/commands/organization-recurring-expense.delete.command.ts");
const organization_recurring_expense_edit_command_1 = __webpack_require__(/*! ./commands/organization-recurring-expense.edit.command */ "./src/app/organization-recurring-expense/commands/organization-recurring-expense.edit.command.ts");
const organization_recurring_expense_entity_1 = __webpack_require__(/*! ./organization-recurring-expense.entity */ "./src/app/organization-recurring-expense/organization-recurring-expense.entity.ts");
const organization_recurring_expense_service_1 = __webpack_require__(/*! ./organization-recurring-expense.service */ "./src/app/organization-recurring-expense/organization-recurring-expense.service.ts");
const organization_recurring_expense_by_month_query_1 = __webpack_require__(/*! ./queries/organization-recurring-expense.by-month.query */ "./src/app/organization-recurring-expense/queries/organization-recurring-expense.by-month.query.ts");
const organization_recurring_expense_find_split_expense_query_1 = __webpack_require__(/*! ./queries/organization-recurring-expense.find-split-expense.query */ "./src/app/organization-recurring-expense/queries/organization-recurring-expense.find-split-expense.query.ts");
const organization_recurring_expense_update_type_query_1 = __webpack_require__(/*! ./queries/organization-recurring-expense.update-type.query */ "./src/app/organization-recurring-expense/queries/organization-recurring-expense.update-type.query.ts");
let OrganizationRecurringExpenseController = class OrganizationRecurringExpenseController extends crud_controller_1.CrudController {
    constructor(commandBus, queryBus, organizationRecurringExpenseService) {
        super(organizationRecurringExpenseService);
        this.commandBus = commandBus;
        this.queryBus = queryBus;
        this.organizationRecurringExpenseService = organizationRecurringExpenseService;
    }
    async create(entity) {
        return this.commandBus.execute(new organization_recurring_expense_create_command_1.OrganizationRecurringExpenseCreateCommand(entity));
    }
    async delete(id, data) {
        const { deleteInput } = JSON.parse(data);
        return this.commandBus.execute(new organization_recurring_expense_delete_command_1.OrganizationRecurringExpenseDeleteCommand(id, deleteInput));
    }
    async findAllRecurringExpenses(data) {
        const { findInput, order = {} } = JSON.parse(data);
        return this.organizationRecurringExpenseService.findAll({
            where: findInput,
            order: order
        });
    }
    async getSplitExpensesForEmployee(data, orgId) {
        const { findInput } = JSON.parse(data);
        return this.queryBus.execute(new organization_recurring_expense_find_split_expense_query_1.OrganizationRecurringExpenseFindSplitExpenseQuery(orgId, findInput));
    }
    async update(id, entity) {
        return this.commandBus.execute(new organization_recurring_expense_edit_command_1.OrganizationRecurringExpenseEditCommand(id, entity));
    }
    async findAllExpenses(data) {
        const { findInput } = JSON.parse(data);
        return this.queryBus.execute(new organization_recurring_expense_by_month_query_1.OrganizationRecurringExpenseByMonthQuery(findInput));
    }
    async findStartDateUpdateType(data) {
        const { findInput } = JSON.parse(data);
        return this.queryBus.execute(new organization_recurring_expense_update_type_query_1.OrganizationRecurringExpenseStartDateUpdateTypeQuery(findInput));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new expense' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The expense has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.CREATED),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof organization_recurring_expense_entity_1.OrganizationRecurringExpense !== "undefined" && organization_recurring_expense_entity_1.OrganizationRecurringExpense) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], OrganizationRecurringExpenseController.prototype, "create", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Delete record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'The record has been successfully deleted'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, String]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], OrganizationRecurringExpenseController.prototype, "delete", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all organization recurring expenses.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found organization recurring expense',
        type: organization_recurring_expense_entity_1.OrganizationRecurringExpense
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], OrganizationRecurringExpenseController.prototype, "findAllRecurringExpenses", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all organization recurring expenses for given employee, also known as split recurring expenses.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found organization recurring expense'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('/employee/:orgId'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__param(1, common_1.Param('orgId')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, String]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], OrganizationRecurringExpenseController.prototype, "getSplitExpensesForEmployee", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_f = typeof models_1.IRecurringExpenseEditInput !== "undefined" && models_1.IRecurringExpenseEditInput) === "function" ? _f : Object]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], OrganizationRecurringExpenseController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all organization recurring expense by month.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found organization recurring expense',
        type: organization_recurring_expense_entity_1.OrganizationRecurringExpense
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('/month'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], OrganizationRecurringExpenseController.prototype, "findAllExpenses", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find start date update type & conflicting expenses for the update'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found start date update type'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('/date-update-type'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], OrganizationRecurringExpenseController.prototype, "findStartDateUpdateType", null);
OrganizationRecurringExpenseController = tslib_1.__decorate([
    swagger_1.ApiTags('OrganizationRecurringExpense'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_k = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _k : Object, typeof (_l = typeof cqrs_1.QueryBus !== "undefined" && cqrs_1.QueryBus) === "function" ? _l : Object, typeof (_m = typeof organization_recurring_expense_service_1.OrganizationRecurringExpenseService !== "undefined" && organization_recurring_expense_service_1.OrganizationRecurringExpenseService) === "function" ? _m : Object])
], OrganizationRecurringExpenseController);
exports.OrganizationRecurringExpenseController = OrganizationRecurringExpenseController;


/***/ }),

/***/ "./src/app/organization-recurring-expense/organization-recurring-expense.entity.ts":
/*!*****************************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/organization-recurring-expense.entity.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationRecurringExpense = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let OrganizationRecurringExpense = class OrganizationRecurringExpense extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number, minimum: 1, maximum: 31 }),
    class_validator_1.IsNumber(),
    class_validator_1.IsNotEmpty(),
    class_validator_1.Min(1),
    class_validator_1.Max(31),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], OrganizationRecurringExpense.prototype, "startDay", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number, minimum: 1, maximum: 12 }),
    class_validator_1.IsNumber(),
    class_validator_1.IsNotEmpty(),
    class_validator_1.Min(1),
    class_validator_1.Max(12),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], OrganizationRecurringExpense.prototype, "startMonth", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number, minimum: 1 }),
    class_validator_1.IsNumber(),
    class_validator_1.IsNotEmpty(),
    class_validator_1.Min(0),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Number)
], OrganizationRecurringExpense.prototype, "startYear", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    class_validator_1.IsDate(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", typeof (_a = typeof Date !== "undefined" && Date) === "function" ? _a : Object)
], OrganizationRecurringExpense.prototype, "startDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number, minimum: 1, maximum: 31 }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    class_validator_1.Min(1),
    class_validator_1.Max(31),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], OrganizationRecurringExpense.prototype, "endDay", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number, minimum: 1, maximum: 12 }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    class_validator_1.Min(1),
    class_validator_1.Max(12),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], OrganizationRecurringExpense.prototype, "endMonth", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number, minimum: 1 }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    class_validator_1.Min(0),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], OrganizationRecurringExpense.prototype, "endYear", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], OrganizationRecurringExpense.prototype, "endDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationRecurringExpense.prototype, "categoryName", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], OrganizationRecurringExpense.prototype, "value", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.CurrenciesEnum }),
    class_validator_1.IsEnum(models_1.CurrenciesEnum),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationRecurringExpense.prototype, "currency", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], OrganizationRecurringExpense.prototype, "splitExpense", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Index(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationRecurringExpense.prototype, "parentRecurringExpenseId", void 0);
OrganizationRecurringExpense = tslib_1.__decorate([
    typeorm_1.Entity('organization_recurring_expense')
], OrganizationRecurringExpense);
exports.OrganizationRecurringExpense = OrganizationRecurringExpense;


/***/ }),

/***/ "./src/app/organization-recurring-expense/organization-recurring-expense.module.ts":
/*!*****************************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/organization-recurring-expense.module.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationRecurringExpenseModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/organization-recurring-expense/commands/handlers/index.ts");
const organization_recurring_expense_controller_1 = __webpack_require__(/*! ./organization-recurring-expense.controller */ "./src/app/organization-recurring-expense/organization-recurring-expense.controller.ts");
const organization_recurring_expense_entity_1 = __webpack_require__(/*! ./organization-recurring-expense.entity */ "./src/app/organization-recurring-expense/organization-recurring-expense.entity.ts");
const organization_recurring_expense_service_1 = __webpack_require__(/*! ./organization-recurring-expense.service */ "./src/app/organization-recurring-expense/organization-recurring-expense.service.ts");
const handlers_2 = __webpack_require__(/*! ./queries/handlers */ "./src/app/organization-recurring-expense/queries/handlers/index.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const organization_service_1 = __webpack_require__(/*! ../organization/organization.service */ "./src/app/organization/organization.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let OrganizationRecurringExpenseModule = class OrganizationRecurringExpenseModule {
};
OrganizationRecurringExpenseModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([
                organization_recurring_expense_entity_1.OrganizationRecurringExpense,
                organization_entity_1.Organization,
                employee_entity_1.Employee
            ]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [organization_recurring_expense_controller_1.OrganizationRecurringExpenseController],
        providers: [
            organization_recurring_expense_service_1.OrganizationRecurringExpenseService,
            employee_service_1.EmployeeService,
            organization_service_1.OrganizationService,
            ...handlers_2.QueryHandlers,
            ...handlers_1.CommandHandlers
        ],
        exports: [organization_recurring_expense_service_1.OrganizationRecurringExpenseService]
    })
], OrganizationRecurringExpenseModule);
exports.OrganizationRecurringExpenseModule = OrganizationRecurringExpenseModule;


/***/ }),

/***/ "./src/app/organization-recurring-expense/organization-recurring-expense.seed.ts":
/*!***************************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/organization-recurring-expense.seed.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomOrganizationRecurringExpense = exports.createDefaultOrganizationRecurringExpense = void 0;
const organization_recurring_expense_entity_1 = __webpack_require__(/*! ./organization-recurring-expense.entity */ "./src/app/organization-recurring-expense/organization-recurring-expense.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
exports.createDefaultOrganizationRecurringExpense = async (connection, tenant, defaultOrganizations) => {
    if (!defaultOrganizations) {
        console.warn('Warning: defaultOrganizations not found, default organization recurring expense not be created');
        return;
    }
    let mapOrganizationRecurringExpense = [];
    const expenseCategories = Object.keys(models_1.RecurringExpenseDefaultCategoriesEnum);
    mapOrganizationRecurringExpense = await dataOperation(connection, tenant, mapOrganizationRecurringExpense, expenseCategories, defaultOrganizations);
    return mapOrganizationRecurringExpense;
};
exports.createRandomOrganizationRecurringExpense = async (connection, tenants, tenantOrganizationsMap) => {
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, organization recurring expense not be created');
        return;
    }
    let mapOrganizationRecurringExpense = [];
    const expenseCategories = Object.keys(models_1.RecurringExpenseDefaultCategoriesEnum);
    for (const tenant of tenants) {
        const tenantOrganization = tenantOrganizationsMap.get(tenant);
        for (const tenantOrg of tenantOrganization) {
            mapOrganizationRecurringExpense = await dataOperation(connection, tenant, mapOrganizationRecurringExpense, expenseCategories, tenantOrg);
        }
    }
    return mapOrganizationRecurringExpense;
};
const dataOperation = async (connection, tenant, mapOrganizationRecurringExpense, expenseCategories, tenantOrg) => {
    for (const expenseCategory of expenseCategories) {
        const organization = new organization_recurring_expense_entity_1.OrganizationRecurringExpense();
        const startDate = faker.date.past();
        const endDate = moment(startDate).add(1, 'months').toDate();
        organization.organization = tenantOrg;
        organization.organizationId = tenantOrg.id;
        organization.tenant = tenant;
        organization.startDay = startDate.getDate();
        organization.startMonth = startDate.getMonth() + 1;
        organization.startYear = startDate.getFullYear();
        organization.startDate = startDate;
        organization.endDay = endDate.getDate();
        organization.endMonth = endDate.getMonth();
        organization.endYear = endDate.getFullYear();
        organization.endDate = endDate;
        organization.categoryName = expenseCategory;
        organization.value = faker.random.number(9999);
        organization.currency = tenantOrg.currency || environment_1.environment.defaultCurrency;
        mapOrganizationRecurringExpense.push(organization);
    }
    await connection.manager.save(mapOrganizationRecurringExpense);
    return mapOrganizationRecurringExpense;
};


/***/ }),

/***/ "./src/app/organization-recurring-expense/organization-recurring-expense.service.ts":
/*!******************************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/organization-recurring-expense.service.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationRecurringExpenseService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
const organization_recurring_expense_entity_1 = __webpack_require__(/*! ./organization-recurring-expense.entity */ "./src/app/organization-recurring-expense/organization-recurring-expense.entity.ts");
let OrganizationRecurringExpenseService = class OrganizationRecurringExpenseService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(organizationRecurringExpenseRepository) {
        super(organizationRecurringExpenseRepository);
        this.organizationRecurringExpenseRepository = organizationRecurringExpenseRepository;
    }
};
OrganizationRecurringExpenseService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(organization_recurring_expense_entity_1.OrganizationRecurringExpense)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], OrganizationRecurringExpenseService);
exports.OrganizationRecurringExpenseService = OrganizationRecurringExpenseService;


/***/ }),

/***/ "./src/app/organization-recurring-expense/queries/handlers/index.ts":
/*!**************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/queries/handlers/index.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryHandlers = void 0;
const organization_recurring_expense_by_month_handler_1 = __webpack_require__(/*! ./organization-recurring-expense.by-month.handler */ "./src/app/organization-recurring-expense/queries/handlers/organization-recurring-expense.by-month.handler.ts");
const organization_recurring_expense_find_split_expense_handler_1 = __webpack_require__(/*! ./organization-recurring-expense.find-split-expense.handler */ "./src/app/organization-recurring-expense/queries/handlers/organization-recurring-expense.find-split-expense.handler.ts");
const organization_recurring_expense_start_date_update_type_handler_1 = __webpack_require__(/*! ./organization-recurring-expense.start-date-update-type.handler */ "./src/app/organization-recurring-expense/queries/handlers/organization-recurring-expense.start-date-update-type.handler.ts");
exports.QueryHandlers = [
    organization_recurring_expense_by_month_handler_1.OrganizationRecurringExpenseByMonthHandler,
    organization_recurring_expense_find_split_expense_handler_1.OrganizationRecurringExpenseFindSplitExpenseHandler,
    organization_recurring_expense_start_date_update_type_handler_1.OrganizationRecurringExpenseUpdateTypeHandler
];


/***/ }),

/***/ "./src/app/organization-recurring-expense/queries/handlers/organization-recurring-expense.by-month.handler.ts":
/*!********************************************************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/queries/handlers/organization-recurring-expense.by-month.handler.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationRecurringExpenseByMonthHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const shared_1 = __webpack_require__(/*! ../../../shared */ "./src/app/shared/index.ts");
const organization_recurring_expense_service_1 = __webpack_require__(/*! ../../organization-recurring-expense.service */ "./src/app/organization-recurring-expense/organization-recurring-expense.service.ts");
const organization_recurring_expense_by_month_query_1 = __webpack_require__(/*! ../organization-recurring-expense.by-month.query */ "./src/app/organization-recurring-expense/queries/organization-recurring-expense.by-month.query.ts");
let OrganizationRecurringExpenseByMonthHandler = class OrganizationRecurringExpenseByMonthHandler extends shared_1.FindRecurringExpenseByMonthHandler {
    constructor(organizationRecurringExpenseService) {
        super(organizationRecurringExpenseService);
        this.organizationRecurringExpenseService = organizationRecurringExpenseService;
    }
    async execute(command) {
        const { input } = command;
        const recurringExpenses = await this.executeCommand(input);
        return recurringExpenses;
    }
};
OrganizationRecurringExpenseByMonthHandler = tslib_1.__decorate([
    cqrs_1.QueryHandler(organization_recurring_expense_by_month_query_1.OrganizationRecurringExpenseByMonthQuery),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof organization_recurring_expense_service_1.OrganizationRecurringExpenseService !== "undefined" && organization_recurring_expense_service_1.OrganizationRecurringExpenseService) === "function" ? _a : Object])
], OrganizationRecurringExpenseByMonthHandler);
exports.OrganizationRecurringExpenseByMonthHandler = OrganizationRecurringExpenseByMonthHandler;


/***/ }),

/***/ "./src/app/organization-recurring-expense/queries/handlers/organization-recurring-expense.find-split-expense.handler.ts":
/*!******************************************************************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/queries/handlers/organization-recurring-expense.find-split-expense.handler.ts ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationRecurringExpenseFindSplitExpenseHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_service_1 = __webpack_require__(/*! ../../../employee/employee.service */ "./src/app/employee/employee.service.ts");
const organization_service_1 = __webpack_require__(/*! ../../../organization/organization.service */ "./src/app/organization/organization.service.ts");
const organization_recurring_expense_service_1 = __webpack_require__(/*! ../../organization-recurring-expense.service */ "./src/app/organization-recurring-expense/organization-recurring-expense.service.ts");
const organization_recurring_expense_find_split_expense_query_1 = __webpack_require__(/*! ../organization-recurring-expense.find-split-expense.query */ "./src/app/organization-recurring-expense/queries/organization-recurring-expense.find-split-expense.query.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
let OrganizationRecurringExpenseFindSplitExpenseHandler = class OrganizationRecurringExpenseFindSplitExpenseHandler {
    constructor(organizationRecurringExpenseService, organizationService, employeeService) {
        this.organizationRecurringExpenseService = organizationRecurringExpenseService;
        this.organizationService = organizationService;
        this.employeeService = employeeService;
    }
    async execute(query) {
        const { orgId, findInput: { year, month } } = query;
        const filterDate = new Date(year, month, 1);
        const { items, total } = await this.organizationRecurringExpenseService.findAll({
            where: [
                {
                    splitExpense: true,
                    orgId,
                    startDate: typeorm_1.LessThanOrEqual(filterDate),
                    endDate: typeorm_1.IsNull()
                },
                {
                    splitExpense: true,
                    orgId,
                    startDate: typeorm_1.LessThanOrEqual(filterDate),
                    endDate: typeorm_1.MoreThanOrEqual(filterDate)
                }
            ]
        });
        const organization = await this.organizationService.findOne({
            id: orgId
        });
        const orgEmployees = await this.employeeService.findAll({
            where: {
                organization
            }
        });
        const splitItems = items.map((e) => (Object.assign(Object.assign({}, e), { value: +(e.value / (orgEmployees.total !== 0 ? orgEmployees.total : 1)).toFixed(2), originalValue: +e.value, employeeCount: orgEmployees.total })));
        return { items: splitItems, total };
    }
};
OrganizationRecurringExpenseFindSplitExpenseHandler = tslib_1.__decorate([
    cqrs_1.QueryHandler(organization_recurring_expense_find_split_expense_query_1.OrganizationRecurringExpenseFindSplitExpenseQuery),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof organization_recurring_expense_service_1.OrganizationRecurringExpenseService !== "undefined" && organization_recurring_expense_service_1.OrganizationRecurringExpenseService) === "function" ? _a : Object, typeof (_b = typeof organization_service_1.OrganizationService !== "undefined" && organization_service_1.OrganizationService) === "function" ? _b : Object, typeof (_c = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _c : Object])
], OrganizationRecurringExpenseFindSplitExpenseHandler);
exports.OrganizationRecurringExpenseFindSplitExpenseHandler = OrganizationRecurringExpenseFindSplitExpenseHandler;


/***/ }),

/***/ "./src/app/organization-recurring-expense/queries/handlers/organization-recurring-expense.start-date-update-type.handler.ts":
/*!**********************************************************************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/queries/handlers/organization-recurring-expense.start-date-update-type.handler.ts ***!
  \**********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationRecurringExpenseUpdateTypeHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const recurring_expense_find_update_type_handler_1 = __webpack_require__(/*! ../../../shared/handlers/recurring-expense.find-update-type.handler */ "./src/app/shared/handlers/recurring-expense.find-update-type.handler.ts");
const organization_recurring_expense_service_1 = __webpack_require__(/*! ../../organization-recurring-expense.service */ "./src/app/organization-recurring-expense/organization-recurring-expense.service.ts");
const organization_recurring_expense_update_type_query_1 = __webpack_require__(/*! ../organization-recurring-expense.update-type.query */ "./src/app/organization-recurring-expense/queries/organization-recurring-expense.update-type.query.ts");
let OrganizationRecurringExpenseUpdateTypeHandler = class OrganizationRecurringExpenseUpdateTypeHandler extends recurring_expense_find_update_type_handler_1.FindRecurringExpenseStartDateUpdateTypeHandler {
    constructor(organizationRecurringExpenseService) {
        super(organizationRecurringExpenseService);
        this.organizationRecurringExpenseService = organizationRecurringExpenseService;
    }
    async execute(command) {
        return await this.executeQuery(command.input);
    }
};
OrganizationRecurringExpenseUpdateTypeHandler = tslib_1.__decorate([
    cqrs_1.QueryHandler(organization_recurring_expense_update_type_query_1.OrganizationRecurringExpenseStartDateUpdateTypeQuery),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof organization_recurring_expense_service_1.OrganizationRecurringExpenseService !== "undefined" && organization_recurring_expense_service_1.OrganizationRecurringExpenseService) === "function" ? _a : Object])
], OrganizationRecurringExpenseUpdateTypeHandler);
exports.OrganizationRecurringExpenseUpdateTypeHandler = OrganizationRecurringExpenseUpdateTypeHandler;


/***/ }),

/***/ "./src/app/organization-recurring-expense/queries/organization-recurring-expense.by-month.query.ts":
/*!*********************************************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/queries/organization-recurring-expense.by-month.query.ts ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationRecurringExpenseByMonthQuery = void 0;
class OrganizationRecurringExpenseByMonthQuery {
    constructor(input) {
        this.input = input;
    }
}
exports.OrganizationRecurringExpenseByMonthQuery = OrganizationRecurringExpenseByMonthQuery;
OrganizationRecurringExpenseByMonthQuery.type = '[OrganizationRecurringExpense] By Month';


/***/ }),

/***/ "./src/app/organization-recurring-expense/queries/organization-recurring-expense.find-split-expense.query.ts":
/*!*******************************************************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/queries/organization-recurring-expense.find-split-expense.query.ts ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationRecurringExpenseFindSplitExpenseQuery = void 0;
class OrganizationRecurringExpenseFindSplitExpenseQuery {
    constructor(orgId, findInput) {
        this.orgId = orgId;
        this.findInput = findInput;
    }
}
exports.OrganizationRecurringExpenseFindSplitExpenseQuery = OrganizationRecurringExpenseFindSplitExpenseQuery;
OrganizationRecurringExpenseFindSplitExpenseQuery.type = '[OrganizationRecurringExpense] Find Split Expense';


/***/ }),

/***/ "./src/app/organization-recurring-expense/queries/organization-recurring-expense.update-type.query.ts":
/*!************************************************************************************************************!*\
  !*** ./src/app/organization-recurring-expense/queries/organization-recurring-expense.update-type.query.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationRecurringExpenseStartDateUpdateTypeQuery = void 0;
class OrganizationRecurringExpenseStartDateUpdateTypeQuery {
    constructor(input) {
        this.input = input;
    }
}
exports.OrganizationRecurringExpenseStartDateUpdateTypeQuery = OrganizationRecurringExpenseStartDateUpdateTypeQuery;
OrganizationRecurringExpenseStartDateUpdateTypeQuery.type = '[OrganizationRecurringExpense] Start Date Update Type';


/***/ }),

/***/ "./src/app/organization-sprint/commands/handlers/index.ts":
/*!****************************************************************!*\
  !*** ./src/app/organization-sprint/commands/handlers/index.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const organization_sprint_update_handler_1 = __webpack_require__(/*! ./organization-sprint.update.handler */ "./src/app/organization-sprint/commands/handlers/organization-sprint.update.handler.ts");
exports.CommandHandlers = [
    organization_sprint_update_handler_1.OrganizationSprintUpdateHandler
];


/***/ }),

/***/ "./src/app/organization-sprint/commands/handlers/organization-sprint.update.handler.ts":
/*!*********************************************************************************************!*\
  !*** ./src/app/organization-sprint/commands/handlers/organization-sprint.update.handler.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationSprintUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const organization_sprint_service_1 = __webpack_require__(/*! ../../organization-sprint.service */ "./src/app/organization-sprint/organization-sprint.service.ts");
const organization_sprint_update_command_1 = __webpack_require__(/*! ../organization-sprint.update.command */ "./src/app/organization-sprint/commands/organization-sprint.update.command.ts");
let OrganizationSprintUpdateHandler = class OrganizationSprintUpdateHandler {
    constructor(organizationSprintService) {
        this.organizationSprintService = organizationSprintService;
    }
    async execute(command) {
        const { id, input } = command;
        return this.organizationSprintService.create(Object.assign({ id }, input));
    }
};
OrganizationSprintUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(organization_sprint_update_command_1.OrganizationSprintUpdateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof organization_sprint_service_1.OrganizationSprintService !== "undefined" && organization_sprint_service_1.OrganizationSprintService) === "function" ? _a : Object])
], OrganizationSprintUpdateHandler);
exports.OrganizationSprintUpdateHandler = OrganizationSprintUpdateHandler;


/***/ }),

/***/ "./src/app/organization-sprint/commands/organization-sprint.update.command.ts":
/*!************************************************************************************!*\
  !*** ./src/app/organization-sprint/commands/organization-sprint.update.command.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationSprintUpdateCommand = void 0;
class OrganizationSprintUpdateCommand {
    constructor(id, input) {
        this.id = id;
        this.input = input;
    }
}
exports.OrganizationSprintUpdateCommand = OrganizationSprintUpdateCommand;
OrganizationSprintUpdateCommand.type = '[OrganizationSprint] Update';


/***/ }),

/***/ "./src/app/organization-sprint/organization-sprint.controller.ts":
/*!***********************************************************************!*\
  !*** ./src/app/organization-sprint/organization-sprint.controller.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationSprintController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const organization_sprint_entity_1 = __webpack_require__(/*! ./organization-sprint.entity */ "./src/app/organization-sprint/organization-sprint.entity.ts");
const organization_sprint_service_1 = __webpack_require__(/*! ./organization-sprint.service */ "./src/app/organization-sprint/organization-sprint.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const organization_sprint_update_command_1 = __webpack_require__(/*! ./commands/organization-sprint.update.command */ "./src/app/organization-sprint/commands/organization-sprint.update.command.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let OrganizationSprintController = class OrganizationSprintController extends core_1.CrudController {
    constructor(organizationSprintService, commandBus) {
        super(organizationSprintService);
        this.organizationSprintService = organizationSprintService;
        this.commandBus = commandBus;
    }
    async findAllSprints(data, req) {
        console.log(data);
        const { relations, findInput } = JSON.parse(data);
        return this.organizationSprintService.findAll({
            where: findInput,
            relations
        });
    }
    async createOrganizationSprint(entity, ...options) {
        return this.organizationSprintService.create(entity);
    }
    async update(id, entity) {
        return this.commandBus.execute(new organization_sprint_update_command_1.OrganizationSprintUpdateCommand(id, entity));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all organization sprint.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found projects',
        type: organization_projects_entity_1.OrganizationProject
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__param(1, common_1.Request()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], OrganizationSprintController.prototype, "findAllSprints", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof organization_sprint_entity_1.OrganizationSprint !== "undefined" && organization_sprint_entity_1.OrganizationSprint) === "function" ? _b : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], OrganizationSprintController.prototype, "createOrganizationSprint", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_d = typeof models_1.IOrganizationSprintUpdateInput !== "undefined" && models_1.IOrganizationSprintUpdateInput) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], OrganizationSprintController.prototype, "update", null);
OrganizationSprintController = tslib_1.__decorate([
    swagger_1.ApiTags('OrganizationSprint'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_f = typeof organization_sprint_service_1.OrganizationSprintService !== "undefined" && organization_sprint_service_1.OrganizationSprintService) === "function" ? _f : Object, typeof (_g = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _g : Object])
], OrganizationSprintController);
exports.OrganizationSprintController = OrganizationSprintController;


/***/ }),

/***/ "./src/app/organization-sprint/organization-sprint.entity.ts":
/*!*******************************************************************!*\
  !*** ./src/app/organization-sprint/organization-sprint.entity.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationSprint = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const task_entity_1 = __webpack_require__(/*! ../tasks/task.entity */ "./src/app/tasks/task.entity.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let OrganizationSprint = class OrganizationSprint extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationSprint.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationSprint.prototype, "projectId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationSprint.prototype, "goal", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ default: 7 }),
    tslib_1.__metadata("design:type", Number)
], OrganizationSprint.prototype, "length", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_a = typeof Date !== "undefined" && Date) === "function" ? _a : Object)
], OrganizationSprint.prototype, "startDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], OrganizationSprint.prototype, "endDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number, enum: models_1.SprintStartDayEnum }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], OrganizationSprint.prototype, "dayStart", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: organization_projects_entity_1.OrganizationProject }),
    typeorm_1.ManyToOne((type) => organization_projects_entity_1.OrganizationProject, (project) => project.organizationSprints, {
        nullable: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_c = typeof organization_projects_entity_1.OrganizationProject !== "undefined" && organization_projects_entity_1.OrganizationProject) === "function" ? _c : Object)
], OrganizationSprint.prototype, "project", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], OrganizationSprint.prototype, "isActive", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: task_entity_1.Task }),
    typeorm_1.OneToMany((type) => task_entity_1.Task, (task) => task.organizationSprint),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], OrganizationSprint.prototype, "tasks", void 0);
OrganizationSprint = tslib_1.__decorate([
    typeorm_1.Entity('organization_sprint')
], OrganizationSprint);
exports.OrganizationSprint = OrganizationSprint;


/***/ }),

/***/ "./src/app/organization-sprint/organization-sprint.module.ts":
/*!*******************************************************************!*\
  !*** ./src/app/organization-sprint/organization-sprint.module.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationSprintModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const organization_sprint_service_1 = __webpack_require__(/*! ./organization-sprint.service */ "./src/app/organization-sprint/organization-sprint.service.ts");
const organization_sprint_controller_1 = __webpack_require__(/*! ./organization-sprint.controller */ "./src/app/organization-sprint/organization-sprint.controller.ts");
const organization_sprint_entity_1 = __webpack_require__(/*! ./organization-sprint.entity */ "./src/app/organization-sprint/organization-sprint.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const task_entity_1 = __webpack_require__(/*! ../tasks/task.entity */ "./src/app/tasks/task.entity.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/organization-sprint/commands/handlers/index.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let OrganizationSprintModule = class OrganizationSprintModule {
};
OrganizationSprintModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([organization_sprint_entity_1.OrganizationSprint, user_entity_1.User, task_entity_1.Task]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [organization_sprint_controller_1.OrganizationSprintController],
        providers: [organization_sprint_service_1.OrganizationSprintService, user_service_1.UserService, ...handlers_1.CommandHandlers],
        exports: [organization_sprint_service_1.OrganizationSprintService]
    })
], OrganizationSprintModule);
exports.OrganizationSprintModule = OrganizationSprintModule;


/***/ }),

/***/ "./src/app/organization-sprint/organization-sprint.seed.ts":
/*!*****************************************************************!*\
  !*** ./src/app/organization-sprint/organization-sprint.seed.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomOrganizationSprint = void 0;
const faker = __webpack_require__(/*! faker */ "faker");
const organization_sprint_entity_1 = __webpack_require__(/*! ./organization-sprint.entity */ "./src/app/organization-sprint/organization-sprint.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const task_entity_1 = __webpack_require__(/*! ../tasks/task.entity */ "./src/app/tasks/task.entity.ts");
exports.createRandomOrganizationSprint = async (connection, tenants, tenantOrganizationsMap) => {
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, Random OrganizationSprint will not be created');
        return;
    }
    const sprints = [];
    for (const tenant of tenants) {
        const orgs = tenantOrganizationsMap.get(tenant);
        for (const org of orgs) {
            const orgProjects = await connection.manager.find(organization_projects_entity_1.OrganizationProject, {
                where: [{ organization: org }]
            });
            let project = faker.random.arrayElement(orgProjects);
            const tasks = await connection.manager.find(task_entity_1.Task, {
                where: [{ project: project }]
            });
            for (let i = 0; i <= faker.random.number(10); i++) {
                const sprint = new organization_sprint_entity_1.OrganizationSprint();
                sprint.name = faker.company.companyName();
                sprint.projectId = project.id;
                sprint.length = faker.random.number({ min: 1, max: 9 });
                sprint.startDate = faker.date.past();
                sprint.endDate = moment(sprint.startDate)
                    .add(1, 'months')
                    .toDate();
                sprint.isActive = faker.random.boolean();
                sprint.dayStart = models_1.SprintStartDayEnum.MONDAY;
                sprint.organizationId = org.id;
                sprint.organization = org;
                sprint.tasks = tasks;
                sprint.tenant = tenant;
                sprints.push(sprint);
            }
        }
    }
    await connection.manager.save(sprints);
};


/***/ }),

/***/ "./src/app/organization-sprint/organization-sprint.service.ts":
/*!********************************************************************!*\
  !*** ./src/app/organization-sprint/organization-sprint.service.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationSprintService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const organization_sprint_entity_1 = __webpack_require__(/*! ./organization-sprint.entity */ "./src/app/organization-sprint/organization-sprint.entity.ts");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_2 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
let OrganizationSprintService = class OrganizationSprintService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(sprintRepository) {
        super(sprintRepository);
        this.sprintRepository = sprintRepository;
    }
};
OrganizationSprintService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_2.InjectRepository(organization_sprint_entity_1.OrganizationSprint)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _a : Object])
], OrganizationSprintService);
exports.OrganizationSprintService = OrganizationSprintService;


/***/ }),

/***/ "./src/app/organization-team-employee/organization-team-employee.entity.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/organization-team-employee/organization-team-employee.entity.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationTeamEmployee = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const organization_team_entity_1 = __webpack_require__(/*! ../organization-team/organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const role_entity_1 = __webpack_require__(/*! ../role/role.entity */ "./src/app/role/role.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let OrganizationTeamEmployee = class OrganizationTeamEmployee extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationTeamEmployee.prototype, "organizationTeamId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationTeamEmployee.prototype, "employeeId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => organization_team_entity_1.OrganizationTeam, (organizationTeam) => organizationTeam.members, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", typeof (_a = typeof organization_team_entity_1.OrganizationTeam !== "undefined" && organization_team_entity_1.OrganizationTeam) === "function" ? _a : Object)
], OrganizationTeamEmployee.prototype, "organizationTeam", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => employee_entity_1.Employee, (employee) => employee.teams, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", typeof (_b = typeof employee_entity_1.Employee !== "undefined" && employee_entity_1.Employee) === "function" ? _b : Object)
], OrganizationTeamEmployee.prototype, "employee", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.ManyToOne((type) => role_entity_1.Role, { nullable: true }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_c = typeof role_entity_1.Role !== "undefined" && role_entity_1.Role) === "function" ? _c : Object)
], OrganizationTeamEmployee.prototype, "role", void 0);
tslib_1.__decorate([
    typeorm_1.RelationId((organizationTeamEmployee) => organizationTeamEmployee.role),
    tslib_1.__metadata("design:type", String)
], OrganizationTeamEmployee.prototype, "roleId", void 0);
OrganizationTeamEmployee = tslib_1.__decorate([
    typeorm_1.Entity('organization_team_employee')
], OrganizationTeamEmployee);
exports.OrganizationTeamEmployee = OrganizationTeamEmployee;


/***/ }),

/***/ "./src/app/organization-team-employee/organization-team-employee.module.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/organization-team-employee/organization-team-employee.module.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationTeamEmployeeModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const organization_team_employee_entity_1 = __webpack_require__(/*! ./organization-team-employee.entity */ "./src/app/organization-team-employee/organization-team-employee.entity.ts");
const organization_team_employee_service_1 = __webpack_require__(/*! ./organization-team-employee.service */ "./src/app/organization-team-employee/organization-team-employee.service.ts");
let OrganizationTeamEmployeeModule = class OrganizationTeamEmployeeModule {
};
OrganizationTeamEmployeeModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([organization_team_employee_entity_1.OrganizationTeamEmployee])],
        providers: [organization_team_employee_service_1.OrganizationTeamEmployeeService],
        exports: [organization_team_employee_service_1.OrganizationTeamEmployeeService]
    })
], OrganizationTeamEmployeeModule);
exports.OrganizationTeamEmployeeModule = OrganizationTeamEmployeeModule;


/***/ }),

/***/ "./src/app/organization-team-employee/organization-team-employee.seed.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/organization-team-employee/organization-team-employee.seed.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomOrganizationTeamEmployee = void 0;
const faker = __webpack_require__(/*! faker */ "faker");
const organization_team_employee_entity_1 = __webpack_require__(/*! ./organization-team-employee.entity */ "./src/app/organization-team-employee/organization-team-employee.entity.ts");
const organization_team_entity_1 = __webpack_require__(/*! ../organization-team/organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const role_entity_1 = __webpack_require__(/*! ../role/role.entity */ "./src/app/role/role.entity.ts");
exports.createRandomOrganizationTeamEmployee = async (connection, tenants, tenantEmployeeMap, tenantOrganizationsMap) => {
    if (!tenantEmployeeMap) {
        console.warn('Warning: tenantEmployeeMap not found, Random Organization Team Employee will not be created');
        return;
    }
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, Random Organization Team Employee will not be created');
        return;
    }
    const orgTeamEmployees = [];
    for (const tenant of tenants) {
        const orgs = tenantOrganizationsMap.get(tenant);
        const tenantEmployees = tenantEmployeeMap.get(tenant);
        for (const org of orgs) {
            const organizationTeams = await connection.manager.find(organization_team_entity_1.OrganizationTeam, {
                where: [{ organizationId: org.id }]
            });
            const roles = await connection.manager.find(role_entity_1.Role, {});
            const team = faker.random.arrayElement(organizationTeams);
            const employee = faker.random.arrayElement(tenantEmployees);
            const orgTeamEmployee = new organization_team_employee_entity_1.OrganizationTeamEmployee();
            orgTeamEmployee.organizationTeamId = team.id;
            orgTeamEmployee.employeeId = employee.id;
            orgTeamEmployee.organizationTeam = team;
            orgTeamEmployee.employee = employee;
            orgTeamEmployee.organization = org;
            orgTeamEmployee.tenant = tenant;
            orgTeamEmployee.role = faker.random.arrayElement(roles);
            orgTeamEmployees.push(orgTeamEmployee);
        }
    }
    await connection.manager.save(orgTeamEmployees);
};


/***/ }),

/***/ "./src/app/organization-team-employee/organization-team-employee.service.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/organization-team-employee/organization-team-employee.service.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationTeamEmployeeService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const organization_team_employee_entity_1 = __webpack_require__(/*! ./organization-team-employee.entity */ "./src/app/organization-team-employee/organization-team-employee.entity.ts");
let OrganizationTeamEmployeeService = class OrganizationTeamEmployeeService extends core_1.CrudService {
    constructor(OrganizationTeamEmployeeRepository) {
        super(OrganizationTeamEmployeeRepository);
        this.OrganizationTeamEmployeeRepository = OrganizationTeamEmployeeRepository;
    }
    async updateOrganizationTeam(teamId, employeesToUpdate, role, managerIds, memberIds) {
        const members = [...managerIds, ...memberIds];
        const { items: existingEmployees } = await this.findAll({
            where: { organizationTeamId: teamId },
            relations: ['role']
        });
        if (existingEmployees) {
            const existingMembers = existingEmployees.map((emp) => emp.employeeId);
            const removedMemberIds = existingEmployees
                .filter((employee) => !members.includes(employee.employeeId))
                .map((emp) => emp.id) || [];
            this.deleteMemberByIds(removedMemberIds);
            existingEmployees
                .filter((employee) => members.includes(employee.employeeId))
                .forEach(async (employee) => {
                await this.update(employee.id, {
                    role: managerIds.includes(employee.employeeId)
                        ? role
                        : null
                });
            });
            employeesToUpdate
                .filter((emp) => !existingMembers.includes(emp.id))
                .forEach(async (employee) => {
                const teamEmployee = new organization_team_employee_entity_1.OrganizationTeamEmployee();
                teamEmployee.organizationTeamId = teamId;
                teamEmployee.employee = employee;
                teamEmployee.employeeId = employee.id;
                teamEmployee.role = managerIds.includes(employee.id)
                    ? role
                    : null;
                this.create(teamEmployee);
            });
        }
    }
    deleteMemberByIds(memberIds) {
        memberIds.forEach(async (memberId) => {
            await this.delete(memberId);
        });
    }
};
OrganizationTeamEmployeeService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(organization_team_employee_entity_1.OrganizationTeamEmployee)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], OrganizationTeamEmployeeService);
exports.OrganizationTeamEmployeeService = OrganizationTeamEmployeeService;


/***/ }),

/***/ "./src/app/organization-team/default-organization-teams.ts":
/*!*****************************************************************!*\
  !*** ./src/app/organization-team/default-organization-teams.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_ORGANIZATION_TEAMS = void 0;
exports.DEFAULT_ORGANIZATION_TEAMS = [
    {
        name: 'Employees',
        defaultMembers: [
            'admin@ever.co',
            'ruslan@ever.co',
            'alish@ever.co',
            'blagovest@ever.co',
            'elvis@ever.co',
            'hristo@ever.co',
            'alex@ever.co',
            'pavel@ever.co',
            'yavor@ever.co',
            'tsvetelina@ever.co',
            'julia@ever.co'
        ],
        manager: ['ruslan@ever.co']
    },
    {
        name: 'Contractors',
        defaultMembers: [
            'dimana@ever.co',
            'deko898@hotmail.com',
            'muiz@smooper.xyz',
            'ckhandla94@gmail.com'
        ],
        manager: ['ruslan@ever.co', 'rachit@ever.co']
    },
    {
        name: 'Designers',
        defaultMembers: ['julia@ever.co', 'yordan@ever.co'],
        manager: []
    },
    {
        name: 'QA',
        defaultMembers: ['julia@ever.co', 'yordan@ever.co'],
        manager: []
    }
];


/***/ }),

/***/ "./src/app/organization-team/organization-team.controller.ts":
/*!*******************************************************************!*\
  !*** ./src/app/organization-team/organization-team.controller.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationTeamController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const organization_team_service_1 = __webpack_require__(/*! ./organization-team.service */ "./src/app/organization-team/organization-team.service.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const organization_team_entity_1 = __webpack_require__(/*! ./organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let OrganizationTeamController = class OrganizationTeamController extends crud_controller_1.CrudController {
    constructor(organizationTeamService) {
        super(organizationTeamService);
        this.organizationTeamService = organizationTeamService;
    }
    async createOrganizationTeam(entity, ...options) {
        return this.organizationTeamService.createOrgTeam(entity);
    }
    async findAllOrganizationTeams(data) {
        const { relations, findInput } = JSON.parse(data);
        return this.organizationTeamService.getAllOrgTeams({
            where: findInput,
            relations
        });
    }
    async updateOrganizationTeam(id, entity, ...options) {
        return this.organizationTeamService.updateOrgTeam(id, entity);
    }
    async findMyTeams(data) {
        const { relations, findInput, employeeId } = JSON.parse(data);
        return this.organizationTeamService.findMyTeams(relations, findInput, employeeId);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Post('/create'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.IOrganizationTeamCreateInput !== "undefined" && models_1.IOrganizationTeamCreateInput) === "function" ? _a : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], OrganizationTeamController.prototype, "createOrganizationTeam", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all organization Teams.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found Teams',
        type: organization_team_entity_1.OrganizationTeam
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], OrganizationTeamController.prototype, "findAllOrganizationTeams", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an organization Team' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_d = typeof models_1.IOrganizationTeamCreateInput !== "undefined" && models_1.IOrganizationTeamCreateInput) === "function" ? _d : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], OrganizationTeamController.prototype, "updateOrganizationTeam", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all organization Teams.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found Teams',
        type: organization_team_entity_1.OrganizationTeam
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('me'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], OrganizationTeamController.prototype, "findMyTeams", null);
OrganizationTeamController = tslib_1.__decorate([
    swagger_1.ApiTags('OrganizationTeam'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_g = typeof organization_team_service_1.OrganizationTeamService !== "undefined" && organization_team_service_1.OrganizationTeamService) === "function" ? _g : Object])
], OrganizationTeamController);
exports.OrganizationTeamController = OrganizationTeamController;


/***/ }),

/***/ "./src/app/organization-team/organization-team.entity.ts":
/*!***************************************************************!*\
  !*** ./src/app/organization-team/organization-team.entity.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationTeam = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const organization_team_employee_entity_1 = __webpack_require__(/*! ../organization-team-employee/organization-team-employee.entity */ "./src/app/organization-team-employee/organization-team-employee.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const request_approval_team_entity_1 = __webpack_require__(/*! ../request-approval-team/request-approval-team.entity */ "./src/app/request-approval-team/request-approval-team.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let OrganizationTeam = class OrganizationTeam extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty(),
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.organizationTeam),
    typeorm_1.JoinTable({
        name: 'tag_organization_team'
    }),
    tslib_1.__metadata("design:type", Array)
], OrganizationTeam.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationTeam.prototype, "name", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany((type) => organization_team_employee_entity_1.OrganizationTeamEmployee, (organizationTeamEmployee) => organizationTeamEmployee.organizationTeam, {
        cascade: true
    }),
    tslib_1.__metadata("design:type", Array)
], OrganizationTeam.prototype, "members", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany((type) => request_approval_team_entity_1.RequestApprovalTeam, (requestApprovals) => requestApprovals.team),
    tslib_1.__metadata("design:type", Array)
], OrganizationTeam.prototype, "requestApprovals", void 0);
OrganizationTeam = tslib_1.__decorate([
    typeorm_1.Entity('organization_team')
], OrganizationTeam);
exports.OrganizationTeam = OrganizationTeam;


/***/ }),

/***/ "./src/app/organization-team/organization-team.module.ts":
/*!***************************************************************!*\
  !*** ./src/app/organization-team/organization-team.module.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationTeamModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const organization_team_employee_module_1 = __webpack_require__(/*! ../organization-team-employee/organization-team-employee.module */ "./src/app/organization-team-employee/organization-team-employee.module.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const organization_service_1 = __webpack_require__(/*! ../organization/organization.service */ "./src/app/organization/organization.service.ts");
const role_entity_1 = __webpack_require__(/*! ../role/role.entity */ "./src/app/role/role.entity.ts");
const role_service_1 = __webpack_require__(/*! ../role/role.service */ "./src/app/role/role.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const organization_team_controller_1 = __webpack_require__(/*! ./organization-team.controller */ "./src/app/organization-team/organization-team.controller.ts");
const organization_team_entity_1 = __webpack_require__(/*! ./organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const organization_team_service_1 = __webpack_require__(/*! ./organization-team.service */ "./src/app/organization-team/organization-team.service.ts");
let OrganizationTeamModule = class OrganizationTeamModule {
};
OrganizationTeamModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([
                organization_team_entity_1.OrganizationTeam,
                employee_entity_1.Employee,
                user_entity_1.User,
                role_entity_1.Role,
                organization_entity_1.Organization
            ]),
            organization_team_employee_module_1.OrganizationTeamEmployeeModule,
            tenant_module_1.TenantModule
        ],
        controllers: [organization_team_controller_1.OrganizationTeamController],
        providers: [
            organization_team_service_1.OrganizationTeamService,
            user_service_1.UserService,
            employee_service_1.EmployeeService,
            role_service_1.RoleService,
            organization_service_1.OrganizationService
        ],
        exports: [organization_team_service_1.OrganizationTeamService]
    })
], OrganizationTeamModule);
exports.OrganizationTeamModule = OrganizationTeamModule;


/***/ }),

/***/ "./src/app/organization-team/organization-team.seed.ts":
/*!*************************************************************!*\
  !*** ./src/app/organization-team/organization-team.seed.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomTeam = exports.createDefaultTeams = void 0;
const organization_team_entity_1 = __webpack_require__(/*! ./organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const organization_team_employee_entity_1 = __webpack_require__(/*! ../organization-team-employee/organization-team-employee.entity */ "./src/app/organization-team-employee/organization-team-employee.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const _ = __webpack_require__(/*! underscore */ "underscore");
const faker = __webpack_require__(/*! faker */ "faker");
const default_organization_teams_1 = __webpack_require__(/*! ./default-organization-teams */ "./src/app/organization-team/default-organization-teams.ts");
exports.createDefaultTeams = async (connection, organization, employees, roles) => {
    const teams = default_organization_teams_1.DEFAULT_ORGANIZATION_TEAMS;
    const organizationTeams = [];
    for (let i = 0; i < teams.length; i++) {
        const team = new organization_team_entity_1.OrganizationTeam();
        team.name = teams[i].name;
        team.organizationId = organization.id;
        team.tenant = organization.tenant;
        const filteredEmployees = employees.filter((e) => (teams[i].defaultMembers || []).indexOf(e.user.email) > -1);
        const teamEmployees = [];
        filteredEmployees.forEach((emp) => {
            const teamEmployee = new organization_team_employee_entity_1.OrganizationTeamEmployee();
            teamEmployee.employeeId = emp.id;
            teamEmployees.push(teamEmployee);
        });
        const managers = employees.filter((e) => (teams[i].manager || []).indexOf(e.user.email) > -1);
        managers.forEach((emp) => {
            const teamEmployee = new organization_team_employee_entity_1.OrganizationTeamEmployee();
            teamEmployee.employeeId = emp.id;
            teamEmployee.role = roles.filter((x) => x.name === models_1.RolesEnum.MANAGER)[0];
            teamEmployees.push(teamEmployee);
        });
        team.members = teamEmployees;
        organizationTeams.push(team);
    }
    await insertOrganizationTeam(connection, organizationTeams);
    return organizationTeams;
};
exports.createRandomTeam = async (connection, tenants, tenantOrganizationsMap, roles) => {
    const teamNames = ['QA', 'Designers', 'Developers', 'Employees'];
    const organizationTeams = [];
    for (const tenant of tenants) {
        const organizations = tenantOrganizationsMap.get(tenant);
        const employees = tenantOrganizationsMap.get(tenant);
        for (const organization of organizations) {
            for (const name of teamNames) {
                const team = new organization_team_entity_1.OrganizationTeam();
                team.name = name;
                team.organizationId = organization.id;
                team.tenant = organization.tenant;
                const emps = _.chain(employees)
                    .shuffle()
                    .take(faker.random.number({ min: 1, max: 5 }))
                    .values()
                    .value();
                const teamEmployees = [];
                emps.forEach((emp) => {
                    const teamEmployee = new organization_team_employee_entity_1.OrganizationTeamEmployee();
                    teamEmployee.employeeId = emp.id;
                    teamEmployees.push(teamEmployee);
                });
                const managers = _.chain(employees)
                    .shuffle()
                    .take(faker.random.number({ min: 1, max: 2 }))
                    .values()
                    .value();
                managers.forEach((emp) => {
                    const teamEmployee = new organization_team_employee_entity_1.OrganizationTeamEmployee();
                    teamEmployee.employeeId = emp.id;
                    teamEmployee.role = roles.filter((x) => x.name === models_1.RolesEnum.MANAGER)[0];
                    teamEmployees.push(teamEmployee);
                });
                organizationTeams.push(team);
            }
        }
    }
    const uniqueTeams = organizationTeams.filter(function (elem, index, self) {
        return index === self.indexOf(elem);
    });
    await insertOrganizationTeam(connection, uniqueTeams);
    return uniqueTeams;
};
const insertOrganizationTeam = async (connection, teams) => {
    await connection.manager.save(teams);
};


/***/ }),

/***/ "./src/app/organization-team/organization-team.service.ts":
/*!****************************************************************!*\
  !*** ./src/app/organization-team/organization-team.service.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationTeamService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const organization_team_entity_1 = __webpack_require__(/*! ./organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const organization_team_employee_entity_1 = __webpack_require__(/*! ../organization-team-employee/organization-team-employee.entity */ "./src/app/organization-team-employee/organization-team-employee.entity.ts");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const role_service_1 = __webpack_require__(/*! ../role/role.service */ "./src/app/role/role.service.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const organization_service_1 = __webpack_require__(/*! ../organization/organization.service */ "./src/app/organization/organization.service.ts");
const organization_team_employee_service_1 = __webpack_require__(/*! ../organization-team-employee/organization-team-employee.service */ "./src/app/organization-team-employee/organization-team-employee.service.ts");
let OrganizationTeamService = class OrganizationTeamService extends crud_service_1.CrudService {
    constructor(organizationTeamRepository, employeeRepository, userRepository, employeeService, roleService, organizationService, organizationTeamEmployeeService) {
        super(organizationTeamRepository);
        this.organizationTeamRepository = organizationTeamRepository;
        this.employeeRepository = employeeRepository;
        this.userRepository = userRepository;
        this.employeeService = employeeService;
        this.roleService = roleService;
        this.organizationService = organizationService;
        this.organizationTeamEmployeeService = organizationTeamEmployeeService;
    }
    async createOrgTeam(entity) {
        const { tags, name, organizationId, members: memberIds, managers: managerIds } = entity;
        try {
            const { tenantId } = await this.organizationService.findOne(organizationId);
            const role = await this.roleService.findOne({
                where: { tenant: { id: tenantId }, name: models_1.RolesEnum.MANAGER }
            });
            const employees = await this.employeeRepository.findByIds([...memberIds, ...managerIds], {
                relations: ['user']
            });
            const teamEmployees = [];
            employees.forEach((employee) => {
                const teamEmployee = new organization_team_employee_entity_1.OrganizationTeamEmployee();
                teamEmployee.employee = employee;
                teamEmployee.employeeId = employee.id;
                teamEmployee.role = managerIds.includes(employee.id)
                    ? role
                    : null;
                teamEmployees.push(teamEmployee);
            });
            return this.create({
                tags,
                organizationId,
                tenantId,
                name,
                members: teamEmployees
            });
        }
        catch (error) {
            console.error(error);
            throw new common_1.BadRequestException('Failed to create a team');
        }
    }
    async updateOrgTeam(id, entity) {
        const { tags, name, organizationId, members: memberIds, managers: managerIds } = entity;
        try {
            const { tenantId } = await this.organizationService.findOne(organizationId);
            const role = await this.roleService.findOne({
                where: { tenant: { id: tenantId }, name: models_1.RolesEnum.MANAGER }
            });
            const employees = await this.employeeRepository.findByIds([...memberIds, ...managerIds], {
                relations: ['user']
            });
            await this.organizationTeamEmployeeService.updateOrganizationTeam(id, employees, role, managerIds, memberIds);
            const organizationTeam = await this.findOne(id);
            this.repository.merge(organizationTeam, { name, tags });
            return this.repository.save(organizationTeam);
        }
        catch (err) {
            throw new common_1.BadRequestException(err);
        }
    }
    async getAllOrgTeams(filter) {
        const total = await this.organizationTeamRepository.count(filter);
        const items = await this.organizationTeamRepository.find(filter);
        for (const orgTeams of items) {
            for (const teamEmp of orgTeams.members) {
                const emp = await this.employeeRepository.findOne(teamEmp.employeeId);
                emp.user = await this.userRepository.findOne(emp.userId);
                teamEmp.employee = emp;
            }
        }
        return { items, total };
    }
    async getMyOrgTeams(filter, employeeId) {
        const teams = [];
        const items = await this.organizationTeamRepository.find(filter);
        for (const orgTeams of items) {
            for (const teamEmp of orgTeams.members) {
                if (employeeId === teamEmp.employeeId) {
                    teams.push(orgTeams);
                    break;
                }
            }
        }
        return { items: teams, total: teams.length };
    }
    async findMyTeams(relations, findInput, employeeId) {
        let employee = { id: undefined };
        let role;
        try {
            employee = await this.employeeService.findOne({
                where: {
                    user: { id: context_1.RequestContext.currentUser().id }
                }
            });
        }
        catch (e) { }
        try {
            const roleId = context_1.RequestContext.currentUser().roleId;
            if (roleId) {
                role = await this.roleService.findOne(roleId);
            }
        }
        catch (e) { }
        if (employeeId) {
            if (role.name === 'ADMIN' || role.name === 'SUPER_ADMIN') {
                return this.getAllOrgTeams({
                    where: findInput,
                    relations
                });
            }
            else if (employeeId === employee.id) {
                return this.getMyOrgTeams({
                    where: findInput,
                    relations
                }, employee.id);
            }
            else {
                throw new common_1.HttpException('Unauthorized', common_1.HttpStatus.UNAUTHORIZED);
            }
        }
        else {
            if (role.name === 'ADMIN' || role.name === 'SUPER_ADMIN') {
                return this.getAllOrgTeams({
                    where: findInput,
                    relations
                });
            }
            else {
                return this.getMyOrgTeams({
                    where: findInput,
                    relations
                }, employee.id);
            }
        }
    }
};
OrganizationTeamService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(organization_team_entity_1.OrganizationTeam)),
    tslib_1.__param(1, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__param(2, typeorm_1.InjectRepository(user_entity_1.User)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _d : Object, typeof (_e = typeof role_service_1.RoleService !== "undefined" && role_service_1.RoleService) === "function" ? _e : Object, typeof (_f = typeof organization_service_1.OrganizationService !== "undefined" && organization_service_1.OrganizationService) === "function" ? _f : Object, typeof (_g = typeof organization_team_employee_service_1.OrganizationTeamEmployeeService !== "undefined" && organization_team_employee_service_1.OrganizationTeamEmployeeService) === "function" ? _g : Object])
], OrganizationTeamService);
exports.OrganizationTeamService = OrganizationTeamService;


/***/ }),

/***/ "./src/app/organization-vendors/organization-vendors.controller.ts":
/*!*************************************************************************!*\
  !*** ./src/app/organization-vendors/organization-vendors.controller.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationVendorsController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const organization_vendors_service_1 = __webpack_require__(/*! ./organization-vendors.service */ "./src/app/organization-vendors/organization-vendors.service.ts");
const organization_vendors_entity_1 = __webpack_require__(/*! ./organization-vendors.entity */ "./src/app/organization-vendors/organization-vendors.entity.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let OrganizationVendorsController = class OrganizationVendorsController extends crud_controller_1.CrudController {
    constructor(organizationVendorsService) {
        super(organizationVendorsService);
        this.organizationVendorsService = organizationVendorsService;
    }
    async findAllOrganizations(data) {
        const { relations, findInput } = JSON.parse(data);
        return this.organizationVendorsService.findAll({
            where: findInput,
            relations
        });
    }
    async delete(id, ...options) {
        return this.organizationVendorsService.deleteVendor(id);
    }
    async updateOrganizationTeam(id, entity, ...options) {
        return this.organizationVendorsService.create(Object.assign({ id }, entity));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all organization vendors recurring expense.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found vendors recurring expense',
        type: organization_vendors_entity_1.OrganizationVendor
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], OrganizationVendorsController.prototype, "findAllOrganizations", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Delete record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NO_CONTENT,
        description: 'The record has been successfully deleted'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: "This Vendor can't be deleted because it is used in expense records"
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], OrganizationVendorsController.prototype, "delete", null);
tslib_1.__decorate([
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_c = typeof organization_vendors_entity_1.OrganizationVendor !== "undefined" && organization_vendors_entity_1.OrganizationVendor) === "function" ? _c : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], OrganizationVendorsController.prototype, "updateOrganizationTeam", null);
OrganizationVendorsController = tslib_1.__decorate([
    swagger_1.ApiTags('OrganizationVendors'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof organization_vendors_service_1.OrganizationVendorsService !== "undefined" && organization_vendors_service_1.OrganizationVendorsService) === "function" ? _e : Object])
], OrganizationVendorsController);
exports.OrganizationVendorsController = OrganizationVendorsController;


/***/ }),

/***/ "./src/app/organization-vendors/organization-vendors.entity.ts":
/*!*********************************************************************!*\
  !*** ./src/app/organization-vendors/organization-vendors.entity.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationVendor = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let OrganizationVendor = class OrganizationVendor extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty(),
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.organizationVendor),
    typeorm_1.JoinTable({
        name: 'tag_organization_vendor'
    }),
    tslib_1.__metadata("design:type", Array)
], OrganizationVendor.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], OrganizationVendor.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationVendor.prototype, "email", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationVendor.prototype, "phone", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], OrganizationVendor.prototype, "website", void 0);
OrganizationVendor = tslib_1.__decorate([
    typeorm_1.Entity('organization_vendor')
], OrganizationVendor);
exports.OrganizationVendor = OrganizationVendor;


/***/ }),

/***/ "./src/app/organization-vendors/organization-vendors.module.ts":
/*!*********************************************************************!*\
  !*** ./src/app/organization-vendors/organization-vendors.module.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationVendorsModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const organization_vendors_entity_1 = __webpack_require__(/*! ./organization-vendors.entity */ "./src/app/organization-vendors/organization-vendors.entity.ts");
const organization_vendors_controller_1 = __webpack_require__(/*! ./organization-vendors.controller */ "./src/app/organization-vendors/organization-vendors.controller.ts");
const organization_vendors_service_1 = __webpack_require__(/*! ./organization-vendors.service */ "./src/app/organization-vendors/organization-vendors.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let OrganizationVendorsModule = class OrganizationVendorsModule {
};
OrganizationVendorsModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([organization_vendors_entity_1.OrganizationVendor]), tenant_module_1.TenantModule],
        controllers: [organization_vendors_controller_1.OrganizationVendorsController],
        providers: [organization_vendors_service_1.OrganizationVendorsService],
        exports: [organization_vendors_service_1.OrganizationVendorsService]
    })
], OrganizationVendorsModule);
exports.OrganizationVendorsModule = OrganizationVendorsModule;


/***/ }),

/***/ "./src/app/organization-vendors/organization-vendors.seed.ts":
/*!*******************************************************************!*\
  !*** ./src/app/organization-vendors/organization-vendors.seed.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomOrganizationVendors = exports.createOrganizationVendors = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const organization_vendors_entity_1 = __webpack_require__(/*! ./organization-vendors.entity */ "./src/app/organization-vendors/organization-vendors.entity.ts");
exports.createOrganizationVendors = async (connection, organizations) => {
    let defaultOrganizationVendors = [];
    organizations.forEach((organization) => {
        const vendors = Object.values(models_1.OrganizationVendorEnum).map((name) => ({
            name,
            organizationId: organization.id,
            organization,
            tenant: organization.tenant
        }));
        defaultOrganizationVendors = [
            ...defaultOrganizationVendors,
            ...vendors
        ];
    });
    insertOrganizationVendors(connection, defaultOrganizationVendors);
    return defaultOrganizationVendors;
};
exports.createRandomOrganizationVendors = async (connection, tenants, tenantOrganizationsMap) => {
    let organizationVendors = [];
    const organizationVendorsMap = new Map();
    (tenants || []).forEach((tenant) => {
        const organizations = tenantOrganizationsMap.get(tenant);
        (organizations || []).forEach((organization) => {
            const vendors = Object.values(models_1.OrganizationVendorEnum).map((name) => ({
                name,
                organization,
                organizationId: organization.id,
                tenant: organization.tenant
            }));
            organizationVendorsMap.set(organization, vendors);
            organizationVendors = [...organizationVendors, ...vendors];
        });
    });
    await insertOrganizationVendors(connection, organizationVendors);
    return organizationVendorsMap;
};
const insertOrganizationVendors = async (connection, organizationVendors) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(organization_vendors_entity_1.OrganizationVendor)
        .values(organizationVendors)
        .execute();
};


/***/ }),

/***/ "./src/app/organization-vendors/organization-vendors.service.ts":
/*!**********************************************************************!*\
  !*** ./src/app/organization-vendors/organization-vendors.service.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationVendorsService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const organization_vendors_entity_1 = __webpack_require__(/*! ./organization-vendors.entity */ "./src/app/organization-vendors/organization-vendors.entity.ts");
const expense_entity_1 = __webpack_require__(/*! ../expense/expense.entity */ "./src/app/expense/expense.entity.ts");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
let OrganizationVendorsService = class OrganizationVendorsService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(organizationVendorsRepository) {
        super(organizationVendorsRepository);
        this.organizationVendorsRepository = organizationVendorsRepository;
    }
    async deleteVendor(vendorId) {
        const vendor = await this.organizationVendorsRepository
            .createQueryBuilder('vendor')
            .leftJoin(expense_entity_1.Expense, 'expense', 'vendor.id = expense."vendorId"')
            .where('expense."vendorId" = :vendorId', { vendorId: vendorId })
            .getOne();
        if (vendor) {
            throw new common_1.BadRequestException("This Vendor can't be deleted because it is used in expense records");
        }
        return await this.delete(vendorId);
    }
};
OrganizationVendorsService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(organization_vendors_entity_1.OrganizationVendor)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], OrganizationVendorsService);
exports.OrganizationVendorsService = OrganizationVendorsService;


/***/ }),

/***/ "./src/app/organization/commands/handlers/index.ts":
/*!*********************************************************!*\
  !*** ./src/app/organization/commands/handlers/index.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const organization_create_handler_1 = __webpack_require__(/*! ./organization.create.handler */ "./src/app/organization/commands/handlers/organization.create.handler.ts");
const organization_update_handler_1 = __webpack_require__(/*! ./organization.update.handler */ "./src/app/organization/commands/handlers/organization.update.handler.ts");
exports.CommandHandlers = [
    organization_create_handler_1.OrganizationCreateHandler,
    organization_update_handler_1.OrganizationUpdateHandler
];


/***/ }),

/***/ "./src/app/organization/commands/handlers/organization.create.handler.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/organization/commands/handlers/organization.create.handler.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const role_service_1 = __webpack_require__(/*! ../../../role/role.service */ "./src/app/role/role.service.ts");
const user_service_1 = __webpack_require__(/*! ../../../user/user.service */ "./src/app/user/user.service.ts");
const user_organization_entity_1 = __webpack_require__(/*! ../../../user-organization/user-organization.entity */ "./src/app/user-organization/user-organization.entity.ts");
const user_organization_services_1 = __webpack_require__(/*! ../../../user-organization/user-organization.services */ "./src/app/user-organization/user-organization.services.ts");
const organization_service_1 = __webpack_require__(/*! ../../organization.service */ "./src/app/organization/organization.service.ts");
const organization_create_command_1 = __webpack_require__(/*! ../organization.create.command */ "./src/app/organization/commands/organization.create.command.ts");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
let OrganizationCreateHandler = class OrganizationCreateHandler {
    constructor(organizationService, userOrganizationService, userService, roleService) {
        this.organizationService = organizationService;
        this.userOrganizationService = userOrganizationService;
        this.userService = userService;
        this.roleService = roleService;
    }
    async execute(command) {
        const { input } = command;
        const { id: roleId } = await this.roleService.findOne({
            name: models_1.RolesEnum.SUPER_ADMIN
        });
        const user = context_1.RequestContext.currentUser();
        const { tenantId } = user;
        const { items: superAdminUsers } = await this.userService.findAll({
            relations: ['role'],
            where: {
                tenant: { id: tenantId },
                role: { id: roleId }
            }
        });
        let { contact = {} } = input;
        delete input['contact'];
        const createdOrganization = await this.organizationService.create(Object.assign(Object.assign({}, input), { show_profits: false, show_bonuses_paid: false, show_income: false, show_total_hours: false, show_projects_count: true, show_minimum_project_size: true, show_clients_count: true, show_clients: true, show_employees_count: true }));
        superAdminUsers.forEach((superAdmin) => {
            const userOrganization = new user_organization_entity_1.UserOrganization();
            userOrganization.organizationId = createdOrganization.id;
            userOrganization.tenantId = tenantId;
            userOrganization.userId = superAdmin.id;
            this.userOrganizationService.create(userOrganization);
        });
        const { id } = createdOrganization;
        contact = Object.assign({}, contact, {
            organizationId: id,
            tenantId
        });
        await this.organizationService.create(Object.assign({ contact }, createdOrganization));
        return await this.organizationService.findOne(id);
    }
};
OrganizationCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(organization_create_command_1.OrganizationCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof organization_service_1.OrganizationService !== "undefined" && organization_service_1.OrganizationService) === "function" ? _a : Object, typeof (_b = typeof user_organization_services_1.UserOrganizationService !== "undefined" && user_organization_services_1.UserOrganizationService) === "function" ? _b : Object, typeof (_c = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" ? _c : Object, typeof (_d = typeof role_service_1.RoleService !== "undefined" && role_service_1.RoleService) === "function" ? _d : Object])
], OrganizationCreateHandler);
exports.OrganizationCreateHandler = OrganizationCreateHandler;


/***/ }),

/***/ "./src/app/organization/commands/handlers/organization.update.handler.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/organization/commands/handlers/organization.update.handler.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const organization_service_1 = __webpack_require__(/*! ../../organization.service */ "./src/app/organization/organization.service.ts");
const organization_update_command_1 = __webpack_require__(/*! ../organization.update.command */ "./src/app/organization/commands/organization.update.command.ts");
let OrganizationUpdateHandler = class OrganizationUpdateHandler {
    constructor(organizationService) {
        this.organizationService = organizationService;
    }
    async execute(command) {
        const { input } = command;
        const { gauzyId } = input;
        return this.updateOrganization(gauzyId, input);
    }
    async updateOrganization(id, input) {
        const organization = await this.organizationService.findOne(id);
        if (organization) {
            delete input.gauzyId;
            const request = Object.assign(Object.assign({}, input), { show_profits: false, show_bonuses_paid: false, show_income: false, show_total_hours: false, show_projects_count: true, show_minimum_project_size: true, show_clients_count: true, show_clients: true, show_employees_count: true });
            await this.organizationService.update(id, request);
            return await this.organizationService.findOne(id);
        }
    }
};
OrganizationUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(organization_update_command_1.OrganizationUpdateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof organization_service_1.OrganizationService !== "undefined" && organization_service_1.OrganizationService) === "function" ? _a : Object])
], OrganizationUpdateHandler);
exports.OrganizationUpdateHandler = OrganizationUpdateHandler;


/***/ }),

/***/ "./src/app/organization/commands/index.ts":
/*!************************************************!*\
  !*** ./src/app/organization/commands/index.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationUpdateCommand = exports.OrganizationCreateCommand = void 0;
var organization_create_command_1 = __webpack_require__(/*! ./organization.create.command */ "./src/app/organization/commands/organization.create.command.ts");
Object.defineProperty(exports, "OrganizationCreateCommand", { enumerable: true, get: function () { return organization_create_command_1.OrganizationCreateCommand; } });
var organization_update_command_1 = __webpack_require__(/*! ./organization.update.command */ "./src/app/organization/commands/organization.update.command.ts");
Object.defineProperty(exports, "OrganizationUpdateCommand", { enumerable: true, get: function () { return organization_update_command_1.OrganizationUpdateCommand; } });


/***/ }),

/***/ "./src/app/organization/commands/organization.create.command.ts":
/*!**********************************************************************!*\
  !*** ./src/app/organization/commands/organization.create.command.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationCreateCommand = void 0;
class OrganizationCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.OrganizationCreateCommand = OrganizationCreateCommand;
OrganizationCreateCommand.type = '[Organization] Register';


/***/ }),

/***/ "./src/app/organization/commands/organization.update.command.ts":
/*!**********************************************************************!*\
  !*** ./src/app/organization/commands/organization.update.command.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationUpdateCommand = void 0;
class OrganizationUpdateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.OrganizationUpdateCommand = OrganizationUpdateCommand;
OrganizationUpdateCommand.type = '[Organization] Update';


/***/ }),

/***/ "./src/app/organization/default-organizations.ts":
/*!*******************************************************!*\
  !*** ./src/app/organization/default-organizations.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_ORGANIZATIONS = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
exports.DEFAULT_ORGANIZATIONS = [
    {
        name: 'Ever Technologies LTD',
        currency: models_1.CurrenciesEnum.BGN,
        defaultValueDateType: models_1.DefaultValueDateTypeEnum.TODAY,
        imageUrl: 'assets/images/logos/ever-large.jpg'
    },
    {
        name: 'Ever Co. Ltd',
        currency: models_1.CurrenciesEnum.ILS,
        defaultValueDateType: models_1.DefaultValueDateTypeEnum.TODAY,
        imageUrl: 'assets/images/logos/ever-large.jpg'
    }
];


/***/ }),

/***/ "./src/app/organization/organization.controller.ts":
/*!*********************************************************!*\
  !*** ./src/app/organization/organization.controller.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/organization/commands/index.ts");
const organization_entity_1 = __webpack_require__(/*! ./organization.entity */ "./src/app/organization/organization.entity.ts");
const organization_service_1 = __webpack_require__(/*! ./organization.service */ "./src/app/organization/organization.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let OrganizationController = class OrganizationController extends crud_controller_1.CrudController {
    constructor(organizationService, commandBus) {
        super(organizationService);
        this.organizationService = organizationService;
        this.commandBus = commandBus;
    }
    async findAllOrganizations(data) {
        const { relations, findInput } = JSON.parse(data);
        return this.organizationService.findAll({
            where: findInput,
            relations
        });
    }
    async findOneById(id, select, data) {
        const findObj = {};
        const { relations } = JSON.parse(data);
        if (select) {
            findObj['select'] = JSON.parse(select);
        }
        if (relations) {
            findObj['relations'] = relations;
        }
        return this.organizationService.findOne(id, findObj);
    }
    async findOneByProfileLink(profile_link, select, relations) {
        return await this.organizationService.findByPublicLink(profile_link, select, relations);
    }
    async create(entity) {
        return this.commandBus.execute(new commands_1.OrganizationCreateCommand(entity));
    }
    async update(id, entity, ...options) {
        await this.organizationService.create(Object.assign({ id }, entity));
        return await this.organizationService.findOne(id);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all organizations within the tenant.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found organizations',
        type: organization_entity_1.Organization
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard, permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ALL_ORG_VIEW),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], OrganizationController.prototype, "findAllOrganizations", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find Organization by id within the tenant.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found one record',
        type: organization_entity_1.Organization
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Get(':id/:select'),
    tslib_1.__param(0, common_1.Param('id', shared_1.UUIDValidationPipe)),
    tslib_1.__param(1, common_1.Param('select')),
    tslib_1.__param(2, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, String, String]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], OrganizationController.prototype, "findOneById", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find Organization by profile link.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found one record',
        type: organization_entity_1.Organization
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('profile/:profile_link/:select/:relations'),
    tslib_1.__param(0, common_1.Param('profile_link')),
    tslib_1.__param(1, common_1.Param('select')),
    tslib_1.__param(2, common_1.Param('relations')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, String, String]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], OrganizationController.prototype, "findOneByProfileLink", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new Organization' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The Organization has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.CREATED),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard, permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ALL_ORG_EDIT),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof models_1.IOrganizationCreateInput !== "undefined" && models_1.IOrganizationCreateInput) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], OrganizationController.prototype, "create", null);
tslib_1.__decorate([
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_f = typeof models_1.IOrganizationCreateInput !== "undefined" && models_1.IOrganizationCreateInput) === "function" ? _f : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], OrganizationController.prototype, "update", null);
OrganizationController = tslib_1.__decorate([
    swagger_1.ApiTags('Organization'),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_h = typeof organization_service_1.OrganizationService !== "undefined" && organization_service_1.OrganizationService) === "function" ? _h : Object, typeof (_j = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _j : Object])
], OrganizationController);
exports.OrganizationController = OrganizationController;


/***/ }),

/***/ "./src/app/organization/organization.entity.ts":
/*!*****************************************************!*\
  !*** ./src/app/organization/organization.entity.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Organization = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const skill_entity_1 = __webpack_require__(/*! ../skills/skill.entity */ "./src/app/skills/skill.entity.ts");
const invoice_entity_1 = __webpack_require__(/*! ../invoice/invoice.entity */ "./src/app/invoice/invoice.entity.ts");
const payment_entity_1 = __webpack_require__(/*! ../payment/payment.entity */ "./src/app/payment/payment.entity.ts");
const contact_entity_1 = __webpack_require__(/*! ../contact/contact.entity */ "./src/app/contact/contact.entity.ts");
const tenant_base_1 = __webpack_require__(/*! ../core/entities/tenant-base */ "./src/app/core/entities/tenant-base.ts");
const organization_sprint_entity_1 = __webpack_require__(/*! ../organization-sprint/organization-sprint.entity */ "./src/app/organization-sprint/organization-sprint.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const invoice_estimate_history_entity_1 = __webpack_require__(/*! ../invoice-estimate-history/invoice-estimate-history.entity */ "./src/app/invoice-estimate-history/invoice-estimate-history.entity.ts");
const deal_entity_1 = __webpack_require__(/*! ../deal/deal.entity */ "./src/app/deal/deal.entity.ts");
const organization_awards_entity_1 = __webpack_require__(/*! ../organization-awards/organization-awards.entity */ "./src/app/organization-awards/organization-awards.entity.ts");
const organization_languages_entity_1 = __webpack_require__(/*! ../organization-languages/organization-languages.entity */ "./src/app/organization-languages/organization-languages.entity.ts");
const feature_organization_entity_1 = __webpack_require__(/*! ../feature/feature_organization.entity */ "./src/app/feature/feature_organization.entity.ts");
let Organization = class Organization extends tenant_base_1.TenantBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty(),
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag),
    typeorm_1.JoinTable({
        name: 'tag_organization'
    }),
    tslib_1.__metadata("design:type", Array)
], Organization.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: contact_entity_1.Contact }),
    typeorm_1.ManyToOne(() => contact_entity_1.Contact, (contact) => contact.organization, {
        nullable: true,
        cascade: true,
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IContact !== "undefined" && models_1.IContact) === "function" ? _a : Object)
], Organization.prototype, "contact", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((organization) => organization.contact),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "contactId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: invoice_entity_1.Invoice, isArray: true }),
    typeorm_1.OneToMany((type) => invoice_entity_1.Invoice, (invoices) => invoices.fromOrganization),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Organization.prototype, "invoices", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.OneToMany(() => employee_entity_1.Employee, (employee) => employee.organization),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Organization.prototype, "employees", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: deal_entity_1.Deal }),
    typeorm_1.OneToMany(() => deal_entity_1.Deal, (deal) => deal.organization),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Organization.prototype, "deals", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: organization_awards_entity_1.OrganizationAwards }),
    typeorm_1.OneToMany(() => organization_awards_entity_1.OrganizationAwards, (award) => award.organization),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Organization.prototype, "awards", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: organization_languages_entity_1.OrganizationLanguages }),
    typeorm_1.OneToMany(() => organization_languages_entity_1.OrganizationLanguages, (language) => language.organization),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Organization.prototype, "languages", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: feature_organization_entity_1.FeatureOrganization }),
    typeorm_1.OneToMany(() => feature_organization_entity_1.FeatureOrganization, (feature) => feature.organization),
    tslib_1.__metadata("design:type", Array)
], Organization.prototype, "featureOrganizations", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, minLength: 3, maxLength: 100 }),
    class_validator_1.IsString(),
    typeorm_1.Index({ unique: true }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "profile_link", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, maxLength: 300 }),
    class_validator_1.IsString(),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "banner", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number, maxLength: 4 }),
    class_validator_1.IsString(),
    typeorm_1.Index(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], Organization.prototype, "totalEmployees", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, maxLength: 600 }),
    class_validator_1.IsString(),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "short_description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "client_focus", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "overview", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String, maxLength: 500 }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ length: 500, nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "imageUrl", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.CurrenciesEnum }),
    class_validator_1.IsEnum(models_1.CurrenciesEnum),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "currency", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], Organization.prototype, "valueDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.DefaultValueDateTypeEnum }),
    class_validator_1.IsEnum(models_1.DefaultValueDateTypeEnum),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "defaultValueDateType", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean, default: true }),
    typeorm_1.Column({ default: true }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "isActive", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "defaultAlignmentType", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "timeZone", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "regionCode", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "brandColor", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "dateFormat", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "officialName", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.WeekDaysEnum }),
    typeorm_1.Column(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "startWeekOn", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, maxLength: 256 }),
    typeorm_1.Column(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "taxId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "numberFormat", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.MinimumProjectSizeEnum }),
    class_validator_1.IsEnum(models_1.BonusTypeEnum),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "minimumProjectSize", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.BonusTypeEnum }),
    class_validator_1.IsEnum(models_1.BonusTypeEnum),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "bonusType", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.Min(0),
    class_validator_1.Max(100),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], Organization.prototype, "bonusPercentage", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "invitesAllowed", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "show_income", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "show_profits", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "show_bonuses_paid", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "show_total_hours", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "show_minimum_project_size", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "show_projects_count", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "show_clients_count", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "show_clients", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "show_employees_count", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], Organization.prototype, "inviteExpiryPeriod", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    typeorm_1.Column({ nullable: true }),
    class_validator_1.IsOptional(),
    class_validator_1.IsDate(),
    tslib_1.__metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], Organization.prototype, "fiscalStartDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    typeorm_1.Column({ nullable: true }),
    class_validator_1.IsOptional(),
    class_validator_1.IsDate(),
    tslib_1.__metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], Organization.prototype, "fiscalEndDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    typeorm_1.Column({ nullable: true }),
    class_validator_1.IsOptional(),
    class_validator_1.IsDate(),
    tslib_1.__metadata("design:type", typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object)
], Organization.prototype, "registrationDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "futureDateAllowed", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ default: true }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "allowManualTime", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ default: true }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "allowModifyTime", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ default: true }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "allowDeleteTime", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "requireReason", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "requireDescription", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "requireProject", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "requireTask", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "requireClient", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ enum: [12, 24] }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ default: 12 }),
    tslib_1.__metadata("design:type", Number)
], Organization.prototype, "timeFormat", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: skill_entity_1.Skill }),
    typeorm_1.ManyToMany((type) => skill_entity_1.Skill, (skill) => skill.organization),
    typeorm_1.JoinTable({
        name: 'skill_organization'
    }),
    tslib_1.__metadata("design:type", Array)
], Organization.prototype, "skills", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: payment_entity_1.Payment, isArray: true }),
    typeorm_1.OneToMany((type) => payment_entity_1.Payment, (payment) => payment.organization, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Organization.prototype, "payments", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "separateInvoiceItemTaxAndDiscount", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: organization_sprint_entity_1.OrganizationSprint, isArray: true }),
    typeorm_1.OneToMany((type) => organization_sprint_entity_1.OrganizationSprint, (sprints) => sprints.organization),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Organization.prototype, "organizationSprints", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: invoice_estimate_history_entity_1.InvoiceEstimateHistory, isArray: true }),
    typeorm_1.OneToMany((type) => invoice_estimate_history_entity_1.InvoiceEstimateHistory, (invoiceEstimateHistory) => invoiceEstimateHistory.organization, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Organization.prototype, "invoiceEstimateHistories", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "website", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "fiscalInformation", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String, enum: models_1.CurrencyPosition }),
    class_validator_1.IsEnum(models_1.CurrencyPosition),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ default: 'LEFT' }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "currencyPosition", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Organization.prototype, "discountAfterTax", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "defaultStartTime", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Organization.prototype, "defaultEndTime", void 0);
Organization = tslib_1.__decorate([
    typeorm_1.Entity('organization')
], Organization);
exports.Organization = Organization;


/***/ }),

/***/ "./src/app/organization/organization.module.ts":
/*!*****************************************************!*\
  !*** ./src/app/organization/organization.module.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const role_entity_1 = __webpack_require__(/*! ../role/role.entity */ "./src/app/role/role.entity.ts");
const role_service_1 = __webpack_require__(/*! ../role/role.service */ "./src/app/role/role.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
const user_organization_entity_1 = __webpack_require__(/*! ../user-organization/user-organization.entity */ "./src/app/user-organization/user-organization.entity.ts");
const user_organization_services_1 = __webpack_require__(/*! ../user-organization/user-organization.services */ "./src/app/user-organization/user-organization.services.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/organization/commands/handlers/index.ts");
const organization_controller_1 = __webpack_require__(/*! ./organization.controller */ "./src/app/organization/organization.controller.ts");
const organization_entity_1 = __webpack_require__(/*! ./organization.entity */ "./src/app/organization/organization.entity.ts");
const organization_service_1 = __webpack_require__(/*! ./organization.service */ "./src/app/organization/organization.service.ts");
let OrganizationModule = class OrganizationModule {
};
OrganizationModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([organization_entity_1.Organization, user_entity_1.User, user_organization_entity_1.UserOrganization, role_entity_1.Role]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [organization_controller_1.OrganizationController],
        providers: [
            organization_service_1.OrganizationService,
            user_service_1.UserService,
            user_organization_services_1.UserOrganizationService,
            role_service_1.RoleService,
            ...handlers_1.CommandHandlers
        ],
        exports: [organization_service_1.OrganizationService]
    })
], OrganizationModule);
exports.OrganizationModule = OrganizationModule;


/***/ }),

/***/ "./src/app/organization/organization.seed.ts":
/*!***************************************************!*\
  !*** ./src/app/organization/organization.seed.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomOrganizations = exports.createDefaultOrganizations = exports.getDefaultBulgarianOrganization = void 0;
const _ = __webpack_require__(/*! underscore */ "underscore");
const moment = __webpack_require__(/*! moment */ "moment");
const timezone = __webpack_require__(/*! moment-timezone */ "moment-timezone");
const organization_entity_1 = __webpack_require__(/*! ./organization.entity */ "./src/app/organization/organization.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const skill_entity_1 = __webpack_require__(/*! ../skills/skill.entity */ "./src/app/skills/skill.entity.ts");
const contact_entity_1 = __webpack_require__(/*! ../contact/contact.entity */ "./src/app/contact/contact.entity.ts");
const default_organizations_1 = __webpack_require__(/*! ./default-organizations */ "./src/app/organization/default-organizations.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
exports.getDefaultBulgarianOrganization = async (connection, tenant) => {
    const repo = connection.getRepository(organization_entity_1.Organization);
    const existedOrganization = await repo.findOne({
        where: { tenantId: tenant.id, name: 'Ever Technologies LTD' }
    });
    return existedOrganization;
};
let defaultOrganizationsInserted = [];
exports.createDefaultOrganizations = async (connection, tenant) => {
    const defaultOrganizations = [];
    const skills = await getSkills(connection);
    const contacts = await getContacts(connection);
    default_organizations_1.DEFAULT_ORGANIZATIONS.forEach((organization) => {
        const organizationSkills = _.chain(skills)
            .shuffle()
            .take(faker.random.number({ min: 1, max: 4 }))
            .values()
            .value();
        const defaultOrganization = new organization_entity_1.Organization();
        const { name, currency, defaultValueDateType, imageUrl } = organization;
        defaultOrganization.name = name;
        defaultOrganization.profile_link = generateLink(name);
        defaultOrganization.currency = currency;
        defaultOrganization.defaultValueDateType = defaultValueDateType;
        defaultOrganization.imageUrl = imageUrl;
        defaultOrganization.invitesAllowed = true;
        defaultOrganization.bonusType = models_1.BonusTypeEnum.REVENUE_BASED_BONUS;
        defaultOrganization.bonusPercentage = 10;
        defaultOrganization.registrationDate = faker.date.past(5);
        defaultOrganization.overview = faker.name.jobDescriptor();
        defaultOrganization.short_description = faker.name.jobDescriptor();
        defaultOrganization.client_focus = faker.name.jobDescriptor();
        defaultOrganization.show_profits = false;
        defaultOrganization.show_bonuses_paid = false;
        defaultOrganization.show_income = false;
        defaultOrganization.show_total_hours = false;
        defaultOrganization.show_projects_count = true;
        defaultOrganization.show_minimum_project_size = true;
        defaultOrganization.show_clients_count = true;
        defaultOrganization.show_clients = true;
        defaultOrganization.show_employees_count = true;
        defaultOrganization.banner = faker.name.jobDescriptor();
        defaultOrganization.skills = organizationSkills;
        defaultOrganization.brandColor = faker.random.arrayElement([
            'red',
            'green',
            'blue',
            'orange',
            'yellow'
        ]);
        defaultOrganization.contact = faker.random.arrayElement(contacts);
        defaultOrganization.timeZone = faker.random.arrayElement(timezone.tz.names().filter((zone) => zone.includes('/')));
        defaultOrganization.dateFormat = faker.random.arrayElement([
            'L',
            'L hh:mm',
            'LL',
            'LLL',
            'LLLL'
        ]);
        defaultOrganization.defaultAlignmentType = faker.random.arrayElement(Object.keys(models_1.AlignmentOptions));
        defaultOrganization.fiscalStartDate = moment(new Date())
            .add(faker.random.number(10), 'days')
            .toDate();
        defaultOrganization.fiscalEndDate = moment(defaultOrganization.fiscalStartDate)
            .add(faker.random.number(10), 'days')
            .toDate();
        defaultOrganization.futureDateAllowed = faker.random.boolean();
        defaultOrganization.inviteExpiryPeriod = faker.random.number(50);
        defaultOrganization.numberFormat = faker.random.arrayElement([
            'USD',
            'BGN',
            'ILS'
        ]);
        defaultOrganization.officialName = faker.company.companyName();
        defaultOrganization.separateInvoiceItemTaxAndDiscount = faker.random.boolean();
        defaultOrganization.startWeekOn = models_1.WeekDaysEnum.MONDAY;
        defaultOrganization.totalEmployees = faker.random.number(4);
        defaultOrganization.tenant = tenant;
        defaultOrganization.valueDate = moment(new Date())
            .add(faker.random.number(10), 'days')
            .toDate();
        defaultOrganizations.push(defaultOrganization);
    });
    const organizations = await connection.manager.save(defaultOrganizations);
    defaultOrganizationsInserted = [...defaultOrganizations];
    return organizations;
};
exports.createRandomOrganizations = async (connection, tenants, noOfOrganizations) => {
    const defaultDateTypes = Object.values(models_1.DefaultValueDateTypeEnum);
    const skills = await getSkills(connection);
    const contacts = await getContacts(connection);
    const tenantOrganizations = new Map();
    let allOrganizations = [];
    tenants.forEach((tenant) => {
        const randomOrganizations = [];
        if (tenant.name === 'Ever') {
            tenantOrganizations.set(tenant, defaultOrganizationsInserted);
        }
        else {
            for (let index = 0; index < noOfOrganizations; index++) {
                const organizationSkills = _.chain(skills)
                    .shuffle()
                    .take(faker.random.number({ min: 1, max: 4 }))
                    .values()
                    .value();
                const organization = new organization_entity_1.Organization();
                const companyName = faker.company.companyName();
                const logoAbbreviation = _extractLogoAbbreviation(companyName);
                organization.name = companyName;
                organization.profile_link = generateLink(companyName);
                organization.currency = environment_1.environment.defaultCurrency;
                organization.defaultValueDateType =
                    defaultDateTypes[index % defaultDateTypes.length];
                organization.imageUrl = core_1.getDummyImage(330, 300, logoAbbreviation);
                organization.invitesAllowed = true;
                organization.overview = faker.name.jobDescriptor();
                organization.short_description = faker.name.jobDescriptor();
                organization.client_focus = faker.name.jobDescriptor();
                organization.show_profits = false;
                organization.show_bonuses_paid = false;
                organization.show_income = false;
                organization.show_total_hours = false;
                organization.show_projects_count = true;
                organization.show_minimum_project_size = true;
                organization.show_clients_count = true;
                organization.show_employees_count = true;
                organization.banner = faker.name.jobDescriptor();
                const { bonusType, bonusPercentage } = randomBonus();
                organization.bonusType = bonusType;
                organization.bonusPercentage = bonusPercentage;
                organization.registrationDate = faker.date.past(Math.floor(Math.random() * 10) + 1);
                organization.skills = organizationSkills;
                organization.brandColor = faker.random.arrayElement([
                    'red',
                    'green',
                    'blue',
                    'orange',
                    'yellow'
                ]);
                organization.contact = faker.random.arrayElement(contacts);
                organization.timeZone = faker.random.arrayElement(timezone.tz.names().filter((zone) => zone.includes('/')));
                organization.dateFormat = faker.random.arrayElement([
                    'L',
                    'L hh:mm',
                    'LL',
                    'LLL',
                    'LLLL'
                ]);
                organization.defaultAlignmentType = faker.random.arrayElement(Object.keys(models_1.AlignmentOptions));
                organization.fiscalStartDate = moment(new Date())
                    .add(faker.random.number(10), 'days')
                    .toDate();
                organization.fiscalEndDate = moment(organization.fiscalStartDate)
                    .add(faker.random.number(10), 'days')
                    .toDate();
                organization.futureDateAllowed = faker.random.boolean();
                organization.inviteExpiryPeriod = faker.random.number(50);
                organization.numberFormat = faker.random.arrayElement([
                    'USD',
                    'BGN',
                    'ILS'
                ]);
                organization.officialName = faker.company.companyName();
                organization.separateInvoiceItemTaxAndDiscount = faker.random.boolean();
                organization.startWeekOn = models_1.WeekDaysEnum.MONDAY;
                organization.totalEmployees = faker.random.number(4);
                organization.tenant = tenant;
                organization.valueDate = moment(new Date())
                    .add(faker.random.number(10), 'days')
                    .toDate();
                randomOrganizations.push(organization);
            }
            tenantOrganizations.set(tenant, randomOrganizations);
        }
        allOrganizations = allOrganizations.concat(randomOrganizations);
    });
    await insertOrganizations(connection, allOrganizations);
    return tenantOrganizations;
};
const insertOrganizations = async (connection, organizations) => {
    await connection.manager.save(organizations);
};
const _extractLogoAbbreviation = (companyName) => {
    const logoFirstWordFirstLetterIndex = 0;
    const companyNameLastEmptyLetterIndex = companyName.lastIndexOf(' ');
    const logoFirstLetter = companyName[logoFirstWordFirstLetterIndex];
    let logoAbbreviation = logoFirstLetter;
    if (companyNameLastEmptyLetterIndex !== -1 &&
        companyNameLastEmptyLetterIndex !== logoFirstWordFirstLetterIndex) {
        const logoLastWordFirstLetterIndex = companyNameLastEmptyLetterIndex + 1;
        const logoSecondLetter = companyName[logoLastWordFirstLetterIndex];
        logoAbbreviation += logoSecondLetter;
    }
    return logoAbbreviation;
};
const randomBonus = () => {
    const randomNumberBetween = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);
    const bonusType = Object.values(models_1.BonusTypeEnum)[randomNumberBetween(0, 1)];
    const bonusPercentage = bonusType === models_1.BonusTypeEnum.PROFIT_BASED_BONUS
        ? randomNumberBetween(65, 75)
        : randomNumberBetween(5, 10);
    return { bonusType, bonusPercentage };
};
const generateLink = (name) => {
    return name.replace(/[^A-Z0-9]+/gi, '-').toLowerCase();
};
const getSkills = async (connection) => {
    return await connection.manager.find(skill_entity_1.Skill, {});
};
const getContacts = async (connection) => {
    return await connection.manager.find(contact_entity_1.Contact, {});
};


/***/ }),

/***/ "./src/app/organization/organization.service.ts":
/*!******************************************************!*\
  !*** ./src/app/organization/organization.service.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
const organization_entity_1 = __webpack_require__(/*! ./organization.entity */ "./src/app/organization/organization.entity.ts");
let OrganizationService = class OrganizationService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(organizationRepository) {
        super(organizationRepository);
        this.organizationRepository = organizationRepository;
    }
    async findByPublicLink(profile_link, select, relation) {
        const findObj = {};
        if (select) {
            findObj['select'] = JSON.parse(select);
            findObj['relations'] = JSON.parse(relation);
        }
        return await this.organizationRepository.findOne({ profile_link }, findObj);
    }
};
OrganizationService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(organization_entity_1.Organization)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], OrganizationService);
exports.OrganizationService = OrganizationService;


/***/ }),

/***/ "./src/app/organization_employee-level/default-organization-employee-levels.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/organization_employee-level/default-organization-employee-levels.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_EMPLOYEE_LEVELS = void 0;
exports.DEFAULT_EMPLOYEE_LEVELS = [
    {
        level: 'Level A'
    },
    {
        level: 'Level B'
    },
    {
        level: 'Level C'
    },
    {
        level: 'Level D'
    }
];


/***/ }),

/***/ "./src/app/organization_employee-level/organization-employee-level.controller.ts":
/*!***************************************************************************************!*\
  !*** ./src/app/organization_employee-level/organization-employee-level.controller.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeLevelController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const organization_employee_level_entity_1 = __webpack_require__(/*! ./organization-employee-level.entity */ "./src/app/organization_employee-level/organization-employee-level.entity.ts");
const organization_employee_level_service_1 = __webpack_require__(/*! ./organization-employee-level.service */ "./src/app/organization_employee-level/organization-employee-level.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let EmployeeLevelController = class EmployeeLevelController extends core_1.CrudController {
    constructor(employeeLevelService) {
        super(employeeLevelService);
        this.employeeLevelService = employeeLevelService;
    }
    async findByOrgId(data, id) {
        const orgId = id.orgId;
        const { relations, findInput } = JSON.parse(data);
        return await this.employeeLevelService.findAll({
            where: Object.assign({ organizationId: orgId }, findInput),
            relations
        });
    }
    async updateOrganizationTeam(id, entity, ...options) {
        return this.employeeLevelService.create(Object.assign({ id }, entity));
    }
};
tslib_1.__decorate([
    common_1.Get(':orgId'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__param(1, common_1.Param()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], EmployeeLevelController.prototype, "findByOrgId", null);
tslib_1.__decorate([
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_b = typeof organization_employee_level_entity_1.EmployeeLevel !== "undefined" && organization_employee_level_entity_1.EmployeeLevel) === "function" ? _b : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], EmployeeLevelController.prototype, "updateOrganizationTeam", null);
EmployeeLevelController = tslib_1.__decorate([
    swagger_1.ApiTags('OrganizationEmployeeLevel'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof organization_employee_level_service_1.EmployeeLevelService !== "undefined" && organization_employee_level_service_1.EmployeeLevelService) === "function" ? _d : Object])
], EmployeeLevelController);
exports.EmployeeLevelController = EmployeeLevelController;


/***/ }),

/***/ "./src/app/organization_employee-level/organization-employee-level.entity.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/organization_employee-level/organization-employee-level.entity.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeLevel = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let EmployeeLevel = class EmployeeLevel extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty(),
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.employeeLevel),
    typeorm_1.JoinTable({
        name: 'tag_organization_employee_level'
    }),
    tslib_1.__metadata("design:type", Array)
], EmployeeLevel.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], EmployeeLevel.prototype, "level", void 0);
EmployeeLevel = tslib_1.__decorate([
    typeorm_1.Entity({ name: 'organization_employee_level' })
], EmployeeLevel);
exports.EmployeeLevel = EmployeeLevel;


/***/ }),

/***/ "./src/app/organization_employee-level/organization-employee-level.module.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/organization_employee-level/organization-employee-level.module.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeLevelModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const organization_employee_level_controller_1 = __webpack_require__(/*! ./organization-employee-level.controller */ "./src/app/organization_employee-level/organization-employee-level.controller.ts");
const organization_employee_level_service_1 = __webpack_require__(/*! ./organization-employee-level.service */ "./src/app/organization_employee-level/organization-employee-level.service.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const organization_employee_level_entity_1 = __webpack_require__(/*! ./organization-employee-level.entity */ "./src/app/organization_employee-level/organization-employee-level.entity.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let EmployeeLevelModule = class EmployeeLevelModule {
};
EmployeeLevelModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([organization_employee_level_entity_1.EmployeeLevel]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [organization_employee_level_controller_1.EmployeeLevelController],
        providers: [organization_employee_level_service_1.EmployeeLevelService]
    })
], EmployeeLevelModule);
exports.EmployeeLevelModule = EmployeeLevelModule;


/***/ }),

/***/ "./src/app/organization_employee-level/organization-employee-level.seed.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/organization_employee-level/organization-employee-level.seed.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createEmployeeLevels = void 0;
const organization_employee_level_entity_1 = __webpack_require__(/*! ./organization-employee-level.entity */ "./src/app/organization_employee-level/organization-employee-level.entity.ts");
const default_organization_employee_levels_1 = __webpack_require__(/*! ./default-organization-employee-levels */ "./src/app/organization_employee-level/default-organization-employee-levels.ts");
exports.createEmployeeLevels = async (connection, organizations) => {
    const employeeLevels = [];
    default_organization_employee_levels_1.DEFAULT_EMPLOYEE_LEVELS.forEach(({ level }) => {
        organizations.forEach((organization) => {
            const entity = new organization_employee_level_entity_1.EmployeeLevel();
            entity.level = level;
            entity.organization = organization;
            entity.tenant = organization.tenant;
            employeeLevels.push(entity);
        });
    });
    return insertLevels(connection, employeeLevels);
};
const insertLevels = async (connection, employeeLevels) => await connection.manager.save(employeeLevels);


/***/ }),

/***/ "./src/app/organization_employee-level/organization-employee-level.service.ts":
/*!************************************************************************************!*\
  !*** ./src/app/organization_employee-level/organization-employee-level.service.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmployeeLevelService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const organization_employee_level_entity_1 = __webpack_require__(/*! ./organization-employee-level.entity */ "./src/app/organization_employee-level/organization-employee-level.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
let EmployeeLevelService = class EmployeeLevelService extends core_1.CrudService {
    constructor(employeeLevelRepository) {
        super(employeeLevelRepository);
        this.employeeLevelRepository = employeeLevelRepository;
    }
};
EmployeeLevelService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(organization_employee_level_entity_1.EmployeeLevel)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], EmployeeLevelService);
exports.EmployeeLevelService = EmployeeLevelService;


/***/ }),

/***/ "./src/app/payment/payment.controller.ts":
/*!***********************************************!*\
  !*** ./src/app/payment/payment.controller.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const payment_service_1 = __webpack_require__(/*! ./payment.service */ "./src/app/payment/payment.service.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const payment_map_service_1 = __webpack_require__(/*! ./payment.map.service */ "./src/app/payment/payment.map.service.ts");
let PaymentController = class PaymentController extends core_1.CrudController {
    constructor(paymentService, paymentMapService) {
        super(paymentService);
        this.paymentService = paymentService;
        this.paymentMapService = paymentMapService;
    }
    async findAllPayments(data) {
        const { relations = [], findInput = null } = data;
        return this.paymentService.findAll({
            where: findInput,
            relations
        });
    }
    async getPaymentReport(request) {
        const reports = await this.paymentService.getPayments(request);
        let response = [];
        if (request.groupBy === 'date') {
            response = this.paymentMapService.mapByDate(reports);
        }
        else if (request.groupBy === 'client') {
            response = this.paymentMapService.mapByClient(reports);
        }
        else if (request.groupBy === 'project') {
            response = this.paymentMapService.mapByProject(reports);
        }
        return response;
    }
    async getDailyReportChartData(options) {
        return this.paymentService.getDailyReportChartData(options);
    }
    async createPayment(entity) {
        return this.paymentService.create(entity);
    }
    async updatePayment(id, entity) {
        return this.paymentService.create(Object.assign({ id }, entity));
    }
    async deleteTask(id) {
        return this.paymentService.delete(id);
    }
};
tslib_1.__decorate([
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_PAYMENT_VIEW),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], PaymentController.prototype, "findAllPayments", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Payments report.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found reports'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_EXPENSES_VIEW),
    common_1.Get('report'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof models_1.IGetPaymentInput !== "undefined" && models_1.IGetPaymentInput) === "function" ? _b : Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], PaymentController.prototype, "getPaymentReport", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Payment Report daily chart' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found one record'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('report/chart-data'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof models_1.IGetPaymentInput !== "undefined" && models_1.IGetPaymentInput) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], PaymentController.prototype, "getDailyReportChartData", null);
tslib_1.__decorate([
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_PAYMENT_ADD_EDIT),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof models_1.IPayment !== "undefined" && models_1.IPayment) === "function" ? _e : Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], PaymentController.prototype, "createPayment", null);
tslib_1.__decorate([
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_PAYMENT_ADD_EDIT),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_g = typeof models_1.IPayment !== "undefined" && models_1.IPayment) === "function" ? _g : Object]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], PaymentController.prototype, "updatePayment", null);
tslib_1.__decorate([
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_PAYMENT_ADD_EDIT),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], PaymentController.prototype, "deleteTask", null);
PaymentController = tslib_1.__decorate([
    swagger_1.ApiTags('Payment'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_k = typeof payment_service_1.PaymentService !== "undefined" && payment_service_1.PaymentService) === "function" ? _k : Object, typeof (_l = typeof payment_map_service_1.PaymentMapService !== "undefined" && payment_map_service_1.PaymentMapService) === "function" ? _l : Object])
], PaymentController);
exports.PaymentController = PaymentController;


/***/ }),

/***/ "./src/app/payment/payment.entity.ts":
/*!*******************************************!*\
  !*** ./src/app/payment/payment.entity.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Payment = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const invoice_entity_1 = __webpack_require__(/*! ../invoice/invoice.entity */ "./src/app/invoice/invoice.entity.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
let Payment = class Payment extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Payment.prototype, "invoiceId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: invoice_entity_1.Invoice }),
    typeorm_1.ManyToOne((type) => invoice_entity_1.Invoice, (invoice) => invoice.payments, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof invoice_entity_1.Invoice !== "undefined" && invoice_entity_1.Invoice) === "function" ? _a : Object)
], Payment.prototype, "invoice", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.RelationId((expense) => expense.employee),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Payment.prototype, "employeeId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.ManyToOne((type) => employee_entity_1.Employee, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof models_1.IEmployee !== "undefined" && models_1.IEmployee) === "function" ? _b : Object)
], Payment.prototype, "employee", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: user_entity_1.User }),
    typeorm_1.ManyToOne((type) => user_entity_1.User),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_c = typeof user_entity_1.User !== "undefined" && user_entity_1.User) === "function" ? _c : Object)
], Payment.prototype, "recordedBy", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], Payment.prototype, "paymentDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true, type: 'numeric' }),
    tslib_1.__metadata("design:type", Number)
], Payment.prototype, "amount", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Payment.prototype, "note", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String, enum: models_1.CurrenciesEnum }),
    class_validator_1.IsEnum(models_1.CurrenciesEnum),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Payment.prototype, "currency", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String, enum: models_1.PaymentMethodEnum }),
    class_validator_1.IsEnum(models_1.PaymentMethodEnum),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Payment.prototype, "paymentMethod", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Boolean)
], Payment.prototype, "overdue", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: organization_projects_entity_1.OrganizationProject }),
    typeorm_1.ManyToOne((type) => organization_projects_entity_1.OrganizationProject, (project) => project.payments, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_e = typeof organization_projects_entity_1.OrganizationProject !== "undefined" && organization_projects_entity_1.OrganizationProject) === "function" ? _e : Object)
], Payment.prototype, "project", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Payment.prototype, "projectId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: organization_contact_entity_1.OrganizationContact }),
    typeorm_1.ManyToOne((type) => organization_contact_entity_1.OrganizationContact, (contact) => contact.payments, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_f = typeof organization_contact_entity_1.OrganizationContact !== "undefined" && organization_contact_entity_1.OrganizationContact) === "function" ? _f : Object)
], Payment.prototype, "contact", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Payment.prototype, "contactId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany(() => tag_entity_1.Tag, (tag) => tag.payment),
    typeorm_1.JoinTable({
        name: 'tag_payment'
    }),
    tslib_1.__metadata("design:type", Array)
], Payment.prototype, "tags", void 0);
Payment = tslib_1.__decorate([
    typeorm_1.Entity('payment')
], Payment);
exports.Payment = Payment;


/***/ }),

/***/ "./src/app/payment/payment.map.service.ts":
/*!************************************************!*\
  !*** ./src/app/payment/payment.map.service.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentMapService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const moment = __webpack_require__(/*! moment */ "moment");
const underscore_1 = __webpack_require__(/*! underscore */ "underscore");
let PaymentMapService = class PaymentMapService {
    constructor() { }
    mapByDate(payments) {
        const dailyLogs = this.groupByDate(payments).map((byDatePayment, date) => {
            const sum = this.getDurationSum(byDatePayment);
            const byClient = this.groupByClient(byDatePayment).map((byClientPayment) => {
                const byProject = this.groupByProject(byClientPayment).map((byProjectPayment) => {
                    const project = byProjectPayment.length > 0 &&
                        byProjectPayment[0]
                        ? byProjectPayment[0].project
                        : null;
                    return {
                        project,
                        payments: byProjectPayment.map((row) => this.mapPaymentPercentage(row, sum))
                    };
                });
                const employee = byClientPayment.length > 0 && byClientPayment[0]
                    ? byClientPayment[0].employee
                    : null;
                return {
                    employee,
                    projects: byProject
                };
            });
            return {
                date,
                clients: byClient
            };
        });
        return dailyLogs;
    }
    mapByClient(payments) {
        const byClient = this.groupByClient(payments).map((byClientPayment) => {
            const sum = this.getDurationSum(byClientPayment);
            const dailyLogs = this.groupByDate(byClientPayment).map((byDatePayment, date) => {
                const byProject = this.groupByProject(byDatePayment).map((byProjectPayment) => {
                    const project = byProjectPayment.length > 0 &&
                        byProjectPayment[0]
                        ? byProjectPayment[0].project
                        : null;
                    return {
                        project,
                        payments: byProjectPayment.map((row) => this.mapPaymentPercentage(row, sum))
                    };
                });
                return {
                    date,
                    projects: byProject
                };
            });
            const client = byClientPayment.length > 0 && byClientPayment[0]
                ? byClientPayment[0].contact
                : null;
            return {
                client,
                dates: dailyLogs
            };
        });
        return byClient;
    }
    mapByProject(payments) {
        const byClient = this.groupByProject(payments).map((byProjectPayment) => {
            const sum = this.getDurationSum(byProjectPayment);
            const dailyLogs = this.groupByDate(byProjectPayment).map((byDatePayment, date) => {
                const byProject = this.groupByClient(byDatePayment).map((byClientPayment) => {
                    const employee = byClientPayment.length > 0 &&
                        byClientPayment[0]
                        ? byClientPayment[0].employee
                        : null;
                    return {
                        employee,
                        payments: byClientPayment.map((row) => this.mapPaymentPercentage(row, sum))
                    };
                });
                return {
                    date,
                    clients: byProject
                };
            });
            const project = byProjectPayment.length > 0 && byProjectPayment[0]
                ? byProjectPayment[0].project
                : null;
            return {
                project,
                dates: dailyLogs
            };
        });
        return byClient;
    }
    groupByProject(payments) {
        return underscore_1.chain(payments).groupBy((payment) => {
            return payment.projectId;
        });
    }
    groupByDate(payments) {
        return underscore_1.chain(payments).groupBy((payment) => {
            return moment.utc(payment.paymentDate).format('YYYY-MM-DD');
        });
    }
    groupByClient(payments) {
        return underscore_1.chain(payments).groupBy((payment) => {
            return payment.employeeId;
        });
    }
    mapPaymentPercentage(payments, sum = 0) {
        payments.duration_percentage =
            (parseInt(payments.duration, 10) * 100) / sum;
        return payments;
    }
    getDurationSum(payments) {
        return payments.reduce((iteratee, log) => {
            return iteratee + parseInt(log.duration, 10);
        }, 0);
    }
};
PaymentMapService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], PaymentMapService);
exports.PaymentMapService = PaymentMapService;


/***/ }),

/***/ "./src/app/payment/payment.module.ts":
/*!*******************************************!*\
  !*** ./src/app/payment/payment.module.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const payment_entity_1 = __webpack_require__(/*! ./payment.entity */ "./src/app/payment/payment.entity.ts");
const payment_controller_1 = __webpack_require__(/*! ./payment.controller */ "./src/app/payment/payment.controller.ts");
const payment_service_1 = __webpack_require__(/*! ./payment.service */ "./src/app/payment/payment.service.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
const payment_map_service_1 = __webpack_require__(/*! ./payment.map.service */ "./src/app/payment/payment.map.service.ts");
let PaymentModule = class PaymentModule {
};
PaymentModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([user_entity_1.User, payment_entity_1.Payment]), tenant_module_1.TenantModule],
        controllers: [payment_controller_1.PaymentController],
        providers: [payment_service_1.PaymentService, user_service_1.UserService, payment_map_service_1.PaymentMapService],
        exports: [payment_service_1.PaymentService, user_service_1.UserService, payment_map_service_1.PaymentMapService]
    })
], PaymentModule);
exports.PaymentModule = PaymentModule;


/***/ }),

/***/ "./src/app/payment/payment.seed.ts":
/*!*****************************************!*\
  !*** ./src/app/payment/payment.seed.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomPayment = exports.createDefaultPayment = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const payment_entity_1 = __webpack_require__(/*! ./payment.entity */ "./src/app/payment/payment.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const invoice_entity_1 = __webpack_require__(/*! ../invoice/invoice.entity */ "./src/app/invoice/invoice.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
exports.createDefaultPayment = async (connection, tenant, employees, defaultOrganizations) => {
    const payments = [];
    const users = await connection.manager.find(user_entity_1.User, {
        where: [{ tenant: tenant.id }]
    });
    for (const tenantOrg of defaultOrganizations) {
        const invoices = await connection.manager.find(invoice_entity_1.Invoice, {
            where: [{ organizationId: tenantOrg.id }]
        });
        for (const invoice of invoices) {
            const payment = new payment_entity_1.Payment();
            payment.invoiceId = invoice.id;
            payment.invoice = invoice;
            payment.organization = tenantOrg;
            payment.organizationId = tenantOrg.id;
            payment.paymentDate = faker.date.between(new Date(), moment(new Date()).add(1, 'month').toDate());
            payment.amount = faker.random.number({
                min: 1000,
                max: 100000
            });
            payment.note = faker.name.jobDescriptor();
            payment.currency = tenantOrg.currency || environment_1.environment.defaultCurrency;
            payment.paymentMethod = faker.random.arrayElement(Object.keys(models_1.PaymentMethodEnum));
            payment.overdue = faker.random.boolean();
            payment.tenant = tenant;
            payment.tags = invoice.tags;
            payment.employeeId = faker.random.arrayElement(employees).id;
            payment.recordedBy = faker.random.arrayElement(users);
            payments.push(payment);
        }
    }
    await connection.manager.save(payments);
    return payments;
};
exports.createRandomPayment = async (connection, tenants, tenantEmployeeMap, tenantOrganizationsMap) => {
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, Payment  will not be created');
        return;
    }
    for (const tenant of tenants) {
        const tenantOrgs = tenantOrganizationsMap.get(tenant);
        const tenantEmployees = tenantEmployeeMap.get(tenant);
        const users = await connection.manager.find(user_entity_1.User, {
            where: [{ tenant: tenant.id }]
        });
        for (const tenantOrg of tenantOrgs) {
            const payments1 = [];
            const payments2 = [];
            const invoices = await connection.manager.find(invoice_entity_1.Invoice, {
                where: { organizationId: tenantOrg.id }
            });
            let count = 0;
            for (const invoice of invoices) {
                const tags = await connection.manager.find(tag_entity_1.Tag, {
                    where: [{ organization: tenantOrg }]
                });
                const payment = new payment_entity_1.Payment();
                payment.invoice = invoice;
                payment.organizationId = tenantOrg.id;
                payment.paymentDate = faker.date.between(2019, faker.date.recent());
                payment.amount = faker.random.number({
                    min: 1000,
                    max: 100000
                });
                payment.note = faker.name.jobDescriptor();
                payment.currency = tenantOrg.currency || environment_1.environment.defaultCurrency;
                payment.paymentMethod = faker.random.arrayElement(Object.keys(models_1.PaymentMethodEnum));
                payment.overdue = faker.random.boolean();
                payment.tenant = tenant;
                payment.tags = tags;
                payment.employeeId = faker.random.arrayElement(tenantEmployees).id;
                payment.recordedBy = faker.random.arrayElement(users);
                if (count % 2 === 0) {
                    payments1.push(payment);
                }
                else {
                    payments2.push(payment);
                }
                count++;
            }
            await connection.manager.save(payments1);
            await connection.manager.save(payments2);
        }
    }
};


/***/ }),

/***/ "./src/app/payment/payment.service.ts":
/*!********************************************!*\
  !*** ./src/app/payment/payment.service.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const payment_entity_1 = __webpack_require__(/*! ./payment.entity */ "./src/app/payment/payment.entity.ts");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const underscore_1 = __webpack_require__(/*! underscore */ "underscore");
const moment = __webpack_require__(/*! moment */ "moment");
let PaymentService = class PaymentService extends core_1.CrudService {
    constructor(paymentRepository) {
        super(paymentRepository);
        this.paymentRepository = paymentRepository;
    }
    async getPayments(request) {
        const query = this.filterQuery(request);
        query.orderBy(`"${query.alias}"."paymentDate"`, 'ASC');
        const payments = await query.getMany();
        return payments;
    }
    async getDailyReportChartData(request) {
        const query = this.filterQuery(request);
        query.orderBy(`"${query.alias}"."paymentDate"`, 'ASC');
        let dayList = [];
        const range = {};
        let i = 0;
        const start = moment(request.startDate);
        while (start.isSameOrBefore(request.endDate) && i < 31) {
            const date = start.format('YYYY-MM-DD');
            range[date] = null;
            start.add(1, 'day');
            i++;
        }
        dayList = Object.keys(range);
        const payments = await query.getMany();
        const byDate = underscore_1.chain(payments)
            .groupBy((payment) => moment(payment.paymentDate).format('YYYY-MM-DD'))
            .mapObject((payments, date) => {
            const sum = payments.reduce((iteratee, payment) => {
                return iteratee + parseFloat(payment.amount);
            }, 0);
            return {
                date,
                value: sum.toFixed(1)
            };
        })
            .value();
        const dates = dayList.map((date) => {
            if (byDate[date]) {
                return byDate[date];
            }
            else {
                return {
                    date: date,
                    value: {
                        expanse: 0
                    }
                };
            }
        });
        return dates;
    }
    filterQuery(request) {
        const query = this.paymentRepository.createQueryBuilder();
        if (request && request.limit > 0) {
            query.take(request.limit);
            query.skip((request.page || 0) * request.limit);
        }
        query.where((qb) => {
            if (request.startDate && request.endDate) {
                const startDate = moment.utc(request.startDate).toDate();
                const endDate = moment.utc(request.endDate).toDate();
                qb.andWhere(`"${query.alias}"."paymentDate" Between :startDate AND :endDate`, {
                    startDate,
                    endDate
                });
            }
            if (request.projectIds) {
                qb.andWhere(`"${query.alias}"."projectId" IN (:...projectId)`, {
                    projectId: request.projectIds
                });
            }
            if (request.organizationId) {
                qb.andWhere(`"${query.alias}"."organizationId" = :organizationId`, {
                    organizationId: request.organizationId
                });
            }
            qb.andWhere(`"${query.alias}"."tenantId" = :tenantId`, {
                tenantId: context_1.RequestContext.currentTenantId()
            });
        });
        return query;
    }
};
PaymentService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(payment_entity_1.Payment)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], PaymentService);
exports.PaymentService = PaymentService;


/***/ }),

/***/ "./src/app/pipeline-stage/pipeline-stage.entity.ts":
/*!*********************************************************!*\
  !*** ./src/app/pipeline-stage/pipeline-stage.entity.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelineStage = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const pipeline_entity_1 = __webpack_require__(/*! ../pipeline/pipeline.entity */ "./src/app/pipeline/pipeline.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let PipelineStage = class PipelineStage extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => pipeline_entity_1.Pipeline, { onDelete: 'CASCADE' }),
    swagger_1.ApiProperty({ type: pipeline_entity_1.Pipeline }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof pipeline_entity_1.Pipeline !== "undefined" && pipeline_entity_1.Pipeline) === "function" ? _a : Object)
], PipelineStage.prototype, "pipeline", void 0);
tslib_1.__decorate([
    typeorm_1.RelationId(({ pipeline }) => pipeline),
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsNotEmpty(),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], PipelineStage.prototype, "pipelineId", void 0);
tslib_1.__decorate([
    typeorm_1.Column({ nullable: true, type: 'text' }),
    class_validator_1.IsString(),
    tslib_1.__metadata("design:type", String)
], PipelineStage.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number, minimum: 1 }),
    typeorm_1.Column({ type: 'int' }),
    class_validator_1.Min(1),
    class_validator_1.IsNotEmpty(),
    class_validator_1.IsNumber(),
    tslib_1.__metadata("design:type", Number)
], PipelineStage.prototype, "index", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsNotEmpty(),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], PipelineStage.prototype, "name", void 0);
PipelineStage = tslib_1.__decorate([
    typeorm_1.Entity('pipeline_stage')
], PipelineStage);
exports.PipelineStage = PipelineStage;


/***/ }),

/***/ "./src/app/pipeline-stage/pipeline-stage.module.ts":
/*!*********************************************************!*\
  !*** ./src/app/pipeline-stage/pipeline-stage.module.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.StageModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const auth_module_1 = __webpack_require__(/*! ../auth/auth.module */ "./src/app/auth/auth.module.ts");
const pipeline_stage_entity_1 = __webpack_require__(/*! ./pipeline-stage.entity */ "./src/app/pipeline-stage/pipeline-stage.entity.ts");
const pipeline_stage_service_1 = __webpack_require__(/*! ./pipeline-stage.service */ "./src/app/pipeline-stage/pipeline-stage.service.ts");
let StageModule = class StageModule {
};
StageModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([pipeline_stage_entity_1.PipelineStage]), auth_module_1.AuthModule],
        providers: [pipeline_stage_service_1.StageService],
        exports: [pipeline_stage_service_1.StageService]
    })
], StageModule);
exports.StageModule = StageModule;


/***/ }),

/***/ "./src/app/pipeline-stage/pipeline-stage.seed.ts":
/*!*******************************************************!*\
  !*** ./src/app/pipeline-stage/pipeline-stage.seed.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomPipelineStage = void 0;
const pipeline_stage_entity_1 = __webpack_require__(/*! ./pipeline-stage.entity */ "./src/app/pipeline-stage/pipeline-stage.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const pipeline_entity_1 = __webpack_require__(/*! ../pipeline/pipeline.entity */ "./src/app/pipeline/pipeline.entity.ts");
exports.createRandomPipelineStage = async (connection, tenants, tenantOrganizationsMap) => {
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, pipeline stages not be created');
        return;
    }
    const pipelineStages = [];
    for (const tenant of tenants) {
        const tenantOrganization = tenantOrganizationsMap.get(tenant);
        for (const tenantOrg of tenantOrganization) {
            const organizationPipeline = await connection.manager.find(pipeline_entity_1.Pipeline, {
                where: [{ organization: tenantOrg }]
            });
            for (const pipeline of organizationPipeline) {
                for (let i = 0; i <= faker.random.number(10); i++) {
                    const pipelineStage = new pipeline_stage_entity_1.PipelineStage();
                    pipelineStage.pipeline = pipeline;
                    pipelineStage.pipelineId = pipeline.id;
                    pipelineStage.name = faker.company.companyName();
                    pipelineStage.description = faker.name.jobDescriptor();
                    pipelineStage.index = Math.floor(Math.random() * 99999) + 1;
                    pipelineStage.tenant = tenant;
                    pipelineStage.organization = tenantOrg;
                    pipelineStages.push(pipelineStage);
                }
            }
        }
    }
    return await insertRandomPipelineStage(connection, pipelineStages);
};
const insertRandomPipelineStage = async (connection, pipelineStages) => await connection.manager.save(pipelineStages);


/***/ }),

/***/ "./src/app/pipeline-stage/pipeline-stage.service.ts":
/*!**********************************************************!*\
  !*** ./src/app/pipeline-stage/pipeline-stage.service.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StageService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const crud_1 = __webpack_require__(/*! ../core/crud */ "./src/app/core/crud/index.ts");
const pipeline_stage_entity_1 = __webpack_require__(/*! ./pipeline-stage.entity */ "./src/app/pipeline-stage/pipeline-stage.entity.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const typeorm_2 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const core_1 = __webpack_require__(/*! @angular/core */ "@angular/core");
let StageService = class StageService extends crud_1.CrudService {
    constructor(stageRepository) {
        super(stageRepository);
    }
};
StageService = tslib_1.__decorate([
    core_1.Injectable(),
    tslib_1.__param(0, typeorm_2.InjectRepository(pipeline_stage_entity_1.PipelineStage)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _a : Object])
], StageService);
exports.StageService = StageService;


/***/ }),

/***/ "./src/app/pipeline/pipeline.controller.ts":
/*!*************************************************!*\
  !*** ./src/app/pipeline/pipeline.controller.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelineController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const crud_1 = __webpack_require__(/*! ../core/crud */ "./src/app/core/crud/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const pipeline_service_1 = __webpack_require__(/*! ./pipeline.service */ "./src/app/pipeline/pipeline.service.ts");
const pipes_1 = __webpack_require__(/*! ../shared/pipes */ "./src/app/shared/pipes/index.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const QueryPartialEntity_1 = __webpack_require__(/*! typeorm/query-builder/QueryPartialEntity */ "typeorm/query-builder/QueryPartialEntity");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let PipelineController = class PipelineController extends crud_1.CrudController {
    constructor(pipelineService) {
        super(pipelineService);
        this.pipelineService = pipelineService;
    }
    async findAll(data) {
        const { relations = [], findInput: where = null } = data;
        return this.pipelineService.findAll({
            relations,
            where
        });
    }
    async findDeals(id) {
        return this.pipelineService.findDeals(id);
    }
    async create(entity, ...options) {
        return super.create(entity, ...options);
    }
    async update(id, entity, ...options) {
        return super.update(id, entity, ...options);
    }
    async delete(id, ...options) {
        return super.delete(id);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'find all' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found records'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', pipes_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], PipelineController.prototype, "findAll", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'find deals' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found records'
    }),
    common_1.Get(':id/deals'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], PipelineController.prototype, "findDeals", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    permissions_1.Permissions(models_1.PermissionsEnum.EDIT_SALES_PIPELINES),
    common_1.HttpCode(common_1.HttpStatus.CREATED),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof typeorm_1.DeepPartial !== "undefined" && typeorm_1.DeepPartial) === "function" ? _c : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], PipelineController.prototype, "create", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    permissions_1.Permissions(models_1.PermissionsEnum.EDIT_SALES_PIPELINES),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_e = typeof QueryPartialEntity_1.QueryDeepPartialEntity !== "undefined" && QueryPartialEntity_1.QueryDeepPartialEntity) === "function" ? _e : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], PipelineController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Delete record' }),
    permissions_1.Permissions(models_1.PermissionsEnum.EDIT_SALES_PIPELINES),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NO_CONTENT,
        description: 'The record has been successfully deleted'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], PipelineController.prototype, "delete", null);
PipelineController = tslib_1.__decorate([
    swagger_1.ApiTags('Pipeline'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_h = typeof pipeline_service_1.PipelineService !== "undefined" && pipeline_service_1.PipelineService) === "function" ? _h : Object])
], PipelineController);
exports.PipelineController = PipelineController;


/***/ }),

/***/ "./src/app/pipeline/pipeline.entity.ts":
/*!*********************************************!*\
  !*** ./src/app/pipeline/pipeline.entity.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Pipeline = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const pipeline_stage_entity_1 = __webpack_require__(/*! ../pipeline-stage/pipeline-stage.entity */ "./src/app/pipeline-stage/pipeline-stage.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let Pipeline = class Pipeline extends tenant_organization_base_1.TenantOrganizationBase {
    __before_persist() {
        var _a;
        const pipelineId = this.id ? { pipelineId: this.id } : {};
        let index = 0;
        (_a = this.stages) === null || _a === void 0 ? void 0 : _a.forEach((stage) => {
            Object.assign(stage, pipelineId, { index: ++index });
        });
    }
    __after_fetch() {
        if (this.stages) {
            this.stages.sort(({ index: a }, { index: b }) => a - b);
        }
    }
};
tslib_1.__decorate([
    typeorm_1.OneToMany(() => pipeline_stage_entity_1.PipelineStage, ({ pipeline }) => pipeline, {
        cascade: ['insert']
    }),
    swagger_1.ApiProperty({ type: pipeline_stage_entity_1.PipelineStage }),
    tslib_1.__metadata("design:type", Array)
], Pipeline.prototype, "stages", void 0);
tslib_1.__decorate([
    typeorm_1.Column({ nullable: true, type: 'text' }),
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    tslib_1.__metadata("design:type", String)
], Pipeline.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsNotEmpty(),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Pipeline.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Boolean)
], Pipeline.prototype, "isActive", void 0);
tslib_1.__decorate([
    typeorm_1.BeforeInsert(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], Pipeline.prototype, "__before_persist", null);
tslib_1.__decorate([
    typeorm_1.AfterLoad(),
    typeorm_1.AfterInsert(),
    typeorm_1.AfterUpdate(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], Pipeline.prototype, "__after_fetch", null);
Pipeline = tslib_1.__decorate([
    typeorm_1.Entity('pipeline')
], Pipeline);
exports.Pipeline = Pipeline;


/***/ }),

/***/ "./src/app/pipeline/pipeline.module.ts":
/*!*********************************************!*\
  !*** ./src/app/pipeline/pipeline.module.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelineModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const auth_module_1 = __webpack_require__(/*! ../auth/auth.module */ "./src/app/auth/auth.module.ts");
const pipeline_controller_1 = __webpack_require__(/*! ./pipeline.controller */ "./src/app/pipeline/pipeline.controller.ts");
const pipeline_service_1 = __webpack_require__(/*! ./pipeline.service */ "./src/app/pipeline/pipeline.service.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const pipeline_entity_1 = __webpack_require__(/*! ./pipeline.entity */ "./src/app/pipeline/pipeline.entity.ts");
const pipeline_stage_module_1 = __webpack_require__(/*! ../pipeline-stage/pipeline-stage.module */ "./src/app/pipeline-stage/pipeline-stage.module.ts");
const deal_module_1 = __webpack_require__(/*! ../deal/deal.module */ "./src/app/deal/deal.module.ts");
const deal_entity_1 = __webpack_require__(/*! ../deal/deal.entity */ "./src/app/deal/deal.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let PipelineModule = class PipelineModule {
};
PipelineModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([pipeline_entity_1.Pipeline, deal_entity_1.Deal, user_entity_1.User]),
            pipeline_stage_module_1.StageModule,
            deal_module_1.DealModule,
            auth_module_1.AuthModule,
            tenant_module_1.TenantModule
        ],
        controllers: [pipeline_controller_1.PipelineController],
        providers: [pipeline_service_1.PipelineService],
        exports: [pipeline_service_1.PipelineService]
    })
], PipelineModule);
exports.PipelineModule = PipelineModule;


/***/ }),

/***/ "./src/app/pipeline/pipeline.seed.ts":
/*!*******************************************!*\
  !*** ./src/app/pipeline/pipeline.seed.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomPipeline = exports.createDefaultPipeline = void 0;
const pipeline_entity_1 = __webpack_require__(/*! ./pipeline.entity */ "./src/app/pipeline/pipeline.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
exports.createDefaultPipeline = async (connection, tenant, tenantOrganizations) => {
    if (!tenantOrganizations) {
        console.warn('Warning: tenantOrganizations not found, Default pipeline not be created');
        return;
    }
    let pipelines = [];
    pipelines = await dataOperation(connection, tenant, pipelines, tenantOrganizations);
    return pipelines;
};
exports.createRandomPipeline = async (connection, tenants, tenantOrganizationsMap) => {
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, pipeline not be created');
        return;
    }
    let pipelines = [];
    for (const tenant of tenants) {
        const tenantOrganization = tenantOrganizationsMap.get(tenant);
        for (const tenantOrg of tenantOrganization) {
            pipelines = await dataOperation(connection, tenant, pipelines, tenantOrg);
        }
    }
    return pipelines;
};
const dataOperation = async (connection, tenant, pipelines, organization) => {
    for (let i = 0; i <= faker.random.number(10); i++) {
        const pipeline = new pipeline_entity_1.Pipeline();
        pipeline.organization = organization;
        pipeline.tenant = tenant;
        pipeline.organizationId = organization.id;
        pipeline.name = faker.company.companyName();
        pipeline.description = faker.name.jobDescriptor();
        pipeline.isActive = faker.random.boolean();
        pipelines.push(pipeline);
    }
    await connection.manager.save(pipelines);
    return pipelines;
};


/***/ }),

/***/ "./src/app/pipeline/pipeline.service.ts":
/*!**********************************************!*\
  !*** ./src/app/pipeline/pipeline.service.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelineService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const crud_1 = __webpack_require__(/*! ../core/crud */ "./src/app/core/crud/index.ts");
const pipeline_entity_1 = __webpack_require__(/*! ./pipeline.entity */ "./src/app/pipeline/pipeline.entity.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const typeorm_2 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const pipeline_stage_entity_1 = __webpack_require__(/*! ../pipeline-stage/pipeline-stage.entity */ "./src/app/pipeline-stage/pipeline-stage.entity.ts");
const QueryPartialEntity_1 = __webpack_require__(/*! typeorm/query-builder/QueryPartialEntity */ "typeorm/query-builder/QueryPartialEntity");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const deal_entity_1 = __webpack_require__(/*! ../deal/deal.entity */ "./src/app/deal/deal.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
let PipelineService = class PipelineService extends crud_1.CrudService {
    constructor(dealRepository, pipelineRepository, userRepository) {
        super(pipelineRepository);
        this.dealRepository = dealRepository;
        this.pipelineRepository = pipelineRepository;
        this.userRepository = userRepository;
    }
    async findDeals(pipelineId) {
        const tenantId = context_1.RequestContext.currentTenantId();
        const items = await this.dealRepository
            .createQueryBuilder('deal')
            .leftJoin('deal.stage', 'pipeline_stage')
            .where('pipeline_stage.pipelineId = :pipelineId', { pipelineId })
            .andWhere('pipeline_stage.tenantId = :tenantId', { tenantId })
            .groupBy('pipeline_stage.id')
            .addGroupBy('deal.id')
            .orderBy('pipeline_stage.index', 'ASC')
            .getMany();
        const { length: total } = items;
        for (const deal of items) {
            deal.createdBy = await this.userRepository.findOne(deal.createdByUserId);
        }
        return { items, total };
    }
    async update(id, partialEntity, manager, ...options) {
        var _a, _b;
        const onePipeline = await manager.findOne(pipeline_entity_1.Pipeline, id);
        const pipeline = manager.create(pipeline_entity_1.Pipeline, Object.assign(Object.assign({}, partialEntity), { id: onePipeline.id }));
        const updatedStages = ((_a = pipeline.stages) === null || _a === void 0 ? void 0 : _a.filter((stage) => stage.id)) || [];
        const deletedStages = await manager
            .find(pipeline_stage_entity_1.PipelineStage, {
            where: {
                pipelineId: id
            },
            select: ['id']
        })
            .then((stages) => {
            const requestStageIds = updatedStages.map((updatedStage) => updatedStage.id);
            return stages.filter((stage) => !requestStageIds.includes(stage.id));
        });
        const createdStages = ((_b = pipeline.stages) === null || _b === void 0 ? void 0 : _b.filter((stage) => !updatedStages.includes(stage))) || [];
        pipeline.__before_persist();
        delete pipeline.stages;
        await manager.remove(deletedStages);
        await Promise.all(createdStages.map((stage) => {
            stage = manager.create(pipeline_stage_entity_1.PipelineStage, stage);
            return manager.save(stage);
        }));
        await Promise.all(updatedStages.map((stage) => manager.update(pipeline_stage_entity_1.PipelineStage, stage.id, stage)));
        return await manager.update(pipeline_entity_1.Pipeline, id, pipeline);
    }
};
tslib_1.__decorate([
    typeorm_1.Transaction(),
    tslib_1.__param(2, typeorm_1.TransactionManager()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, typeof (_a = typeof QueryPartialEntity_1.QueryDeepPartialEntity !== "undefined" && QueryPartialEntity_1.QueryDeepPartialEntity) === "function" ? _a : Object, typeof (_b = typeof typeorm_1.EntityManager !== "undefined" && typeorm_1.EntityManager) === "function" ? _b : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], PipelineService.prototype, "update", null);
PipelineService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_2.InjectRepository(deal_entity_1.Deal)),
    tslib_1.__param(1, typeorm_2.InjectRepository(pipeline_entity_1.Pipeline)),
    tslib_1.__param(2, typeorm_2.InjectRepository(user_entity_1.User)),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _d : Object, typeof (_e = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _e : Object, typeof (_f = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _f : Object])
], PipelineService);
exports.PipelineService = PipelineService;


/***/ }),

/***/ "./src/app/product-category/category.seed.ts":
/*!***************************************************!*\
  !*** ./src/app/product-category/category.seed.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomCategories = exports.createCategories = void 0;
const product_category_entity_1 = __webpack_require__(/*! ./product-category.entity */ "./src/app/product-category/product-category.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const seed = __webpack_require__(/*! ./product-category.seed.json */ "./src/app/product-category/product-category.seed.json");
const product_category_translation_entity_1 = __webpack_require__(/*! ./product-category-translation.entity */ "./src/app/product-category/product-category-translation.entity.ts");
exports.createCategories = async (connection, organizations) => {
    const seedProductCategories = [];
    organizations.forEach(async (organization) => {
        let image = faker.image.abstract();
        seed.forEach(async (seedProductCategory) => {
            const newCategory = new product_category_entity_1.ProductCategory();
            image =
                faker.image[seedProductCategory.fakerImageCategory]() ||
                    faker.image.abstract();
            newCategory.imageUrl = image;
            newCategory.organization = organization;
            newCategory.tenant = organization.tenant;
            newCategory.translations = [];
            seedProductCategory.translations.forEach((translation) => {
                const newTranslation = new product_category_translation_entity_1.ProductCategoryTranslation();
                newTranslation.organization = organization;
                newTranslation.tenant = organization.tenant;
                Object.assign(newTranslation, translation);
                newCategory.translations.push(newTranslation);
            });
            seedProductCategories.push(newCategory);
        });
    });
    return await insertProductCategories(connection, seedProductCategories);
};
const insertProductCategories = async (connection, categories) => {
    return await connection.manager.save(categories);
};
exports.createRandomCategories = async (connection, tenants, tenantOrganizationsMap) => {
    const seedProductCategories = [];
    for (const tenant of tenants) {
        const tenantOrgs = tenantOrganizationsMap.get(tenant);
        for (const tenantOrg of tenantOrgs) {
            for (const seedProductCategory of seed) {
                const newCategory = new product_category_entity_1.ProductCategory();
                const image = faker.image[seedProductCategory.fakerImageCategory]() ||
                    faker.image.abstract();
                newCategory.imageUrl = image;
                newCategory.organization = tenantOrg;
                newCategory.tenant = tenant;
                newCategory.translations = [];
                seedProductCategory.translations.forEach((translation) => {
                    const newTranslation = new product_category_translation_entity_1.ProductCategoryTranslation();
                    newTranslation.organization = tenantOrg;
                    newTranslation.tenant = tenant;
                    Object.assign(newTranslation, translation);
                    newCategory.translations.push(newTranslation);
                });
                seedProductCategories.push(newCategory);
            }
        }
    }
    await insertProductCategories(connection, seedProductCategories);
    return seedProductCategories;
};


/***/ }),

/***/ "./src/app/product-category/product-category-translation.entity.ts":
/*!*************************************************************************!*\
  !*** ./src/app/product-category/product-category-translation.entity.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductCategoryTranslation = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const translate_base_1 = __webpack_require__(/*! ../core/entities/translate-base */ "./src/app/core/entities/translate-base.ts");
const product_category_entity_1 = __webpack_require__(/*! ./product-category.entity */ "./src/app/product-category/product-category.entity.ts");
let ProductCategoryTranslation = class ProductCategoryTranslation extends translate_base_1.TranslationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], ProductCategoryTranslation.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], ProductCategoryTranslation.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: product_category_entity_1.ProductCategory }),
    typeorm_1.ManyToOne((type) => product_category_entity_1.ProductCategory, (productCategory) => productCategory.translations, { onDelete: 'CASCADE', onUpdate: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof product_category_entity_1.ProductCategory !== "undefined" && product_category_entity_1.ProductCategory) === "function" ? _a : Object)
], ProductCategoryTranslation.prototype, "reference", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.LanguagesEnum }),
    class_validator_1.IsEnum(models_1.LanguagesEnum),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], ProductCategoryTranslation.prototype, "languageCode", void 0);
ProductCategoryTranslation = tslib_1.__decorate([
    typeorm_1.Entity('product_category_translation')
], ProductCategoryTranslation);
exports.ProductCategoryTranslation = ProductCategoryTranslation;


/***/ }),

/***/ "./src/app/product-category/product-category.controller.ts":
/*!*****************************************************************!*\
  !*** ./src/app/product-category/product-category.controller.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductCategoryController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const product_category_entity_1 = __webpack_require__(/*! ./product-category.entity */ "./src/app/product-category/product-category.entity.ts");
const product_category_service_1 = __webpack_require__(/*! ./product-category.service */ "./src/app/product-category/product-category.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let ProductCategoryController = class ProductCategoryController extends core_1.CrudController {
    constructor(productCategoriesService) {
        super(productCategoriesService);
        this.productCategoriesService = productCategoriesService;
    }
    async findAllProductCategories(data) {
        const { relations = [], findInput = null, langCode = models_1.LanguagesEnum.ENGLISH } = data;
        return this.productCategoriesService.findAllProductCategories(relations, findInput, langCode);
    }
    async update(id, entity) {
        return this.productCategoriesService.updateProductCategory(id, entity);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all product categories.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found product categories.',
        type: product_category_entity_1.ProductCategory
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], ProductCategoryController.prototype, "findAllProductCategories", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_b = typeof product_category_entity_1.ProductCategory !== "undefined" && product_category_entity_1.ProductCategory) === "function" ? _b : Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], ProductCategoryController.prototype, "update", null);
ProductCategoryController = tslib_1.__decorate([
    swagger_1.ApiTags('ProductCategories'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof product_category_service_1.ProductCategoryService !== "undefined" && product_category_service_1.ProductCategoryService) === "function" ? _d : Object])
], ProductCategoryController);
exports.ProductCategoryController = ProductCategoryController;


/***/ }),

/***/ "./src/app/product-category/product-category.entity.ts":
/*!*************************************************************!*\
  !*** ./src/app/product-category/product-category.entity.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductCategory = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const translate_base_1 = __webpack_require__(/*! ../core/entities/translate-base */ "./src/app/core/entities/translate-base.ts");
const product_category_translation_entity_1 = __webpack_require__(/*! ./product-category-translation.entity */ "./src/app/product-category/product-category-translation.entity.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const product_entity_1 = __webpack_require__(/*! ../product/product.entity */ "./src/app/product/product.entity.ts");
let ProductCategory = class ProductCategory extends translate_base_1.TranslatableBase {
};
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], ProductCategory.prototype, "imageUrl", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany((type) => product_entity_1.Product, (product) => product.category),
    tslib_1.__metadata("design:type", Array)
], ProductCategory.prototype, "products", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: product_category_translation_entity_1.ProductCategoryTranslation, isArray: true }),
    typeorm_1.OneToMany((type) => product_category_translation_entity_1.ProductCategoryTranslation, (productCategoryTranslation) => productCategoryTranslation.reference, {
        eager: true,
        cascade: true
    }),
    tslib_1.__metadata("design:type", Array)
], ProductCategory.prototype, "translations", void 0);
ProductCategory = tslib_1.__decorate([
    typeorm_1.Entity('product_category')
], ProductCategory);
exports.ProductCategory = ProductCategory;


/***/ }),

/***/ "./src/app/product-category/product-category.module.ts":
/*!*************************************************************!*\
  !*** ./src/app/product-category/product-category.module.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductCategoriesModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const product_category_entity_1 = __webpack_require__(/*! ./product-category.entity */ "./src/app/product-category/product-category.entity.ts");
const product_category_service_1 = __webpack_require__(/*! ./product-category.service */ "./src/app/product-category/product-category.service.ts");
const product_category_controller_1 = __webpack_require__(/*! ./product-category.controller */ "./src/app/product-category/product-category.controller.ts");
const product_category_translation_entity_1 = __webpack_require__(/*! ./product-category-translation.entity */ "./src/app/product-category/product-category-translation.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let ProductCategoriesModule = class ProductCategoriesModule {
};
ProductCategoriesModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([product_category_entity_1.ProductCategory, product_category_translation_entity_1.ProductCategoryTranslation]),
            tenant_module_1.TenantModule
        ],
        controllers: [product_category_controller_1.ProductCategoryController],
        providers: [product_category_service_1.ProductCategoryService]
    })
], ProductCategoriesModule);
exports.ProductCategoriesModule = ProductCategoriesModule;


/***/ }),

/***/ "./src/app/product-category/product-category.seed.json":
/*!*************************************************************!*\
  !*** ./src/app/product-category/product-category.seed.json ***!
  \*************************************************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, default */
/***/ (function(module) {

module.exports = JSON.parse("[{\"name\":\"Software\",\"description\":\"a collection of data or computer instructions that tell the computer how to work\",\"fakerImageCategory\":\"technics\",\"translations\":[{\"languageCode\":\"bg\",\"name\":\"Софтуер\",\"description\":\"Kолекция от данни или компютърни инструкции, които казват на компютъра как да работи\"},{\"languageCode\":\"en\",\"name\":\"Software\",\"description\":\"a collection of data or computer instructions that tell the computer how to work\"},{\"languageCode\":\"he\",\"name\":\"תוכנה\",\"description\":\"אוסף נתונים או הוראות מחשב המספרים למחשב כיצד לעבוד\"},{\"languageCode\":\"ru\",\"name\":\"Програмное обеспечение\",\"description\":\"Набор данных или компьютерных инструкций, которые говорят компьютеру, как работать\"}]},{\"name\":\"Food\",\"description\":\"Any substance consumed to provide nutritional support for an organism\",\"fakerImageCategory\":\"food\",\"translations\":[{\"languageCode\":\"bg\",\"name\":\"Храна\",\"description\":\"Всяко вещество, консумирано за осигуряване на хранителна подкрепа на организма\"},{\"languageCode\":\"en\",\"name\":\"Food\",\"description\":\"Any substance consumed to provide nutritional support for an organism\"},{\"languageCode\":\"he\",\"name\":\"מזון\",\"description\":\"כל חומר הנצרך בכדי לספק תמיכה תזונתית לאורגניזם\"},{\"languageCode\":\"ru\",\"name\":\"Питание\",\"description\":\"Любое вещество, потребляемое для обеспечения питательной поддержки организма\"}]},{\"name\":\"Transport\",\"description\":\"The movement of people or goods from one place to another\",\"fakerImageCategory\":\"transport\",\"translations\":[{\"languageCode\":\"bg\",\"name\":\"Tранспорт\",\"description\":\"Движението на хора или стоки от едно място на друго\"},{\"languageCode\":\"en\",\"name\":\"Transport\",\"description\":\"The movement of people or goods from one place to another\"},{\"languageCode\":\"he\",\"name\":\"הובלה\",\"description\":\"תנועה של אנשים או טובין ממקום למקום\"},{\"languageCode\":\"ru\",\"name\":\"Транспорт\",\"description\":\"Перемещение людей или товаров из одного места в другое\"}]},{\"name\":\"Education\",\"description\":\"Aquisition of knowledge, skills, values, beliefs, and habits\",\"fakerImageCategory\":\"people\",\"translations\":[{\"languageCode\":\"bg\",\"name\":\"Oбразование\",\"description\":\"Придобиване на знания, умения, ценности, вярвания и навици\"},{\"languageCode\":\"en\",\"name\":\"Education\",\"description\":\"Aquisition of knowledge, skills, values, beliefs, and habits\"},{\"languageCode\":\"he\",\"name\":\"חינוך\",\"description\":\"מימוש ידע, מיומנויות, ערכים, אמונות והרגלים\"},{\"languageCode\":\"ru\",\"name\":\"Образование\",\"description\":\"Приобретение знаний, навыков, ценностей, убеждений и привычек\"}]},{\"name\":\"Clothing\",\"description\":\"Items worn on the body\",\"fakerImageCategory\":\"fashion\",\"translations\":[{\"languageCode\":\"bg\",\"name\":\"Oблекло\",\"description\":\"Елементи, носени по тялото\"},{\"languageCode\":\"en\",\"name\":\"Clothing\",\"description\":\"Items worn on the body\"},{\"languageCode\":\"he\",\"name\":\"ביגוד\",\"description\":\"פריטים שחוקים על הגוף\"},{\"languageCode\":\"ru\",\"name\":\"Одежда\",\"description\":\"Предметы, носимые на теле\"}]},{\"name\":\"Office\",\"description\":\"A place for commercial, professional, or bureaucratic work.\",\"fakerImageCategory\":\"business\",\"translations\":[{\"languageCode\":\"bg\",\"name\":\"Oфис\",\"description\":\"Място за търговска, професионална или бюрократична работа.\"},{\"languageCode\":\"en\",\"name\":\"Office\",\"description\":\"A place for commercial, professional, or bureaucratic work.\"},{\"languageCode\":\"he\",\"name\":\"משרד\",\"description\":\"מקום לעבודה מסחרית, מקצועית או בירוקרטית.\"},{\"languageCode\":\"ru\",\"name\":\"Офис\",\"description\":\"Место для коммерческой, профессиональной или бюрократической работы.\"}]},{\"name\":\"Advertisement\",\"description\":\"How a company encourages people to buy their products, services or ideas\",\"fakerImageCategory\":\"business\",\"translations\":[{\"languageCode\":\"bg\",\"name\":\"Реклама\",\"description\":\"Как една компания насърчава хората да купуват своите продукти, услуги или идеи\"},{\"languageCode\":\"en\",\"name\":\"Advertisement\",\"description\":\"How a company encourages people to buy their products, services or ideas\"},{\"languageCode\":\"he\",\"name\":\"פרסומת\",\"description\":\"כיצד חברה מעודדת אנשים לקנות את המוצרים, השירותים או הרעיונות שלהם\"},{\"languageCode\":\"ru\",\"name\":\"Реклама\",\"description\":\"Как компания поощряет людей покупать их продукты, услуги или идеи\"}]},{\"name\":\"Health\",\"description\":\"State of complete physical, mental, and social well-being\",\"fakerImageCategory\":\"nature\",\"translations\":[{\"languageCode\":\"bg\",\"name\":\"Здраве\",\"description\":\"Състояние на пълно физическо, психическо и социално благополучие\"},{\"languageCode\":\"en\",\"name\":\"Health\",\"description\":\"State of complete physical, mental, and social well-being\"},{\"languageCode\":\"he\",\"name\":\"בריאות\",\"description\":\"מצב של רווחה גופנית, נפשית וחברתית מוחלטת\"},{\"languageCode\":\"ru\",\"name\":\"Здоровье\",\"description\":\"Состояние полного физического, психического и социального благополучия\"}]},{\"name\":\"Sport\",\"description\":\"An activity involving physical exertion and skill\",\"fakerImageCategory\":\"sports\",\"translations\":[{\"languageCode\":\"bg\",\"name\":\"Спорт\",\"description\":\"Дейност, включваща физически натоварвания и умения\"},{\"languageCode\":\"en\",\"name\":\"Sport\",\"description\":\"An activity involving physical exertion and skill\"},{\"languageCode\":\"he\",\"name\":\"ספורט\",\"description\":\"פעילות הכוללת מאמץ ומיומנות גופנית\"},{\"languageCode\":\"ru\",\"name\":\"Спорт\",\"description\":\"Деятельность, включающая физические нагрузки и навыки\"}]},{\"name\":\"Furniture\",\"description\":\"Used to make a room or building suitable for living or working in\",\"fakerImageCategory\":\"abstract\",\"translations\":[{\"languageCode\":\"bg\",\"name\":\"Мебели\",\"description\":\"Използва се за направа на стая или сграда, подходяща за живеене или работа\"},{\"languageCode\":\"en\",\"name\":\"Furniture\",\"description\":\"Used to make a room or building suitable for living or working in\"},{\"languageCode\":\"he\",\"name\":\"ריהוט\",\"description\":\"משמש לייצור חדר או בניין המתאימים למגורים או לעבוד בו\"},{\"languageCode\":\"ru\",\"name\":\"Мебель\",\"description\":\"Используется, чтобы сделать комнату или здание пригодными для проживания или работы в\"}]},{\"name\":\"Pets\",\"description\":\"An animal kept primarily for a person's company or entertainment rather than as a working animal\",\"fakerImageCategory\":\"cats\",\"translations\":[{\"languageCode\":\"bg\",\"name\":\"Домашни любимци\",\"description\":\"Животно, отглеждано основно за компания или забавление на човек, а не като работещо животно\"},{\"languageCode\":\"en\",\"name\":\"Pets\",\"description\":\"An animal kept primarily for a person's company or entertainment rather than as a working animal\"},{\"languageCode\":\"he\",\"name\":\"חיות מחמד\",\"description\":\"חיה שהוחזקה בעיקר עבור החברה או הבידור של האדם ולא כחיה עובדת\"},{\"languageCode\":\"ru\",\"name\":\"Домашние питомцы\",\"description\":\"Животное держится в основном для компании или развлечения человека, а не как рабочее животное\"}]}]");

/***/ }),

/***/ "./src/app/product-category/product-category.service.ts":
/*!**************************************************************!*\
  !*** ./src/app/product-category/product-category.service.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductCategoryService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const product_category_entity_1 = __webpack_require__(/*! ./product-category.entity */ "./src/app/product-category/product-category.entity.ts");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
let ProductCategoryService = class ProductCategoryService extends core_1.CrudService {
    constructor(productCategoryRepository) {
        super(productCategoryRepository);
        this.productCategoryRepository = productCategoryRepository;
    }
    async updateProductCategory(id, entity) {
        try {
            await this.productCategoryRepository.delete(id);
            return this.productCategoryRepository.save(entity);
        }
        catch (err) {
            throw new common_1.BadRequestException(err);
        }
    }
    async findAllProductCategories(relations, findInput, langCode) {
        const allProductCategories = await this.productCategoryRepository.find({
            where: findInput,
            relations
        });
        return {
            items: allProductCategories.map((category) => category.translate(langCode)),
            total: allProductCategories.length
        };
    }
};
ProductCategoryService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(product_category_entity_1.ProductCategory)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], ProductCategoryService);
exports.ProductCategoryService = ProductCategoryService;


/***/ }),

/***/ "./src/app/product-option/product-option.entity.ts":
/*!*********************************************************!*\
  !*** ./src/app/product-option/product-option.entity.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductOption = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const product_entity_1 = __webpack_require__(/*! ../product/product.entity */ "./src/app/product/product.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let ProductOption = class ProductOption extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], ProductOption.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], ProductOption.prototype, "code", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => product_entity_1.Product, (product) => product.options, {
        onUpdate: 'CASCADE',
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof product_entity_1.Product !== "undefined" && product_entity_1.Product) === "function" ? _a : Object)
], ProductOption.prototype, "product", void 0);
ProductOption = tslib_1.__decorate([
    typeorm_1.Entity('product_option')
], ProductOption);
exports.ProductOption = ProductOption;


/***/ }),

/***/ "./src/app/product-option/product-option.seed.ts":
/*!*******************************************************!*\
  !*** ./src/app/product-option/product-option.seed.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomProductOption = void 0;
const product_option_entity_1 = __webpack_require__(/*! ./product-option.entity */ "./src/app/product-option/product-option.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const product_category_entity_1 = __webpack_require__(/*! ../product-category/product-category.entity */ "./src/app/product-category/product-category.entity.ts");
const product_entity_1 = __webpack_require__(/*! ../product/product.entity */ "./src/app/product/product.entity.ts");
exports.createRandomProductOption = async (connection, tenants, tenantOrganizationsMap, numberOfOptionPerProduct) => {
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, Product Options  will not be created');
        return;
    }
    const productOptions = [];
    for (const tenant of tenants) {
        const tenantOrgs = tenantOrganizationsMap.get(tenant);
        for (const tenantOrg of tenantOrgs) {
            const productCategories = await connection.manager.find(product_category_entity_1.ProductCategory, {
                where: { organization: tenantOrg }
            });
            for (const productCategory of productCategories) {
                const products = await connection.manager.find(product_entity_1.Product, {
                    where: { category: productCategory }
                });
                for (const product of products) {
                    for (let i = 0; i <= numberOfOptionPerProduct; i++) {
                        const productOption = new product_option_entity_1.ProductOption();
                        productOption.name = faker.company.companyName();
                        productOption.code = product.code;
                        productOption.product = product;
                        productOption.tenant = tenant;
                        productOption.organization = tenantOrg;
                        productOptions.push(productOption);
                    }
                }
            }
        }
    }
    return await connection.manager.save(productOptions);
};


/***/ }),

/***/ "./src/app/product-option/product-option.service.ts":
/*!**********************************************************!*\
  !*** ./src/app/product-option/product-option.service.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductOptionService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const product_option_entity_1 = __webpack_require__(/*! ./product-option.entity */ "./src/app/product-option/product-option.entity.ts");
let ProductOptionService = class ProductOptionService extends core_1.CrudService {
    constructor(productOptionRepository) {
        super(productOptionRepository);
        this.productOptionRepository = productOptionRepository;
    }
    async saveBulk(productOptionsInput) {
        return this.productOptionRepository.save(productOptionsInput);
    }
    async deleteBulk(productOptionsInput) {
        return this.productOptionRepository.remove(productOptionsInput);
    }
};
ProductOptionService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(product_option_entity_1.ProductOption)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], ProductOptionService);
exports.ProductOptionService = ProductOptionService;


/***/ }),

/***/ "./src/app/product-settings/product-settings.controller.ts":
/*!*****************************************************************!*\
  !*** ./src/app/product-settings/product-settings.controller.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductVariantSettingsController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const product_settings_service_1 = __webpack_require__(/*! ./product-settings.service */ "./src/app/product-settings/product-settings.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let ProductVariantSettingsController = class ProductVariantSettingsController extends core_1.CrudController {
    constructor(productVariantSettingService) {
        super(productVariantSettingService);
        this.productVariantSettingService = productVariantSettingService;
    }
};
ProductVariantSettingsController = tslib_1.__decorate([
    swagger_1.ApiTags('ProductVariantPrice'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof product_settings_service_1.ProductVariantSettingService !== "undefined" && product_settings_service_1.ProductVariantSettingService) === "function" ? _a : Object])
], ProductVariantSettingsController);
exports.ProductVariantSettingsController = ProductVariantSettingsController;


/***/ }),

/***/ "./src/app/product-settings/product-settings.entity.ts":
/*!*************************************************************!*\
  !*** ./src/app/product-settings/product-settings.entity.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductVariantSettings = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const product_variant_entity_1 = __webpack_require__(/*! ../product-variant/product-variant.entity */ "./src/app/product-variant/product-variant.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let ProductVariantSettings = class ProductVariantSettings extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], ProductVariantSettings.prototype, "isSubscription", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], ProductVariantSettings.prototype, "isPurchaseAutomatically", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    typeorm_1.Column({ default: true }),
    tslib_1.__metadata("design:type", Boolean)
], ProductVariantSettings.prototype, "canBeSold", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    typeorm_1.Column({ default: true }),
    tslib_1.__metadata("design:type", Boolean)
], ProductVariantSettings.prototype, "canBePurchased", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], ProductVariantSettings.prototype, "canBeCharged", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], ProductVariantSettings.prototype, "canBeRented", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], ProductVariantSettings.prototype, "isEquipment", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], ProductVariantSettings.prototype, "trackInventory", void 0);
tslib_1.__decorate([
    typeorm_1.OneToOne(() => product_variant_entity_1.ProductVariant),
    tslib_1.__metadata("design:type", typeof (_a = typeof product_variant_entity_1.ProductVariant !== "undefined" && product_variant_entity_1.ProductVariant) === "function" ? _a : Object)
], ProductVariantSettings.prototype, "productVariant", void 0);
ProductVariantSettings = tslib_1.__decorate([
    typeorm_1.Entity('product_variant_setting')
], ProductVariantSettings);
exports.ProductVariantSettings = ProductVariantSettings;


/***/ }),

/***/ "./src/app/product-settings/product-settings.module.ts":
/*!*************************************************************!*\
  !*** ./src/app/product-settings/product-settings.module.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductVariantSettingsModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const product_settings_entity_1 = __webpack_require__(/*! ./product-settings.entity */ "./src/app/product-settings/product-settings.entity.ts");
const product_settings_service_1 = __webpack_require__(/*! ./product-settings.service */ "./src/app/product-settings/product-settings.service.ts");
const product_settings_controller_1 = __webpack_require__(/*! ./product-settings.controller */ "./src/app/product-settings/product-settings.controller.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let ProductVariantSettingsModule = class ProductVariantSettingsModule {
};
ProductVariantSettingsModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([product_settings_entity_1.ProductVariantSettings]), tenant_module_1.TenantModule],
        controllers: [product_settings_controller_1.ProductVariantSettingsController],
        providers: [product_settings_service_1.ProductVariantSettingService],
        exports: [product_settings_service_1.ProductVariantSettingService]
    })
], ProductVariantSettingsModule);
exports.ProductVariantSettingsModule = ProductVariantSettingsModule;


/***/ }),

/***/ "./src/app/product-settings/product-settings.seed.ts":
/*!***********************************************************!*\
  !*** ./src/app/product-settings/product-settings.seed.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomProductVariantSettings = void 0;
const product_settings_entity_1 = __webpack_require__(/*! ./product-settings.entity */ "./src/app/product-settings/product-settings.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const product_category_entity_1 = __webpack_require__(/*! ../product-category/product-category.entity */ "./src/app/product-category/product-category.entity.ts");
const product_entity_1 = __webpack_require__(/*! ../product/product.entity */ "./src/app/product/product.entity.ts");
const product_variant_entity_1 = __webpack_require__(/*! ../product-variant/product-variant.entity */ "./src/app/product-variant/product-variant.entity.ts");
exports.createRandomProductVariantSettings = async (connection, tenants, tenantOrganizationsMap) => {
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, Product Options  will not be created');
        return;
    }
    const productVariantSettings = [];
    for (const tenant of tenants) {
        const tenantOrgs = tenantOrganizationsMap.get(tenant);
        for (const tenantOrg of tenantOrgs) {
            const productCategories = await connection.manager.find(product_category_entity_1.ProductCategory, {
                where: [{ organization: tenantOrg }]
            });
            for (const productCategory of productCategories) {
                const products = await connection.manager.find(product_entity_1.Product, {
                    where: [{ category: productCategory }]
                });
                for (const product of products) {
                    const productVariants = await connection.manager.find(product_variant_entity_1.ProductVariant, {
                        where: [{ productId: product.id }]
                    });
                    for (const productVariant of productVariants) {
                        const productVariantSetting = new product_settings_entity_1.ProductVariantSettings();
                        productVariantSetting.productVariant = productVariant;
                        productVariantSetting.isSubscription = faker.random.boolean();
                        productVariantSetting.isPurchaseAutomatically = faker.random.boolean();
                        productVariantSetting.canBeSold = faker.random.boolean();
                        productVariantSetting.canBePurchased = faker.random.boolean();
                        productVariantSetting.canBeCharged = faker.random.boolean();
                        productVariantSetting.canBeRented = faker.random.boolean();
                        productVariantSetting.isEquipment = faker.random.boolean();
                        productVariantSetting.trackInventory = faker.random.boolean();
                        productVariantSetting.tenant = tenant;
                        productVariantSetting.organization = tenantOrg;
                        productVariantSettings.push(productVariantSetting);
                    }
                }
            }
        }
    }
    await connection.manager.save(productVariantSettings);
};


/***/ }),

/***/ "./src/app/product-settings/product-settings.service.ts":
/*!**************************************************************!*\
  !*** ./src/app/product-settings/product-settings.service.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductVariantSettingService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const product_settings_entity_1 = __webpack_require__(/*! ./product-settings.entity */ "./src/app/product-settings/product-settings.entity.ts");
let ProductVariantSettingService = class ProductVariantSettingService extends core_1.CrudService {
    constructor(productVariantSettingsRepository) {
        super(productVariantSettingsRepository);
        this.productVariantSettingsRepository = productVariantSettingsRepository;
    }
    async createDefaultVariantSettings() {
        const newProductVariantSettings = new product_settings_entity_1.ProductVariantSettings();
        return this.productVariantSettingsRepository.save(newProductVariantSettings);
    }
    async deleteMany(productVariantPrices) {
        return this.productVariantSettingsRepository.remove(productVariantPrices);
    }
};
ProductVariantSettingService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(product_settings_entity_1.ProductVariantSettings)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], ProductVariantSettingService);
exports.ProductVariantSettingService = ProductVariantSettingService;


/***/ }),

/***/ "./src/app/product-type/product-type-translation.entity.ts":
/*!*****************************************************************!*\
  !*** ./src/app/product-type/product-type-translation.entity.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductTypeTranslation = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const translate_base_1 = __webpack_require__(/*! ../core/entities/translate-base */ "./src/app/core/entities/translate-base.ts");
const product_type_entity_1 = __webpack_require__(/*! ./product-type.entity */ "./src/app/product-type/product-type.entity.ts");
let ProductTypeTranslation = class ProductTypeTranslation extends translate_base_1.TranslationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], ProductTypeTranslation.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], ProductTypeTranslation.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: product_type_entity_1.ProductType }),
    typeorm_1.ManyToOne((type) => product_type_entity_1.ProductType, (productType) => productType.translations, { onDelete: 'CASCADE', onUpdate: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof product_type_entity_1.ProductType !== "undefined" && product_type_entity_1.ProductType) === "function" ? _a : Object)
], ProductTypeTranslation.prototype, "reference", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.LanguagesEnum }),
    class_validator_1.IsEnum(models_1.LanguagesEnum),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], ProductTypeTranslation.prototype, "languageCode", void 0);
ProductTypeTranslation = tslib_1.__decorate([
    typeorm_1.Entity('product_type_translation')
], ProductTypeTranslation);
exports.ProductTypeTranslation = ProductTypeTranslation;


/***/ }),

/***/ "./src/app/product-type/product-type.controller.ts":
/*!*********************************************************!*\
  !*** ./src/app/product-type/product-type.controller.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductTypeController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const product_type_entity_1 = __webpack_require__(/*! ./product-type.entity */ "./src/app/product-type/product-type.entity.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const product_type_service_1 = __webpack_require__(/*! ./product-type.service */ "./src/app/product-type/product-type.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const parse_json_pipe_1 = __webpack_require__(/*! ../shared/pipes/parse-json.pipe */ "./src/app/shared/pipes/parse-json.pipe.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let ProductTypeController = class ProductTypeController extends core_1.CrudController {
    constructor(productTypesService) {
        super(productTypesService);
        this.productTypesService = productTypesService;
    }
    async findAllProductTypes(data) {
        const { relations = [], findInput = null, langCode = models_1.LanguagesEnum.ENGLISH } = data;
        return this.productTypesService.findAllProductTypes(relations, findInput, langCode);
    }
    async update(id, entity) {
        return this.productTypesService.updateProductType(id, entity);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all product types.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found product types.',
        type: product_type_entity_1.ProductType
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], ProductTypeController.prototype, "findAllProductTypes", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_b = typeof product_type_entity_1.ProductType !== "undefined" && product_type_entity_1.ProductType) === "function" ? _b : Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], ProductTypeController.prototype, "update", null);
ProductTypeController = tslib_1.__decorate([
    swagger_1.ApiTags('ProductTypes'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof product_type_service_1.ProductTypeService !== "undefined" && product_type_service_1.ProductTypeService) === "function" ? _d : Object])
], ProductTypeController);
exports.ProductTypeController = ProductTypeController;


/***/ }),

/***/ "./src/app/product-type/product-type.entity.ts":
/*!*****************************************************!*\
  !*** ./src/app/product-type/product-type.entity.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductType = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const product_entity_1 = __webpack_require__(/*! ../product/product.entity */ "./src/app/product/product.entity.ts");
const translate_base_1 = __webpack_require__(/*! ../core/entities/translate-base */ "./src/app/core/entities/translate-base.ts");
const product_type_translation_entity_1 = __webpack_require__(/*! ./product-type-translation.entity */ "./src/app/product-type/product-type-translation.entity.ts");
let ProductType = class ProductType extends translate_base_1.TranslatableBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.ProductTypesIconsEnum }),
    class_validator_1.IsOptional(),
    class_validator_1.IsEnum(models_1.ProductTypesIconsEnum),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], ProductType.prototype, "icon", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany((type) => product_entity_1.Product, (product) => product.type),
    tslib_1.__metadata("design:type", Array)
], ProductType.prototype, "products", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: product_type_translation_entity_1.ProductTypeTranslation, isArray: true }),
    typeorm_1.OneToMany((type) => product_type_translation_entity_1.ProductTypeTranslation, (productTypeTranslation) => productTypeTranslation.reference, {
        eager: true,
        cascade: true
    }),
    tslib_1.__metadata("design:type", Array)
], ProductType.prototype, "translations", void 0);
ProductType = tslib_1.__decorate([
    typeorm_1.Entity('product_type')
], ProductType);
exports.ProductType = ProductType;


/***/ }),

/***/ "./src/app/product-type/product-type.module.ts":
/*!*****************************************************!*\
  !*** ./src/app/product-type/product-type.module.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductTypesModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const product_type_entity_1 = __webpack_require__(/*! ./product-type.entity */ "./src/app/product-type/product-type.entity.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const product_type_controller_1 = __webpack_require__(/*! ./product-type.controller */ "./src/app/product-type/product-type.controller.ts");
const product_type_service_1 = __webpack_require__(/*! ./product-type.service */ "./src/app/product-type/product-type.service.ts");
const product_type_translation_entity_1 = __webpack_require__(/*! ./product-type-translation.entity */ "./src/app/product-type/product-type-translation.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let ProductTypesModule = class ProductTypesModule {
};
ProductTypesModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([product_type_entity_1.ProductType, product_type_translation_entity_1.ProductTypeTranslation]),
            tenant_module_1.TenantModule
        ],
        controllers: [product_type_controller_1.ProductTypeController],
        providers: [product_type_service_1.ProductTypeService]
    })
], ProductTypesModule);
exports.ProductTypesModule = ProductTypesModule;


/***/ }),

/***/ "./src/app/product-type/product-type.seed.json":
/*!*****************************************************!*\
  !*** ./src/app/product-type/product-type.seed.json ***!
  \*****************************************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, default */
/***/ (function(module) {

module.exports = JSON.parse("[{\"icon\":\"checkmark-circle-outline\",\"translations\":[{\"languageCode\":\"bg\",\"name\":\"Физически продукти\",\"description\":\"Може да се докосне, осезаемо, твърдо, прахообразно, течно вещество в контейнер.\"},{\"languageCode\":\"en\",\"name\":\"Physical Products\",\"description\":\"Can be touched or tangible, solid, dust or liquid state in a container.\"},{\"languageCode\":\"he\",\"name\":\"מוצרים פיזיים\",\"description\":\"ניתן לגעת או מוחשי, מוצק, אבק או מצב נוזלי במיכל.\"},{\"languageCode\":\"ru\",\"name\":\"Физические продукты\",\"description\":\"Может быть тронутым или осязаемым, твердым, пылевым или жидким в контейнере.\"}]},{\"icon\":\"flash-outline\",\"translations\":[{\"languageCode\":\"en\",\"name\":\"Digital Products\",\"description\":\"Any product you sell online that doesn’t have physical form or substance\"},{\"languageCode\":\"bg\",\"name\":\"Дигитални продукти\",\"description\":\"Всеки продукт, който продавате онлайн, който няма физическа форма или вещество\"},{\"languageCode\":\"he\",\"name\":\"מוצרים דיגיטליים\",\"description\":\"כל מוצר שאתה מוכר באופן מקוון שאין לו צורה פיזית או חומר\"},{\"languageCode\":\"ru\",\"name\":\"Цифровые продукты\",\"description\":\"Любой продукт, который вы продаете онлайн, который не имеет физической формы или содержания\"}]},{\"icon\":\"heart-outline\",\"translations\":[{\"languageCode\":\"en\",\"name\":\"Consumer Products\",\"description\":\"Final goods, are products that are bought by individuals or households for personal use.\"},{\"languageCode\":\"bg\",\"name\":\"Потребителски продукти\",\"description\":\"Крайни стоки са продукти, които се купуват от физически лица или домакинства за лична употреба.\"},{\"languageCode\":\"he\",\"name\":\"מוצרי צריכה\",\"description\":\"מוצרים סופיים הם מוצרים שנרכשים על ידי אנשים או משקי בית לשימוש אישי.\"},{\"languageCode\":\"ru\",\"name\":\"Потребительские товары\",\"description\":\"Конечные товары - это товары, которые покупают частные лица или домохозяйства для личного пользования.\"}]},{\"icon\":\"shopping-bag-outline\",\"translations\":[{\"languageCode\":\"en\",\"name\":\"Raw materials\",\"description\":\"Unprocessed material, or primary commodity, is a basic material that is used to produce goods\"},{\"languageCode\":\"bg\",\"name\":\"Сурови материали\",\"description\":\"Необработеният материал или първичната стока е основен материал, който се използва за производство на стоки\"},{\"languageCode\":\"he\",\"name\":\"מוצרים פיזיים\",\"description\":\"חומר לא מעובד, או סחורה ראשונית, הוא חומר בסיסי המשמש לייצור סחורות\"},{\"languageCode\":\"ru\",\"name\":\"Сырье\",\"description\":\"Необработанный материал, или основной товар, является основным материалом, который используется для производства товаров.\"}]},{\"icon\":\"shopping-cart-outline\",\"translations\":[{\"languageCode\":\"en\",\"name\":\"Supplies\",\"description\":\"Items purchased and typically used up during the year.\"},{\"languageCode\":\"bg\",\"name\":\"Припаси\",\"description\":\"Елементи, закупени и обикновено използвани през годината.\"},{\"languageCode\":\"he\",\"name\":\"אספקה\",\"description\":\"פריטים שנרכשו ובדרך כלל נעשה בהם שימוש במהלך השנה.\"},{\"languageCode\":\"ru\",\"name\":\"Предметы снабжения\",\"description\":\"Товары, приобретенные и обычно израсходованные в течение года.\"}]},{\"icon\":\"layers-outline\",\"translations\":[{\"languageCode\":\"en\",\"name\":\"Experiences\",\"description\":\"Knowledge or skill in a particular job or activity\"},{\"languageCode\":\"bg\",\"name\":\"Опит\",\"description\":\"Знания или умения в определена работа или дейност\"},{\"languageCode\":\"he\",\"name\":\"חוויות\",\"description\":\"ידע או מיומנות בעבודה או בפעילות מסוימת\"},{\"languageCode\":\"ru\",\"name\":\"Опыт\",\"description\":\"Знание или умение в конкретной работе или деятельности\"}]},{\"icon\":\"star-outline\",\"translations\":[{\"languageCode\":\"en\",\"name\":\"Specialty Goods\",\"description\":\"Have particularly unique characteristics\"},{\"languageCode\":\"bg\",\"name\":\"Специални стоки\",\"description\":\"Имат особено уникални характеристики\"},{\"languageCode\":\"he\",\"name\":\"מוצרים מיוחדים\",\"description\":\"בעלי מאפיינים ייחודיים במיוחד\"},{\"languageCode\":\"ru\",\"name\":\"Специализированные товары\",\"description\":\"Имеют особенно уникальные характеристики\"}]},{\"icon\":\"home-outline\",\"translations\":[{\"languageCode\":\"en\",\"name\":\"Common\",\"description\":null},{\"languageCode\":\"bg\",\"name\":\"Общи\",\"description\":null},{\"languageCode\":\"he\",\"name\":\"נפוץ\",\"description\":null},{\"languageCode\":\"ru\",\"name\":\"Общий\",\"description\":null}]},{\"icon\":\"radio-button-off-outline\",\"translations\":[{\"languageCode\":\"en\",\"name\":\"Physical Products\",\"description\":\"Can be touched or tangible, solid, dust or liquid state in a container.\"},{\"languageCode\":\"bg\",\"name\":\"Промишлени стоки\",\"description\":\"Закупен и използван за промишлена и бизнес употреба\"},{\"languageCode\":\"he\",\"name\":\"מוצרים תעשייתיים\",\"description\":\"נקנה ומשמש לשימוש תעשייתי ועסקי\"},{\"languageCode\":\"ru\",\"name\":\"Промышленные товары\",\"description\":\"Куплено и использовано для промышленного и коммерческого использования\"}]},{\"icon\":\"star-outline\",\"translations\":[{\"languageCode\":\"en\",\"name\":\"Amenities\",\"description\":\"any feature that provides comfort, convenience, or pleasure\"},{\"languageCode\":\"bg\",\"name\":\"Удобства\",\"description\":\"Всяка функция, която осигурява комфорт, удобство или удоволствие\"},{\"languageCode\":\"he\",\"name\":\"שירותים\",\"description\":\"כל תכונה המספקת נוחות, נוחות או הנאה\"},{\"languageCode\":\"ru\",\"name\":\"Удобства\",\"description\":\"Любая функция, которая обеспечивает комфорт, удобство или удовольствие\"}]},{\"icon\":\"heart-outline\",\"translations\":[{\"languageCode\":\"en\",\"name\":\"Animals\",\"description\":\"Consume organic material, breathe oxygen, are able to move\"},{\"languageCode\":\"bg\",\"name\":\"Животни\",\"description\":\"Животните консумират органичен материал, дишат кислород, са в състояние да се движат\"},{\"languageCode\":\"he\",\"name\":\"בעלי חיים\",\"description\":\"בעלי חיים צורכים חומר אורגני, נושמים חמצן, מסוגלים לנוע\"},{\"languageCode\":\"ru\",\"name\":\"Животные\",\"description\":\"Животные потребляют органический материал, дышат кислородом, способны двигаться\"}]}]");

/***/ }),

/***/ "./src/app/product-type/product-type.service.ts":
/*!******************************************************!*\
  !*** ./src/app/product-type/product-type.service.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductTypeService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const product_type_entity_1 = __webpack_require__(/*! ./product-type.entity */ "./src/app/product-type/product-type.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
let ProductTypeService = class ProductTypeService extends core_1.CrudService {
    constructor(productTypeRepository) {
        super(productTypeRepository);
        this.productTypeRepository = productTypeRepository;
    }
    async updateProductType(id, entity) {
        try {
            await this.productTypeRepository.delete(id);
            return this.productTypeRepository.save(entity);
        }
        catch (err) {
            throw new common_1.BadRequestException(err);
        }
    }
    async findAllProductTypes(relations, findInput, langCode) {
        const allProductTypes = await this.productTypeRepository.find({
            where: findInput,
            relations
        });
        return {
            items: allProductTypes.map((type) => type.translate(langCode)),
            total: allProductTypes.length
        };
    }
};
ProductTypeService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(product_type_entity_1.ProductType)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], ProductTypeService);
exports.ProductTypeService = ProductTypeService;


/***/ }),

/***/ "./src/app/product-type/type.seed.ts":
/*!*******************************************!*\
  !*** ./src/app/product-type/type.seed.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomProductType = exports.createDefaultProductType = void 0;
const product_type_entity_1 = __webpack_require__(/*! ./product-type.entity */ "./src/app/product-type/product-type.entity.ts");
const seed = __webpack_require__(/*! ./product-type.seed.json */ "./src/app/product-type/product-type.seed.json");
const product_type_translation_entity_1 = __webpack_require__(/*! ./product-type-translation.entity */ "./src/app/product-type/product-type-translation.entity.ts");
exports.createDefaultProductType = async (connection, organizations) => {
    const seedProductTypes = [];
    organizations.forEach(async (organization) => {
        seed.forEach((seedProductType) => {
            const newType = new product_type_entity_1.ProductType();
            newType.icon = seedProductType.icon;
            newType.organization = organization;
            newType.tenant = organization.tenant;
            newType.translations = [];
            seedProductType.translations.forEach((translation) => {
                const newTranslation = new product_type_translation_entity_1.ProductTypeTranslation();
                newTranslation.tenant = organization;
                newTranslation.tenant = organization.tenant;
                Object.assign(newTranslation, translation);
                newType.translations.push(newTranslation);
            });
            seedProductTypes.push(newType);
        });
    });
    return await insertProductTypes(connection, seedProductTypes);
};
const insertProductTypes = async (connection, productTypes) => {
    return await connection.manager.save(productTypes);
};
exports.createRandomProductType = async (connection, tenants, tenantOrganizationsMap) => {
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, Random Product Type will not be created');
        return;
    }
    const productTypes = [];
    for (const tenant of tenants) {
        const tenantOrgs = tenantOrganizationsMap.get(tenant);
        for (const tenantOrg of tenantOrgs) {
            for (const seedProductType of seed) {
                const productType = new product_type_entity_1.ProductType();
                productType.icon = seedProductType.icon;
                productType.organization = tenantOrg;
                productType.tenant = tenantOrg.tenant;
                productType.translations = [];
                seedProductType.translations.forEach((translation) => {
                    const newTranslation = new product_type_translation_entity_1.ProductTypeTranslation();
                    newTranslation.organization = tenantOrg;
                    newTranslation.tenant = tenantOrg.tenant;
                    Object.assign(newTranslation, translation);
                    productType.translations.push(newTranslation);
                });
                productTypes.push(productType);
            }
        }
    }
    return await insertProductTypes(connection, productTypes);
};


/***/ }),

/***/ "./src/app/product-variant-price/product-variant-price-module.ts":
/*!***********************************************************************!*\
  !*** ./src/app/product-variant-price/product-variant-price-module.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductVariantPriceModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const product_variant_price_entity_1 = __webpack_require__(/*! ./product-variant-price.entity */ "./src/app/product-variant-price/product-variant-price.entity.ts");
const product_variant_price_controller_1 = __webpack_require__(/*! ./product-variant-price.controller */ "./src/app/product-variant-price/product-variant-price.controller.ts");
const product_variant_price_service_1 = __webpack_require__(/*! ./product-variant-price.service */ "./src/app/product-variant-price/product-variant-price.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let ProductVariantPriceModule = class ProductVariantPriceModule {
};
ProductVariantPriceModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([product_variant_price_entity_1.ProductVariantPrice]), tenant_module_1.TenantModule],
        controllers: [product_variant_price_controller_1.ProductVariantPriceController],
        providers: [product_variant_price_service_1.ProductVariantPriceService],
        exports: [product_variant_price_service_1.ProductVariantPriceService]
    })
], ProductVariantPriceModule);
exports.ProductVariantPriceModule = ProductVariantPriceModule;


/***/ }),

/***/ "./src/app/product-variant-price/product-variant-price.controller.ts":
/*!***************************************************************************!*\
  !*** ./src/app/product-variant-price/product-variant-price.controller.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductVariantPriceController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const product_variant_price_service_1 = __webpack_require__(/*! ./product-variant-price.service */ "./src/app/product-variant-price/product-variant-price.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let ProductVariantPriceController = class ProductVariantPriceController extends core_1.CrudController {
    constructor(productVariantPriceService) {
        super(productVariantPriceService);
        this.productVariantPriceService = productVariantPriceService;
    }
};
ProductVariantPriceController = tslib_1.__decorate([
    swagger_1.ApiTags('ProductVariantPrice'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof product_variant_price_service_1.ProductVariantPriceService !== "undefined" && product_variant_price_service_1.ProductVariantPriceService) === "function" ? _a : Object])
], ProductVariantPriceController);
exports.ProductVariantPriceController = ProductVariantPriceController;


/***/ }),

/***/ "./src/app/product-variant-price/product-variant-price.entity.ts":
/*!***********************************************************************!*\
  !*** ./src/app/product-variant-price/product-variant-price.entity.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductVariantPrice = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const product_variant_entity_1 = __webpack_require__(/*! ../product-variant/product-variant.entity */ "./src/app/product-variant/product-variant.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let ProductVariantPrice = class ProductVariantPrice extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ default: 0 }),
    tslib_1.__metadata("design:type", Number)
], ProductVariantPrice.prototype, "unitCost", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.CurrenciesEnum }),
    class_validator_1.IsEnum(models_1.CurrenciesEnum),
    typeorm_1.Column({ default: models_1.CurrenciesEnum.USD }),
    tslib_1.__metadata("design:type", String)
], ProductVariantPrice.prototype, "unitCostCurrency", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ default: 0 }),
    tslib_1.__metadata("design:type", Number)
], ProductVariantPrice.prototype, "retailPrice", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.CurrenciesEnum }),
    class_validator_1.IsEnum(models_1.CurrenciesEnum),
    typeorm_1.Column({ default: models_1.CurrenciesEnum.USD }),
    tslib_1.__metadata("design:type", String)
], ProductVariantPrice.prototype, "retailPriceCurrency", void 0);
tslib_1.__decorate([
    typeorm_1.OneToOne((type) => product_variant_entity_1.ProductVariant),
    tslib_1.__metadata("design:type", typeof (_a = typeof product_variant_entity_1.ProductVariant !== "undefined" && product_variant_entity_1.ProductVariant) === "function" ? _a : Object)
], ProductVariantPrice.prototype, "productVariant", void 0);
ProductVariantPrice = tslib_1.__decorate([
    typeorm_1.Entity('product_variant_price')
], ProductVariantPrice);
exports.ProductVariantPrice = ProductVariantPrice;


/***/ }),

/***/ "./src/app/product-variant-price/product-variant-price.seed.ts":
/*!*********************************************************************!*\
  !*** ./src/app/product-variant-price/product-variant-price.seed.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomProductVariantPrice = void 0;
const product_variant_price_entity_1 = __webpack_require__(/*! ./product-variant-price.entity */ "./src/app/product-variant-price/product-variant-price.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const product_category_entity_1 = __webpack_require__(/*! ../product-category/product-category.entity */ "./src/app/product-category/product-category.entity.ts");
const product_entity_1 = __webpack_require__(/*! ../product/product.entity */ "./src/app/product/product.entity.ts");
const product_variant_entity_1 = __webpack_require__(/*! ../product-variant/product-variant.entity */ "./src/app/product-variant/product-variant.entity.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
exports.createRandomProductVariantPrice = async (connection, tenants, tenantOrganizationsMap) => {
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, Product Variant will not be created');
        return;
    }
    const productVariantPrices = [];
    for (const tenant of tenants) {
        const tenantOrgs = tenantOrganizationsMap.get(tenant);
        for (const tenantOrg of tenantOrgs) {
            const productCategories = await connection.manager.find(product_category_entity_1.ProductCategory, {
                where: [{ organization: tenantOrg }]
            });
            for (const productCategory of productCategories) {
                const products = await connection.manager.find(product_entity_1.Product, {
                    where: [{ category: productCategory }]
                });
                for (const product of products) {
                    const productVariants = await connection.manager.find(product_variant_entity_1.ProductVariant, {
                        where: [{ productId: product.id }]
                    });
                    for (const productVariant of productVariants) {
                        const productVariantPrice = new product_variant_price_entity_1.ProductVariantPrice();
                        productVariantPrice.productVariant = productVariant;
                        productVariantPrice.unitCost = faker.random.number(10000);
                        productVariantPrice.unitCostCurrency =
                            tenantOrg.currency || environment_1.environment.defaultCurrency;
                        productVariantPrice.retailPrice = faker.random.number(productVariantPrice.unitCost);
                        productVariantPrice.retailPriceCurrency =
                            tenantOrg.currency || environment_1.environment.defaultCurrency;
                        productVariantPrice.tenant = tenant;
                        productVariant.organization = tenantOrg;
                        productVariantPrices.push(productVariantPrice);
                    }
                }
            }
        }
    }
    await connection.manager.save(productVariantPrices);
};


/***/ }),

/***/ "./src/app/product-variant-price/product-variant-price.service.ts":
/*!************************************************************************!*\
  !*** ./src/app/product-variant-price/product-variant-price.service.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductVariantPriceService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const product_variant_price_entity_1 = __webpack_require__(/*! ./product-variant-price.entity */ "./src/app/product-variant-price/product-variant-price.entity.ts");
let ProductVariantPriceService = class ProductVariantPriceService extends core_1.CrudService {
    constructor(productVariantPriceRepository) {
        super(productVariantPriceRepository);
        this.productVariantPriceRepository = productVariantPriceRepository;
    }
    async createDefaultProductVariantPrice() {
        const newProductVariantPrice = new product_variant_price_entity_1.ProductVariantPrice();
        return this.productVariantPriceRepository.save(newProductVariantPrice);
    }
    async deleteMany(productVariantPrices) {
        return this.productVariantPriceRepository.remove(productVariantPrices);
    }
};
ProductVariantPriceService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(product_variant_price_entity_1.ProductVariantPrice)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], ProductVariantPriceService);
exports.ProductVariantPriceService = ProductVariantPriceService;


/***/ }),

/***/ "./src/app/product-variant/commands/handlers/product-variant.create.handler.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/product-variant/commands/handlers/product-variant.create.handler.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductVariantCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const product_variant_entity_1 = __webpack_require__(/*! ../../product-variant.entity */ "./src/app/product-variant/product-variant.entity.ts");
const product_variant_create_command_1 = __webpack_require__(/*! ../product-variant.create.command */ "./src/app/product-variant/commands/product-variant.create.command.ts");
const product_variant_service_1 = __webpack_require__(/*! ../../product-variant.service */ "./src/app/product-variant/product-variant.service.ts");
const product_variant_price_service_1 = __webpack_require__(/*! ../../../product-variant-price/product-variant-price.service */ "./src/app/product-variant-price/product-variant-price.service.ts");
const product_settings_service_1 = __webpack_require__(/*! ../../../product-settings/product-settings.service */ "./src/app/product-settings/product-settings.service.ts");
const product_service_1 = __webpack_require__(/*! ../../../product/product.service */ "./src/app/product/product.service.ts");
let ProductVariantCreateHandler = class ProductVariantCreateHandler {
    constructor(productService, productVariantService, productVariantPriceService, productVariantSettingsService) {
        this.productService = productService;
        this.productVariantService = productVariantService;
        this.productVariantPriceService = productVariantPriceService;
        this.productVariantSettingsService = productVariantSettingsService;
    }
    async execute(command) {
        var e_1, _a;
        const variantCreateInput = command.productInput;
        const product = await this.productService.findById(variantCreateInput.product.id, { relations: ['options'] });
        const productOptions = product.options;
        const optionCombinations = variantCreateInput.optionCombinations;
        const { organizationId, tenantId } = variantCreateInput.product;
        const arrVariants = [];
        try {
            for (var optionCombinations_1 = tslib_1.__asyncValues(optionCombinations), optionCombinations_1_1; optionCombinations_1_1 = await optionCombinations_1.next(), !optionCombinations_1_1.done;) {
                const optionCombination = optionCombinations_1_1.value;
                const newProductVariant = new product_variant_entity_1.ProductVariant();
                const variantOptions = productOptions.filter((option) => {
                    return optionCombination.options.includes(option.name);
                });
                newProductVariant.options = variantOptions;
                newProductVariant.internalReference = variantOptions
                    .map((option) => option.name)
                    .join('-');
                newProductVariant.organizationId = organizationId;
                newProductVariant.tenantId = tenantId;
                newProductVariant.settings = await this.productVariantSettingsService.createDefaultVariantSettings();
                newProductVariant.price = await this.productVariantPriceService.createDefaultProductVariantPrice();
                newProductVariant.product = await this.productService.findOne({
                    id: variantCreateInput.product.id
                });
                arrVariants.push(await this.productVariantService.createVariant(newProductVariant));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (optionCombinations_1_1 && !optionCombinations_1_1.done && (_a = optionCombinations_1.return)) await _a.call(optionCombinations_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return arrVariants;
    }
};
ProductVariantCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(product_variant_create_command_1.ProductVariantCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof product_service_1.ProductService !== "undefined" && product_service_1.ProductService) === "function" ? _a : Object, typeof (_b = typeof product_variant_service_1.ProductVariantService !== "undefined" && product_variant_service_1.ProductVariantService) === "function" ? _b : Object, typeof (_c = typeof product_variant_price_service_1.ProductVariantPriceService !== "undefined" && product_variant_price_service_1.ProductVariantPriceService) === "function" ? _c : Object, typeof (_d = typeof product_settings_service_1.ProductVariantSettingService !== "undefined" && product_settings_service_1.ProductVariantSettingService) === "function" ? _d : Object])
], ProductVariantCreateHandler);
exports.ProductVariantCreateHandler = ProductVariantCreateHandler;


/***/ }),

/***/ "./src/app/product-variant/commands/handlers/product-variant.delete.handler.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/product-variant/commands/handlers/product-variant.delete.handler.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductVariantDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const product_variant_delete_command_1 = __webpack_require__(/*! ../product-variant.delete.command */ "./src/app/product-variant/commands/product-variant.delete.command.ts");
const product_variant_service_1 = __webpack_require__(/*! ../../product-variant.service */ "./src/app/product-variant/product-variant.service.ts");
const product_settings_service_1 = __webpack_require__(/*! ../../../product-settings/product-settings.service */ "./src/app/product-settings/product-settings.service.ts");
const product_variant_price_service_1 = __webpack_require__(/*! ../../../product-variant-price/product-variant-price.service */ "./src/app/product-variant-price/product-variant-price.service.ts");
let ProductVariantDeleteHandler = class ProductVariantDeleteHandler {
    constructor(productVariantService, productVariantSettingsService, productVariantPricesService) {
        this.productVariantService = productVariantService;
        this.productVariantSettingsService = productVariantSettingsService;
        this.productVariantPricesService = productVariantPricesService;
    }
    async execute(command) {
        const { productVariantId } = command;
        const productVariant = await this.productVariantService.findOne({
            where: { id: productVariantId }
        });
        const deleteRes = [
            await this.productVariantService.delete(productVariant.id),
            await this.productVariantPricesService.delete(productVariant.price.id),
            await this.productVariantSettingsService.delete(productVariant.settings.id)
        ];
        return {
            raw: deleteRes.map((res) => res.affected),
            affected: deleteRes
                .map((res) => (res.affected ? res.affected : 0))
                .reduce((acc, value) => acc + value)
        };
    }
};
ProductVariantDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(product_variant_delete_command_1.ProductVariantDeleteCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof product_variant_service_1.ProductVariantService !== "undefined" && product_variant_service_1.ProductVariantService) === "function" ? _a : Object, typeof (_b = typeof product_settings_service_1.ProductVariantSettingService !== "undefined" && product_settings_service_1.ProductVariantSettingService) === "function" ? _b : Object, typeof (_c = typeof product_variant_price_service_1.ProductVariantPriceService !== "undefined" && product_variant_price_service_1.ProductVariantPriceService) === "function" ? _c : Object])
], ProductVariantDeleteHandler);
exports.ProductVariantDeleteHandler = ProductVariantDeleteHandler;


/***/ }),

/***/ "./src/app/product-variant/commands/index.ts":
/*!***************************************************!*\
  !*** ./src/app/product-variant/commands/index.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductVariantDeleteCommand = exports.ProductVariantCreateCommand = void 0;
var product_variant_create_command_1 = __webpack_require__(/*! ./product-variant.create.command */ "./src/app/product-variant/commands/product-variant.create.command.ts");
Object.defineProperty(exports, "ProductVariantCreateCommand", { enumerable: true, get: function () { return product_variant_create_command_1.ProductVariantCreateCommand; } });
var product_variant_delete_command_1 = __webpack_require__(/*! ./product-variant.delete.command */ "./src/app/product-variant/commands/product-variant.delete.command.ts");
Object.defineProperty(exports, "ProductVariantDeleteCommand", { enumerable: true, get: function () { return product_variant_delete_command_1.ProductVariantDeleteCommand; } });


/***/ }),

/***/ "./src/app/product-variant/commands/product-variant.create.command.ts":
/*!****************************************************************************!*\
  !*** ./src/app/product-variant/commands/product-variant.create.command.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductVariantCreateCommand = void 0;
class ProductVariantCreateCommand {
    constructor(productInput) {
        this.productInput = productInput;
    }
}
exports.ProductVariantCreateCommand = ProductVariantCreateCommand;
ProductVariantCreateCommand.type = '[ProductVariant] Register';


/***/ }),

/***/ "./src/app/product-variant/commands/product-variant.delete.command.ts":
/*!****************************************************************************!*\
  !*** ./src/app/product-variant/commands/product-variant.delete.command.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductVariantDeleteCommand = void 0;
class ProductVariantDeleteCommand {
    constructor(productVariantId) {
        this.productVariantId = productVariantId;
    }
}
exports.ProductVariantDeleteCommand = ProductVariantDeleteCommand;
ProductVariantDeleteCommand.type = '[ProductVariant] Delete';


/***/ }),

/***/ "./src/app/product-variant/product-variant.controller.ts":
/*!***************************************************************!*\
  !*** ./src/app/product-variant/product-variant.controller.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductVariantController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const product_variant_entity_1 = __webpack_require__(/*! ./product-variant.entity */ "./src/app/product-variant/product-variant.entity.ts");
const product_variant_service_1 = __webpack_require__(/*! ./product-variant.service */ "./src/app/product-variant/product-variant.service.ts");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/product-variant/commands/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const product_entity_1 = __webpack_require__(/*! ../product/product.entity */ "./src/app/product/product.entity.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let ProductVariantController = class ProductVariantController extends core_1.CrudController {
    constructor(productVariantService, commandBus) {
        super(productVariantService);
        this.productVariantService = productVariantService;
        this.commandBus = commandBus;
    }
    async createProductVariants(entity, ...options) {
        return this.commandBus.execute(new commands_1.ProductVariantCreateCommand(entity));
    }
    async findAllProductVariants() {
        return this.productVariantService.findAllProductVariants();
    }
    async update(id, productVariant) {
        return this.productVariantService.updateVariant(productVariant);
    }
    async delete(id, ...options) {
        return this.commandBus.execute(new commands_1.ProductVariantDeleteCommand(id));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create product variants' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'These records have been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Post('/create-variants'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.IVariantCreateInput !== "undefined" && models_1.IVariantCreateInput) === "function" ? _a : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], ProductVariantController.prototype, "createProductVariants", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all product variants'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found product variants',
        type: product_entity_1.Product
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('all'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], ProductVariantController.prototype, "findAllProductVariants", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_d = typeof product_variant_entity_1.ProductVariant !== "undefined" && product_variant_entity_1.ProductVariant) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], ProductVariantController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Delete record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NO_CONTENT,
        description: 'The record has been successfully deleted'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], ProductVariantController.prototype, "delete", null);
ProductVariantController = tslib_1.__decorate([
    swagger_1.ApiTags('ProductVariant'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_g = typeof product_variant_service_1.ProductVariantService !== "undefined" && product_variant_service_1.ProductVariantService) === "function" ? _g : Object, typeof (_h = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _h : Object])
], ProductVariantController);
exports.ProductVariantController = ProductVariantController;


/***/ }),

/***/ "./src/app/product-variant/product-variant.entity.ts":
/*!***********************************************************!*\
  !*** ./src/app/product-variant/product-variant.entity.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductVariant = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const product_variant_price_entity_1 = __webpack_require__(/*! ../product-variant-price/product-variant-price.entity */ "./src/app/product-variant-price/product-variant-price.entity.ts");
const product_option_entity_1 = __webpack_require__(/*! ../product-option/product-option.entity */ "./src/app/product-option/product-option.entity.ts");
const product_settings_entity_1 = __webpack_require__(/*! ../product-settings/product-settings.entity */ "./src/app/product-settings/product-settings.entity.ts");
const product_entity_1 = __webpack_require__(/*! ../product/product.entity */ "./src/app/product/product.entity.ts");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let ProductVariant = class ProductVariant extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ default: 0 }),
    tslib_1.__metadata("design:type", Number)
], ProductVariant.prototype, "taxes", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], ProductVariant.prototype, "notes", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.RelationId((productVariant) => productVariant.product),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], ProductVariant.prototype, "productId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ default: 0 }),
    tslib_1.__metadata("design:type", Number)
], ProductVariant.prototype, "quantity", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsEnum(models_1.BillingInvoicingPolicyEnum),
    typeorm_1.Column({ default: models_1.BillingInvoicingPolicyEnum.QUANTITY_ORDERED }),
    tslib_1.__metadata("design:type", String)
], ProductVariant.prototype, "billingInvoicingPolicy", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], ProductVariant.prototype, "internalReference", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    typeorm_1.Column({ default: true }),
    tslib_1.__metadata("design:type", Boolean)
], ProductVariant.prototype, "enabled", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany(() => product_option_entity_1.ProductOption, { eager: true }),
    typeorm_1.JoinTable(),
    tslib_1.__metadata("design:type", Array)
], ProductVariant.prototype, "options", void 0);
tslib_1.__decorate([
    typeorm_1.OneToOne(() => product_settings_entity_1.ProductVariantSettings, (settings) => settings.productVariant, {
        eager: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof product_settings_entity_1.ProductVariantSettings !== "undefined" && product_settings_entity_1.ProductVariantSettings) === "function" ? _a : Object)
], ProductVariant.prototype, "settings", void 0);
tslib_1.__decorate([
    typeorm_1.OneToOne(() => product_variant_price_entity_1.ProductVariantPrice, (variantPrice) => variantPrice.productVariant, {
        eager: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof product_variant_price_entity_1.ProductVariantPrice !== "undefined" && product_variant_price_entity_1.ProductVariantPrice) === "function" ? _b : Object)
], ProductVariant.prototype, "price", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => product_entity_1.Product, (product) => product.variants, {
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_c = typeof product_entity_1.Product !== "undefined" && product_entity_1.Product) === "function" ? _c : Object)
], ProductVariant.prototype, "product", void 0);
ProductVariant = tslib_1.__decorate([
    typeorm_1.Entity('product_variant')
], ProductVariant);
exports.ProductVariant = ProductVariant;


/***/ }),

/***/ "./src/app/product-variant/product-variant.module.ts":
/*!***********************************************************!*\
  !*** ./src/app/product-variant/product-variant.module.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductVariantModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const product_variant_entity_1 = __webpack_require__(/*! ./product-variant.entity */ "./src/app/product-variant/product-variant.entity.ts");
const product_variant_controller_1 = __webpack_require__(/*! ./product-variant.controller */ "./src/app/product-variant/product-variant.controller.ts");
const product_variant_service_1 = __webpack_require__(/*! ./product-variant.service */ "./src/app/product-variant/product-variant.service.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const product_variant_create_handler_1 = __webpack_require__(/*! ./commands/handlers/product-variant.create.handler */ "./src/app/product-variant/commands/handlers/product-variant.create.handler.ts");
const product_variant_price_service_1 = __webpack_require__(/*! ../product-variant-price/product-variant-price.service */ "./src/app/product-variant-price/product-variant-price.service.ts");
const product_settings_service_1 = __webpack_require__(/*! ../product-settings/product-settings.service */ "./src/app/product-settings/product-settings.service.ts");
const product_variant_price_entity_1 = __webpack_require__(/*! ../product-variant-price/product-variant-price.entity */ "./src/app/product-variant-price/product-variant-price.entity.ts");
const product_settings_entity_1 = __webpack_require__(/*! ../product-settings/product-settings.entity */ "./src/app/product-settings/product-settings.entity.ts");
const product_service_1 = __webpack_require__(/*! ../product/product.service */ "./src/app/product/product.service.ts");
const product_entity_1 = __webpack_require__(/*! ../product/product.entity */ "./src/app/product/product.entity.ts");
const product_variant_delete_handler_1 = __webpack_require__(/*! ./commands/handlers/product-variant.delete.handler */ "./src/app/product-variant/commands/handlers/product-variant.delete.handler.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let ProductVariantModule = class ProductVariantModule {
};
ProductVariantModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([
                product_variant_entity_1.ProductVariant,
                product_variant_price_entity_1.ProductVariantPrice,
                product_settings_entity_1.ProductVariantSettings,
                product_entity_1.Product
            ]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [product_variant_controller_1.ProductVariantController],
        providers: [
            product_service_1.ProductService,
            product_variant_service_1.ProductVariantService,
            product_variant_create_handler_1.ProductVariantCreateHandler,
            product_variant_delete_handler_1.ProductVariantDeleteHandler,
            product_variant_price_service_1.ProductVariantPriceService,
            product_settings_service_1.ProductVariantSettingService,
            product_service_1.ProductService
        ],
        exports: [product_variant_service_1.ProductVariantService]
    })
], ProductVariantModule);
exports.ProductVariantModule = ProductVariantModule;


/***/ }),

/***/ "./src/app/product-variant/product-variant.seed.ts":
/*!*********************************************************!*\
  !*** ./src/app/product-variant/product-variant.seed.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomProductVariant = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const product_variant_entity_1 = __webpack_require__(/*! ./product-variant.entity */ "./src/app/product-variant/product-variant.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const product_category_entity_1 = __webpack_require__(/*! ../product-category/product-category.entity */ "./src/app/product-category/product-category.entity.ts");
const product_entity_1 = __webpack_require__(/*! ../product/product.entity */ "./src/app/product/product.entity.ts");
const product_option_entity_1 = __webpack_require__(/*! ../product-option/product-option.entity */ "./src/app/product-option/product-option.entity.ts");
const product_settings_entity_1 = __webpack_require__(/*! ../product-settings/product-settings.entity */ "./src/app/product-settings/product-settings.entity.ts");
const product_variant_price_entity_1 = __webpack_require__(/*! ../product-variant-price/product-variant-price.entity */ "./src/app/product-variant-price/product-variant-price.entity.ts");
exports.createRandomProductVariant = async (connection, tenants, tenantOrganizationsMap, numberOfVariantPerProduct) => {
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, Product Variant will not be created');
        return;
    }
    const productVariants = [];
    for (const tenant of tenants) {
        const tenantOrgs = tenantOrganizationsMap.get(tenant);
        for (const tenantOrg of tenantOrgs) {
            const productCategories = await connection.manager.find(product_category_entity_1.ProductCategory, {
                where: { organization: tenantOrg }
            });
            for (const productCategory of productCategories) {
                const products = await connection.manager.find(product_entity_1.Product, {
                    where: { category: productCategory }
                });
                for (const product of products) {
                    const productOptions = await connection.manager.find(product_option_entity_1.ProductOption, {
                        where: { product: product }
                    });
                    for (let i = 0; i < numberOfVariantPerProduct; i++) {
                        const productVariant = new product_variant_entity_1.ProductVariant();
                        productVariant.notes = faker.name.jobDescriptor();
                        productVariant.productId = product.id;
                        productVariant.quantity = faker.random.number(20);
                        productVariant.billingInvoicingPolicy = faker.random.arrayElement(Object.keys(models_1.BillingInvoicingPolicyEnum));
                        productVariant.enabled = faker.random.boolean();
                        productVariant.options = productOptions;
                        productVariant.settings = new product_settings_entity_1.ProductVariantSettings();
                        productVariant.price = new product_variant_price_entity_1.ProductVariantPrice();
                        productVariant.product = product;
                        productVariant.tenant = tenant;
                        productVariant.organization = tenantOrg;
                        productVariants.push(productVariant);
                    }
                }
            }
        }
    }
    return await connection.manager.save(productVariants);
};


/***/ }),

/***/ "./src/app/product-variant/product-variant.service.ts":
/*!************************************************************!*\
  !*** ./src/app/product-variant/product-variant.service.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductVariantService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_2 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const product_variant_entity_1 = __webpack_require__(/*! ./product-variant.entity */ "./src/app/product-variant/product-variant.entity.ts");
let ProductVariantService = class ProductVariantService extends core_1.CrudService {
    constructor(productVariantRepository) {
        super(productVariantRepository);
        this.productVariantRepository = productVariantRepository;
    }
    async findAllProductVariants() {
        const total = await this.productVariantRepository.count();
        const items = await this.productVariantRepository.find({
            relations: ['settings', 'price']
        });
        return { items, total };
    }
    async createBulk(productVariants) {
        return this.productVariantRepository.save(productVariants);
    }
    async createVariant(productVariant) {
        return this.productVariantRepository.save(productVariant);
    }
    async updateVariant(productVariant) {
        return this.productVariantRepository.save(productVariant);
    }
    deleteMany(productVariants) {
        return this.productVariantRepository.remove(productVariants);
    }
};
ProductVariantService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_2.InjectRepository(product_variant_entity_1.ProductVariant)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _a : Object])
], ProductVariantService);
exports.ProductVariantService = ProductVariantService;


/***/ }),

/***/ "./src/app/product/commands/handlers/product.create.handler.ts":
/*!*********************************************************************!*\
  !*** ./src/app/product/commands/handlers/product.create.handler.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const product_service_1 = __webpack_require__(/*! ../../../product/product.service */ "./src/app/product/product.service.ts");
const product_create_command_1 = __webpack_require__(/*! ../product.create.command */ "./src/app/product/commands/product.create.command.ts");
const product_option_service_1 = __webpack_require__(/*! ../../../product-option/product-option.service */ "./src/app/product-option/product-option.service.ts");
const product_option_entity_1 = __webpack_require__(/*! ../../../product-option/product-option.entity */ "./src/app/product-option/product-option.entity.ts");
let ProductCreateHandler = class ProductCreateHandler {
    constructor(productOptionService, productService) {
        this.productOptionService = productOptionService;
        this.productService = productService;
    }
    async execute(command) {
        const { productInput } = command;
        const optionsCreate = productInput.optionCreateInputs.map((optionInput) => {
            const option = new product_option_entity_1.ProductOption();
            option.name = optionInput.name;
            option.code = optionInput.code;
            return option;
        });
        const savedOptions = await this.productOptionService.saveBulk(optionsCreate);
        productInput['options'] = savedOptions;
        const product = await this.productService.saveProduct(productInput);
        return product;
    }
};
ProductCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(product_create_command_1.ProductCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof product_option_service_1.ProductOptionService !== "undefined" && product_option_service_1.ProductOptionService) === "function" ? _a : Object, typeof (_b = typeof product_service_1.ProductService !== "undefined" && product_service_1.ProductService) === "function" ? _b : Object])
], ProductCreateHandler);
exports.ProductCreateHandler = ProductCreateHandler;


/***/ }),

/***/ "./src/app/product/commands/handlers/product.delete.handler.ts":
/*!*********************************************************************!*\
  !*** ./src/app/product/commands/handlers/product.delete.handler.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const product_delete_command_1 = __webpack_require__(/*! ../product.delete.command */ "./src/app/product/commands/product.delete.command.ts");
const product_service_1 = __webpack_require__(/*! ../../product.service */ "./src/app/product/product.service.ts");
const product_variant_service_1 = __webpack_require__(/*! ../../../product-variant/product-variant.service */ "./src/app/product-variant/product-variant.service.ts");
const product_settings_service_1 = __webpack_require__(/*! ../../../product-settings/product-settings.service */ "./src/app/product-settings/product-settings.service.ts");
const product_variant_price_service_1 = __webpack_require__(/*! ../../../product-variant-price/product-variant-price.service */ "./src/app/product-variant-price/product-variant-price.service.ts");
let ProductDeleteHandler = class ProductDeleteHandler {
    constructor(productService, productVariantService, productVariantSettingsService, productVariantPricesService) {
        this.productService = productService;
        this.productVariantService = productVariantService;
        this.productVariantSettingsService = productVariantSettingsService;
        this.productVariantPricesService = productVariantPricesService;
    }
    async execute(command) {
        const { productId } = command;
        const product = await this.productService.findOne({
            where: { id: productId },
            relations: ['variants']
        });
        const settingsToDelete = [];
        const pricesToDelete = [];
        product.variants.forEach((variant) => {
            settingsToDelete.push(variant.settings);
        });
        product.variants.forEach((variant) => {
            pricesToDelete.push(variant.price);
        });
        const deleteRes = [
            await this.productVariantService.deleteMany(product.variants),
            await this.productVariantSettingsService.deleteMany(settingsToDelete),
            await this.productVariantPricesService.deleteMany(pricesToDelete),
            await this.productService.delete(product.id)
        ];
        return {
            raw: deleteRes,
            affected: deleteRes
                .map((res) => {
                if (Array.isArray(res)) {
                    return res.length;
                }
                else {
                    return res.affected ? res.affected : 0;
                }
            })
                .reduce((acc, value) => acc + value)
        };
    }
};
ProductDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(product_delete_command_1.ProductDeleteCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof product_service_1.ProductService !== "undefined" && product_service_1.ProductService) === "function" ? _a : Object, typeof (_b = typeof product_variant_service_1.ProductVariantService !== "undefined" && product_variant_service_1.ProductVariantService) === "function" ? _b : Object, typeof (_c = typeof product_settings_service_1.ProductVariantSettingService !== "undefined" && product_settings_service_1.ProductVariantSettingService) === "function" ? _c : Object, typeof (_d = typeof product_variant_price_service_1.ProductVariantPriceService !== "undefined" && product_variant_price_service_1.ProductVariantPriceService) === "function" ? _d : Object])
], ProductDeleteHandler);
exports.ProductDeleteHandler = ProductDeleteHandler;


/***/ }),

/***/ "./src/app/product/commands/handlers/product.update.handler.ts":
/*!*********************************************************************!*\
  !*** ./src/app/product/commands/handlers/product.update.handler.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const product_service_1 = __webpack_require__(/*! ../../../product/product.service */ "./src/app/product/product.service.ts");
const product_option_service_1 = __webpack_require__(/*! ../../../product-option/product-option.service */ "./src/app/product-option/product-option.service.ts");
const product_update_command_1 = __webpack_require__(/*! ../product.update.command */ "./src/app/product/commands/product.update.command.ts");
const product_option_entity_1 = __webpack_require__(/*! ../../../product-option/product-option.entity */ "./src/app/product-option/product-option.entity.ts");
let ProductUpdateHandler = class ProductUpdateHandler {
    constructor(productOptionService, productService) {
        this.productOptionService = productOptionService;
        this.productService = productService;
    }
    async execute(command) {
        const { productUpdateRequest } = command;
        const optionsCreate = productUpdateRequest.optionCreateInputs.map((optionInput) => {
            const option = new product_option_entity_1.ProductOption();
            option.name = optionInput.name;
            option.code = optionInput.code;
            return option;
        });
        await this.productOptionService.deleteBulk(productUpdateRequest.optionDeleteInputs);
        const savedOptions = await this.productOptionService.saveBulk(optionsCreate);
        productUpdateRequest['options'] = savedOptions;
        const product = await this.productService.saveProduct(productUpdateRequest);
        return product;
    }
};
ProductUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(product_update_command_1.ProductUpdateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof product_option_service_1.ProductOptionService !== "undefined" && product_option_service_1.ProductOptionService) === "function" ? _a : Object, typeof (_b = typeof product_service_1.ProductService !== "undefined" && product_service_1.ProductService) === "function" ? _b : Object])
], ProductUpdateHandler);
exports.ProductUpdateHandler = ProductUpdateHandler;


/***/ }),

/***/ "./src/app/product/commands/index.ts":
/*!*******************************************!*\
  !*** ./src/app/product/commands/index.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductDeleteCommand = exports.ProductUpdateCommand = exports.ProductCreateCommand = void 0;
var product_create_command_1 = __webpack_require__(/*! ./product.create.command */ "./src/app/product/commands/product.create.command.ts");
Object.defineProperty(exports, "ProductCreateCommand", { enumerable: true, get: function () { return product_create_command_1.ProductCreateCommand; } });
var product_update_command_1 = __webpack_require__(/*! ./product.update.command */ "./src/app/product/commands/product.update.command.ts");
Object.defineProperty(exports, "ProductUpdateCommand", { enumerable: true, get: function () { return product_update_command_1.ProductUpdateCommand; } });
var product_delete_command_1 = __webpack_require__(/*! ./product.delete.command */ "./src/app/product/commands/product.delete.command.ts");
Object.defineProperty(exports, "ProductDeleteCommand", { enumerable: true, get: function () { return product_delete_command_1.ProductDeleteCommand; } });


/***/ }),

/***/ "./src/app/product/commands/product.create.command.ts":
/*!************************************************************!*\
  !*** ./src/app/product/commands/product.create.command.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductCreateCommand = void 0;
class ProductCreateCommand {
    constructor(productInput) {
        this.productInput = productInput;
    }
}
exports.ProductCreateCommand = ProductCreateCommand;
ProductCreateCommand.type = '[Product] Register';


/***/ }),

/***/ "./src/app/product/commands/product.delete.command.ts":
/*!************************************************************!*\
  !*** ./src/app/product/commands/product.delete.command.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductDeleteCommand = void 0;
class ProductDeleteCommand {
    constructor(productId) {
        this.productId = productId;
    }
}
exports.ProductDeleteCommand = ProductDeleteCommand;
ProductDeleteCommand.type = '[Product] Delete';


/***/ }),

/***/ "./src/app/product/commands/product.update.command.ts":
/*!************************************************************!*\
  !*** ./src/app/product/commands/product.update.command.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductUpdateCommand = void 0;
class ProductUpdateCommand {
    constructor(id, productUpdateRequest) {
        this.id = id;
        this.productUpdateRequest = productUpdateRequest;
    }
}
exports.ProductUpdateCommand = ProductUpdateCommand;
ProductUpdateCommand.type = '[Product] Update';


/***/ }),

/***/ "./src/app/product/product.controller.ts":
/*!***********************************************!*\
  !*** ./src/app/product/product.controller.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const product_service_1 = __webpack_require__(/*! ./product.service */ "./src/app/product/product.service.ts");
const product_entity_1 = __webpack_require__(/*! ./product.entity */ "./src/app/product/product.entity.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const product_create_command_1 = __webpack_require__(/*! ./commands/product.create.command */ "./src/app/product/commands/product.create.command.ts");
const product_update_command_1 = __webpack_require__(/*! ./commands/product.update.command */ "./src/app/product/commands/product.update.command.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/product/commands/index.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let ProductController = class ProductController extends core_1.CrudController {
    constructor(productService, commandBus) {
        super(productService);
        this.productService = productService;
        this.commandBus = commandBus;
    }
    async findById(id, data) {
        const { relations = [], findInput = null } = data;
        return this.productService.findById(id, {
            relations,
            where: findInput
        });
    }
    async findAllProducts() {
        return this.productService.findAllProducts();
    }
    async findAllProductsTranslated(langCode, data) {
        const { relations = [], findInput = null } = data;
        return this.productService.findAllProducts(langCode, relations, findInput);
    }
    async createProduct(entity, ...options) {
        return this.commandBus.execute(new product_create_command_1.ProductCreateCommand(entity));
    }
    async update(id, entity) {
        return this.commandBus.execute(new product_update_command_1.ProductUpdateCommand(id, entity));
    }
    async delete(id, ...options) {
        return this.commandBus.execute(new commands_1.ProductDeleteCommand(id));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find Product by id ' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found one record',
        type: product_entity_1.Product
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], ProductController.prototype, "findById", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all products'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found products',
        type: product_entity_1.Product
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], ProductController.prototype, "findAllProducts", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all products translated'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found products',
        type: product_entity_1.Product
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('local/:langCode'),
    tslib_1.__param(0, common_1.Param('langCode')),
    tslib_1.__param(1, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], ProductController.prototype, "findAllProductsTranslated", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_INVENTORY_PRODUCT_EDIT),
    common_1.Post('/create'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof models_1.IProductCreateInput !== "undefined" && models_1.IProductCreateInput) === "function" ? _d : Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ProductController.prototype, "createProduct", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_e = typeof models_1.IProductCreateInput !== "undefined" && models_1.IProductCreateInput) === "function" ? _e : Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], ProductController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Delete record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NO_CONTENT,
        description: 'The record has been successfully deleted'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], ProductController.prototype, "delete", null);
ProductController = tslib_1.__decorate([
    swagger_1.ApiTags('Product'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_h = typeof product_service_1.ProductService !== "undefined" && product_service_1.ProductService) === "function" ? _h : Object, typeof (_j = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _j : Object])
], ProductController);
exports.ProductController = ProductController;


/***/ }),

/***/ "./src/app/product/product.entity.ts":
/*!*******************************************!*\
  !*** ./src/app/product/product.entity.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Product = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const product_variant_entity_1 = __webpack_require__(/*! ../product-variant/product-variant.entity */ "./src/app/product-variant/product-variant.entity.ts");
const product_type_entity_1 = __webpack_require__(/*! ../product-type/product-type.entity */ "./src/app/product-type/product-type.entity.ts");
const product_category_entity_1 = __webpack_require__(/*! ../product-category/product-category.entity */ "./src/app/product-category/product-category.entity.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const product_option_entity_1 = __webpack_require__(/*! ../product-option/product-option.entity */ "./src/app/product-option/product-option.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const invoice_item_entity_1 = __webpack_require__(/*! ../invoice-item/invoice-item.entity */ "./src/app/invoice-item/invoice-item.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let Product = class Product extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.product),
    typeorm_1.JoinTable({
        name: 'tag_product'
    }),
    tslib_1.__metadata("design:type", Array)
], Product.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Product.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Product.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean }),
    typeorm_1.Column({ default: true }),
    tslib_1.__metadata("design:type", Boolean)
], Product.prototype, "enabled", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Product.prototype, "code", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Product.prototype, "imageUrl", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany(() => product_variant_entity_1.ProductVariant, (productVariant) => productVariant.product, { onDelete: 'CASCADE' }),
    tslib_1.__metadata("design:type", Array)
], Product.prototype, "variants", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((product) => product.type),
    tslib_1.__metadata("design:type", String)
], Product.prototype, "productTypeId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((product) => product.category),
    tslib_1.__metadata("design:type", String)
], Product.prototype, "productCategoryId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => product_type_entity_1.ProductType, { onDelete: 'SET NULL' }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof product_type_entity_1.ProductType !== "undefined" && product_type_entity_1.ProductType) === "function" ? _a : Object)
], Product.prototype, "type", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne(() => product_category_entity_1.ProductCategory, { onDelete: 'SET NULL' }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof product_category_entity_1.ProductCategory !== "undefined" && product_category_entity_1.ProductCategory) === "function" ? _b : Object)
], Product.prototype, "category", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany((type) => product_option_entity_1.ProductOption, (productOption) => productOption.product),
    tslib_1.__metadata("design:type", Array)
], Product.prototype, "options", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: invoice_item_entity_1.InvoiceItem, isArray: true }),
    typeorm_1.OneToMany((type) => invoice_item_entity_1.InvoiceItem, (invoiceItem) => invoiceItem.product, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Product.prototype, "invoiceItems", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Product.prototype, "language", void 0);
Product = tslib_1.__decorate([
    typeorm_1.Entity('product')
], Product);
exports.Product = Product;


/***/ }),

/***/ "./src/app/product/product.module.ts":
/*!*******************************************!*\
  !*** ./src/app/product/product.module.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const product_entity_1 = __webpack_require__(/*! ./product.entity */ "./src/app/product/product.entity.ts");
const product_controller_1 = __webpack_require__(/*! ./product.controller */ "./src/app/product/product.controller.ts");
const product_service_1 = __webpack_require__(/*! ./product.service */ "./src/app/product/product.service.ts");
const product_option_entity_1 = __webpack_require__(/*! ../product-option/product-option.entity */ "./src/app/product-option/product-option.entity.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const product_option_service_1 = __webpack_require__(/*! ../product-option/product-option.service */ "./src/app/product-option/product-option.service.ts");
const product_create_handler_1 = __webpack_require__(/*! ./commands/handlers/product.create.handler */ "./src/app/product/commands/handlers/product.create.handler.ts");
const product_update_handler_1 = __webpack_require__(/*! ./commands/handlers/product.update.handler */ "./src/app/product/commands/handlers/product.update.handler.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const product_delete_handler_1 = __webpack_require__(/*! ./commands/handlers/product.delete.handler */ "./src/app/product/commands/handlers/product.delete.handler.ts");
const product_variant_service_1 = __webpack_require__(/*! ../product-variant/product-variant.service */ "./src/app/product-variant/product-variant.service.ts");
const product_variant_entity_1 = __webpack_require__(/*! ../product-variant/product-variant.entity */ "./src/app/product-variant/product-variant.entity.ts");
const product_settings_entity_1 = __webpack_require__(/*! ../product-settings/product-settings.entity */ "./src/app/product-settings/product-settings.entity.ts");
const product_settings_service_1 = __webpack_require__(/*! ../product-settings/product-settings.service */ "./src/app/product-settings/product-settings.service.ts");
const product_variant_price_service_1 = __webpack_require__(/*! ../product-variant-price/product-variant-price.service */ "./src/app/product-variant-price/product-variant-price.service.ts");
const product_variant_price_entity_1 = __webpack_require__(/*! ../product-variant-price/product-variant-price.entity */ "./src/app/product-variant-price/product-variant-price.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let ProductModule = class ProductModule {
};
ProductModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([
                product_entity_1.Product,
                product_option_entity_1.ProductOption,
                user_entity_1.User,
                product_variant_entity_1.ProductVariant,
                product_settings_entity_1.ProductVariantSettings,
                product_variant_price_entity_1.ProductVariantPrice
            ]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [product_controller_1.ProductController],
        providers: [
            product_service_1.ProductService,
            product_option_service_1.ProductOptionService,
            product_variant_service_1.ProductVariantService,
            product_settings_service_1.ProductVariantSettingService,
            product_variant_price_service_1.ProductVariantPriceService,
            product_create_handler_1.ProductCreateHandler,
            product_update_handler_1.ProductUpdateHandler,
            user_service_1.UserService,
            product_delete_handler_1.ProductDeleteHandler
        ],
        exports: [product_service_1.ProductService]
    })
], ProductModule);
exports.ProductModule = ProductModule;


/***/ }),

/***/ "./src/app/product/product.seed.ts":
/*!*****************************************!*\
  !*** ./src/app/product/product.seed.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomProduct = exports.createDefaultProducts = void 0;
const product_entity_1 = __webpack_require__(/*! ./product.entity */ "./src/app/product/product.entity.ts");
const product_type_entity_1 = __webpack_require__(/*! ../product-type/product-type.entity */ "./src/app/product-type/product-type.entity.ts");
const product_category_entity_1 = __webpack_require__(/*! ../product-category/product-category.entity */ "./src/app/product-category/product-category.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
exports.createDefaultProducts = async (connection, tenant, organization) => {
    const productTypes = await connection.manager.find(product_type_entity_1.ProductType);
    const productCategories = await connection.manager.find(product_category_entity_1.ProductCategory);
    const products = [];
    for (let i = 0; i <= 30; i++) {
        const product = new product_entity_1.Product();
        product.name = faker.commerce.productName();
        product.code = faker.lorem.word();
        product.type =
            productTypes[Math.floor(Math.random() * productTypes.length)];
        product.category =
            productCategories[Math.floor(Math.random() * productCategories.length)];
        product.description = faker.lorem.words();
        product.organization = organization;
        product.tenant = tenant;
        products.push(product);
    }
    await insertProduct(connection, products);
};
const insertProduct = async (connection, products) => {
    await connection.manager.save(products);
};
exports.createRandomProduct = async (connection, tenants, tenantOrganizationsMap) => {
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, Product will not be created');
        return;
    }
    const products = [];
    for (const tenant of tenants) {
        const tenantOrgs = tenantOrganizationsMap.get(tenant);
        for (const tenantOrg of tenantOrgs) {
            const productCategories = await connection.manager.find(product_category_entity_1.ProductCategory, {
                where: [{ organization: tenantOrg }]
            });
            const productTypes = await connection.manager.find(product_type_entity_1.ProductType, {
                where: [{ organization: tenantOrg }]
            });
            const product = new product_entity_1.Product();
            product.name = faker.commerce.productName();
            product.code = faker.lorem.word();
            product.type =
                productTypes[Math.floor(Math.random() * productTypes.length)];
            product.category =
                productCategories[Math.floor(Math.random() * productCategories.length)];
            product.description = faker.lorem.words();
            product.tenant = tenant;
            product.organization = tenantOrg;
            products.push(product);
        }
    }
    await connection.manager.save(products);
};


/***/ }),

/***/ "./src/app/product/product.service.ts":
/*!********************************************!*\
  !*** ./src/app/product/product.service.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_2 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const product_entity_1 = __webpack_require__(/*! ./product.entity */ "./src/app/product/product.entity.ts");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
let ProductService = class ProductService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(productRepository) {
        super(productRepository);
        this.productRepository = productRepository;
    }
    async findAllProducts(langCode, relations, findInput) {
        const total = await this.productRepository.count(findInput);
        const items = await this.productRepository.find({
            relations: relations,
            where: findInput
        });
        if (langCode) {
            items.forEach((product) => {
                if (product.type) {
                    product.type = product.type.translate(langCode);
                }
                if (product.category) {
                    product.category = product.category.translate(langCode);
                }
            });
        }
        return { items, total };
    }
    async findById(id, options) {
        return await this.productRepository.findOne(id, options);
    }
    async saveProduct(productRequest) {
        return await this.productRepository.save(productRequest);
    }
};
ProductService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_2.InjectRepository(product_entity_1.Product)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _a : Object])
], ProductService);
exports.ProductService = ProductService;


/***/ }),

/***/ "./src/app/proposal/commands/handlers/index.ts":
/*!*****************************************************!*\
  !*** ./src/app/proposal/commands/handlers/index.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const proposal_create_handler_1 = __webpack_require__(/*! ./proposal-create.handler */ "./src/app/proposal/commands/handlers/proposal-create.handler.ts");
exports.CommandHandlers = [proposal_create_handler_1.ProposalCreateHandler];


/***/ }),

/***/ "./src/app/proposal/commands/handlers/proposal-create.handler.ts":
/*!***********************************************************************!*\
  !*** ./src/app/proposal/commands/handlers/proposal-create.handler.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProposalCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const proposal_create_command_1 = __webpack_require__(/*! ../proposal-create.command */ "./src/app/proposal/commands/proposal-create.command.ts");
const proposal_service_1 = __webpack_require__(/*! ../../proposal.service */ "./src/app/proposal/proposal.service.ts");
let ProposalCreateHandler = class ProposalCreateHandler {
    constructor(_proposalService) {
        this._proposalService = _proposalService;
    }
    async execute(command) {
        const { input } = command;
        return await this._proposalService.create(input);
    }
};
ProposalCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(proposal_create_command_1.ProposalCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof proposal_service_1.ProposalService !== "undefined" && proposal_service_1.ProposalService) === "function" ? _a : Object])
], ProposalCreateHandler);
exports.ProposalCreateHandler = ProposalCreateHandler;


/***/ }),

/***/ "./src/app/proposal/commands/proposal-create.command.ts":
/*!**************************************************************!*\
  !*** ./src/app/proposal/commands/proposal-create.command.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProposalCreateCommand = void 0;
class ProposalCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.ProposalCreateCommand = ProposalCreateCommand;
ProposalCreateCommand.type = '[Proposal] Create Proposal';


/***/ }),

/***/ "./src/app/proposal/proposal.controller.ts":
/*!*************************************************!*\
  !*** ./src/app/proposal/proposal.controller.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProposalController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const proposal_service_1 = __webpack_require__(/*! ./proposal.service */ "./src/app/proposal/proposal.service.ts");
const proposal_entity_1 = __webpack_require__(/*! ./proposal.entity */ "./src/app/proposal/proposal.entity.ts");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const models_2 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
let ProposalController = class ProposalController extends crud_controller_1.CrudController {
    constructor(proposalService) {
        super(proposalService);
        this.proposalService = proposalService;
    }
    async findAllProposals(data) {
        const { relations, findInput, filterDate } = JSON.parse(data);
        return this.proposalService.getAllProposals({ where: findInput, relations }, filterDate);
    }
    async findOne(id, data) {
        const { relations, findInput } = data;
        return this.proposalService.findOne(id, {
            where: findInput,
            relations
        });
    }
    async createOrganizationTeam(entity, ...options) {
        return this.proposalService.create(entity);
    }
    async updateProposal(id, entity) {
        return this.proposalService.create(Object.assign({ id }, entity));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all proposals.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found proposals',
        type: proposal_entity_1.Proposal
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_2.PermissionsEnum.ORG_PROPOSALS_VIEW),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], ProposalController.prototype, "findAllProposals", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find single proposal by id.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found proposal',
        type: proposal_entity_1.Proposal
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_2.PermissionsEnum.ORG_PROPOSALS_VIEW),
    common_1.Get(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], ProposalController.prototype, "findOne", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_2.PermissionsEnum.ORG_PROPOSALS_EDIT),
    common_1.Post('/create'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.IProposalCreateInput !== "undefined" && models_1.IProposalCreateInput) === "function" ? _c : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], ProposalController.prototype, "createOrganizationTeam", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update single proposal by id.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Updates proposal',
        type: proposal_entity_1.Proposal
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_2.PermissionsEnum.ORG_PROPOSALS_EDIT),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], ProposalController.prototype, "updateProposal", null);
ProposalController = tslib_1.__decorate([
    swagger_1.ApiTags('Proposal'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_f = typeof proposal_service_1.ProposalService !== "undefined" && proposal_service_1.ProposalService) === "function" ? _f : Object])
], ProposalController);
exports.ProposalController = ProposalController;


/***/ }),

/***/ "./src/app/proposal/proposal.entity.ts":
/*!*********************************************!*\
  !*** ./src/app/proposal/proposal.entity.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Proposal = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
let Proposal = class Proposal extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: tag_entity_1.Tag }),
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.proposal),
    typeorm_1.JoinTable({ name: 'tag_proposal' }),
    tslib_1.__metadata("design:type", Array)
], Proposal.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.ManyToOne((type) => employee_entity_1.Employee, { nullable: true, onDelete: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IEmployee !== "undefined" && models_1.IEmployee) === "function" ? _a : Object)
], Proposal.prototype, "employee", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((proposal) => proposal.employee),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Proposal.prototype, "employeeId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Index(),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Proposal.prototype, "jobPostUrl", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Date }),
    class_validator_1.IsDate(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], Proposal.prototype, "valueDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Proposal.prototype, "jobPostContent", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Proposal.prototype, "proposalContent", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Proposal.prototype, "status", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: organization_contact_entity_1.OrganizationContact }),
    typeorm_1.ManyToOne((type) => organization_contact_entity_1.OrganizationContact, (organizationContact) => organizationContact.proposals, {
        nullable: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_c = typeof models_1.IOrganizationContact !== "undefined" && models_1.IOrganizationContact) === "function" ? _c : Object)
], Proposal.prototype, "organizationContact", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.RelationId((contact) => contact.organizationContact),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Proposal.prototype, "organizationContactId", void 0);
Proposal = tslib_1.__decorate([
    typeorm_1.Entity('proposal')
], Proposal);
exports.Proposal = Proposal;


/***/ }),

/***/ "./src/app/proposal/proposal.module.ts":
/*!*********************************************!*\
  !*** ./src/app/proposal/proposal.module.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ProposalModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const proposal_entity_1 = __webpack_require__(/*! ./proposal.entity */ "./src/app/proposal/proposal.entity.ts");
const proposal_controller_1 = __webpack_require__(/*! ./proposal.controller */ "./src/app/proposal/proposal.controller.ts");
const proposal_service_1 = __webpack_require__(/*! ./proposal.service */ "./src/app/proposal/proposal.service.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/proposal/commands/handlers/index.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let ProposalModule = class ProposalModule {
};
ProposalModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([user_entity_1.User, proposal_entity_1.Proposal, employee_entity_1.Employee]),
            tenant_module_1.TenantModule
        ],
        controllers: [proposal_controller_1.ProposalController],
        providers: [proposal_service_1.ProposalService, user_service_1.UserService, ...handlers_1.CommandHandlers],
        exports: [proposal_service_1.ProposalService, user_service_1.UserService]
    })
], ProposalModule);
exports.ProposalModule = ProposalModule;


/***/ }),

/***/ "./src/app/proposal/proposal.seed.ts":
/*!*******************************************!*\
  !*** ./src/app/proposal/proposal.seed.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomProposals = exports.createDefaultProposals = void 0;
const proposal_entity_1 = __webpack_require__(/*! ./proposal.entity */ "./src/app/proposal/proposal.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
exports.createDefaultProposals = async (connection, tenant, employees, organizations, noOfProposalsPerOrganization) => {
    const proposals = [];
    for (const organization of organizations) {
        const tags = await connection.manager.find(tag_entity_1.Tag, {
            where: [{ organization: organization }]
        });
        for (let i = 0; i < noOfProposalsPerOrganization; i++) {
            const proposal = new proposal_entity_1.Proposal();
            proposal.employee = faker.random.arrayElement(employees);
            proposal.jobPostUrl = faker.internet.url();
            proposal.jobPostContent = faker.name.jobTitle();
            proposal.organization = organization;
            proposal.status = faker.random.arrayElement(['ACCEPTED', 'SENT']);
            proposal.tags = [faker.random.arrayElement(tags)];
            proposal.valueDate = faker.date.recent();
            proposal.proposalContent = faker.name.jobDescriptor();
            proposal.tenant = tenant;
            proposals.push(proposal);
        }
    }
    return await connection.manager.save(proposals);
};
exports.createRandomProposals = async (connection, tenants, tenantEmployeeMap, tenantOrganizationsMap, noOfProposalsPerOrganization) => {
    const proposals = [];
    for (const tenant of tenants) {
        const organizations = tenantOrganizationsMap.get(tenant);
        const employees = tenantEmployeeMap.get(tenant);
        for (const organization of organizations) {
            const tags = await connection.manager.find(tag_entity_1.Tag, {
                where: [{ organization: organization }]
            });
            for (let i = 0; i < noOfProposalsPerOrganization; i++) {
                const proposal = new proposal_entity_1.Proposal();
                proposal.employee = faker.random.arrayElement(employees);
                proposal.jobPostUrl = faker.internet.url();
                proposal.jobPostContent = faker.name.jobTitle();
                proposal.organization = organization;
                proposal.status = faker.random.arrayElement([
                    'ACCEPTED',
                    'SENT'
                ]);
                proposal.tags = [faker.random.arrayElement(tags)];
                proposal.valueDate = faker.date.recent();
                proposal.proposalContent = faker.name.jobDescriptor();
                proposal.tenant = tenant;
                proposals.push(proposal);
            }
        }
    }
    return await connection.manager.save(proposals);
};


/***/ }),

/***/ "./src/app/proposal/proposal.service.ts":
/*!**********************************************!*\
  !*** ./src/app/proposal/proposal.service.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProposalService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const proposal_entity_1 = __webpack_require__(/*! ./proposal.entity */ "./src/app/proposal/proposal.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
let ProposalService = class ProposalService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(proposalRepository, employeeRepository) {
        super(proposalRepository);
        this.proposalRepository = proposalRepository;
        this.employeeRepository = employeeRepository;
    }
    async getAllProposals(filter, filterDate) {
        const total = await this.repository.count(filter);
        let items = await this.repository.find(filter);
        if (filterDate) {
            const dateObject = new Date(filterDate);
            const month = dateObject.getMonth() + 1;
            const year = dateObject.getFullYear();
            items = items.filter((i) => {
                const currentItemMonth = i.valueDate.getMonth() + 1;
                const currentItemYear = i.valueDate.getFullYear();
                return currentItemMonth === month && currentItemYear === year;
            });
        }
        return { items, total };
    }
    async createProposal(entity) {
        const proposal = new proposal_entity_1.Proposal();
        proposal.jobPostUrl = entity.jobPostUrl;
        proposal.valueDate = entity.valueDate;
        proposal.jobPostContent = entity.jobPostContent;
        proposal.proposalContent = entity.proposalContent;
        await this.employeeRepository.findOneOrFail(entity.employeeId);
        return this.proposalRepository.save(proposal);
    }
};
ProposalService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(proposal_entity_1.Proposal)),
    tslib_1.__param(1, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], ProposalService);
exports.ProposalService = ProposalService;


/***/ }),

/***/ "./src/app/reports/report-category.controller.ts":
/*!*******************************************************!*\
  !*** ./src/app/reports/report-category.controller.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportCategoryController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const report_category_service_1 = __webpack_require__(/*! ./report-category.service */ "./src/app/reports/report-category.service.ts");
let ReportCategoryController = class ReportCategoryController {
    constructor(reportCategoryService) {
        this.reportCategoryService = reportCategoryService;
    }
    async findAll(filter) {
        return this.reportCategoryService.findAll(filter);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found records'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof core_1.PaginationParams !== "undefined" && core_1.PaginationParams) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], ReportCategoryController.prototype, "findAll", null);
ReportCategoryController = tslib_1.__decorate([
    swagger_1.ApiTags('Report Category'),
    common_1.Controller('category'),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof report_category_service_1.ReportCategoryService !== "undefined" && report_category_service_1.ReportCategoryService) === "function" ? _c : Object])
], ReportCategoryController);
exports.ReportCategoryController = ReportCategoryController;


/***/ }),

/***/ "./src/app/reports/report-category.entity.ts":
/*!***************************************************!*\
  !*** ./src/app/reports/report-category.entity.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportCategory = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const report_entity_1 = __webpack_require__(/*! ./report.entity */ "./src/app/reports/report.entity.ts");
const base_1 = __webpack_require__(/*! ../core/entities/base */ "./src/app/core/entities/base.ts");
let ReportCategory = class ReportCategory extends base_1.Base {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], ReportCategory.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], ReportCategory.prototype, "iconClass", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: report_entity_1.Report }),
    typeorm_1.OneToMany(() => report_entity_1.Report, (report) => report.category),
    tslib_1.__metadata("design:type", Array)
], ReportCategory.prototype, "reports", void 0);
ReportCategory = tslib_1.__decorate([
    typeorm_1.Entity('report_category')
], ReportCategory);
exports.ReportCategory = ReportCategory;


/***/ }),

/***/ "./src/app/reports/report-category.service.ts":
/*!****************************************************!*\
  !*** ./src/app/reports/report-category.service.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportCategoryService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const report_category_entity_1 = __webpack_require__(/*! ./report-category.entity */ "./src/app/reports/report-category.entity.ts");
let ReportCategoryService = class ReportCategoryService extends core_1.CrudService {
    constructor(reportRepository) {
        super(reportRepository);
    }
};
ReportCategoryService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(report_category_entity_1.ReportCategory)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], ReportCategoryService);
exports.ReportCategoryService = ReportCategoryService;


/***/ }),

/***/ "./src/app/reports/report-organization.entity.ts":
/*!*******************************************************!*\
  !*** ./src/app/reports/report-organization.entity.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportOrganization = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const base_1 = __webpack_require__(/*! ../core/entities/base */ "./src/app/core/entities/base.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const report_entity_1 = __webpack_require__(/*! ./report.entity */ "./src/app/reports/report.entity.ts");
let ReportOrganization = class ReportOrganization extends base_1.Base {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: report_entity_1.Report }),
    typeorm_1.ManyToOne(() => report_entity_1.Report),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IReport !== "undefined" && models_1.IReport) === "function" ? _a : Object)
], ReportOrganization.prototype, "report", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((report) => report.report),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], ReportOrganization.prototype, "reportId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: organization_entity_1.Organization }),
    typeorm_1.ManyToOne(() => organization_entity_1.Organization),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof models_1.IOrganization !== "undefined" && models_1.IOrganization) === "function" ? _b : Object)
], ReportOrganization.prototype, "organization", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((report) => report.organization),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], ReportOrganization.prototype, "organizationId", void 0);
tslib_1.__decorate([
    typeorm_1.Column({ default: true }),
    tslib_1.__metadata("design:type", Boolean)
], ReportOrganization.prototype, "isEnabled", void 0);
ReportOrganization = tslib_1.__decorate([
    typeorm_1.Entity('report_organization')
], ReportOrganization);
exports.ReportOrganization = ReportOrganization;


/***/ }),

/***/ "./src/app/reports/report.controller.ts":
/*!**********************************************!*\
  !*** ./src/app/reports/report.controller.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const report_service_1 = __webpack_require__(/*! ./report.service */ "./src/app/reports/report.service.ts");
let ReportController = class ReportController extends core_1.CrudController {
    constructor(reportService) {
        super(reportService);
        this.reportService = reportService;
    }
    async getAll(filter) {
        return this.reportService.findAll(filter);
    }
    async getMenuItems(filter) {
        return this.reportService.getMenuItems(filter);
    }
    async updateReportMenu(input) {
        return this.reportService.updateReportMenu(input);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found records'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.IGetReport !== "undefined" && models_1.IGetReport) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], ReportController.prototype, "getAll", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found records'
    }),
    common_1.Get('menu-items'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.GetReportMenuItemsInput !== "undefined" && models_1.GetReportMenuItemsInput) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], ReportController.prototype, "getMenuItems", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found records'
    }),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Post('menu-item'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof models_1.UpdateReportMenuInput !== "undefined" && models_1.UpdateReportMenuInput) === "function" ? _e : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ReportController.prototype, "updateReportMenu", null);
ReportController = tslib_1.__decorate([
    swagger_1.ApiTags('Report'),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_f = typeof report_service_1.ReportService !== "undefined" && report_service_1.ReportService) === "function" ? _f : Object])
], ReportController);
exports.ReportController = ReportController;


/***/ }),

/***/ "./src/app/reports/report.entity.ts":
/*!******************************************!*\
  !*** ./src/app/reports/report.entity.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Report = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const report_category_entity_1 = __webpack_require__(/*! ./report-category.entity */ "./src/app/reports/report-category.entity.ts");
const base_1 = __webpack_require__(/*! ../core/entities/base */ "./src/app/core/entities/base.ts");
const file_storage_1 = __webpack_require__(/*! ../core/file-storage */ "./src/app/core/file-storage/index.ts");
const report_organization_entity_1 = __webpack_require__(/*! ./report-organization.entity */ "./src/app/reports/report-organization.entity.ts");
let Report = class Report extends base_1.Base {
    afterLoad() {
        if (this.image) {
            this.imageUrl = new file_storage_1.FileStorage().getProvider().url(this.image);
        }
    }
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: report_organization_entity_1.ReportOrganization }),
    typeorm_1.OneToMany(() => report_organization_entity_1.ReportOrganization, (reportOrganization) => reportOrganization.report),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Report.prototype, "reportOrganizations", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: report_category_entity_1.ReportCategory }),
    typeorm_1.ManyToOne(() => report_category_entity_1.ReportCategory),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IReportCategory !== "undefined" && models_1.IReportCategory) === "function" ? _a : Object)
], Report.prototype, "category", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((report) => report.category),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Report.prototype, "categoryId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Report.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Report.prototype, "slug", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Report.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Report.prototype, "image", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Report.prototype, "iconClass", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    class_validator_1.IsString(),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], Report.prototype, "showInMenu", void 0);
tslib_1.__decorate([
    typeorm_1.AfterLoad(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], Report.prototype, "afterLoad", null);
Report = tslib_1.__decorate([
    typeorm_1.Entity('report')
], Report);
exports.Report = Report;


/***/ }),

/***/ "./src/app/reports/report.module.ts":
/*!******************************************!*\
  !*** ./src/app/reports/report.module.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const report_category_entity_1 = __webpack_require__(/*! ./report-category.entity */ "./src/app/reports/report-category.entity.ts");
const report_entity_1 = __webpack_require__(/*! ./report.entity */ "./src/app/reports/report.entity.ts");
const report_controller_1 = __webpack_require__(/*! ./report.controller */ "./src/app/reports/report.controller.ts");
const report_service_1 = __webpack_require__(/*! ./report.service */ "./src/app/reports/report.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
const report_category_controller_1 = __webpack_require__(/*! ./report-category.controller */ "./src/app/reports/report-category.controller.ts");
const report_category_service_1 = __webpack_require__(/*! ./report-category.service */ "./src/app/reports/report-category.service.ts");
const report_organization_entity_1 = __webpack_require__(/*! ./report-organization.entity */ "./src/app/reports/report-organization.entity.ts");
let ReportModule = class ReportModule {
};
ReportModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([report_entity_1.Report, report_category_entity_1.ReportCategory, report_organization_entity_1.ReportOrganization]),
            tenant_module_1.TenantModule
        ],
        controllers: [report_category_controller_1.ReportCategoryController, report_controller_1.ReportController],
        providers: [report_service_1.ReportService, report_category_service_1.ReportCategoryService]
    })
], ReportModule);
exports.ReportModule = ReportModule;


/***/ }),

/***/ "./src/app/reports/report.seed.ts":
/*!****************************************!*\
  !*** ./src/app/reports/report.seed.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultReport = void 0;
const report_entity_1 = __webpack_require__(/*! ./report.entity */ "./src/app/reports/report.entity.ts");
const report_category_entity_1 = __webpack_require__(/*! ./report-category.entity */ "./src/app/reports/report-category.entity.ts");
const underscore_1 = __webpack_require__(/*! underscore */ "underscore");
const path = __webpack_require__(/*! path */ "path");
const fs_1 = __webpack_require__(/*! fs */ "fs");
const rimraf = __webpack_require__(/*! rimraf */ "rimraf");
const chalk_1 = __webpack_require__(/*! chalk */ "chalk");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
exports.createDefaultReport = async (connection) => {
    await cleanReport(connection);
    const defaultCategories = [
        new report_category_entity_1.ReportCategory({
            name: 'Time Tracking',
            iconClass: 'fa-clock'
        }),
        new report_category_entity_1.ReportCategory({
            name: 'Payments',
            iconClass: 'fa-credit-card'
        }),
        new report_category_entity_1.ReportCategory({
            name: 'Time Off',
            iconClass: 'fa-stopwatch'
        }),
        new report_category_entity_1.ReportCategory({
            name: 'Invoicing',
            iconClass: 'fa-file-invoice-dollar'
        })
    ];
    await connection.manager.save(defaultCategories);
    const categoryByName = underscore_1.indexBy(defaultCategories, 'name');
    const reports = [
        new report_entity_1.Report({
            name: 'Time & Activity',
            slug: 'time-activity',
            image: copyImage('time-activity.png'),
            category: categoryByName['Time Tracking'],
            showInMenu: true,
            iconClass: 'clock-outline',
            description: "See team members' time worked, activity levels, and amounts earned per project or task"
        }),
        new report_entity_1.Report({
            name: 'Weekly',
            slug: 'weekly',
            image: copyImage('weekly.png'),
            category: categoryByName['Time Tracking'],
            iconClass: 'calendar-outline',
            showInMenu: true,
            description: "See team members' time worked, activity levels, and amount earned per week"
        }),
        new report_entity_1.Report({
            name: 'Apps & URLs',
            slug: 'apps-urls',
            image: copyImage('apps-urls.png'),
            category: categoryByName['Time Tracking'],
            description: "See team members' apps used and URLs visited while working"
        }),
        new report_entity_1.Report({
            name: 'Manual time edits',
            slug: 'manual-time-edits',
            image: copyImage('manual-time-edits.png'),
            category: categoryByName['Time Tracking'],
            iconClass: 'browser-outline',
            description: "See team members' time worked, project, task, and reason for each manual time entry"
        }),
        new report_entity_1.Report({
            name: 'Expense',
            slug: 'expense',
            image: copyImage('expense.png'),
            category: categoryByName['Time Tracking'],
            iconClass: 'credit-card-outline',
            description: 'See how much has been spent on expenses by member and project.'
        }),
        new report_entity_1.Report({
            name: 'Amounts owed',
            slug: 'amounts-owed',
            image: copyImage('amounts-owed.png'),
            category: categoryByName['Payments'],
            iconClass: 'credit-card-outline',
            description: 'See how much team members are currently owed'
        }),
        new report_entity_1.Report({
            name: 'Payments',
            slug: 'payments',
            image: copyImage('payments.png'),
            category: categoryByName['Payments'],
            iconClass: 'credit-card-outline',
            description: 'See how much team members were paid over a given period'
        }),
        new report_entity_1.Report({
            name: 'Weekly limits',
            slug: 'weekly-limits',
            image: copyImage('blank.png'),
            category: categoryByName['Time Off'],
            description: "See team members' weekly limits usage"
        }),
        new report_entity_1.Report({
            name: 'Daily limits',
            slug: 'daily-limits',
            image: copyImage('blank.png'),
            category: categoryByName['Time Off'],
            iconClass: 'clock-outline',
            description: "See team members' daily limits usage"
        }),
        new report_entity_1.Report({
            name: 'Project budgets',
            slug: 'project-budgets',
            image: copyImage('blank.png'),
            category: categoryByName['Invoicing'],
            iconClass: 'credit-card-outline',
            description: "See how much of your projects' budgets have been spent"
        }),
        new report_entity_1.Report({
            name: 'Client budgets',
            slug: 'client-budgets',
            image: copyImage('blank.png'),
            category: categoryByName['Invoicing'],
            iconClass: 'credit-card-outline',
            description: "See how much of your clients' budgets have been spent"
        })
    ];
    return await connection.manager.save(reports);
};
async function cleanReport(connection) {
    if (environment_1.environment.database.type === 'sqlite') {
        await connection.query('DELETE FROM report_category');
        await connection.query('DELETE FROM report');
    }
    else {
        await connection.query('TRUNCATE TABLE report_category RESTART IDENTITY CASCADE');
        await connection.query('TRUNCATE TABLE report RESTART IDENTITY CASCADE');
    }
    console.log(chalk_1.default.green(`CLEANING UP REPORT IMAGES...`));
    await new Promise((resolve, reject) => {
        const dir = environment_1.environment.isElectron
            ? path.resolve(environment_1.environment.gauzyUserPath, ...['public', 'reports'])
            : path.resolve('.', ...['apps', 'api', 'public', 'reports']);
        rimraf(dir, () => {
            console.log(chalk_1.default.green(`CLEANED UP REPORT IMAGES`));
            resolve(null);
        });
    });
}
function copyImage(fileName) {
    const dir = environment_1.environment.isElectron
        ? path.resolve(environment_1.environment.gauzyUserPath, ...['src', 'assets', 'seed', 'reports'])
        : path.resolve('.', ...['apps', 'api', 'src', 'assets', 'seed', 'reports']);
    const baseDir = environment_1.environment.isElectron
        ? path.resolve(environment_1.environment.gauzyUserPath, ...['public'])
        : path.resolve('.', ...['apps', 'api', 'public']);
    const destDir = 'reports';
    fs_1.mkdirSync(path.join(baseDir, destDir), { recursive: true });
    const destFilePath = path.join(destDir, fileName);
    fs_1.copyFileSync(path.join(dir, fileName), path.join(baseDir, destFilePath));
    return destFilePath;
}


/***/ }),

/***/ "./src/app/reports/report.service.ts":
/*!*******************************************!*\
  !*** ./src/app/reports/report.service.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const underscore_1 = __webpack_require__(/*! underscore */ "underscore");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const report_organization_entity_1 = __webpack_require__(/*! ./report-organization.entity */ "./src/app/reports/report-organization.entity.ts");
const report_entity_1 = __webpack_require__(/*! ./report.entity */ "./src/app/reports/report.entity.ts");
let ReportService = class ReportService extends core_1.CrudService {
    constructor(reportRepository, reportOrganizationRepository) {
        super(reportRepository);
        this.reportOrganizationRepository = reportOrganizationRepository;
    }
    async findAll(filter) {
        const { items, total } = await super.findAll(filter);
        const menuItems = await this.getMenuItems({
            organizationId: filter.organizationId
        });
        const orgMenuItems = underscore_1.indexBy(menuItems, 'id');
        const mapItems = items.map((item) => {
            if (orgMenuItems[item.id]) {
                item.showInMenu = true;
            }
            else {
                item.showInMenu = false;
            }
            return item;
        });
        return { items: mapItems, total };
    }
    getMenuItems(filter) {
        return this.repository.find({
            relations: ['reportOrganizations'],
            join: {
                alias: 'reports',
                innerJoin: {
                    reportOrganizations: 'reports.reportOrganizations'
                }
            },
            where: (qb) => {
                qb.where('"reportOrganizations"."organizationId" = :organizationId', { organizationId: filter.organizationId });
                qb.andWhere('"reportOrganizations"."isEnabled" = :isEnabled', {
                    isEnabled: true
                });
            }
        });
    }
    async updateReportMenu(input) {
        let reportOrganization = await this.reportOrganizationRepository.findOne({
            where: {
                reportId: input.reportId
            }
        });
        if (!reportOrganization) {
            reportOrganization = new report_organization_entity_1.ReportOrganization(input);
        }
        else {
            reportOrganization = new report_organization_entity_1.ReportOrganization(Object.assign(reportOrganization, input));
        }
        this.reportOrganizationRepository.save(reportOrganization);
        return reportOrganization;
    }
};
ReportService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(report_entity_1.Report)),
    tslib_1.__param(1, typeorm_1.InjectRepository(report_organization_entity_1.ReportOrganization)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], ReportService);
exports.ReportService = ReportService;


/***/ }),

/***/ "./src/app/request-approval-employee/request-approval-employee.entity.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/request-approval-employee/request-approval-employee.entity.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestApprovalEmployee = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const request_approval_entity_1 = __webpack_require__(/*! ../request-approval/request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let RequestApprovalEmployee = class RequestApprovalEmployee extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], RequestApprovalEmployee.prototype, "requestApprovalId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], RequestApprovalEmployee.prototype, "employeeId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => request_approval_entity_1.RequestApproval, (requestApproval) => requestApproval.employeeApprovals, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", typeof (_a = typeof request_approval_entity_1.RequestApproval !== "undefined" && request_approval_entity_1.RequestApproval) === "function" ? _a : Object)
], RequestApprovalEmployee.prototype, "requestApproval", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => employee_entity_1.Employee, (employee) => employee.requestApprovals, {
        cascade: true
    }),
    tslib_1.__metadata("design:type", typeof (_b = typeof employee_entity_1.Employee !== "undefined" && employee_entity_1.Employee) === "function" ? _b : Object)
], RequestApprovalEmployee.prototype, "employee", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], RequestApprovalEmployee.prototype, "status", void 0);
RequestApprovalEmployee = tslib_1.__decorate([
    typeorm_1.Entity('request_approval_employee')
], RequestApprovalEmployee);
exports.RequestApprovalEmployee = RequestApprovalEmployee;


/***/ }),

/***/ "./src/app/request-approval-employee/request-approval-employee.module.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/request-approval-employee/request-approval-employee.module.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestApprovalEmployeeModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const request_approval_employee_entity_1 = __webpack_require__(/*! ./request-approval-employee.entity */ "./src/app/request-approval-employee/request-approval-employee.entity.ts");
let RequestApprovalEmployeeModule = class RequestApprovalEmployeeModule {
};
RequestApprovalEmployeeModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([request_approval_employee_entity_1.RequestApprovalEmployee])]
    })
], RequestApprovalEmployeeModule);
exports.RequestApprovalEmployeeModule = RequestApprovalEmployeeModule;


/***/ }),

/***/ "./src/app/request-approval-employee/request-approval-employee.seed.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/request-approval-employee/request-approval-employee.seed.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomRequestApprovalEmployee = void 0;
const request_approval_employee_entity_1 = __webpack_require__(/*! ./request-approval-employee.entity */ "./src/app/request-approval-employee/request-approval-employee.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const approval_policy_entity_1 = __webpack_require__(/*! ../approval-policy/approval-policy.entity */ "./src/app/approval-policy/approval-policy.entity.ts");
const request_approval_entity_1 = __webpack_require__(/*! ../request-approval/request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
exports.createRandomRequestApprovalEmployee = async (connection, tenants, tenantEmployeeMap, tenantOrganizationsMap) => {
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, Request Approval Employee  will not be created');
        return;
    }
    if (!tenantEmployeeMap) {
        console.warn('Warning: tenantEmployeeMap not found, Request Approval Employee  will not be created');
        return;
    }
    for (const tenant of tenants) {
        const tenantOrgs = tenantOrganizationsMap.get(tenant);
        const tenantEmployees = tenantEmployeeMap.get(tenant);
        for (const tenantEmployee of tenantEmployees) {
            for (const tenantOrg of tenantOrgs) {
                const requestApprovalEmployees = [];
                const approvalPolicies = await connection.manager.find(approval_policy_entity_1.ApprovalPolicy, { where: { organization: tenantOrg } });
                for (const approvalPolicy of approvalPolicies) {
                    const requestApprovals = await connection.manager.find(request_approval_entity_1.RequestApproval, {
                        where: { approvalPolicy: approvalPolicy }
                    });
                    for (const requestApproval of requestApprovals) {
                        const requestApprovalEmployee = new request_approval_employee_entity_1.RequestApprovalEmployee();
                        requestApprovalEmployee.requestApprovalId =
                            requestApproval.id;
                        requestApprovalEmployee.requestApproval = requestApproval;
                        requestApprovalEmployee.employee = tenantEmployee;
                        requestApprovalEmployee.status = faker.random.number(99);
                        requestApprovalEmployee.tenant = tenant;
                        requestApprovalEmployee.organization = tenantOrg;
                        requestApprovalEmployees.push(requestApprovalEmployee);
                    }
                }
                await connection.manager.save(requestApprovalEmployees);
            }
        }
    }
};


/***/ }),

/***/ "./src/app/request-approval-team/request-approval-team.entity.ts":
/*!***********************************************************************!*\
  !*** ./src/app/request-approval-team/request-approval-team.entity.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestApprovalTeam = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const request_approval_entity_1 = __webpack_require__(/*! ../request-approval/request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const organization_team_entity_1 = __webpack_require__(/*! ../organization-team/organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let RequestApprovalTeam = class RequestApprovalTeam extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], RequestApprovalTeam.prototype, "requestApprovalId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], RequestApprovalTeam.prototype, "teamId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => request_approval_entity_1.RequestApproval, (requestApproval) => requestApproval.teamApprovals, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", typeof (_a = typeof request_approval_entity_1.RequestApproval !== "undefined" && request_approval_entity_1.RequestApproval) === "function" ? _a : Object)
], RequestApprovalTeam.prototype, "requestApproval", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => organization_team_entity_1.OrganizationTeam, (team) => team.requestApprovals, {
        onDelete: 'CASCADE'
    }),
    tslib_1.__metadata("design:type", typeof (_b = typeof organization_team_entity_1.OrganizationTeam !== "undefined" && organization_team_entity_1.OrganizationTeam) === "function" ? _b : Object)
], RequestApprovalTeam.prototype, "team", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], RequestApprovalTeam.prototype, "status", void 0);
RequestApprovalTeam = tslib_1.__decorate([
    typeorm_1.Entity('request_approval_team')
], RequestApprovalTeam);
exports.RequestApprovalTeam = RequestApprovalTeam;


/***/ }),

/***/ "./src/app/request-approval-team/request-approval-team.module.ts":
/*!***********************************************************************!*\
  !*** ./src/app/request-approval-team/request-approval-team.module.ts ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestApprovalTeamModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const request_approval_team_entity_1 = __webpack_require__(/*! ./request-approval-team.entity */ "./src/app/request-approval-team/request-approval-team.entity.ts");
let RequestApprovalTeamModule = class RequestApprovalTeamModule {
};
RequestApprovalTeamModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([request_approval_team_entity_1.RequestApprovalTeam])]
    })
], RequestApprovalTeamModule);
exports.RequestApprovalTeamModule = RequestApprovalTeamModule;


/***/ }),

/***/ "./src/app/request-approval-team/request-approval-team.seed.ts":
/*!*********************************************************************!*\
  !*** ./src/app/request-approval-team/request-approval-team.seed.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomRequestApprovalTeam = void 0;
const request_approval_team_entity_1 = __webpack_require__(/*! ./request-approval-team.entity */ "./src/app/request-approval-team/request-approval-team.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const approval_policy_entity_1 = __webpack_require__(/*! ../approval-policy/approval-policy.entity */ "./src/app/approval-policy/approval-policy.entity.ts");
const request_approval_entity_1 = __webpack_require__(/*! ../request-approval/request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const organization_team_entity_1 = __webpack_require__(/*! ../organization-team/organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
exports.createRandomRequestApprovalTeam = async (connection, tenants, tenantEmployeeMap, tenantOrganizationsMap) => {
    if (!tenantOrganizationsMap) {
        console.warn('Warning: tenantOrganizationsMap not found, Request Approval Team  will not be created');
        return;
    }
    if (!tenantEmployeeMap) {
        console.warn('Warning: tenantEmployeeMap not found, Request Approval Team  will not be created');
        return;
    }
    const requestApprovalEmployees = [];
    for (const tenant of tenants) {
        const tenantOrgs = tenantOrganizationsMap.get(tenant);
        for (const tenantOrg of tenantOrgs) {
            const approvalPolicies = await connection.manager.find(approval_policy_entity_1.ApprovalPolicy, {
                where: [{ organization: tenantOrg }]
            });
            const organizationTeams = await connection.manager.find(organization_team_entity_1.OrganizationTeam, {
                where: [{ organizationId: tenantOrg.id }]
            });
            for (const approvalPolicy of approvalPolicies) {
                const requestApprovals = await connection.manager.find(request_approval_entity_1.RequestApproval, {
                    where: [{ approvalPolicy: approvalPolicy }]
                });
                for (const requestApproval of requestApprovals) {
                    for (const organizationTeam of organizationTeams) {
                        const requestApprovalEmployee = new request_approval_team_entity_1.RequestApprovalTeam();
                        requestApprovalEmployee.requestApprovalId =
                            requestApproval.id;
                        requestApprovalEmployee.requestApproval = requestApproval;
                        requestApprovalEmployee.teamId = organizationTeam.id;
                        requestApprovalEmployee.team = organizationTeam;
                        requestApprovalEmployee.tenant = tenant;
                        requestApprovalEmployee.organization = tenantOrg;
                        requestApprovalEmployee.status = faker.random.number(3);
                        requestApprovalEmployees.push(requestApprovalEmployee);
                    }
                }
            }
        }
    }
    await connection.manager.save(requestApprovalEmployees);
};


/***/ }),

/***/ "./src/app/request-approval/commands/handlers/request-approval.status.handler.ts":
/*!***************************************************************************************!*\
  !*** ./src/app/request-approval/commands/handlers/request-approval.status.handler.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestApprovalStatusHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const request_approval_status_command_1 = __webpack_require__(/*! ../request-approval.status.command */ "./src/app/request-approval/commands/request-approval.status.command.ts");
const request_approval_service_1 = __webpack_require__(/*! ../../request-approval.service */ "./src/app/request-approval/request-approval.service.ts");
const equipment_sharing_1 = __webpack_require__(/*! ../../../equipment-sharing */ "./src/app/equipment-sharing/index.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const time_off_request_service_1 = __webpack_require__(/*! ../../../time-off-request/time-off-request.service */ "./src/app/time-off-request/time-off-request.service.ts");
let RequestApprovalStatusHandler = class RequestApprovalStatusHandler {
    constructor(requestApprovalService, equipmentSharingService, timeOffRequestService) {
        this.requestApprovalService = requestApprovalService;
        this.equipmentSharingService = equipmentSharingService;
        this.timeOffRequestService = timeOffRequestService;
    }
    async execute(command) {
        const { requestApprovalId, status } = command;
        const requestApproval = await this.requestApprovalService.updateStatusRequestApprovalByAdmin(requestApprovalId, status);
        if (requestApproval.requestType ===
            models_1.ApprovalPolicyTypesStringEnum.TIME_OFF) {
            const timeOffStatus = models_1.StatusTypesMapRequestApprovalEnum[status];
            await this.timeOffRequestService.updateStatusTimeOffByAdmin(requestApproval.requestId, timeOffStatus);
        }
        else if (requestApproval.requestType ===
            models_1.ApprovalPolicyTypesStringEnum.EQUIPMENT_SHARING) {
            await this.equipmentSharingService.updateStatusEquipmentSharingByAdmin(requestApproval.requestId, status);
        }
        return requestApproval;
    }
};
RequestApprovalStatusHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(request_approval_status_command_1.RequestApprovalStatusCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof request_approval_service_1.RequestApprovalService !== "undefined" && request_approval_service_1.RequestApprovalService) === "function" ? _a : Object, typeof (_b = typeof equipment_sharing_1.EquipmentSharingService !== "undefined" && equipment_sharing_1.EquipmentSharingService) === "function" ? _b : Object, typeof (_c = typeof time_off_request_service_1.TimeOffRequestService !== "undefined" && time_off_request_service_1.TimeOffRequestService) === "function" ? _c : Object])
], RequestApprovalStatusHandler);
exports.RequestApprovalStatusHandler = RequestApprovalStatusHandler;


/***/ }),

/***/ "./src/app/request-approval/commands/index.ts":
/*!****************************************************!*\
  !*** ./src/app/request-approval/commands/index.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestApprovalStatusCommand = void 0;
var request_approval_status_command_1 = __webpack_require__(/*! ./request-approval.status.command */ "./src/app/request-approval/commands/request-approval.status.command.ts");
Object.defineProperty(exports, "RequestApprovalStatusCommand", { enumerable: true, get: function () { return request_approval_status_command_1.RequestApprovalStatusCommand; } });


/***/ }),

/***/ "./src/app/request-approval/commands/request-approval.status.command.ts":
/*!******************************************************************************!*\
  !*** ./src/app/request-approval/commands/request-approval.status.command.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestApprovalStatusCommand = void 0;
class RequestApprovalStatusCommand {
    constructor(requestApprovalId, status) {
        this.requestApprovalId = requestApprovalId;
        this.status = status;
    }
}
exports.RequestApprovalStatusCommand = RequestApprovalStatusCommand;
RequestApprovalStatusCommand.type = '[RequestApproval] Status';


/***/ }),

/***/ "./src/app/request-approval/request-approval.controller.ts":
/*!*****************************************************************!*\
  !*** ./src/app/request-approval/request-approval.controller.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestApprovalControler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const request_approval_entity_1 = __webpack_require__(/*! ./request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const request_approval_service_1 = __webpack_require__(/*! ./request-approval.service */ "./src/app/request-approval/request-approval.service.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/request-approval/commands/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const parse_json_pipe_1 = __webpack_require__(/*! ../shared/pipes/parse-json.pipe */ "./src/app/shared/pipes/parse-json.pipe.ts");
let RequestApprovalControler = class RequestApprovalControler extends core_1.CrudController {
    constructor(requestApprovalService, commandBus) {
        super(requestApprovalService);
        this.requestApprovalService = requestApprovalService;
        this.commandBus = commandBus;
    }
    findAllRequestApprovals(data) {
        const { relations, findInput } = data;
        return this.requestApprovalService.findAllRequestApprovals({ relations }, findInput);
    }
    findRequestApprovalsByEmployeeId(id, data) {
        const { relations, findInput } = data;
        return this.requestApprovalService.findRequestApprovalsByEmployeeId(id, relations, findInput);
    }
    async createRequestApproval(entity) {
        return this.requestApprovalService.createRequestApproval(entity);
    }
    async employeeApprovalRequestApproval(id) {
        return this.commandBus.execute(new commands_1.RequestApprovalStatusCommand(id, models_1.RequestApprovalStatusTypesEnum.APPROVED));
    }
    async employeeRefuseRequestApproval(id) {
        return this.commandBus.execute(new commands_1.RequestApprovalStatusCommand(id, models_1.RequestApprovalStatusTypesEnum.REFUSED));
    }
    async updateRequestApprovalByAdmin(id, entity) {
        return this.requestApprovalService.updateRequestApproval(id, entity);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all request approvals.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found policies',
        type: request_approval_entity_1.RequestApproval
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    permissions_1.Permissions(models_1.PermissionsEnum.REQUEST_APPROVAL_VIEW),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], RequestApprovalControler.prototype, "findAllRequestApprovals", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all request approval.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found policies',
        type: request_approval_entity_1.RequestApproval
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    permissions_1.Permissions(models_1.PermissionsEnum.REQUEST_APPROVAL_VIEW),
    common_1.Get('employee/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], RequestApprovalControler.prototype, "findRequestApprovalsByEmployeeId", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'create a request approval.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found policies',
        type: request_approval_entity_1.RequestApproval
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    permissions_1.Permissions(models_1.PermissionsEnum.REQUEST_APPROVAL_EDIT),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.IRequestApprovalCreateInput !== "undefined" && models_1.IRequestApprovalCreateInput) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], RequestApprovalControler.prototype, "createRequestApproval", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'employee accept request approval.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found policies',
        type: request_approval_entity_1.RequestApproval
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    permissions_1.Permissions(models_1.PermissionsEnum.REQUEST_APPROVAL_EDIT),
    common_1.Put('approval/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], RequestApprovalControler.prototype, "employeeApprovalRequestApproval", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'employee refuse request approval.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found policies',
        type: request_approval_entity_1.RequestApproval
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    permissions_1.Permissions(models_1.PermissionsEnum.REQUEST_APPROVAL_EDIT),
    common_1.Put('refuse/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], RequestApprovalControler.prototype, "employeeRefuseRequestApproval", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'update a request approval.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found policies',
        type: request_approval_entity_1.RequestApproval
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    permissions_1.Permissions(models_1.PermissionsEnum.REQUEST_APPROVAL_EDIT),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_g = typeof models_1.IRequestApprovalCreateInput !== "undefined" && models_1.IRequestApprovalCreateInput) === "function" ? _g : Object]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], RequestApprovalControler.prototype, "updateRequestApprovalByAdmin", null);
RequestApprovalControler = tslib_1.__decorate([
    swagger_1.ApiTags('RequestApproval'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard, permission_guard_1.PermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_j = typeof request_approval_service_1.RequestApprovalService !== "undefined" && request_approval_service_1.RequestApprovalService) === "function" ? _j : Object, typeof (_k = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _k : Object])
], RequestApprovalControler);
exports.RequestApprovalControler = RequestApprovalControler;


/***/ }),

/***/ "./src/app/request-approval/request-approval.entity.ts":
/*!*************************************************************!*\
  !*** ./src/app/request-approval/request-approval.entity.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestApproval = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const request_approval_employee_entity_1 = __webpack_require__(/*! ../request-approval-employee/request-approval-employee.entity */ "./src/app/request-approval-employee/request-approval-employee.entity.ts");
const approval_policy_entity_1 = __webpack_require__(/*! ../approval-policy/approval-policy.entity */ "./src/app/approval-policy/approval-policy.entity.ts");
const request_approval_team_entity_1 = __webpack_require__(/*! ../request-approval-team/request-approval-team.entity */ "./src/app/request-approval-team/request-approval-team.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let RequestApproval = class RequestApproval extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], RequestApproval.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: approval_policy_entity_1.ApprovalPolicy }),
    typeorm_1.ManyToOne((type) => approval_policy_entity_1.ApprovalPolicy, {
        nullable: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof approval_policy_entity_1.ApprovalPolicy !== "undefined" && approval_policy_entity_1.ApprovalPolicy) === "function" ? _a : Object)
], RequestApproval.prototype, "approvalPolicy", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((policy) => policy.approvalPolicy),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], RequestApproval.prototype, "approvalPolicyId", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany((type) => request_approval_employee_entity_1.RequestApprovalEmployee, (employeeApprovals) => employeeApprovals.requestApproval, {
        cascade: true
    }),
    tslib_1.__metadata("design:type", Array)
], RequestApproval.prototype, "employeeApprovals", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany((type) => request_approval_team_entity_1.RequestApprovalTeam, (teamApprovals) => teamApprovals.requestApproval, {
        cascade: true
    }),
    tslib_1.__metadata("design:type", Array)
], RequestApproval.prototype, "teamApprovals", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], RequestApproval.prototype, "status", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], RequestApproval.prototype, "createdBy", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", Number)
], RequestApproval.prototype, "min_count", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], RequestApproval.prototype, "createdByName", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], RequestApproval.prototype, "requestId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty(),
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.requestApproval),
    typeorm_1.JoinTable({
        name: 'tag_request_approval'
    }),
    tslib_1.__metadata("design:type", Array)
], RequestApproval.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.ApprovalPolicyTypesStringEnum }),
    class_validator_1.IsEnum(models_1.ApprovalPolicyTypesStringEnum),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], RequestApproval.prototype, "requestType", void 0);
RequestApproval = tslib_1.__decorate([
    typeorm_1.Entity('request_approval')
], RequestApproval);
exports.RequestApproval = RequestApproval;


/***/ }),

/***/ "./src/app/request-approval/request-approval.module.ts":
/*!*************************************************************!*\
  !*** ./src/app/request-approval/request-approval.module.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestApprovalModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const request_approval_entity_1 = __webpack_require__(/*! ./request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const request_approval_controller_1 = __webpack_require__(/*! ./request-approval.controller */ "./src/app/request-approval/request-approval.controller.ts");
const request_approval_service_1 = __webpack_require__(/*! ./request-approval.service */ "./src/app/request-approval/request-approval.service.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const organization_team_entity_1 = __webpack_require__(/*! ../organization-team/organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const organization_team_service_1 = __webpack_require__(/*! ../organization-team/organization-team.service */ "./src/app/organization-team/organization-team.service.ts");
const role_entity_1 = __webpack_require__(/*! ../role/role.entity */ "./src/app/role/role.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const role_service_1 = __webpack_require__(/*! ../role/role.service */ "./src/app/role/role.service.ts");
const organization_service_1 = __webpack_require__(/*! ../organization/organization.service */ "./src/app/organization/organization.service.ts");
const organization_team_employee_module_1 = __webpack_require__(/*! ../organization-team-employee/organization-team-employee.module */ "./src/app/organization-team-employee/organization-team-employee.module.ts");
const time_off_request_entity_1 = __webpack_require__(/*! ../time-off-request/time-off-request.entity */ "./src/app/time-off-request/time-off-request.entity.ts");
const equipment_sharing_1 = __webpack_require__(/*! ../equipment-sharing */ "./src/app/equipment-sharing/index.ts");
const request_approval_status_handler_1 = __webpack_require__(/*! ./commands/handlers/request-approval.status.handler */ "./src/app/request-approval/commands/handlers/request-approval.status.handler.ts");
const time_off_request_service_1 = __webpack_require__(/*! ../time-off-request/time-off-request.service */ "./src/app/time-off-request/time-off-request.service.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let RequestApprovalModule = class RequestApprovalModule {
};
RequestApprovalModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([
                user_entity_1.User,
                request_approval_entity_1.RequestApproval,
                employee_entity_1.Employee,
                organization_team_entity_1.OrganizationTeam,
                role_entity_1.Role,
                organization_entity_1.Organization,
                time_off_request_entity_1.TimeOffRequest,
                equipment_sharing_1.EquipmentSharing
            ]),
            cqrs_1.CqrsModule,
            organization_team_employee_module_1.OrganizationTeamEmployeeModule,
            tenant_module_1.TenantModule
        ],
        controllers: [request_approval_controller_1.RequestApprovalControler],
        providers: [
            request_approval_service_1.RequestApprovalService,
            user_service_1.UserService,
            organization_team_service_1.OrganizationTeamService,
            employee_service_1.EmployeeService,
            role_service_1.RoleService,
            organization_service_1.OrganizationService,
            request_approval_status_handler_1.RequestApprovalStatusHandler,
            equipment_sharing_1.EquipmentSharingService,
            time_off_request_service_1.TimeOffRequestService
        ],
        exports: [request_approval_service_1.RequestApprovalService]
    })
], RequestApprovalModule);
exports.RequestApprovalModule = RequestApprovalModule;


/***/ }),

/***/ "./src/app/request-approval/request-approval.seed.ts":
/*!***********************************************************!*\
  !*** ./src/app/request-approval/request-approval.seed.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomRequestApproval = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const request_approval_entity_1 = __webpack_require__(/*! ./request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const request_approval_employee_entity_1 = __webpack_require__(/*! ../request-approval-employee/request-approval-employee.entity */ "./src/app/request-approval-employee/request-approval-employee.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const approval_policy_entity_1 = __webpack_require__(/*! ../approval-policy/approval-policy.entity */ "./src/app/approval-policy/approval-policy.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const approvalTypes = [
    'Business Trip',
    'Contract Approval',
    'Payment for Software',
    'Car Rental',
    'Job Referral Award',
    'Best Employee Award',
    'Christmas Bonus',
    'Payment for Hardware',
    'Payment for Service Provider',
    'Loyalty Rewards',
    'Bonus',
    'Holiday Stay',
    'Payment for Electric gadgets',
    'Health Meal'
];
exports.createRandomRequestApproval = async (connection, tenants, tenantEmployeeMap, noOfRequestsPerOrganizations) => {
    var e_1, _a;
    const requestApprovals = [];
    const policies = await connection.manager.find(approval_policy_entity_1.ApprovalPolicy);
    try {
        for (var _b = tslib_1.__asyncValues(tenants || []), _c; _c = await _b.next(), !_c.done;) {
            const tenant = _c.value;
            const organizations = await connection.manager.find(organization_entity_1.Organization, {
                where: [{ tenant: tenant }]
            });
            for (let i = 0; i < noOfRequestsPerOrganizations; i++) {
                const tenantPolicy = faker.random.arrayElement(policies);
                const employees = tenantEmployeeMap.get(tenant);
                const specificEmployees = employees
                    .sort(() => Math.random() - Math.random())
                    .slice(0, 3);
                const requestApproval = new request_approval_entity_1.RequestApproval();
                requestApproval.name = faker.random.arrayElement(approvalTypes);
                requestApproval.status = faker.random.number({ min: 1, max: 3 });
                requestApproval.approvalPolicy = tenantPolicy;
                requestApproval.min_count = faker.random.number({
                    min: 1,
                    max: 100
                });
                requestApproval.createdBy = faker.random.arrayElement(specificEmployees).id;
                const organization = faker.random.arrayElement(organizations);
                const requestApprovalEmployees = [];
                specificEmployees.forEach((employee) => {
                    const raEmployees = new request_approval_employee_entity_1.RequestApprovalEmployee();
                    raEmployees.employeeId = employee.id;
                    raEmployees.employee = employee;
                    raEmployees.tenant = organization;
                    raEmployees.organization = organization;
                    raEmployees.status = requestApproval.status;
                    requestApprovalEmployees.push(raEmployees);
                });
                requestApproval.employeeApprovals = requestApprovalEmployees;
                requestApproval.tenant = tenant;
                (requestApproval.organization = organization),
                    requestApprovals.push(requestApproval);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) await _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    await connection
        .createQueryBuilder()
        .insert()
        .into(request_approval_entity_1.RequestApproval)
        .values(requestApprovals)
        .execute();
};


/***/ }),

/***/ "./src/app/request-approval/request-approval.service.ts":
/*!**************************************************************!*\
  !*** ./src/app/request-approval/request-approval.service.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestApprovalService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const request_approval_entity_1 = __webpack_require__(/*! ./request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const request_approval_employee_entity_1 = __webpack_require__(/*! ../request-approval-employee/request-approval-employee.entity */ "./src/app/request-approval-employee/request-approval-employee.entity.ts");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const organization_team_entity_1 = __webpack_require__(/*! ../organization-team/organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const request_approval_team_entity_1 = __webpack_require__(/*! ../request-approval-team/request-approval-team.entity */ "./src/app/request-approval-team/request-approval-team.entity.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
let RequestApprovalService = class RequestApprovalService extends core_1.CrudService {
    constructor(requestApprovalRepository, employeeRepository, organizationTeamRepository) {
        super(requestApprovalRepository);
        this.requestApprovalRepository = requestApprovalRepository;
        this.employeeRepository = employeeRepository;
        this.organizationTeamRepository = organizationTeamRepository;
    }
    async findAllRequestApprovals(filter, findInput) {
        const query = this.requestApprovalRepository.createQueryBuilder('request_approval');
        query.leftJoinAndSelect(`${query.alias}.approvalPolicy`, 'approvalPolicy');
        if (environment_1.environment.database.type === 'sqlite') {
            query.leftJoinAndSelect('time_off_request', 'time_off_request', '"time_off_request"."id" = "request_approval"."requestId"');
            query.leftJoinAndSelect('equipment_sharing', 'equipment_sharing', '"equipment_sharing"."id" = "request_approval"."requestId"');
        }
        else {
            query.leftJoinAndSelect('time_off_request', 'time_off_request', '"time_off_request"."id"::"varchar" = "request_approval"."requestId"');
            query.leftJoinAndSelect('equipment_sharing', 'equipment_sharing', '"equipment_sharing"."id"::"varchar" = "request_approval"."requestId"');
        }
        if (filter.relations && filter.relations.length > 0) {
            filter.relations.forEach((item) => {
                query.leftJoinAndSelect(`request_approval.${item}`, item);
            });
        }
        const { organizationId, tenantId } = findInput;
        const [items, total] = await query
            .where(new typeorm_2.Brackets((sqb) => {
            sqb.where('approvalPolicy.organizationId =:organizationId', {
                organizationId
            }).andWhere('approvalPolicy.tenantId =:tenantId', {
                tenantId
            });
        }))
            .orWhere(new typeorm_2.Brackets((sqb) => {
            sqb.where('time_off_request.organizationId =:organizationId', {
                organizationId
            }).andWhere('time_off_request.tenantId =:tenantId', {
                tenantId
            });
        }))
            .orWhere(new typeorm_2.Brackets((sqb) => {
            sqb.where('equipment_sharing.organizationId =:organizationId', {
                organizationId
            }).andWhere('equipment_sharing.tenantId =:tenantId', {
                tenantId
            });
        }))
            .getManyAndCount();
        return { items, total };
    }
    async findRequestApprovalsByEmployeeId(id, relations, findInput) {
        try {
            const { organizationId, tenantId } = findInput;
            const result = await this.requestApprovalRepository.find({
                where: {
                    createdBy: id,
                    organizationId,
                    tenantId
                }
            });
            let requestApproval = [];
            const employee = await this.employeeRepository.findOne(id, {
                relations
            });
            if (employee &&
                employee.requestApprovals &&
                employee.requestApprovals.length > 0) {
                requestApproval = [
                    ...requestApproval,
                    ...employee.requestApprovals
                ];
            }
            for (const request of requestApproval) {
                const emp = await this.requestApprovalRepository.findOne(request.requestApprovalId, {
                    relations: [
                        'approvalPolicy',
                        'employeeApprovals',
                        'teamApprovals',
                        'tags'
                    ]
                });
                result.push(emp);
            }
            return { items: result, total: result.length };
        }
        catch (error) {
            throw new common_1.BadRequestException(error);
        }
    }
    async createRequestApproval(entity) {
        try {
            const requestApproval = new request_approval_entity_1.RequestApproval();
            requestApproval.status = models_1.RequestApprovalStatusTypesEnum.REQUESTED;
            requestApproval.approvalPolicyId = entity.approvalPolicyId;
            requestApproval.createdBy = context_1.RequestContext.currentUser().id;
            requestApproval.createdByName = context_1.RequestContext.currentUser().name;
            requestApproval.name = entity.name;
            requestApproval.min_count = entity.min_count;
            requestApproval.tags = entity.tags;
            requestApproval.organizationId = entity.organizationId;
            requestApproval.tenantId = entity.tenantId;
            if (entity.employeeApprovals) {
                const employees = await this.employeeRepository.findByIds(entity.employeeApprovals, {
                    relations: ['user']
                });
                const requestApprovalEmployees = [];
                employees.forEach((employee) => {
                    const raEmployees = new request_approval_employee_entity_1.RequestApprovalEmployee();
                    raEmployees.employeeId = employee.id;
                    raEmployees.employee = employee;
                    raEmployees.organizationId = entity.organizationId;
                    raEmployees.tenantId = entity.tenantId;
                    raEmployees.status =
                        models_1.RequestApprovalStatusTypesEnum.REQUESTED;
                    requestApprovalEmployees.push(raEmployees);
                });
                requestApproval.employeeApprovals = requestApprovalEmployees;
            }
            if (entity.teams) {
                const teams = await this.organizationTeamRepository.findByIds(entity.teams);
                const requestApprovalTeams = [];
                teams.forEach((team) => {
                    const raTeam = new request_approval_team_entity_1.RequestApprovalTeam();
                    raTeam.teamId = team.id;
                    raTeam.team = team;
                    raTeam.status = models_1.RequestApprovalStatusTypesEnum.REQUESTED;
                    raTeam.organizationId = entity.organizationId;
                    raTeam.tenantId = entity.tenantId;
                    requestApprovalTeams.push(raTeam);
                });
                requestApproval.teamApprovals = requestApprovalTeams;
            }
            return this.requestApprovalRepository.save(requestApproval);
        }
        catch (err) {
            throw new common_1.BadRequestException(err);
        }
    }
    async updateRequestApproval(id, entity) {
        try {
            let employees;
            let teams;
            const requestApproval = await this.requestApprovalRepository.findOne(id);
            requestApproval.name = entity.name;
            requestApproval.status = models_1.RequestApprovalStatusTypesEnum.REQUESTED;
            requestApproval.approvalPolicyId = entity.approvalPolicyId;
            requestApproval.min_count = entity.min_count;
            requestApproval.tags = entity.tags;
            requestApproval.organizationId = entity.organizationId;
            requestApproval.tenantId = entity.tenantId;
            await this.repository
                .createQueryBuilder()
                .delete()
                .from(request_approval_employee_entity_1.RequestApprovalEmployee)
                .where('requestApprovalId = :id', { id: id })
                .execute();
            await this.repository
                .createQueryBuilder()
                .delete()
                .from(request_approval_team_entity_1.RequestApprovalTeam)
                .where('requestApprovalId = :id', { id: id })
                .execute();
            if (entity.employeeApprovals) {
                employees = await this.employeeRepository.findByIds(entity.employeeApprovals, {
                    relations: ['user']
                });
                const requestApprovalEmployees = [];
                employees.forEach((employee) => {
                    const raEmployees = new request_approval_employee_entity_1.RequestApprovalEmployee();
                    raEmployees.employeeId = employee.id;
                    raEmployees.employee = employee;
                    raEmployees.organizationId = entity.organizationId;
                    raEmployees.tenantId = entity.tenantId;
                    raEmployees.status =
                        models_1.RequestApprovalStatusTypesEnum.REQUESTED;
                    requestApprovalEmployees.push(raEmployees);
                });
                requestApproval.employeeApprovals = requestApprovalEmployees;
            }
            if (entity.teams) {
                teams = await this.organizationTeamRepository.findByIds(entity.teams);
                const requestApprovalTeams = [];
                teams.forEach((team) => {
                    const raTeam = new request_approval_team_entity_1.RequestApprovalTeam();
                    raTeam.teamId = team.id;
                    raTeam.team = team;
                    raTeam.status = models_1.RequestApprovalStatusTypesEnum.REQUESTED;
                    raTeam.organizationId = entity.organizationId;
                    raTeam.tenantId = entity.tenantId;
                    requestApprovalTeams.push(raTeam);
                });
                requestApproval.teamApprovals = requestApprovalTeams;
            }
            return this.requestApprovalRepository.save(requestApproval);
        }
        catch (err) {
            throw new common_1.BadRequestException(err);
        }
    }
    async updateStatusRequestApprovalByAdmin(id, status) {
        try {
            const requestApproval = await this.requestApprovalRepository.findOne(id, {
                relations: ['approvalPolicy']
            });
            if (!requestApproval) {
                throw new common_1.NotFoundException('Request Approval not found');
            }
            if (requestApproval.status ===
                models_1.RequestApprovalStatusTypesEnum.APPROVED ||
                requestApproval.status ===
                    models_1.RequestApprovalStatusTypesEnum.REFUSED) {
                throw new common_1.ConflictException('Request Approval is Conflict');
            }
            requestApproval.status = status;
            return this.requestApprovalRepository.save(requestApproval);
        }
        catch (err) {
            throw err;
        }
    }
    async updateStatusRequestApprovalByEmployeeOrTeam(id, status) {
        try {
            let minCount = 0;
            const employeeId = context_1.RequestContext.currentUser().employeeId;
            const requestApproval = await this.requestApprovalRepository.findOne(id, {
                relations: ['employeeApprovals', 'teamApprovals']
            });
            if (!requestApproval) {
                throw new common_1.NotFoundException('Request Approval not found');
            }
            if (requestApproval.status ===
                models_1.RequestApprovalStatusTypesEnum.APPROVED ||
                requestApproval.status ===
                    models_1.RequestApprovalStatusTypesEnum.REFUSED) {
                throw new common_1.ConflictException('Request Approval is Conflict');
            }
            if (requestApproval.employeeApprovals &&
                requestApproval.employeeApprovals.length > 0) {
                requestApproval.employeeApprovals.forEach((req) => {
                    if (req.employeeId === employeeId) {
                        req.status = status;
                    }
                    if (req.status === models_1.RequestApprovalStatusTypesEnum.APPROVED) {
                        minCount++;
                    }
                });
            }
            if (status === models_1.RequestApprovalStatusTypesEnum.REFUSED) {
                requestApproval.status = models_1.RequestApprovalStatusTypesEnum.REFUSED;
            }
            else if (minCount >= requestApproval.min_count) {
                requestApproval.status =
                    models_1.RequestApprovalStatusTypesEnum.APPROVED;
            }
            return this.requestApprovalRepository.save(requestApproval);
        }
        catch (err) {
            throw err;
        }
    }
};
RequestApprovalService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(request_approval_entity_1.RequestApproval)),
    tslib_1.__param(1, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__param(2, typeorm_1.InjectRepository(organization_team_entity_1.OrganizationTeam)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object])
], RequestApprovalService);
exports.RequestApprovalService = RequestApprovalService;


/***/ }),

/***/ "./src/app/role-permissions/default-role-permissions.ts":
/*!**************************************************************!*\
  !*** ./src/app/role-permissions/default-role-permissions.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_ROLE_PERMISSIONS = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
exports.DEFAULT_ROLE_PERMISSIONS = [
    {
        role: models_1.RolesEnum.SUPER_ADMIN,
        defaultEnabledPermissions: [
            models_1.PermissionsEnum.ADMIN_DASHBOARD_VIEW,
            models_1.PermissionsEnum.ORG_PAYMENT_VIEW,
            models_1.PermissionsEnum.ORG_PAYMENT_ADD_EDIT,
            models_1.PermissionsEnum.ORG_INCOMES_VIEW,
            models_1.PermissionsEnum.ORG_INCOMES_EDIT,
            models_1.PermissionsEnum.ORG_EXPENSES_VIEW,
            models_1.PermissionsEnum.ORG_EXPENSES_EDIT,
            models_1.PermissionsEnum.ORG_PROPOSALS_VIEW,
            models_1.PermissionsEnum.EMPLOYEE_EXPENSES_VIEW,
            models_1.PermissionsEnum.EMPLOYEE_EXPENSES_EDIT,
            models_1.PermissionsEnum.ORG_PROPOSALS_EDIT,
            models_1.PermissionsEnum.ORG_PROPOSAL_TEMPLATES_VIEW,
            models_1.PermissionsEnum.ORG_PROPOSAL_TEMPLATES_EDIT,
            models_1.PermissionsEnum.ORG_EMPLOYEES_VIEW,
            models_1.PermissionsEnum.ORG_EMPLOYEES_EDIT,
            models_1.PermissionsEnum.ORG_CANDIDATES_VIEW,
            models_1.PermissionsEnum.ORG_CANDIDATES_EDIT,
            models_1.PermissionsEnum.ORG_CANDIDATES_TASK_EDIT,
            models_1.PermissionsEnum.ORG_CANDIDATES_INTERVIEW_EDIT,
            models_1.PermissionsEnum.ORG_CANDIDATES_INTERVIEWERS_EDIT,
            models_1.PermissionsEnum.ORG_INVENTORY_PRODUCT_EDIT,
            models_1.PermissionsEnum.ORG_CANDIDATES_DOCUMENTS_VIEW,
            models_1.PermissionsEnum.ORG_HELP_CENTER_EDIT,
            models_1.PermissionsEnum.ORG_USERS_VIEW,
            models_1.PermissionsEnum.ORG_USERS_EDIT,
            models_1.PermissionsEnum.ALL_ORG_VIEW,
            models_1.PermissionsEnum.ALL_ORG_EDIT,
            models_1.PermissionsEnum.POLICY_EDIT,
            models_1.PermissionsEnum.POLICY_VIEW,
            models_1.PermissionsEnum.APPROVAL_POLICY_EDIT,
            models_1.PermissionsEnum.APPROVAL_POLICY_VIEW,
            models_1.PermissionsEnum.REQUEST_APPROVAL_EDIT,
            models_1.PermissionsEnum.REQUEST_APPROVAL_VIEW,
            models_1.PermissionsEnum.ORG_TIME_OFF_VIEW,
            models_1.PermissionsEnum.TIME_OFF_EDIT,
            models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE,
            models_1.PermissionsEnum.CHANGE_SELECTED_CANDIDATE,
            models_1.PermissionsEnum.CHANGE_SELECTED_ORGANIZATION,
            models_1.PermissionsEnum.CHANGE_ROLES_PERMISSIONS,
            models_1.PermissionsEnum.ORG_INVITE_VIEW,
            models_1.PermissionsEnum.ORG_INVITE_EDIT,
            models_1.PermissionsEnum.ACCESS_PRIVATE_PROJECTS,
            models_1.PermissionsEnum.TIMESHEET_EDIT_TIME,
            models_1.PermissionsEnum.SUPER_ADMIN_EDIT,
            models_1.PermissionsEnum.PUBLIC_PAGE_EDIT,
            models_1.PermissionsEnum.INVOICES_VIEW,
            models_1.PermissionsEnum.INVOICES_EDIT,
            models_1.PermissionsEnum.ESTIMATES_VIEW,
            models_1.PermissionsEnum.ESTIMATES_EDIT,
            models_1.PermissionsEnum.ORG_CANDIDATES_FEEDBACK_EDIT,
            models_1.PermissionsEnum.ORG_TAGS_EDIT,
            models_1.PermissionsEnum.VIEW_ALL_EMAILS,
            models_1.PermissionsEnum.VIEW_ALL_EMAIL_TEMPLATES,
            models_1.PermissionsEnum.VIEW_SALES_PIPELINES,
            models_1.PermissionsEnum.EDIT_SALES_PIPELINES,
            models_1.PermissionsEnum.CAN_APPROVE_TIMESHEET,
            models_1.PermissionsEnum.ORG_SPRINT_EDIT,
            models_1.PermissionsEnum.ORG_SPRINT_VIEW,
            models_1.PermissionsEnum.ORG_PROJECT_EDIT,
            models_1.PermissionsEnum.ORG_CONTACT_EDIT,
            models_1.PermissionsEnum.ORG_CONTACT_VIEW,
            models_1.PermissionsEnum.ORG_TEAM_EDIT,
            models_1.PermissionsEnum.ORG_CONTRACT_EDIT,
            models_1.PermissionsEnum.EVENT_TYPES_VIEW,
            models_1.PermissionsEnum.TENANT_ADD_EXISTING_USER,
            models_1.PermissionsEnum.INTEGRATION_VIEW,
            models_1.PermissionsEnum.IMPORT_EXPORT_VIEW,
            models_1.PermissionsEnum.FILE_STORAGE_VIEW,
            models_1.PermissionsEnum.PAYMENT_GATEWAY_VIEW,
            models_1.PermissionsEnum.SMS_GATEWAY_VIEW,
            models_1.PermissionsEnum.CUSTOM_SMTP_VIEW,
            models_1.PermissionsEnum.ORG_JOB_EMPLOYEE_VIEW,
            models_1.PermissionsEnum.ORG_JOB_MATCHING_VIEW
        ]
    },
    {
        role: models_1.RolesEnum.ADMIN,
        defaultEnabledPermissions: [
            models_1.PermissionsEnum.ADMIN_DASHBOARD_VIEW,
            models_1.PermissionsEnum.ORG_PAYMENT_VIEW,
            models_1.PermissionsEnum.ORG_PAYMENT_ADD_EDIT,
            models_1.PermissionsEnum.ORG_INCOMES_VIEW,
            models_1.PermissionsEnum.ORG_INCOMES_EDIT,
            models_1.PermissionsEnum.ORG_EXPENSES_VIEW,
            models_1.PermissionsEnum.ORG_EXPENSES_EDIT,
            models_1.PermissionsEnum.EMPLOYEE_EXPENSES_VIEW,
            models_1.PermissionsEnum.EMPLOYEE_EXPENSES_EDIT,
            models_1.PermissionsEnum.ORG_PROPOSALS_VIEW,
            models_1.PermissionsEnum.ORG_PROPOSALS_EDIT,
            models_1.PermissionsEnum.ORG_PROPOSAL_TEMPLATES_VIEW,
            models_1.PermissionsEnum.ORG_PROPOSAL_TEMPLATES_EDIT,
            models_1.PermissionsEnum.ORG_EMPLOYEES_VIEW,
            models_1.PermissionsEnum.ORG_EMPLOYEES_EDIT,
            models_1.PermissionsEnum.ORG_CANDIDATES_VIEW,
            models_1.PermissionsEnum.ORG_CANDIDATES_EDIT,
            models_1.PermissionsEnum.ORG_CANDIDATES_TASK_EDIT,
            models_1.PermissionsEnum.ORG_CANDIDATES_INTERVIEW_EDIT,
            models_1.PermissionsEnum.ORG_CANDIDATES_INTERVIEWERS_EDIT,
            models_1.PermissionsEnum.ORG_INVENTORY_PRODUCT_EDIT,
            models_1.PermissionsEnum.ORG_CANDIDATES_DOCUMENTS_VIEW,
            models_1.PermissionsEnum.ORG_HELP_CENTER_EDIT,
            models_1.PermissionsEnum.ORG_USERS_VIEW,
            models_1.PermissionsEnum.ORG_USERS_EDIT,
            models_1.PermissionsEnum.ALL_ORG_VIEW,
            models_1.PermissionsEnum.ALL_ORG_EDIT,
            models_1.PermissionsEnum.POLICY_EDIT,
            models_1.PermissionsEnum.POLICY_VIEW,
            models_1.PermissionsEnum.APPROVAL_POLICY_EDIT,
            models_1.PermissionsEnum.APPROVAL_POLICY_VIEW,
            models_1.PermissionsEnum.REQUEST_APPROVAL_EDIT,
            models_1.PermissionsEnum.ORG_TIME_OFF_VIEW,
            models_1.PermissionsEnum.TIME_OFF_EDIT,
            models_1.PermissionsEnum.REQUEST_APPROVAL_VIEW,
            models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE,
            models_1.PermissionsEnum.CHANGE_SELECTED_CANDIDATE,
            models_1.PermissionsEnum.CHANGE_SELECTED_ORGANIZATION,
            models_1.PermissionsEnum.CHANGE_ROLES_PERMISSIONS,
            models_1.PermissionsEnum.ORG_INVITE_VIEW,
            models_1.PermissionsEnum.ORG_INVITE_EDIT,
            models_1.PermissionsEnum.ACCESS_PRIVATE_PROJECTS,
            models_1.PermissionsEnum.TIMESHEET_EDIT_TIME,
            models_1.PermissionsEnum.PUBLIC_PAGE_EDIT,
            models_1.PermissionsEnum.INVOICES_VIEW,
            models_1.PermissionsEnum.INVOICES_EDIT,
            models_1.PermissionsEnum.ESTIMATES_VIEW,
            models_1.PermissionsEnum.ESTIMATES_EDIT,
            models_1.PermissionsEnum.ORG_CANDIDATES_FEEDBACK_EDIT,
            models_1.PermissionsEnum.ORG_TAGS_EDIT,
            models_1.PermissionsEnum.VIEW_ALL_EMAILS,
            models_1.PermissionsEnum.VIEW_ALL_EMAIL_TEMPLATES,
            models_1.PermissionsEnum.VIEW_SALES_PIPELINES,
            models_1.PermissionsEnum.EDIT_SALES_PIPELINES,
            models_1.PermissionsEnum.CAN_APPROVE_TIMESHEET,
            models_1.PermissionsEnum.ORG_SPRINT_EDIT,
            models_1.PermissionsEnum.ORG_SPRINT_VIEW,
            models_1.PermissionsEnum.ORG_PROJECT_EDIT,
            models_1.PermissionsEnum.ORG_CONTACT_EDIT,
            models_1.PermissionsEnum.ORG_CONTACT_VIEW,
            models_1.PermissionsEnum.ORG_TEAM_EDIT,
            models_1.PermissionsEnum.ORG_CONTRACT_EDIT,
            models_1.PermissionsEnum.EVENT_TYPES_VIEW,
            models_1.PermissionsEnum.TENANT_ADD_EXISTING_USER,
            models_1.PermissionsEnum.INTEGRATION_VIEW,
            models_1.PermissionsEnum.IMPORT_EXPORT_VIEW,
            models_1.PermissionsEnum.FILE_STORAGE_VIEW,
            models_1.PermissionsEnum.PAYMENT_GATEWAY_VIEW,
            models_1.PermissionsEnum.SMS_GATEWAY_VIEW,
            models_1.PermissionsEnum.CUSTOM_SMTP_VIEW,
            models_1.PermissionsEnum.ORG_JOB_EMPLOYEE_VIEW,
            models_1.PermissionsEnum.ORG_JOB_MATCHING_VIEW
        ]
    },
    {
        role: models_1.RolesEnum.DATA_ENTRY,
        defaultEnabledPermissions: [
            models_1.PermissionsEnum.ORG_PAYMENT_VIEW,
            models_1.PermissionsEnum.ORG_PAYMENT_ADD_EDIT,
            models_1.PermissionsEnum.ORG_EXPENSES_EDIT,
            models_1.PermissionsEnum.ORG_EXPENSES_VIEW,
            models_1.PermissionsEnum.ORG_INCOMES_EDIT,
            models_1.PermissionsEnum.ORG_INCOMES_VIEW,
            models_1.PermissionsEnum.CHANGE_SELECTED_ORGANIZATION,
            models_1.PermissionsEnum.INVOICES_VIEW,
            models_1.PermissionsEnum.INVOICES_EDIT,
            models_1.PermissionsEnum.ESTIMATES_VIEW,
            models_1.PermissionsEnum.ESTIMATES_EDIT,
            models_1.PermissionsEnum.ORG_CANDIDATES_TASK_EDIT,
            models_1.PermissionsEnum.ORG_CANDIDATES_INTERVIEW_EDIT,
            models_1.PermissionsEnum.ORG_CANDIDATES_INTERVIEWERS_EDIT,
            models_1.PermissionsEnum.ORG_INVENTORY_PRODUCT_EDIT,
            models_1.PermissionsEnum.ORG_HELP_CENTER_EDIT
        ]
    },
    {
        role: models_1.RolesEnum.EMPLOYEE,
        defaultEnabledPermissions: [
            models_1.PermissionsEnum.ADMIN_DASHBOARD_VIEW,
            models_1.PermissionsEnum.ORG_PROPOSALS_VIEW,
            models_1.PermissionsEnum.ORG_PROPOSALS_EDIT,
            models_1.PermissionsEnum.ORG_PROPOSAL_TEMPLATES_VIEW,
            models_1.PermissionsEnum.ORG_PROPOSAL_TEMPLATES_EDIT,
            models_1.PermissionsEnum.ORG_TIME_OFF_VIEW,
            models_1.PermissionsEnum.APPROVAL_POLICY_EDIT,
            models_1.PermissionsEnum.APPROVAL_POLICY_VIEW,
            models_1.PermissionsEnum.REQUEST_APPROVAL_EDIT,
            models_1.PermissionsEnum.REQUEST_APPROVAL_VIEW,
            models_1.PermissionsEnum.ORG_CANDIDATES_TASK_EDIT,
            models_1.PermissionsEnum.EVENT_TYPES_VIEW,
            models_1.PermissionsEnum.TIME_TRACKER,
            models_1.PermissionsEnum.INVOICES_VIEW,
            models_1.PermissionsEnum.INVOICES_EDIT,
            models_1.PermissionsEnum.ESTIMATES_VIEW,
            models_1.PermissionsEnum.ESTIMATES_EDIT,
            models_1.PermissionsEnum.ORG_CONTACT_VIEW,
            models_1.PermissionsEnum.EMPLOYEE_EXPENSES_VIEW,
            models_1.PermissionsEnum.EMPLOYEE_EXPENSES_EDIT
        ]
    },
    {
        role: models_1.RolesEnum.CANDIDATE,
        defaultEnabledPermissions: [
            models_1.PermissionsEnum.ADMIN_DASHBOARD_VIEW,
            models_1.PermissionsEnum.ORG_PROPOSALS_VIEW,
            models_1.PermissionsEnum.ORG_TIME_OFF_VIEW,
            models_1.PermissionsEnum.ORG_TAGS_EDIT
        ]
    }
];


/***/ }),

/***/ "./src/app/role-permissions/role-permissions.controller.ts":
/*!*****************************************************************!*\
  !*** ./src/app/role-permissions/role-permissions.controller.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RolePermissionsController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const role_permissions_entity_1 = __webpack_require__(/*! ./role-permissions.entity */ "./src/app/role-permissions/role-permissions.entity.ts");
const role_permissions_service_1 = __webpack_require__(/*! ./role-permissions.service */ "./src/app/role-permissions/role-permissions.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let RolePermissionsController = class RolePermissionsController extends crud_controller_1.CrudController {
    constructor(rolePermissionsService) {
        super(rolePermissionsService);
        this.rolePermissionsService = rolePermissionsService;
    }
    async findRolePermission(data) {
        const { findInput } = JSON.parse(data);
        return this.rolePermissionsService.findAll({ where: findInput });
    }
    async create(entity, ...options) {
        return this.rolePermissionsService.create(entity);
    }
    async update(id, entity, ...options) {
        return this.rolePermissionsService.update(id, entity);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find role permissions.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found role permissions.',
        type: role_permissions_entity_1.RolePermissions
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], RolePermissionsController.prototype, "findRolePermission", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.CHANGE_ROLES_PERMISSIONS),
    common_1.HttpCode(common_1.HttpStatus.CREATED),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof role_permissions_entity_1.RolePermissions !== "undefined" && role_permissions_entity_1.RolePermissions) === "function" ? _b : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], RolePermissionsController.prototype, "create", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.CHANGE_ROLES_PERMISSIONS),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_d = typeof role_permissions_entity_1.RolePermissions !== "undefined" && role_permissions_entity_1.RolePermissions) === "function" ? _d : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], RolePermissionsController.prototype, "update", null);
RolePermissionsController = tslib_1.__decorate([
    swagger_1.ApiTags('Role'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_f = typeof role_permissions_service_1.RolePermissionsService !== "undefined" && role_permissions_service_1.RolePermissionsService) === "function" ? _f : Object])
], RolePermissionsController);
exports.RolePermissionsController = RolePermissionsController;


/***/ }),

/***/ "./src/app/role-permissions/role-permissions.entity.ts":
/*!*************************************************************!*\
  !*** ./src/app/role-permissions/role-permissions.entity.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RolePermissions = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const role_entity_1 = __webpack_require__(/*! ../role/role.entity */ "./src/app/role/role.entity.ts");
const base_1 = __webpack_require__(/*! ../core/entities/base */ "./src/app/core/entities/base.ts");
const tenant_entity_1 = __webpack_require__(/*! ../tenant/tenant.entity */ "./src/app/tenant/tenant.entity.ts");
let RolePermissions = class RolePermissions extends base_1.Base {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: tenant_entity_1.Tenant, readOnly: true }),
    typeorm_1.ManyToOne((type) => tenant_entity_1.Tenant, { nullable: true, onDelete: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.ITenant !== "undefined" && models_1.ITenant) === "function" ? _a : Object)
], RolePermissions.prototype, "tenant", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((t) => t.tenant),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Index(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], RolePermissions.prototype, "tenantId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.RolesEnum }),
    class_validator_1.IsEnum(models_1.RolesEnum),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], RolePermissions.prototype, "roleId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.RolesEnum }),
    class_validator_1.IsEnum(models_1.PermissionsEnum),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], RolePermissions.prototype, "permission", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: Boolean, default: false }),
    typeorm_1.Column({ nullable: true, default: false }),
    tslib_1.__metadata("design:type", Boolean)
], RolePermissions.prototype, "enabled", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToOne((type) => role_entity_1.Role, (role) => role.rolePermissions),
    tslib_1.__metadata("design:type", typeof (_b = typeof role_entity_1.Role !== "undefined" && role_entity_1.Role) === "function" ? _b : Object)
], RolePermissions.prototype, "role", void 0);
RolePermissions = tslib_1.__decorate([
    typeorm_1.Entity('role_permission')
], RolePermissions);
exports.RolePermissions = RolePermissions;


/***/ }),

/***/ "./src/app/role-permissions/role-permissions.module.ts":
/*!*************************************************************!*\
  !*** ./src/app/role-permissions/role-permissions.module.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RolePermissionsModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const role_permissions_controller_1 = __webpack_require__(/*! ./role-permissions.controller */ "./src/app/role-permissions/role-permissions.controller.ts");
const role_permissions_entity_1 = __webpack_require__(/*! ./role-permissions.entity */ "./src/app/role-permissions/role-permissions.entity.ts");
const role_permissions_service_1 = __webpack_require__(/*! ./role-permissions.service */ "./src/app/role-permissions/role-permissions.service.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let RolePermissionsModule = class RolePermissionsModule {
};
RolePermissionsModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            common_1.forwardRef(() => typeorm_1.TypeOrmModule.forFeature([role_permissions_entity_1.RolePermissions, user_entity_1.User])),
            common_1.forwardRef(() => tenant_module_1.TenantModule)
        ],
        controllers: [role_permissions_controller_1.RolePermissionsController],
        providers: [role_permissions_service_1.RolePermissionsService, user_service_1.UserService],
        exports: [role_permissions_service_1.RolePermissionsService]
    })
], RolePermissionsModule);
exports.RolePermissionsModule = RolePermissionsModule;


/***/ }),

/***/ "./src/app/role-permissions/role-permissions.seed.ts":
/*!***********************************************************!*\
  !*** ./src/app/role-permissions/role-permissions.seed.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRolePermissions = void 0;
const default_role_permissions_1 = __webpack_require__(/*! ./default-role-permissions */ "./src/app/role-permissions/default-role-permissions.ts");
const role_permissions_entity_1 = __webpack_require__(/*! ./role-permissions.entity */ "./src/app/role-permissions/role-permissions.entity.ts");
exports.createRolePermissions = async (connection, roles, tenants) => {
    const rolePermissions = [];
    tenants.forEach((t) => {
        default_role_permissions_1.DEFAULT_ROLE_PERMISSIONS.forEach((r) => {
            const role = roles.find((dbRole) => dbRole.name === r.role && dbRole.tenant.name === t.name);
            if (role) {
                r.defaultEnabledPermissions.forEach((p) => {
                    const rolePermission = new role_permissions_entity_1.RolePermissions();
                    rolePermission.roleId = role.id;
                    rolePermission.permission = p;
                    rolePermission.enabled = true;
                    rolePermission.tenant = role.tenant;
                    rolePermissions.push(rolePermission);
                });
            }
        });
    });
    return await connection.manager.save(rolePermissions);
};


/***/ }),

/***/ "./src/app/role-permissions/role-permissions.service.ts":
/*!**************************************************************!*\
  !*** ./src/app/role-permissions/role-permissions.service.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RolePermissionsService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
const role_permissions_entity_1 = __webpack_require__(/*! ./role-permissions.entity */ "./src/app/role-permissions/role-permissions.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const default_role_permissions_1 = __webpack_require__(/*! ./default-role-permissions */ "./src/app/role-permissions/default-role-permissions.ts");
let RolePermissionsService = class RolePermissionsService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(rolePermissionsRepository) {
        super(rolePermissionsRepository);
        this.rolePermissionsRepository = rolePermissionsRepository;
    }
    async update(id, partialEntity, ...options) {
        try {
            if (partialEntity['hash']) {
                const hashPassword = await this.getPasswordHash(partialEntity['hash']);
                partialEntity['hash'] = hashPassword;
            }
            const { role } = await this.repository.findOne({
                where: { id },
                relations: ['role']
            });
            if (role.name === models_1.RolesEnum.SUPER_ADMIN)
                throw new Error('Cannot modify Permissions for Super Admin');
            return await this.repository.update(id, partialEntity);
        }
        catch (err) {
            throw new common_1.BadRequestException(err.message);
        }
    }
    async updateRoles(tenant, role) {
        const { defaultEnabledPermissions } = default_role_permissions_1.DEFAULT_ROLE_PERMISSIONS.find((defaultRole) => role.name === defaultRole.role);
        defaultEnabledPermissions.forEach((p) => {
            const rolePermission = new role_permissions_entity_1.RolePermissions();
            rolePermission.roleId = role.id;
            rolePermission.permission = p;
            rolePermission.enabled = true;
            rolePermission.tenant = tenant;
            this.create(rolePermission);
        });
    }
    async updateRolesAndPermissions(tenants, roles) {
        var e_1, _a, e_2, _b;
        if (!tenants.length) {
            return;
        }
        const rolesPermissions = [];
        try {
            for (var tenants_1 = tslib_1.__asyncValues(tenants), tenants_1_1; tenants_1_1 = await tenants_1.next(), !tenants_1_1.done;) {
                const tenant = tenants_1_1.value;
                try {
                    for (var roles_1 = (e_2 = void 0, tslib_1.__asyncValues(roles)), roles_1_1; roles_1_1 = await roles_1.next(), !roles_1_1.done;) {
                        const role = roles_1_1.value;
                        const defaultPermissions = default_role_permissions_1.DEFAULT_ROLE_PERMISSIONS.find((defaultRole) => role.name === defaultRole.role);
                        if (defaultPermissions &&
                            defaultPermissions['defaultEnabledPermissions']) {
                            const { defaultEnabledPermissions } = defaultPermissions;
                            defaultEnabledPermissions.forEach((p) => {
                                const rolePermission = new role_permissions_entity_1.RolePermissions();
                                rolePermission.roleId = role.id;
                                rolePermission.permission = p;
                                rolePermission.enabled = true;
                                rolePermission.tenant = tenant;
                                rolesPermissions.push(rolePermission);
                            });
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (roles_1_1 && !roles_1_1.done && (_b = roles_1.return)) await _b.call(roles_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (tenants_1_1 && !tenants_1_1.done && (_a = tenants_1.return)) await _a.call(tenants_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        await this.rolePermissionsRepository.save(rolesPermissions);
        return rolesPermissions;
    }
};
RolePermissionsService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(role_permissions_entity_1.RolePermissions)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], RolePermissionsService);
exports.RolePermissionsService = RolePermissionsService;


/***/ }),

/***/ "./src/app/role/commands/handlers/index.ts":
/*!*************************************************!*\
  !*** ./src/app/role/commands/handlers/index.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const tenant_role_bulk_create_handler_1 = __webpack_require__(/*! ./tenant-role-bulk-create.handler */ "./src/app/role/commands/handlers/tenant-role-bulk-create.handler.ts");
exports.CommandHandlers = [tenant_role_bulk_create_handler_1.TenantRoleBulkCreateHandler];


/***/ }),

/***/ "./src/app/role/commands/handlers/tenant-role-bulk-create.handler.ts":
/*!***************************************************************************!*\
  !*** ./src/app/role/commands/handlers/tenant-role-bulk-create.handler.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantRoleBulkCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const role_permissions_service_1 = __webpack_require__(/*! ../../../role-permissions/role-permissions.service */ "./src/app/role-permissions/role-permissions.service.ts");
const role_service_1 = __webpack_require__(/*! ../../role.service */ "./src/app/role/role.service.ts");
const tenant_role_bulk_create_command_1 = __webpack_require__(/*! ../tenant-role-bulk-create.command */ "./src/app/role/commands/tenant-role-bulk-create.command.ts");
let TenantRoleBulkCreateHandler = class TenantRoleBulkCreateHandler {
    constructor(roleService, rolePermissionsService) {
        this.roleService = roleService;
        this.rolePermissionsService = rolePermissionsService;
    }
    async execute(command) {
        const { input: tenants } = command;
        const roles = await this.roleService.createBulk(tenants);
        await this.rolePermissionsService.updateRolesAndPermissions(tenants, roles);
        return roles;
    }
};
TenantRoleBulkCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(tenant_role_bulk_create_command_1.TenantRoleBulkCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof role_service_1.RoleService !== "undefined" && role_service_1.RoleService) === "function" ? _a : Object, typeof (_b = typeof role_permissions_service_1.RolePermissionsService !== "undefined" && role_permissions_service_1.RolePermissionsService) === "function" ? _b : Object])
], TenantRoleBulkCreateHandler);
exports.TenantRoleBulkCreateHandler = TenantRoleBulkCreateHandler;


/***/ }),

/***/ "./src/app/role/commands/tenant-role-bulk-create.command.ts":
/*!******************************************************************!*\
  !*** ./src/app/role/commands/tenant-role-bulk-create.command.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantRoleBulkCreateCommand = void 0;
class TenantRoleBulkCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.TenantRoleBulkCreateCommand = TenantRoleBulkCreateCommand;
TenantRoleBulkCreateCommand.type = '[Role] Bulk Create';


/***/ }),

/***/ "./src/app/role/role.controller.ts":
/*!*****************************************!*\
  !*** ./src/app/role/role.controller.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const role_service_1 = __webpack_require__(/*! ./role.service */ "./src/app/role/role.service.ts");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const role_entity_1 = __webpack_require__(/*! ./role.entity */ "./src/app/role/role.entity.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let RoleController = class RoleController extends crud_controller_1.CrudController {
    constructor(roleService) {
        super(roleService);
        this.roleService = roleService;
    }
    async findRole(data) {
        const { findInput } = JSON.parse(data);
        return this.roleService.findOne({ where: findInput });
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find role.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found role',
        type: role_entity_1.Role
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], RoleController.prototype, "findRole", null);
RoleController = tslib_1.__decorate([
    swagger_1.ApiTags('Role'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof role_service_1.RoleService !== "undefined" && role_service_1.RoleService) === "function" ? _b : Object])
], RoleController);
exports.RoleController = RoleController;


/***/ }),

/***/ "./src/app/role/role.entity.ts":
/*!*************************************!*\
  !*** ./src/app/role/role.entity.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Role = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const role_permissions_entity_1 = __webpack_require__(/*! ../role-permissions/role-permissions.entity */ "./src/app/role-permissions/role-permissions.entity.ts");
const tenant_base_1 = __webpack_require__(/*! ../core/entities/tenant-base */ "./src/app/core/entities/tenant-base.ts");
let Role = class Role extends tenant_base_1.TenantBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.RolesEnum }),
    class_validator_1.IsEnum(models_1.RolesEnum),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Role.prototype, "name", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany((type) => role_permissions_entity_1.RolePermissions, (rolePermission) => rolePermission.role),
    tslib_1.__metadata("design:type", Array)
], Role.prototype, "rolePermissions", void 0);
Role = tslib_1.__decorate([
    typeorm_1.Entity('role')
], Role);
exports.Role = Role;


/***/ }),

/***/ "./src/app/role/role.module.ts":
/*!*************************************!*\
  !*** ./src/app/role/role.module.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const role_entity_1 = __webpack_require__(/*! ./role.entity */ "./src/app/role/role.entity.ts");
const role_service_1 = __webpack_require__(/*! ./role.service */ "./src/app/role/role.service.ts");
const role_controller_1 = __webpack_require__(/*! ./role.controller */ "./src/app/role/role.controller.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/role/commands/handlers/index.ts");
let RoleModule = class RoleModule {
};
RoleModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            common_1.forwardRef(() => typeorm_1.TypeOrmModule.forFeature([role_entity_1.Role])),
            common_1.forwardRef(() => tenant_module_1.TenantModule)
        ],
        controllers: [role_controller_1.RoleController],
        providers: [role_service_1.RoleService, ...handlers_1.CommandHandlers],
        exports: [role_service_1.RoleService]
    })
], RoleModule);
exports.RoleModule = RoleModule;


/***/ }),

/***/ "./src/app/role/role.seed.ts":
/*!***********************************!*\
  !*** ./src/app/role/role.seed.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRoles = void 0;
const role_entity_1 = __webpack_require__(/*! ./role.entity */ "./src/app/role/role.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
exports.createRoles = async (connection, tenants) => {
    const roles = [];
    const rolesNames = Object.values(models_1.RolesEnum);
    tenants.forEach((tenant) => {
        for (const name of rolesNames) {
            const role = new role_entity_1.Role();
            role.name = name;
            role.tenant = tenant;
            roles.push(role);
        }
    });
    return await connection.manager.save(roles);
};


/***/ }),

/***/ "./src/app/role/role.service.ts":
/*!**************************************!*\
  !*** ./src/app/role/role.service.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
const role_entity_1 = __webpack_require__(/*! ./role.entity */ "./src/app/role/role.entity.ts");
let RoleService = class RoleService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(roleRepository) {
        super(roleRepository);
        this.roleRepository = roleRepository;
    }
    async createBulk(tenants) {
        const roles = [];
        const rolesNames = Object.values(models_1.RolesEnum);
        tenants.forEach((tenant) => {
            for (const name of rolesNames) {
                const role = new role_entity_1.Role();
                role.name = name;
                role.tenant = tenant;
                roles.push(role);
            }
        });
        await this.roleRepository.save(roles);
        return roles;
    }
};
RoleService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(role_entity_1.Role)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], RoleService);
exports.RoleService = RoleService;


/***/ }),

/***/ "./src/app/shared/decorators/permissions.ts":
/*!**************************************************!*\
  !*** ./src/app/shared/decorators/permissions.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPermissions = exports.Permissions = void 0;
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const request_context_1 = __webpack_require__(/*! ../../core/context/request-context */ "./src/app/core/context/request-context.ts");
const jsonwebtoken_1 = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
exports.Permissions = (...permissions) => common_1.SetMetadata('permissions', permissions);
exports.UserPermissions = common_1.createParamDecorator(() => {
    const token = request_context_1.RequestContext.currentToken();
    const { permissions } = jsonwebtoken_1.verify(token, environment_1.environment.JWT_SECRET);
    return permissions.map((permission) => models_1.PermissionsEnum[permission]);
});


/***/ }),

/***/ "./src/app/shared/decorators/roles.ts":
/*!********************************************!*\
  !*** ./src/app/shared/decorators/roles.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UserRole = exports.Roles = void 0;
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const context_1 = __webpack_require__(/*! ../../core/context */ "./src/app/core/context/index.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const jsonwebtoken_1 = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
exports.Roles = (...roles) => common_1.SetMetadata('roles', roles);
exports.UserRole = common_1.createParamDecorator(() => {
    const token = context_1.RequestContext.currentToken();
    const { role } = jsonwebtoken_1.verify(token, environment_1.environment.JWT_SECRET);
    return models_1.RolesEnum[role];
});


/***/ }),

/***/ "./src/app/shared/guards/auth/organization-permission.guard.ts":
/*!*********************************************************************!*\
  !*** ./src/app/shared/guards/auth/organization-permission.guard.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationPermissionGuard = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! @nestjs/core */ "@nestjs/core");
const jsonwebtoken_1 = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const employee_entity_1 = __webpack_require__(/*! ../../../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
let OrganizationPermissionGuard = class OrganizationPermissionGuard {
    constructor(_reflector, employeeRepository) {
        this._reflector = _reflector;
        this.employeeRepository = employeeRepository;
    }
    async canActivate(context) {
        const permissions = this._reflector.get('permissions', context.getHandler());
        let isAuthorized = false;
        if (!permissions) {
            isAuthorized = true;
        }
        else {
            const token = context_1.RequestContext.currentToken();
            const { employeeId, role } = jsonwebtoken_1.verify(token, environment_1.environment.JWT_SECRET);
            if (environment_1.environment.allowSuperAdminRole === true &&
                role === models_1.RolesEnum.SUPER_ADMIN) {
                return true;
            }
            const employee = await this.employeeRepository.findOne(employeeId, {
                relations: ['organization']
            });
            let organizationId;
            if (employeeId && employee.organization) {
                organizationId = employee.organization.id;
                isAuthorized =
                    permissions.filter((p) => employee.organization[p]).length >
                        0;
            }
            if (!isAuthorized) {
                console.log('Unauthorized access blocked. OrganizationId:', organizationId, ' Permissions Checked:', permissions);
            }
        }
        return isAuthorized;
    }
};
OrganizationPermissionGuard = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(1, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof core_1.Reflector !== "undefined" && core_1.Reflector) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], OrganizationPermissionGuard);
exports.OrganizationPermissionGuard = OrganizationPermissionGuard;


/***/ }),

/***/ "./src/app/shared/guards/auth/permission.guard.ts":
/*!********************************************************!*\
  !*** ./src/app/shared/guards/auth/permission.guard.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionGuard = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! @nestjs/core */ "@nestjs/core");
const jsonwebtoken_1 = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
const user_service_1 = __webpack_require__(/*! ../../../user/user.service */ "./src/app/user/user.service.ts");
let PermissionGuard = class PermissionGuard {
    constructor(_reflector, userService) {
        this._reflector = _reflector;
        this.userService = userService;
    }
    async canActivate(context) {
        const permissions = this._reflector.get('permissions', context.getHandler());
        let isAuthorized = false;
        if (!permissions) {
            isAuthorized = true;
        }
        else {
            const token = context_1.RequestContext.currentToken();
            const { id } = jsonwebtoken_1.verify(token, environment_1.environment.JWT_SECRET);
            const user = await this.userService.findOne(id, {
                relations: ['role', 'role.rolePermissions']
            });
            isAuthorized = !!user.role.rolePermissions.find((p) => permissions.indexOf(p.permission) > -1 && p.enabled);
            if (!isAuthorized) {
                console.log('Unauthorized access blocked. UserId:', id, ' Permissions Checked:', permissions);
            }
        }
        return isAuthorized;
    }
};
PermissionGuard = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof core_1.Reflector !== "undefined" && core_1.Reflector) === "function" ? _a : Object, typeof (_b = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" ? _b : Object])
], PermissionGuard);
exports.PermissionGuard = PermissionGuard;


/***/ }),

/***/ "./src/app/shared/guards/auth/role.guard.ts":
/*!**************************************************!*\
  !*** ./src/app/shared/guards/auth/role.guard.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleGuard = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! @nestjs/core */ "@nestjs/core");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
let RoleGuard = class RoleGuard {
    constructor(_reflector) {
        this._reflector = _reflector;
    }
    async canActivate(context) {
        const roles = this._reflector.get('roles', context.getHandler());
        let isAuthorized = false;
        if (!roles) {
            isAuthorized = true;
        }
        else {
            isAuthorized = context_1.RequestContext.hasRoles(roles);
        }
        return isAuthorized;
    }
};
RoleGuard = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof core_1.Reflector !== "undefined" && core_1.Reflector) === "function" ? _a : Object])
], RoleGuard);
exports.RoleGuard = RoleGuard;


/***/ }),

/***/ "./src/app/shared/guards/auth/tenant-base.guard .ts":
/*!**********************************************************!*\
  !*** ./src/app/shared/guards/auth/tenant-base.guard .ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantBaseGuard = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const core_1 = __webpack_require__(/*! @nestjs/core */ "@nestjs/core");
let TenantBaseGuard = class TenantBaseGuard {
    constructor(reflector) {
        this.reflector = reflector;
    }
    async canActivate(context) {
        const { tenantId: currentTenantId } = context_1.RequestContext.currentUser();
        const request = context.switchToHttp().getRequest();
        const method = request.method;
        const query = request.query;
        let isAuthorized = false;
        if (!currentTenantId) {
            return isAuthorized;
        }
        const headerTenantId = context.switchToHttp().getRequest().headers['tenant-id'];
        const rawHeaders = context.switchToHttp().getRequest().rawHeaders;
        if (headerTenantId &&
            (rawHeaders.includes('tenant-id') ||
                rawHeaders.includes('Tenant-ID'))) {
            isAuthorized = currentTenantId === headerTenantId;
        }
        else {
            const httpMethods = [
                models_1.RequestMethodEnum.GET,
                models_1.RequestMethodEnum.DELETE
            ];
            if (httpMethods.includes(method)) {
                if ('tenantId' in query) {
                    const queryTenantId = query['tenantId'];
                    isAuthorized = currentTenantId === queryTenantId;
                }
                else if (query.hasOwnProperty('data')) {
                    const data = query.data;
                    const isJson = class_validator_1.isJSON(data);
                    if (isJson) {
                        try {
                            const parse = JSON.parse(data);
                            if ('findInput' in parse &&
                                'tenantId' in parse['findInput']) {
                                const queryTenantId = parse['findInput']['tenantId'];
                                isAuthorized =
                                    currentTenantId === queryTenantId;
                            }
                            else {
                                return false;
                            }
                        }
                        catch (e) {
                            console.log('Json Parser Error:', e);
                            return isAuthorized;
                        }
                    }
                }
                else {
                    isAuthorized = false;
                }
            }
            const payloadMethods = [
                models_1.RequestMethodEnum.POST,
                models_1.RequestMethodEnum.PUT,
                models_1.RequestMethodEnum.PATCH
            ];
            if (payloadMethods.includes(method)) {
                const body = request.body;
                let bodyTenantId;
                if ('tenantId' in body) {
                    bodyTenantId = body['tenantId'];
                }
                else if ('tenant' in body) {
                    bodyTenantId = body['tenant']['id'];
                }
                isAuthorized = currentTenantId === bodyTenantId;
            }
        }
        if (!isAuthorized) {
            console.log('Unauthorized access blocked. TenantId:', headerTenantId);
        }
        return isAuthorized;
    }
};
TenantBaseGuard = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof core_1.Reflector !== "undefined" && core_1.Reflector) === "function" ? _a : Object])
], TenantBaseGuard);
exports.TenantBaseGuard = TenantBaseGuard;


/***/ }),

/***/ "./src/app/shared/guards/auth/tenant-permission.guard.ts":
/*!***************************************************************!*\
  !*** ./src/app/shared/guards/auth/tenant-permission.guard.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantPermissionGuard = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! @nestjs/core */ "@nestjs/core");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const tenant_service_1 = __webpack_require__(/*! ../../../tenant/tenant.service */ "./src/app/tenant/tenant.service.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const tenant_base_guard_1 = __webpack_require__(/*! ./tenant-base.guard  */ "./src/app/shared/guards/auth/tenant-base.guard .ts");
let TenantPermissionGuard = class TenantPermissionGuard extends tenant_base_guard_1.TenantBaseGuard {
    constructor(reflector, tenantService) {
        super(reflector);
        this.reflector = reflector;
        this.tenantService = tenantService;
    }
    async canActivate(context) {
        const { tenantId: currentTenantId } = context_1.RequestContext.currentUser();
        let isAuthorized = false;
        if (!currentTenantId) {
            return isAuthorized;
        }
        isAuthorized = await super.canActivate(context);
        if (!isAuthorized) {
            return isAuthorized;
        }
        if (environment_1.environment.allowSuperAdminRole === true) {
            const isSuperAdmin = context_1.RequestContext.hasRoles([
                models_1.RolesEnum.SUPER_ADMIN
            ]);
            if (isSuperAdmin === true) {
                isAuthorized = isSuperAdmin;
                return isAuthorized;
            }
        }
        const permissions = this.reflector.get('permissions', context.getHandler());
        if (permissions) {
            const tenant = await this.tenantService.findOne(currentTenantId, {
                relations: ['rolePermissions']
            });
            isAuthorized = !!tenant.rolePermissions.find((p) => permissions.indexOf(p.permission) > -1 && p.enabled);
        }
        if (!isAuthorized) {
            console.log('Unauthorized access blocked. TenantId:', currentTenantId, ' Permissions Checked:', permissions);
        }
        return isAuthorized;
    }
};
TenantPermissionGuard = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof core_1.Reflector !== "undefined" && core_1.Reflector) === "function" ? _a : Object, typeof (_b = typeof tenant_service_1.TenantService !== "undefined" && tenant_service_1.TenantService) === "function" ? _b : Object])
], TenantPermissionGuard);
exports.TenantPermissionGuard = TenantPermissionGuard;


/***/ }),

/***/ "./src/app/shared/handlers/index.ts":
/*!******************************************!*\
  !*** ./src/app/shared/handlers/index.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./recurring-expense.delete.handler */ "./src/app/shared/handlers/recurring-expense.delete.handler.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./recurring-expense.edit.handler */ "./src/app/shared/handlers/recurring-expense.edit.handler.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./recurring-expense.find-by-month.handler */ "./src/app/shared/handlers/recurring-expense.find-by-month.handler.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./update-entity.by-member.handler */ "./src/app/shared/handlers/update-entity.by-member.handler.ts"), exports);


/***/ }),

/***/ "./src/app/shared/handlers/recurring-expense.delete.handler.ts":
/*!*********************************************************************!*\
  !*** ./src/app/shared/handlers/recurring-expense.delete.handler.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RecurringExpenseDeleteHandler = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const core_1 = __webpack_require__(/*! ../../core */ "./src/app/core/index.ts");
class RecurringExpenseDeleteHandler {
    constructor(crudService) {
        this.crudService = crudService;
    }
    async executeCommand(id, deleteInput) {
        let result;
        switch (deleteInput.deletionType) {
            case models_1.RecurringExpenseDeletionEnum.ALL:
                const deleteId = {
                    id
                };
                result = await this.crudService.delete(deleteId);
                break;
            case models_1.RecurringExpenseDeletionEnum.FUTURE:
                result = await this.updateEndDateToLastMonth(id, deleteInput);
                break;
            case models_1.RecurringExpenseDeletionEnum.CURRENT:
                result = await this.deleteOneMonthOnly(id, deleteInput);
                break;
            default:
                throw new common_1.BadRequestException(`Unsupported deletion type ${deleteInput.deletionType}`);
        }
        return result;
    }
    async deleteOneMonthOnly(id, deleteInput) {
        const originalExpense = await this.crudService.findOne(id);
        const deleteDate = new Date(deleteInput.year, deleteInput.month);
        const deleteId = {
            id
        };
        if (deleteDate.getTime() === originalExpense.startDate.getTime() &&
            originalExpense.endDate &&
            originalExpense.endDate.getTime() === deleteDate.getTime()) {
            return await this.crudService.delete(deleteId);
        }
        else if (deleteDate.getTime() === originalExpense.startDate.getTime()) {
            await this.crudService.delete(deleteId);
            return await this.createExpenseFromNextMonth(deleteInput, originalExpense);
        }
        else {
            await this.updateEndDateToLastMonth(id, deleteInput);
            return await this.createExpenseFromNextMonth(deleteInput, originalExpense);
        }
    }
    async updateEndDateToLastMonth(id, deleteInput) {
        const endMonth = deleteInput.month > 0 ? deleteInput.month - 1 : 11;
        const endYear = deleteInput.month > 0 ? deleteInput.year : deleteInput.year - 1;
        const endDay = core_1.getLastDayOfMonth(endYear, endMonth);
        const updateOptions = {
            endDay,
            endMonth,
            endYear,
            endDate: new Date(endYear, endMonth, endDay)
        };
        return await this.crudService.update(id, updateOptions);
    }
    async createExpenseFromNextMonth(deleteInput, originalExpense) {
        const nextStartDate = new Date(deleteInput.year, deleteInput.month + 1, 1);
        if (!originalExpense.endDate ||
            nextStartDate.getTime() <= originalExpense.endDate.getTime()) {
            const createOptions = {
                startDay: 1,
                startMonth: deleteInput.month + 1,
                startYear: deleteInput.year,
                startDate: nextStartDate,
                endDay: core_1.getLastDayOfMonth(originalExpense.endYear, originalExpense.endMonth),
                endMonth: originalExpense.endMonth,
                endYear: originalExpense.endYear,
                endDate: originalExpense.endDate,
                categoryName: originalExpense.categoryName,
                currency: originalExpense.currency,
                value: originalExpense.value,
                parentRecurringExpenseId: originalExpense.parentRecurringExpenseId
            };
            if (originalExpense.organizationId) {
                createOptions.organizationId = originalExpense.organizationId;
                createOptions.splitExpense = originalExpense.splitExpense;
            }
            else if (originalExpense.employeeId) {
                createOptions.employeeId = originalExpense.employeeId;
            }
            return await this.crudService.create(createOptions);
        }
        return;
    }
}
exports.RecurringExpenseDeleteHandler = RecurringExpenseDeleteHandler;


/***/ }),

/***/ "./src/app/shared/handlers/recurring-expense.edit.handler.ts":
/*!*******************************************************************!*\
  !*** ./src/app/shared/handlers/recurring-expense.edit.handler.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RecurringExpenseEditHandler = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const core_1 = __webpack_require__(/*! ../../core */ "./src/app/core/index.ts");
class RecurringExpenseEditHandler {
    constructor(crudService) {
        this.crudService = crudService;
        this.updateExpenseStartDateAndValue = async (id, input) => {
            const updateObject = {
                startDay: input.startDay,
                startMonth: input.startMonth,
                startYear: input.startYear,
                startDate: new Date(input.startYear, input.startMonth, input.startDay),
                value: input.value
            };
            return await this.crudService.update(id, updateObject);
        };
        this.increaseSafe = async (id, input, originalExpense) => {
            const originalEndDate = new Date(originalExpense.endYear, originalExpense.endMonth, originalExpense.endDay);
            const newStartDate = new Date(input.startYear, input.startMonth, input.startDay);
            const endMonth = input.startMonth > 0 ? input.startMonth - 1 : 11;
            const endYear = input.startMonth > 0 ? input.startYear : input.startYear - 1;
            const endDay = core_1.getLastDayOfMonth(endYear, endMonth);
            const updateObject = {
                endDay,
                endMonth,
                endYear,
                endDate: new Date(endYear, endMonth, endDay)
            };
            await this.crudService.update(id, updateObject);
            const createObject = {
                startDay: input.startDay,
                startMonth: input.startMonth,
                startYear: input.startYear,
                startDate: new Date(input.startYear, input.startMonth, input.startDay),
                endDay: originalEndDate > newStartDate ? originalExpense.endDay : null,
                endMonth: originalEndDate > newStartDate
                    ? originalExpense.endMonth
                    : null,
                endYear: originalEndDate > newStartDate ? originalExpense.endYear : null,
                endDate: originalEndDate > newStartDate ? originalExpense.endDate : null,
                value: input.value,
                categoryName: originalExpense.categoryName,
                currency: originalExpense.currency,
                parentRecurringExpenseId: originalExpense.parentRecurringExpenseId
            };
            if (originalExpense.employeeId) {
                createObject.employeeId = originalExpense.employeeId;
            }
            if (originalExpense.organizationId) {
                createObject.organizationId = originalExpense.organizationId;
                createObject.splitExpense = originalExpense.splitExpense;
            }
            const newExpense = await this.crudService.create(createObject);
            return newExpense;
        };
        this.reduceConflict = async (id, input, originalExpense) => {
            const conflictingExpense = await this.findConflictingExpense(id, originalExpense.parentRecurringExpenseId, input.startYear, input.startMonth);
            if (conflictingExpense) {
                await this.reduceEndDateToPreviousMonth(conflictingExpense.id, input.startYear, input.startMonth);
            }
            const { items, total } = await this.findAllExpensesInBetween(originalExpense.id, originalExpense.parentRecurringExpenseId, input.startYear, input.startMonth, originalExpense.startYear, originalExpense.startMonth);
            if (total > 0) {
                const itemsInBetween = {
                    id: typeorm_1.In(items.map((i) => i.id))
                };
                await this.crudService.delete(itemsInBetween);
            }
            this.updateExpenseStartDateAndValue(id, input);
        };
    }
    async executeCommand(id, input) {
        const originalExpense = await this.crudService.findOne(id);
        const { startDateUpdateType } = input;
        switch (startDateUpdateType) {
            case models_1.StartDateUpdateTypeEnum.NO_CHANGE:
            case models_1.StartDateUpdateTypeEnum.WITHIN_MONTH:
            case models_1.StartDateUpdateTypeEnum.REDUCE_SAFE:
                return this.updateExpenseStartDateAndValue(id, input);
            case models_1.StartDateUpdateTypeEnum.INCREASE_SAFE_OUTSIDE_LIMIT:
            case models_1.StartDateUpdateTypeEnum.INCREASE_SAFE_WITHIN_LIMIT:
                return this.increaseSafe(id, input, originalExpense);
            case models_1.StartDateUpdateTypeEnum.REDUCE_CONFLICT:
                return this.reduceConflict(id, input, originalExpense);
            case models_1.StartDateUpdateTypeEnum.INCREASE_CONFLICT:
                throw new common_1.BadRequestException('Cannot increase start date with conflicts');
            default:
                throw new common_1.BadRequestException('Start Date Update Type Not Defined');
        }
    }
    async reduceEndDateToPreviousMonth(id, startYear, startMonth) {
        const newEndYear = startMonth > 0 ? startYear : startYear - 1;
        const newEndMonth = startMonth > 0 ? startMonth - 1 : 11;
        const newEndDay = core_1.getLastDayOfMonth(newEndYear, newEndMonth);
        const dateUpdate = {
            endDay: newEndDay,
            endMonth: newEndMonth,
            endYear: newEndYear,
            endDate: new Date(newEndYear, newEndMonth, newEndDay)
        };
        await this.crudService.update(id, dateUpdate);
    }
    async findAllExpensesInBetween(recurringExpenseId, parentRecurringExpenseId, updatedStartYear, updatedStartMonth, currentStartYear, currentStartMonth) {
        const lastDayOfMonth = core_1.getLastDayOfMonth(currentStartYear, currentStartMonth);
        const currentStartDate = new Date(currentStartYear, currentStartMonth, lastDayOfMonth);
        const updatedStartDate = new Date(updatedStartYear, updatedStartMonth, 1);
        return await this.crudService.findAll({
            where: [
                {
                    id: typeorm_1.Not(recurringExpenseId),
                    parentRecurringExpenseId: parentRecurringExpenseId,
                    startDate: typeorm_1.Between(updatedStartDate, currentStartDate)
                },
                {
                    id: typeorm_1.Not(recurringExpenseId),
                    parentRecurringExpenseId: parentRecurringExpenseId,
                    endDate: typeorm_1.Between(updatedStartDate, currentStartDate)
                }
            ]
        });
    }
    async findConflictingExpense(recurringExpenseId, parentRecurringExpenseId, year, month) {
        const lastDayOfMonth = core_1.getLastDayOfMonth(year, month);
        const inputStartDate = new Date(year, month, lastDayOfMonth);
        const inputEndDate = new Date(year, month, 1);
        try {
            const expense = await this.crudService.findOne({
                where: [
                    {
                        parentRecurringExpenseId: parentRecurringExpenseId,
                        startDate: typeorm_1.LessThanOrEqual(inputStartDate),
                        endDate: typeorm_1.IsNull()
                    },
                    {
                        parentRecurringExpenseId: parentRecurringExpenseId,
                        startDate: typeorm_1.LessThanOrEqual(inputStartDate),
                        endDate: typeorm_1.MoreThanOrEqual(inputEndDate)
                    }
                ]
            });
            return expense.id !== recurringExpenseId ? expense : undefined;
        }
        catch (error) {
        }
        return undefined;
    }
}
exports.RecurringExpenseEditHandler = RecurringExpenseEditHandler;


/***/ }),

/***/ "./src/app/shared/handlers/recurring-expense.find-by-month.handler.ts":
/*!****************************************************************************!*\
  !*** ./src/app/shared/handlers/recurring-expense.find-by-month.handler.ts ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.FindRecurringExpenseByMonthHandler = void 0;
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const core_1 = __webpack_require__(/*! ../../core */ "./src/app/core/index.ts");
class FindRecurringExpenseByMonthHandler {
    constructor(crudService) {
        this.crudService = crudService;
    }
    async executeCommand(input, relations) {
        const lastDayOfMonth = core_1.getLastDayOfMonth(input.year, input.month);
        const inputStartDate = new Date(input.year, input.month, lastDayOfMonth);
        const inputEndDate = new Date(input.year, input.month, 1);
        let whereId = input.employeeId
            ? {
                employeeId: input.employeeId,
                organizationId: input.organizationId,
                tenantId: input.tenantId
            }
            : {
                organizationId: input.organizationId,
                tenantId: input.tenantId
            };
        if (input.parentRecurringExpenseId) {
            whereId = Object.assign(Object.assign({}, whereId), { parentRecurringExpenseId: input.parentRecurringExpenseId });
        }
        const expenses = await this.crudService.findAll({
            where: [
                Object.assign(Object.assign({}, whereId), { startDate: typeorm_1.LessThanOrEqual(inputStartDate), endDate: typeorm_1.IsNull() }),
                Object.assign(Object.assign({}, whereId), { startDate: typeorm_1.LessThanOrEqual(inputStartDate), endDate: typeorm_1.MoreThanOrEqual(inputEndDate) })
            ],
            relations
        });
        return expenses;
    }
}
exports.FindRecurringExpenseByMonthHandler = FindRecurringExpenseByMonthHandler;


/***/ }),

/***/ "./src/app/shared/handlers/recurring-expense.find-update-type.handler.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/shared/handlers/recurring-expense.find-update-type.handler.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.FindRecurringExpenseStartDateUpdateTypeHandler = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const core_1 = __webpack_require__(/*! ../../core */ "./src/app/core/index.ts");
class FindRecurringExpenseStartDateUpdateTypeHandler {
    constructor(crudService) {
        this.crudService = crudService;
    }
    async executeQuery(input) {
        const { newStartDate, recurringExpenseId } = input;
        const originalExpense = await this.crudService.findOne(recurringExpenseId);
        const oldStartDateObject = originalExpense.startDate;
        const newStartDateObject = new Date(newStartDate);
        if (oldStartDateObject.getTime() === newStartDateObject.getTime()) {
            return { value: models_1.StartDateUpdateTypeEnum.NO_CHANGE, conflicts: [] };
        }
        else if (newStartDateObject.getMonth() === oldStartDateObject.getMonth() &&
            newStartDateObject.getFullYear() ===
                oldStartDateObject.getFullYear()) {
            return {
                value: models_1.StartDateUpdateTypeEnum.WITHIN_MONTH,
                conflicts: []
            };
        }
        else if (newStartDateObject.getTime() > oldStartDateObject.getTime()) {
            return this.getIncreaseType(originalExpense, newStartDateObject);
        }
        else if (newStartDateObject.getTime() < oldStartDateObject.getTime()) {
            return this.getReduceType(originalExpense, newStartDate);
        }
    }
    async getIncreaseType(originalExpense, newStartDateObject) {
        const safeUpdateType = originalExpense.endDate &&
            newStartDateObject.getTime() > originalExpense.endDate.getTime()
            ? models_1.StartDateUpdateTypeEnum.INCREASE_SAFE_OUTSIDE_LIMIT
            : models_1.StartDateUpdateTypeEnum.INCREASE_SAFE_WITHIN_LIMIT;
        const { items: foundRecurringExpenses, total } = await this.findAllExpensesInBetween(originalExpense.id, originalExpense.parentRecurringExpenseId, new Date(originalExpense.startYear, originalExpense.startMonth, 1), new Date(newStartDateObject.getFullYear(), newStartDateObject.getMonth(), core_1.getLastDayOfMonth(newStartDateObject.getFullYear(), newStartDateObject.getMonth())));
        return {
            value: total === 0
                ? safeUpdateType
                : models_1.StartDateUpdateTypeEnum.INCREASE_CONFLICT,
            conflicts: foundRecurringExpenses
        };
    }
    async getReduceType(originalExpense, newStartDate) {
        const currentStartDate = new Date(originalExpense.startYear, originalExpense.startMonth, core_1.getLastDayOfMonth(originalExpense.startYear, originalExpense.startMonth));
        const { items: foundRecurringExpenses, total } = await this.findAllExpensesInBetween(originalExpense.id, originalExpense.parentRecurringExpenseId, newStartDate, currentStartDate);
        return {
            value: total === 0
                ? models_1.StartDateUpdateTypeEnum.REDUCE_SAFE
                : models_1.StartDateUpdateTypeEnum.REDUCE_CONFLICT,
            conflicts: foundRecurringExpenses
        };
    }
    async findAllExpensesInBetween(recurringExpenseId, parentRecurringExpenseId, fromStartDate, toStartDate) {
        return await this.crudService.findAll({
            where: [
                {
                    id: typeorm_1.Not(recurringExpenseId),
                    parentRecurringExpenseId: parentRecurringExpenseId,
                    startDate: typeorm_1.Between(fromStartDate, toStartDate)
                },
                {
                    id: typeorm_1.Not(recurringExpenseId),
                    parentRecurringExpenseId: parentRecurringExpenseId,
                    endDate: typeorm_1.Between(fromStartDate, toStartDate)
                }
            ]
        });
    }
}
exports.FindRecurringExpenseStartDateUpdateTypeHandler = FindRecurringExpenseStartDateUpdateTypeHandler;


/***/ }),

/***/ "./src/app/shared/handlers/update-entity.by-member.handler.ts":
/*!********************************************************************!*\
  !*** ./src/app/shared/handlers/update-entity.by-member.handler.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateEntityByMembersHandler = void 0;
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
class UpdateEntityByMembersHandler {
    constructor(crudService) {
        this.crudService = crudService;
    }
    async executeCommand(input) {
        const { addedEntityIds, removedEntityIds, member } = input;
        if (addedEntityIds && addedEntityIds.length > 0) {
            const departmentsToAdd = await this.crudService.findAll({
                where: {
                    id: typeorm_1.In(addedEntityIds)
                }
            });
            for (let i = 0; i < departmentsToAdd.total; i++) {
                const existingMembers = departmentsToAdd.items[i].members || [];
                await this.crudService.create({
                    id: departmentsToAdd.items[i].id,
                    members: [...existingMembers, member]
                });
            }
        }
        if (removedEntityIds && removedEntityIds.length > 0) {
            const departmentsToRemove = await this.crudService.findAll({
                where: {
                    id: typeorm_1.In(removedEntityIds)
                }
            });
            for (let i = 0; i < departmentsToRemove.total; i++) {
                await this.crudService.create({
                    id: departmentsToRemove.items[i].id,
                    members: (departmentsToRemove.items[i].members || []).filter((e) => e.id !== member.id)
                });
            }
        }
        return;
    }
}
exports.UpdateEntityByMembersHandler = UpdateEntityByMembersHandler;


/***/ }),

/***/ "./src/app/shared/index.ts":
/*!*********************************!*\
  !*** ./src/app/shared/index.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./shared.module */ "./src/app/shared/shared.module.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./pipes */ "./src/app/shared/pipes/index.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./handlers */ "./src/app/shared/handlers/index.ts"), exports);


/***/ }),

/***/ "./src/app/shared/pipes/index.ts":
/*!***************************************!*\
  !*** ./src/app/shared/pipes/index.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./uuid-validation.pipe */ "./src/app/shared/pipes/uuid-validation.pipe.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./parse-json.pipe */ "./src/app/shared/pipes/parse-json.pipe.ts"), exports);


/***/ }),

/***/ "./src/app/shared/pipes/parse-json.pipe.ts":
/*!*************************************************!*\
  !*** ./src/app/shared/pipes/parse-json.pipe.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ParseJsonPipe = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const http_error_by_code_util_1 = __webpack_require__(/*! @nestjs/common/utils/http-error-by-code.util */ "@nestjs/common/utils/http-error-by-code.util");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
let ParseJsonPipe = class ParseJsonPipe {
    constructor(options) {
        options = options || {};
        const { exceptionFactory, errorHttpStatusCode = common_1.HttpStatus.BAD_REQUEST, throwInvalidError = false } = options;
        this.throwInvalidError = throwInvalidError;
        this.exceptionFactory =
            exceptionFactory ||
                ((error) => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));
    }
    async transform(value, metadata) {
        const isJson = class_validator_1.isJSON(value);
        if (isJson) {
            try {
                return JSON.parse(value);
            }
            catch (e) {
                console.log('Json Parser Error:', e);
            }
        }
        else if (this.throwInvalidError) {
            throw this.exceptionFactory('Validation failed (JSON string is expected)');
        }
        return {};
    }
};
ParseJsonPipe = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, common_1.Optional()),
    tslib_1.__metadata("design:paramtypes", [Object])
], ParseJsonPipe);
exports.ParseJsonPipe = ParseJsonPipe;


/***/ }),

/***/ "./src/app/shared/pipes/uuid-validation.pipe.ts":
/*!******************************************************!*\
  !*** ./src/app/shared/pipes/uuid-validation.pipe.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UUIDValidationPipe = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
let UUIDValidationPipe = class UUIDValidationPipe {
    transform(value, metadata) {
        if (!class_validator_1.isUUID(value)) {
            throw new common_1.NotFoundException();
        }
        return value;
    }
};
UUIDValidationPipe = tslib_1.__decorate([
    common_1.Injectable()
], UUIDValidationPipe);
exports.UUIDValidationPipe = UUIDValidationPipe;


/***/ }),

/***/ "./src/app/shared/shared.module.ts":
/*!*****************************************!*\
  !*** ./src/app/shared/shared.module.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SharedModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const uuid_validation_pipe_1 = __webpack_require__(/*! ./pipes/uuid-validation.pipe */ "./src/app/shared/pipes/uuid-validation.pipe.ts");
let SharedModule = class SharedModule {
};
SharedModule = tslib_1.__decorate([
    common_1.Module({
        imports: [],
        providers: [uuid_validation_pipe_1.UUIDValidationPipe],
        exports: [uuid_validation_pipe_1.UUIDValidationPipe],
    })
], SharedModule);
exports.SharedModule = SharedModule;


/***/ }),

/***/ "./src/app/skills/default-skills.ts":
/*!******************************************!*\
  !*** ./src/app/skills/default-skills.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_SKILLS = void 0;
exports.DEFAULT_SKILLS = [
    'Node.js',
    'Angular',
    'React',
    'NestJS',
    'NextJS',
    'PostgreSQL'
];


/***/ }),

/***/ "./src/app/skills/skill.controller.ts":
/*!********************************************!*\
  !*** ./src/app/skills/skill.controller.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SkillController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const skill_service_1 = __webpack_require__(/*! ./skill.service */ "./src/app/skills/skill.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let SkillController = class SkillController extends core_1.CrudController {
    constructor(skillService) {
        super(skillService);
        this.skillService = skillService;
    }
    async findByName(name) {
        return this.skillService.findOneByName(name);
    }
};
tslib_1.__decorate([
    common_1.Get('getByName/:name'),
    tslib_1.__param(0, common_1.Param('name')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], SkillController.prototype, "findByName", null);
SkillController = tslib_1.__decorate([
    swagger_1.ApiTags('Skills'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof skill_service_1.SkillService !== "undefined" && skill_service_1.SkillService) === "function" ? _b : Object])
], SkillController);
exports.SkillController = SkillController;


/***/ }),

/***/ "./src/app/skills/skill.entity.ts":
/*!****************************************!*\
  !*** ./src/app/skills/skill.entity.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Skill = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let Skill = class Skill extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Skill.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Skill.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Skill.prototype, "color", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => employee_entity_1.Employee, (employee) => employee.skills),
    typeorm_1.JoinTable({
        name: 'skill_employee'
    }),
    tslib_1.__metadata("design:type", Array)
], Skill.prototype, "employees", void 0);
Skill = tslib_1.__decorate([
    typeorm_1.Entity('skill'),
    typeorm_1.Unique(['name'])
], Skill);
exports.Skill = Skill;


/***/ }),

/***/ "./src/app/skills/skill.module.ts":
/*!****************************************!*\
  !*** ./src/app/skills/skill.module.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SkillModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const skill_service_1 = __webpack_require__(/*! ./skill.service */ "./src/app/skills/skill.service.ts");
const skill_controller_1 = __webpack_require__(/*! ./skill.controller */ "./src/app/skills/skill.controller.ts");
const skill_entity_1 = __webpack_require__(/*! ./skill.entity */ "./src/app/skills/skill.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let SkillModule = class SkillModule {
};
SkillModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([skill_entity_1.Skill]), tenant_module_1.TenantModule],
        controllers: [skill_controller_1.SkillController],
        providers: [skill_service_1.SkillService],
        exports: [skill_service_1.SkillService]
    })
], SkillModule);
exports.SkillModule = SkillModule;


/***/ }),

/***/ "./src/app/skills/skill.seed.ts":
/*!**************************************!*\
  !*** ./src/app/skills/skill.seed.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createDefaultSkills = void 0;
const default_skills_1 = __webpack_require__(/*! ./default-skills */ "./src/app/skills/default-skills.ts");
const skill_entity_1 = __webpack_require__(/*! ./skill.entity */ "./src/app/skills/skill.entity.ts");
exports.createDefaultSkills = async (connection, tenant, organization) => {
    const skills = [];
    for (const name of default_skills_1.DEFAULT_SKILLS) {
        const skill = new skill_entity_1.Skill();
        skill.name = name;
        skill.tenant = tenant;
        skill.organization = organization;
        skill.description = '';
        skill.color = '#479bfa';
        skills.push(skill);
    }
    return await connection.manager.save(skills);
};


/***/ }),

/***/ "./src/app/skills/skill.service.ts":
/*!*****************************************!*\
  !*** ./src/app/skills/skill.service.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SkillService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const skill_entity_1 = __webpack_require__(/*! ./skill.entity */ "./src/app/skills/skill.entity.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_2 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
let SkillService = class SkillService extends core_1.CrudService {
    constructor(skillRepository) {
        super(skillRepository);
        this.skillRepository = skillRepository;
    }
    async findOneByName(name) {
        const query = this.repository
            .createQueryBuilder('skill')
            .where('"skill"."name" = :name', {
            name
        });
        const item = await query.getOne();
        return item;
    }
};
SkillService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_2.InjectRepository(skill_entity_1.Skill)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _a : Object])
], SkillService);
exports.SkillService = SkillService;


/***/ }),

/***/ "./src/app/tags/default-tags.ts":
/*!**************************************!*\
  !*** ./src/app/tags/default-tags.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_ORGANIZATION_TAGS = exports.DEFAULT_GLOBAL_TAGS = void 0;
exports.DEFAULT_GLOBAL_TAGS = [
    'VIP',
    'Urgent',
    'Crazy',
    'Broken',
    'TODO',
    'In Process',
    'Verified',
    'Third Party API',
    'Killer',
    'Idiot',
    'Super',
    'WIP'
];
exports.DEFAULT_ORGANIZATION_TAGS = [
    'Program',
    'Web',
    'Mobile',
    'Frontend',
    'Backend',
    'Database',
    'Authentication',
    'Security',
    'Dashboard',
    'API',
    'Design',
    'Testing',
    'Local',
    'QC',
    'Production',
    'Crap',
    'WTF'
];


/***/ }),

/***/ "./src/app/tags/tag.controller.ts":
/*!****************************************!*\
  !*** ./src/app/tags/tag.controller.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TagController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const tag_entity_1 = __webpack_require__(/*! ./tag.entity */ "./src/app/tags/tag.entity.ts");
const tag_service_1 = __webpack_require__(/*! ./tag.service */ "./src/app/tags/tag.service.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const parse_json_pipe_1 = __webpack_require__(/*! ../shared/pipes/parse-json.pipe */ "./src/app/shared/pipes/parse-json.pipe.ts");
let TagController = class TagController extends core_1.CrudController {
    constructor(tagService) {
        super(tagService);
        this.tagService = tagService;
    }
    async findByName(name) {
        return this.tagService.findOneByName(name);
    }
    async createRecord(entity) {
        return this.tagService.create(entity);
    }
    async getAllTags(data) {
        const { relations, findInput } = data;
        return this.tagService.findAll({
            where: findInput,
            relations
        });
    }
    async getAllTagsByOrgLevel(data) {
        const { relations, findInput } = data;
        return this.tagService.findTagsByOrgLevel(relations, findInput);
    }
    async getAllTagsByTenantLevel(data) {
        const { relations, findInput } = data;
        return this.tagService.findTagsByTenantLevel(relations, findInput);
    }
    async getTagUsageCount(data) {
        const { organizationId } = data;
        return this.tagService.getTagUsageCount(organizationId);
    }
};
tslib_1.__decorate([
    common_1.Get('getByName/:name'),
    tslib_1.__param(0, common_1.Param('name')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], TagController.prototype, "findByName", null);
tslib_1.__decorate([
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_TAGS_EDIT),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof tag_entity_1.Tag !== "undefined" && tag_entity_1.Tag) === "function" ? _b : Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], TagController.prototype, "createRecord", null);
tslib_1.__decorate([
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], TagController.prototype, "getAllTags", null);
tslib_1.__decorate([
    common_1.Get('getByOrgId'),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], TagController.prototype, "getAllTagsByOrgLevel", null);
tslib_1.__decorate([
    common_1.Get('getByTenantId'),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], TagController.prototype, "getAllTagsByTenantLevel", null);
tslib_1.__decorate([
    common_1.Get(`getTagsWithCount`),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], TagController.prototype, "getTagUsageCount", null);
TagController = tslib_1.__decorate([
    swagger_1.ApiTags('Tags'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_h = typeof tag_service_1.TagService !== "undefined" && tag_service_1.TagService) === "function" ? _h : Object])
], TagController);
exports.TagController = TagController;


/***/ }),

/***/ "./src/app/tags/tag.entity.ts":
/*!************************************!*\
  !*** ./src/app/tags/tag.entity.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Tag = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const candidate_entity_1 = __webpack_require__(/*! ../candidate/candidate.entity */ "./src/app/candidate/candidate.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const equipment_entity_1 = __webpack_require__(/*! ../equipment/equipment.entity */ "./src/app/equipment/equipment.entity.ts");
const event_type_entity_1 = __webpack_require__(/*! ../event-types/event-type.entity */ "./src/app/event-types/event-type.entity.ts");
const income_entity_1 = __webpack_require__(/*! ../income/income.entity */ "./src/app/income/income.entity.ts");
const expense_entity_1 = __webpack_require__(/*! ../expense/expense.entity */ "./src/app/expense/expense.entity.ts");
const invoice_entity_1 = __webpack_require__(/*! ../invoice/invoice.entity */ "./src/app/invoice/invoice.entity.ts");
const task_entity_1 = __webpack_require__(/*! ../tasks/task.entity */ "./src/app/tasks/task.entity.ts");
const proposal_entity_1 = __webpack_require__(/*! ../proposal/proposal.entity */ "./src/app/proposal/proposal.entity.ts");
const organization_vendors_entity_1 = __webpack_require__(/*! ../organization-vendors/organization-vendors.entity */ "./src/app/organization-vendors/organization-vendors.entity.ts");
const organization_team_entity_1 = __webpack_require__(/*! ../organization-team/organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const organization_positions_entity_1 = __webpack_require__(/*! ../organization-positions/organization-positions.entity */ "./src/app/organization-positions/organization-positions.entity.ts");
const expense_category_entity_1 = __webpack_require__(/*! ../expense-categories/expense-category.entity */ "./src/app/expense-categories/expense-category.entity.ts");
const organization_employment_type_entity_1 = __webpack_require__(/*! ../organization-employment-type/organization-employment-type.entity */ "./src/app/organization-employment-type/organization-employment-type.entity.ts");
const organization_employee_level_entity_1 = __webpack_require__(/*! ../organization_employee-level/organization-employee-level.entity */ "./src/app/organization_employee-level/organization-employee-level.entity.ts");
const organization_department_entity_1 = __webpack_require__(/*! ../organization-department/organization-department.entity */ "./src/app/organization-department/organization-department.entity.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const product_entity_1 = __webpack_require__(/*! ../product/product.entity */ "./src/app/product/product.entity.ts");
const payment_entity_1 = __webpack_require__(/*! ../payment/payment.entity */ "./src/app/payment/payment.entity.ts");
const request_approval_entity_1 = __webpack_require__(/*! ../request-approval/request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const integration_entity_1 = __webpack_require__(/*! ../integration/integration.entity */ "./src/app/integration/integration.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let Tag = class Tag extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Tag.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Tag.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Tag.prototype, "color", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean, default: false }),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], Tag.prototype, "isSystem", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => candidate_entity_1.Candidate, (candidate) => candidate.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "candidate", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => employee_entity_1.Employee, (employee) => employee.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "employee", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => equipment_entity_1.Equipment, (equipment) => equipment.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "equipment", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => event_type_entity_1.EventType, (eventType) => eventType.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "eventType", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => income_entity_1.Income, (income) => income.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "income", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => expense_entity_1.Expense, (expense) => expense.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "expense", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => invoice_entity_1.Invoice, (invoice) => invoice.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "invoice", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => task_entity_1.Task, (task) => task.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "task", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => proposal_entity_1.Proposal, (proposal) => proposal.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "proposal", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => organization_vendors_entity_1.OrganizationVendor, (organizationVendor) => organizationVendor.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "organizationVendor", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => organization_team_entity_1.OrganizationTeam, (organizationTeam) => organizationTeam.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "organizationTeam", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => organization_projects_entity_1.OrganizationProject, (organizationProject) => organizationProject.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "organizationProject", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => organization_positions_entity_1.OrganizationPositions, (organizationPosition) => organizationPosition.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "organizationPosition", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => expense_category_entity_1.ExpenseCategory, (expenseCategory) => expenseCategory.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "expenseCategory", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => organization_employment_type_entity_1.OrganizationEmploymentType, (organizationEmploymentType) => organizationEmploymentType.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "organizationEmploymentType", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => organization_employee_level_entity_1.EmployeeLevel, (employeeLevel) => employeeLevel.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "employeeLevel", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => organization_department_entity_1.OrganizationDepartment, (organizationDepartment) => organizationDepartment.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "organizationDepartment", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => organization_contact_entity_1.OrganizationContact, (organizationContact) => organizationContact.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "organizationContact", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => product_entity_1.Product, (product) => product.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "product", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => payment_entity_1.Payment, (payment) => payment.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "payment", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => request_approval_entity_1.RequestApproval, (requestApproval) => requestApproval.tags),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "requestApproval", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany(() => user_entity_1.User),
    typeorm_1.JoinTable({
        name: 'tag_user'
    }),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "users", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany(() => integration_entity_1.Integration),
    typeorm_1.JoinTable({
        name: 'tag_integration'
    }),
    tslib_1.__metadata("design:type", Array)
], Tag.prototype, "integrations", void 0);
Tag = tslib_1.__decorate([
    typeorm_1.Entity('tag')
], Tag);
exports.Tag = Tag;


/***/ }),

/***/ "./src/app/tags/tag.module.ts":
/*!************************************!*\
  !*** ./src/app/tags/tag.module.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TagModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const tag_service_1 = __webpack_require__(/*! ./tag.service */ "./src/app/tags/tag.service.ts");
const tag_controller_1 = __webpack_require__(/*! ./tag.controller */ "./src/app/tags/tag.controller.ts");
const tag_entity_1 = __webpack_require__(/*! ./tag.entity */ "./src/app/tags/tag.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const user_module_1 = __webpack_require__(/*! ../user/user.module */ "./src/app/user/user.module.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let TagModule = class TagModule {
};
TagModule = tslib_1.__decorate([
    common_1.Module({
        imports: [typeorm_1.TypeOrmModule.forFeature([tag_entity_1.Tag]), user_module_1.UserModule, tenant_module_1.TenantModule],
        controllers: [tag_controller_1.TagController],
        providers: [tag_service_1.TagService],
        exports: [tag_service_1.TagService]
    })
], TagModule);
exports.TagModule = TagModule;


/***/ }),

/***/ "./src/app/tags/tag.seed.ts":
/*!**********************************!*\
  !*** ./src/app/tags/tag.seed.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomOrganizationTags = exports.createTags = exports.createDefaultTags = void 0;
const faker = __webpack_require__(/*! faker */ "faker");
const tag_entity_1 = __webpack_require__(/*! ./tag.entity */ "./src/app/tags/tag.entity.ts");
const default_tags_1 = __webpack_require__(/*! ./default-tags */ "./src/app/tags/default-tags.ts");
exports.createDefaultTags = async (connection, tenant, organizations) => {
    let tags = [];
    organizations.forEach((org) => {
        const organizationTags = Object.values(default_tags_1.DEFAULT_GLOBAL_TAGS).map((name) => {
            const orgTags = new tag_entity_1.Tag();
            orgTags.name = name;
            orgTags.description = '';
            orgTags.color = faker.commerce.color();
            if (orgTags.color === 'white') {
                orgTags.color = 'Red';
            }
            orgTags.organization = org;
            orgTags.tenant = tenant;
            return orgTags;
        });
        tags = [...tags, ...organizationTags];
    });
    return await connection.manager.save(tags);
};
exports.createTags = async (connection) => {
    const tags = [];
    for (const name of default_tags_1.DEFAULT_ORGANIZATION_TAGS) {
        const tag = new tag_entity_1.Tag();
        tag.name = name;
        tag.description = '';
        tag.color = faker.commerce.color();
        if (tag.color === 'white') {
            tag.color = 'red';
        }
        tags.push(tag);
    }
    await connection
        .createQueryBuilder()
        .insert()
        .into(tag_entity_1.Tag)
        .values(tags)
        .execute();
    return tags;
};
exports.createRandomOrganizationTags = async (connection, tenants, tenantOrganizationsMap) => {
    let tags = [];
    for (const tenant of tenants) {
        const organizations = tenantOrganizationsMap.get(tenant);
        organizations.forEach((org) => {
            const organizationTags = Object.values(default_tags_1.DEFAULT_ORGANIZATION_TAGS).map((name) => {
                const orgTags = new tag_entity_1.Tag();
                orgTags.name = name;
                orgTags.description = '';
                orgTags.color = faker.commerce.color();
                orgTags.organization = org;
                orgTags.tenant = tenant;
                if (orgTags.color === 'white') {
                    orgTags.color = 'red';
                }
                return orgTags;
            });
            tags = [...tags, ...organizationTags];
        });
    }
    return await connection.manager.save(tags);
};


/***/ }),

/***/ "./src/app/tags/tag.service.ts":
/*!*************************************!*\
  !*** ./src/app/tags/tag.service.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TagService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const tag_entity_1 = __webpack_require__(/*! ./tag.entity */ "./src/app/tags/tag.entity.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_2 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
let TagService = class TagService extends core_1.CrudService {
    constructor(tagRepository) {
        super(tagRepository);
        this.tagRepository = tagRepository;
    }
    async findOneByName(name) {
        const query = this.tagRepository
            .createQueryBuilder('tag')
            .where('"tag"."name" = :name', {
            name
        });
        const item = await query.getOne();
        return item;
    }
    async findTagsByOrgLevel(relations, findInput) {
        const { organizationId, tenantId } = findInput;
        const allTags = await this.tagRepository.find({
            where: [{ organizationId, tenantId, isSystem: false }],
            relations: relations
        });
        return allTags;
    }
    async findTagsByTenantLevel(relations, findInput) {
        const { tenantId } = findInput;
        const allTags = await this.tagRepository.find({
            where: [{ tenantId, isSystem: false }],
            relations: relations
        });
        return allTags;
    }
    async getTagUsageCount(organizationId) {
        const allTagsInOrg = await this.tagRepository
            .createQueryBuilder('tag')
            .select('*')
            .where('tag.organization = :organizationId', {
            organizationId
        })
            .andWhere('tag.isSystem = :action', {
            action: false
        })
            .getRawMany();
        const allTagsIds = [];
        allTagsInOrg.forEach((tag) => allTagsIds.push(tag.id));
        const tagCounterAllRelations = await this.tagRepository
            .createQueryBuilder('tag')
            .leftJoinAndSelect('tag.candidate', 'candidate')
            .leftJoinAndSelect('tag.employee', 'employee')
            .leftJoinAndSelect('tag.equipment', 'equipment')
            .leftJoinAndSelect('tag.eventType', 'eventType')
            .leftJoinAndSelect('tag.income', 'income')
            .leftJoinAndSelect('tag.expense', 'expense')
            .leftJoinAndSelect('tag.invoice', 'invoice')
            .leftJoinAndSelect('tag.task', 'task')
            .leftJoinAndSelect('tag.proposal', 'proposal')
            .leftJoinAndSelect('tag.organizationVendor', 'organizationVendor')
            .leftJoinAndSelect('tag.organizationTeam', 'organizationTeam')
            .leftJoinAndSelect('tag.organizationProject', 'organizationProject')
            .leftJoinAndSelect('tag.organizationPosition', 'organizationPosition')
            .leftJoinAndSelect('tag.expenseCategory', 'expenseCategory')
            .leftJoinAndSelect('tag.organizationEmploymentType', 'organizationEmploymentType')
            .leftJoinAndSelect('tag.employeeLevel', 'employeeLevel')
            .leftJoinAndSelect('tag.organizationDepartment', 'organizationDepartment')
            .leftJoinAndSelect('tag.organizationContact', 'organizationContact')
            .leftJoinAndSelect('tag.product', 'product')
            .leftJoinAndSelect('tag.payment', 'payment')
            .where('tag.id IN (:...id)', { id: allTagsIds })
            .andWhere('tag.isSystem = :action', { action: false })
            .getMany();
        let tagWithCounter = {};
        const tagsWithCounter = [];
        for (let arrayIndex = 0; arrayIndex < allTagsInOrg.length; arrayIndex++) {
            tagWithCounter = Object.assign(Object.assign({}, tagCounterAllRelations[arrayIndex]), { counter: tagCounterAllRelations[arrayIndex].candidate.length +
                    tagCounterAllRelations[arrayIndex].employee.length +
                    tagCounterAllRelations[arrayIndex].equipment.length +
                    tagCounterAllRelations[arrayIndex].eventType.length +
                    tagCounterAllRelations[arrayIndex].income.length +
                    tagCounterAllRelations[arrayIndex].expense.length +
                    tagCounterAllRelations[arrayIndex].invoice.length +
                    tagCounterAllRelations[arrayIndex].task.length +
                    tagCounterAllRelations[arrayIndex].proposal.length +
                    tagCounterAllRelations[arrayIndex].organizationVendor
                        .length +
                    tagCounterAllRelations[arrayIndex].organizationTeam.length +
                    tagCounterAllRelations[arrayIndex].organizationProject
                        .length +
                    tagCounterAllRelations[arrayIndex].organizationPosition
                        .length +
                    tagCounterAllRelations[arrayIndex].expenseCategory.length +
                    tagCounterAllRelations[arrayIndex]
                        .organizationEmploymentType.length +
                    tagCounterAllRelations[arrayIndex].employeeLevel.length +
                    tagCounterAllRelations[arrayIndex].organizationDepartment
                        .length +
                    tagCounterAllRelations[arrayIndex].organizationContact
                        .length +
                    tagCounterAllRelations[arrayIndex].product.length +
                    tagCounterAllRelations[arrayIndex].payment.length });
            tagsWithCounter.push(tagWithCounter);
        }
        return tagsWithCounter;
    }
};
TagService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_2.InjectRepository(tag_entity_1.Tag)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _a : Object])
], TagService);
exports.TagService = TagService;


/***/ }),

/***/ "./src/app/tasks/commands/handlers/index.ts":
/*!**************************************************!*\
  !*** ./src/app/tasks/commands/handlers/index.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const task_create_handler_1 = __webpack_require__(/*! ./task-create.handler */ "./src/app/tasks/commands/handlers/task-create.handler.ts");
const task_update_handler_1 = __webpack_require__(/*! ./task-update.handler */ "./src/app/tasks/commands/handlers/task-update.handler.ts");
exports.CommandHandlers = [task_create_handler_1.TaskCreateHandler, task_update_handler_1.TaskUpdateHandler];


/***/ }),

/***/ "./src/app/tasks/commands/handlers/task-create.handler.ts":
/*!****************************************************************!*\
  !*** ./src/app/tasks/commands/handlers/task-create.handler.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const __1 = __webpack_require__(/*! .. */ "./src/app/tasks/commands/index.ts");
const task_service_1 = __webpack_require__(/*! ../../task.service */ "./src/app/tasks/task.service.ts");
let TaskCreateHandler = class TaskCreateHandler {
    constructor(taskService) {
        this.taskService = taskService;
    }
    async execute(command) {
        const { input } = command;
        return await this.taskService.create(input);
    }
};
TaskCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(__1.TaskCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof task_service_1.TaskService !== "undefined" && task_service_1.TaskService) === "function" ? _a : Object])
], TaskCreateHandler);
exports.TaskCreateHandler = TaskCreateHandler;


/***/ }),

/***/ "./src/app/tasks/commands/handlers/task-update.handler.ts":
/*!****************************************************************!*\
  !*** ./src/app/tasks/commands/handlers/task-update.handler.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const task_service_1 = __webpack_require__(/*! ../../task.service */ "./src/app/tasks/task.service.ts");
const task_update_command_1 = __webpack_require__(/*! ../task-update.command */ "./src/app/tasks/commands/task-update.command.ts");
let TaskUpdateHandler = class TaskUpdateHandler {
    constructor(_taskService) {
        this._taskService = _taskService;
    }
    async execute(command) {
        const { input } = command;
        const { id } = input;
        return await this.updateTask(id, input);
    }
    async updateTask(id, request) {
        const task = await this._taskService.findOne(id);
        if (task) {
            delete request.id;
            await this._taskService.update(id, request);
            return await this._taskService.findOne(id);
        }
        return task;
    }
};
TaskUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(task_update_command_1.TaskUpdateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof task_service_1.TaskService !== "undefined" && task_service_1.TaskService) === "function" ? _a : Object])
], TaskUpdateHandler);
exports.TaskUpdateHandler = TaskUpdateHandler;


/***/ }),

/***/ "./src/app/tasks/commands/index.ts":
/*!*****************************************!*\
  !*** ./src/app/tasks/commands/index.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./task-create.command */ "./src/app/tasks/commands/task-create.command.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./task-update.command */ "./src/app/tasks/commands/task-update.command.ts"), exports);


/***/ }),

/***/ "./src/app/tasks/commands/task-create.command.ts":
/*!*******************************************************!*\
  !*** ./src/app/tasks/commands/task-create.command.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskCreateCommand = void 0;
class TaskCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.TaskCreateCommand = TaskCreateCommand;
TaskCreateCommand.type = '[Tasks] Create Task';


/***/ }),

/***/ "./src/app/tasks/commands/task-update.command.ts":
/*!*******************************************************!*\
  !*** ./src/app/tasks/commands/task-update.command.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskUpdateCommand = void 0;
class TaskUpdateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.TaskUpdateCommand = TaskUpdateCommand;
TaskUpdateCommand.type = '[Tasks] Update Task';


/***/ }),

/***/ "./src/app/tasks/task.controller.ts":
/*!******************************************!*\
  !*** ./src/app/tasks/task.controller.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const task_entity_1 = __webpack_require__(/*! ./task.entity */ "./src/app/tasks/task.entity.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const task_service_1 = __webpack_require__(/*! ./task.service */ "./src/app/tasks/task.service.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
let TaskController = class TaskController extends core_1.CrudController {
    constructor(taskService, employeeService) {
        super(taskService);
        this.taskService = taskService;
        this.employeeService = employeeService;
    }
    async findAllTasks(data) {
        const tenantId = context_1.RequestContext.currentTenantId();
        const { relations, findInput } = data;
        if (!findInput.hasOwnProperty('tenantId')) {
            findInput['tenantId'] = tenantId;
        }
        return this.taskService.findAll({
            where: findInput,
            relations
        });
    }
    async findMyTasks() {
        const employee = await this.employeeService.findOne({
            where: {
                user: { id: context_1.RequestContext.currentUser().id }
            }
        });
        return this.taskService.getMyTasks(employee.id);
    }
    async findTeamTasks(data) {
        const { employeeId } = data;
        return this.taskService.findTeamTasks(employeeId);
    }
    async getAllTasksByEmployee(employeeId, findInput) {
        return this.taskService.getAllTasksByEmployee(employeeId, findInput);
    }
    async createTask(entity) {
        return this.taskService.createTask(entity);
    }
    async update(id, entity) {
        try {
            return await this.taskService.create(Object.assign({ id }, entity));
        }
        catch (error) {
            throw new common_1.BadRequestException(error);
        }
    }
    async deleteTask(id) {
        return this.taskService.delete(id);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all tasks.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found tasks',
        type: task_entity_1.Task
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], TaskController.prototype, "findAllTasks", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find my tasks.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found tasks',
        type: task_entity_1.Task
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Records not found'
    }),
    common_1.Get('me'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], TaskController.prototype, "findMyTasks", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find my team tasks.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found tasks',
        type: task_entity_1.Task
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Records not found'
    }),
    common_1.Get('team'),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], TaskController.prototype, "findTeamTasks", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find Employee Task.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found Employee Task',
        type: task_entity_1.Task
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('employee/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_d = typeof models_1.IGetTaskByEmployeeOptions !== "undefined" && models_1.IGetTaskByEmployeeOptions) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], TaskController.prototype, "getAllTasksByEmployee", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'create a task' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_CANDIDATES_TASK_EDIT),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof task_entity_1.Task !== "undefined" && task_entity_1.Task) === "function" ? _e : Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], TaskController.prototype, "createTask", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update an existing task' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_CANDIDATES_TASK_EDIT),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')), tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_g = typeof task_entity_1.Task !== "undefined" && task_entity_1.Task) === "function" ? _g : Object]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], TaskController.prototype, "update", null);
tslib_1.__decorate([
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_CANDIDATES_TASK_EDIT),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], TaskController.prototype, "deleteTask", null);
TaskController = tslib_1.__decorate([
    swagger_1.ApiTags('Tasks'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_k = typeof task_service_1.TaskService !== "undefined" && task_service_1.TaskService) === "function" ? _k : Object, typeof (_l = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _l : Object])
], TaskController);
exports.TaskController = TaskController;


/***/ }),

/***/ "./src/app/tasks/task.entity.ts":
/*!**************************************!*\
  !*** ./src/app/tasks/task.entity.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Task = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const invoice_item_entity_1 = __webpack_require__(/*! ../invoice-item/invoice-item.entity */ "./src/app/invoice-item/invoice-item.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const organization_team_entity_1 = __webpack_require__(/*! ../organization-team/organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const organization_sprint_entity_1 = __webpack_require__(/*! ../organization-sprint/organization-sprint.entity */ "./src/app/organization-sprint/organization-sprint.entity.ts");
const time_log_entity_1 = __webpack_require__(/*! ../timesheet/time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let Task = class Task extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: tag_entity_1.Tag }),
    typeorm_1.ManyToMany((type) => tag_entity_1.Tag, (tag) => tag.task),
    typeorm_1.JoinTable({
        name: 'tag_task'
    }),
    tslib_1.__metadata("design:type", Array)
], Task.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Task.prototype, "title", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Task.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.TaskStatusEnum }),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Task.prototype, "status", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    typeorm_1.Column({ nullable: true }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", Number)
], Task.prototype, "estimate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    typeorm_1.Column({ nullable: true }),
    class_validator_1.IsOptional(),
    tslib_1.__metadata("design:type", typeof (_a = typeof Date !== "undefined" && Date) === "function" ? _a : Object)
], Task.prototype, "dueDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: organization_projects_entity_1.OrganizationProject }),
    typeorm_1.ManyToOne((type) => organization_projects_entity_1.OrganizationProject, {
        nullable: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof organization_projects_entity_1.OrganizationProject !== "undefined" && organization_projects_entity_1.OrganizationProject) === "function" ? _b : Object)
], Task.prototype, "project", void 0);
tslib_1.__decorate([
    typeorm_1.OneToMany((type) => time_log_entity_1.TimeLog, (timeLog) => timeLog.task),
    tslib_1.__metadata("design:type", Array)
], Task.prototype, "timeLogs", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((task) => task.project),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Task.prototype, "projectId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => employee_entity_1.Employee, { cascade: ['update'] }),
    typeorm_1.JoinTable({
        name: 'task_employee'
    }),
    tslib_1.__metadata("design:type", Array)
], Task.prototype, "members", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => organization_team_entity_1.OrganizationTeam, { cascade: ['update'] }),
    typeorm_1.JoinTable({
        name: 'task_team'
    }),
    tslib_1.__metadata("design:type", Array)
], Task.prototype, "teams", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: invoice_item_entity_1.InvoiceItem, isArray: true }),
    typeorm_1.OneToMany((type) => invoice_item_entity_1.InvoiceItem, (invoiceItem) => invoiceItem.task),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Task.prototype, "invoiceItems", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: user_entity_1.User }),
    typeorm_1.ManyToOne((type) => user_entity_1.User, {
        nullable: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_c = typeof user_entity_1.User !== "undefined" && user_entity_1.User) === "function" ? _c : Object)
], Task.prototype, "creator", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((task) => task.creator),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Task.prototype, "creatorId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: organization_sprint_entity_1.OrganizationSprint }),
    typeorm_1.ManyToOne((type) => organization_sprint_entity_1.OrganizationSprint, {
        onDelete: 'SET NULL'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_d = typeof organization_sprint_entity_1.OrganizationSprint !== "undefined" && organization_sprint_entity_1.OrganizationSprint) === "function" ? _d : Object)
], Task.prototype, "organizationSprint", void 0);
Task = tslib_1.__decorate([
    typeorm_1.Entity('task')
], Task);
exports.Task = Task;


/***/ }),

/***/ "./src/app/tasks/task.module.ts":
/*!**************************************!*\
  !*** ./src/app/tasks/task.module.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const task_entity_1 = __webpack_require__(/*! ./task.entity */ "./src/app/tasks/task.entity.ts");
const task_service_1 = __webpack_require__(/*! ./task.service */ "./src/app/tasks/task.service.ts");
const task_controller_1 = __webpack_require__(/*! ./task.controller */ "./src/app/tasks/task.controller.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/tasks/commands/handlers/index.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const role_service_1 = __webpack_require__(/*! ../role/role.service */ "./src/app/role/role.service.ts");
const role_entity_1 = __webpack_require__(/*! ../role/role.entity */ "./src/app/role/role.entity.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let TaskModule = class TaskModule {
};
TaskModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([
                task_entity_1.Task,
                organization_projects_entity_1.OrganizationProject,
                user_entity_1.User,
                employee_entity_1.Employee,
                role_entity_1.Role
            ]),
            tenant_module_1.TenantModule
        ],
        controllers: [task_controller_1.TaskController],
        providers: [
            task_service_1.TaskService,
            employee_service_1.EmployeeService,
            role_service_1.RoleService,
            ...handlers_1.CommandHandlers,
            user_service_1.UserService
        ],
        exports: [task_service_1.TaskService]
    })
], TaskModule);
exports.TaskModule = TaskModule;


/***/ }),

/***/ "./src/app/tasks/task.seed.ts":
/*!************************************!*\
  !*** ./src/app/tasks/task.seed.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createTags = exports.createRandomTask = exports.createDefaultTask = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const faker = __webpack_require__(/*! faker */ "faker");
const _ = __webpack_require__(/*! underscore */ "underscore");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const task_entity_1 = __webpack_require__(/*! ./task.entity */ "./src/app/tasks/task.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const organization_team_entity_1 = __webpack_require__(/*! ../organization-team/organization-team.entity */ "./src/app/organization-team/organization-team.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const GITHUB_API_URL = 'https://api.github.com';
exports.createDefaultTask = async (connection, tenant, organization) => {
    const httpService = new common_1.HttpService();
    const tasks = [];
    const teams = await connection
        .getRepository(organization_team_entity_1.OrganizationTeam)
        .createQueryBuilder()
        .getMany();
    const users = await connection
        .getRepository(user_entity_1.User)
        .createQueryBuilder()
        .getMany();
    console.log(`${GITHUB_API_URL}/repos/ever-co/gauzy/issues`);
    const issues = await httpService
        .get(`${GITHUB_API_URL}/repos/ever-co/gauzy/issues`)
        .toPromise()
        .then((resp) => resp.data);
    console.log(`Done ${GITHUB_API_URL}/repos/ever-co/gauzy/issues`);
    let labels = [];
    issues.forEach(async (issue) => {
        labels = labels.concat(issue.labels);
    });
    labels = _.uniq(labels, (label) => label.name);
    const tags = await createTags(connection, labels);
    const defaultProjects = await connection
        .getRepository(organization_projects_entity_1.OrganizationProject)
        .createQueryBuilder()
        .getMany();
    for (const issue of issues) {
        let status = models_1.TaskStatusEnum.TODO;
        if (issue.state === 'open') {
            status = models_1.TaskStatusEnum.IN_PROGRESS;
        }
        const project = faker.random.arrayElement(defaultProjects);
        const task = new task_entity_1.Task();
        task.tags = _.filter(tags, (tag) => !!issue.labels.find((label) => label.name === tag.name));
        task.tenant = tenant;
        task.organization = organization;
        task.title = issue.title;
        task.description = issue.body;
        task.status = status;
        task.estimate = null;
        task.dueDate = null;
        task.project = project;
        task.teams = [faker.random.arrayElement(teams)];
        task.creator = faker.random.arrayElement(users);
        tasks.push(task);
        project.tasks = tasks;
        await connection.manager.save(project);
    }
    await connection.manager.save(tasks);
    return tasks;
};
exports.createRandomTask = async (connection, tenants, projects) => {
    var e_1, _a;
    if (!projects) {
        console.warn('Warning: projects not found, RandomTask will not be created');
        return;
    }
    const httpService = new common_1.HttpService();
    const tasks = [];
    const teams = await connection
        .getRepository(organization_team_entity_1.OrganizationTeam)
        .createQueryBuilder()
        .getMany();
    const users = await connection
        .getRepository(user_entity_1.User)
        .createQueryBuilder()
        .getMany();
    console.log(`${GITHUB_API_URL}/repos/ever-co/gauzy/issues`);
    const issues = await httpService
        .get(`${GITHUB_API_URL}/repos/ever-co/gauzy/issues`)
        .toPromise()
        .then((resp) => resp.data);
    console.log(`Done ${GITHUB_API_URL}/repos/ever-co/gauzy/issues`);
    let labels = [];
    issues.forEach(async (issue) => {
        labels = labels.concat(issue.labels);
    });
    labels = _.uniq(labels, (label) => label.name);
    const tags = await createTags(connection, labels);
    try {
        for (var _b = tslib_1.__asyncValues(tenants || []), _c; _c = await _b.next(), !_c.done;) {
            const tenant = _c.value;
            const organizations = await connection.manager.find(organization_entity_1.Organization, {
                where: [{ tenant: tenant }]
            });
            issues.forEach((issue) => {
                let status = models_1.TaskStatusEnum.TODO;
                if (issue.state === 'open') {
                    status = models_1.TaskStatusEnum.IN_PROGRESS;
                }
                const task = new task_entity_1.Task();
                task.tags = _.filter(tags, (tag) => !!issue.labels.find((label) => label.name === tag.name));
                task.title = issue.title;
                task.description = issue.body;
                task.status = status;
                task.estimate = null;
                task.dueDate = null;
                task.project = faker.random.arrayElement(projects);
                task.teams = [faker.random.arrayElement(teams)];
                task.creator = faker.random.arrayElement(users);
                (task.organization = faker.random.arrayElement(organizations)),
                    (task.tenant = tenant);
                tasks.push(task);
            });
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) await _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    await connection.manager.save(tasks);
};
async function createTags(connection, labels) {
    if (labels.length === 0) {
        return [];
    }
    const tags = labels.map((label) => new tag_entity_1.Tag({
        name: label.name,
        description: label.description,
        color: label.color
    }));
    const insertedTags = await connection.getRepository(tag_entity_1.Tag).save(tags);
    return insertedTags;
}
exports.createTags = createTags;


/***/ }),

/***/ "./src/app/tasks/task.service.ts":
/*!***************************************!*\
  !*** ./src/app/tasks/task.service.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const task_entity_1 = __webpack_require__(/*! ./task.entity */ "./src/app/tasks/task.entity.ts");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const role_service_1 = __webpack_require__(/*! ../role/role.service */ "./src/app/role/role.service.ts");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
let TaskService = class TaskService extends core_1.CrudService {
    constructor(taskRepository, employeeService, roleService) {
        super(taskRepository);
        this.taskRepository = taskRepository;
        this.employeeService = employeeService;
        this.roleService = roleService;
    }
    async createTask(task) {
        const user = context_1.RequestContext.currentUser();
        const obj = this.repository.create(Object.assign(Object.assign({}, task), { creator: user }));
        try {
            return await this.repository.save(obj);
        }
        catch (err) {
            throw new common_1.BadRequestException(err);
        }
    }
    async getMyTasks(employeeId) {
        const total = await this.taskRepository
            .createQueryBuilder('task')
            .leftJoinAndSelect('task.project', 'project')
            .leftJoinAndSelect('task.tags', 'tags')
            .leftJoinAndSelect('task.organizationSprint', 'sprint')
            .leftJoinAndSelect('task.members', 'members')
            .leftJoinAndSelect('members.user', 'users')
            .leftJoinAndSelect('task.teams', 'teams')
            .leftJoinAndSelect('task.creator', 'creator')
            .where('"task_members"."employeeId" = :employeeId', { employeeId })
            .getCount();
        const items = await this.taskRepository
            .createQueryBuilder('task')
            .leftJoinAndSelect('task.project', 'project')
            .leftJoinAndSelect('task.tags', 'tags')
            .leftJoinAndSelect('task.organizationSprint', 'sprint')
            .leftJoinAndSelect('task.members', 'members')
            .leftJoinAndSelect('members.user', 'users')
            .leftJoinAndSelect('task.teams', 'teams')
            .leftJoinAndSelect('task.creator', 'creator')
            .where((qb) => {
            const subQuery = qb
                .subQuery()
                .select('"task_employee_sub"."taskId"')
                .from('task_employee', 'task_employee_sub')
                .where('"task_employee_sub"."employeeId" = :employeeId')
                .distinct(true)
                .getQuery();
            return '"task_members"."taskId" IN(' + subQuery + ')';
        })
            .setParameter('employeeId', employeeId)
            .getMany();
        return { items, total };
    }
    async getAllTasksByEmployee(employeeId, filter) {
        const query = await this.taskRepository
            .createQueryBuilder('task')
            .leftJoin('task.members', 'members');
        if (filter && filter.where) {
            query.where({
                where: filter.where
            });
        }
        return await query
            .andWhere((qb) => {
            const subQuery = qb
                .subQuery()
                .select('"task_employee_sub"."taskId"')
                .from('task_employee', 'task_employee_sub')
                .where('"task_employee_sub"."employeeId" = :employeeId', {
                employeeId
            })
                .distinct(true)
                .getQuery();
            return '"task_members"."taskId" IN(' + subQuery + ')';
        })
            .getMany();
    }
    async getTeamTasks(employeeId) {
        console.log('emp*********', employeeId);
        if (employeeId) {
            const items = await this.taskRepository
                .createQueryBuilder('task')
                .leftJoinAndSelect('task.project', 'project')
                .leftJoinAndSelect('task.tags', 'tags')
                .leftJoinAndSelect('task.organizationSprint', 'sprint')
                .leftJoinAndSelect('task.members', 'members')
                .leftJoinAndSelect('task.teams', 'teams')
                .leftJoinAndSelect('task.creator', 'users')
                .where((qb) => {
                const subQuery = qb
                    .subQuery()
                    .select('"task_team_sub"."taskId"')
                    .from('task_team', 'task_team_sub')
                    .innerJoin('organization_team_employee', 'organization_team_employee_sub', '"organization_team_employee_sub"."organizationTeamId" = "task_team_sub"."organizationTeamId"')
                    .where('"organization_team_employee_sub"."employeeId" = :employeeId')
                    .distinct(true)
                    .getQuery();
                return '"task_teams"."taskId" IN ' + subQuery;
            })
                .setParameter('employeeId', employeeId)
                .getMany();
            return { items, total: items.length };
        }
        else {
            const items = await this.taskRepository
                .createQueryBuilder('task')
                .leftJoinAndSelect('task.project', 'project')
                .leftJoinAndSelect('task.tags', 'tags')
                .leftJoinAndSelect('task.organizationSprint', 'sprint')
                .leftJoinAndSelect('task.members', 'members')
                .leftJoinAndSelect('task.teams', 'teams')
                .leftJoinAndSelect('task.creator', 'users')
                .where((qb) => {
                const subQuery = qb
                    .subQuery()
                    .select('"task_team_sub"."taskId"')
                    .from('task_team', 'task_team_sub')
                    .leftJoin('organization_team_employee', 'organization_team_employee_sub', '"organization_team_employee_sub"."organizationTeamId" = "task_team_sub"."organizationTeamId"')
                    .distinct(true)
                    .getQuery();
                return '"task_teams"."taskId" IN ' + subQuery;
            })
                .getMany();
            return { items, total: items.length };
        }
    }
    async findTeamTasks(employeeId) {
        let employee = { id: undefined };
        let role;
        try {
            employee = await this.employeeService.findOne({
                where: {
                    user: { id: context_1.RequestContext.currentUser().id }
                }
            });
        }
        catch (e) { }
        try {
            const roleId = context_1.RequestContext.currentUser().roleId;
            if (roleId) {
                role = await this.roleService.findOne(roleId);
            }
        }
        catch (e) { }
        if (employeeId) {
            if (role.name === 'ADMIN' || role.name === 'SUPER_ADMIN') {
                return this.getTeamTasks(employeeId);
            }
            else if (employee.id === employeeId) {
                return this.getTeamTasks(employeeId);
            }
            else {
                throw new common_1.HttpException('Unauthorized', common_1.HttpStatus.UNAUTHORIZED);
            }
        }
        else {
            if (role.name === 'ADMIN' || role.name === 'SUPER_ADMIN') {
                return this.getTeamTasks();
            }
            else {
                return this.getTeamTasks(employee.id);
            }
        }
    }
};
TaskService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(task_entity_1.Task)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _b : Object, typeof (_c = typeof role_service_1.RoleService !== "undefined" && role_service_1.RoleService) === "function" ? _c : Object])
], TaskService);
exports.TaskService = TaskService;


/***/ }),

/***/ "./src/app/tenant/commands/handlers/index.ts":
/*!***************************************************!*\
  !*** ./src/app/tenant/commands/handlers/index.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const tenant_feature_organization_create_handler_1 = __webpack_require__(/*! ./tenant-feature-organization.create.handler */ "./src/app/tenant/commands/handlers/tenant-feature-organization.create.handler.ts");
exports.CommandHandlers = [tenant_feature_organization_create_handler_1.TenantFeatureOrganizationCreateHandler];


/***/ }),

/***/ "./src/app/tenant/commands/handlers/tenant-feature-organization.create.handler.ts":
/*!****************************************************************************************!*\
  !*** ./src/app/tenant/commands/handlers/tenant-feature-organization.create.handler.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantFeatureOrganizationCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const feature_service_1 = __webpack_require__(/*! ../../../feature/feature.service */ "./src/app/feature/feature.service.ts");
const tenant_feature_organization_create_command_1 = __webpack_require__(/*! ../tenant-feature-organization.create.command */ "./src/app/tenant/commands/tenant-feature-organization.create.command.ts");
let TenantFeatureOrganizationCreateHandler = class TenantFeatureOrganizationCreateHandler {
    constructor(_featureService) {
        this._featureService = _featureService;
    }
    async execute(command) {
        const { input } = command;
        return await this._featureService.updateTenantFeatureOrganizations(input);
    }
};
TenantFeatureOrganizationCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(tenant_feature_organization_create_command_1.TenantFeatureOrganizationCreateCommand),
    tslib_1.__param(0, common_1.Inject(common_1.forwardRef(() => feature_service_1.FeatureService))),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof feature_service_1.FeatureService !== "undefined" && feature_service_1.FeatureService) === "function" ? _a : Object])
], TenantFeatureOrganizationCreateHandler);
exports.TenantFeatureOrganizationCreateHandler = TenantFeatureOrganizationCreateHandler;


/***/ }),

/***/ "./src/app/tenant/commands/tenant-feature-organization.create.command.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/tenant/commands/tenant-feature-organization.create.command.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantFeatureOrganizationCreateCommand = void 0;
class TenantFeatureOrganizationCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.TenantFeatureOrganizationCreateCommand = TenantFeatureOrganizationCreateCommand;
TenantFeatureOrganizationCreateCommand.type = '[Tenant] Feature Organization Create';


/***/ }),

/***/ "./src/app/tenant/tenant-setting/tenant-setting.controller.ts":
/*!********************************************************************!*\
  !*** ./src/app/tenant/tenant-setting/tenant-setting.controller.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantSettingController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const core_1 = __webpack_require__(/*! ../../core */ "./src/app/core/index.ts");
const context_1 = __webpack_require__(/*! ../../core/context */ "./src/app/core/context/index.ts");
const roles_1 = __webpack_require__(/*! ../../shared/decorators/roles */ "./src/app/shared/decorators/roles.ts");
const role_guard_1 = __webpack_require__(/*! ../../shared/guards/auth/role.guard */ "./src/app/shared/guards/auth/role.guard.ts");
const tenant_setting_service_1 = __webpack_require__(/*! ./tenant-setting.service */ "./src/app/tenant/tenant-setting/tenant-setting.service.ts");
let TenantSettingController = class TenantSettingController extends core_1.CrudController {
    constructor(tenantSettingService) {
        super(tenantSettingService);
        this.tenantSettingService = tenantSettingService;
    }
    async get() {
        const user = context_1.RequestContext.currentUser();
        return this.tenantSettingService.get({
            where: {
                tenantId: user.tenantId
            }
        });
    }
    async saveSettings(entity) {
        return this.tenantSettingService.saveSettngs(entity);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Get tenant settings',
        security: [
            {
                role: [models_1.RolesEnum.ADMIN]
            }
        ]
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Tenant not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.SUPER_ADMIN),
    common_1.Get(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", Promise)
], TenantSettingController.prototype, "get", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Tenant settings updated successfully'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Tenant settings updated successfully.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.CREATED),
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.SUPER_ADMIN),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.ITenantSetting !== "undefined" && models_1.ITenantSetting) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], TenantSettingController.prototype, "saveSettings", null);
TenantSettingController = tslib_1.__decorate([
    swagger_1.ApiTags('TenantSetting'),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof tenant_setting_service_1.TenantSettingService !== "undefined" && tenant_setting_service_1.TenantSettingService) === "function" ? _c : Object])
], TenantSettingController);
exports.TenantSettingController = TenantSettingController;


/***/ }),

/***/ "./src/app/tenant/tenant-setting/tenant-setting.entity.ts":
/*!****************************************************************!*\
  !*** ./src/app/tenant/tenant-setting/tenant-setting.entity.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantSetting = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const tenant_base_1 = __webpack_require__(/*! ../../core/entities/tenant-base */ "./src/app/core/entities/tenant-base.ts");
let TenantSetting = class TenantSetting extends tenant_base_1.TenantBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], TenantSetting.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], TenantSetting.prototype, "value", void 0);
TenantSetting = tslib_1.__decorate([
    typeorm_1.Entity('tenant_setting')
], TenantSetting);
exports.TenantSetting = TenantSetting;


/***/ }),

/***/ "./src/app/tenant/tenant-setting/tenant-setting.module.ts":
/*!****************************************************************!*\
  !*** ./src/app/tenant/tenant-setting/tenant-setting.module.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantSettingModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const auth_module_1 = __webpack_require__(/*! ../../auth/auth.module */ "./src/app/auth/auth.module.ts");
const role_permissions_module_1 = __webpack_require__(/*! ../../role-permissions/role-permissions.module */ "./src/app/role-permissions/role-permissions.module.ts");
const role_module_1 = __webpack_require__(/*! ../../role/role.module */ "./src/app/role/role.module.ts");
const user_module_1 = __webpack_require__(/*! ../../user/user.module */ "./src/app/user/user.module.ts");
const tenant_setting_controller_1 = __webpack_require__(/*! ./tenant-setting.controller */ "./src/app/tenant/tenant-setting/tenant-setting.controller.ts");
const tenant_setting_entity_1 = __webpack_require__(/*! ./tenant-setting.entity */ "./src/app/tenant/tenant-setting/tenant-setting.entity.ts");
const tenant_setting_service_1 = __webpack_require__(/*! ./tenant-setting.service */ "./src/app/tenant/tenant-setting/tenant-setting.service.ts");
let TenantSettingModule = class TenantSettingModule {
};
TenantSettingModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([tenant_setting_entity_1.TenantSetting]),
            auth_module_1.AuthModule,
            user_module_1.UserModule,
            role_module_1.RoleModule,
            role_permissions_module_1.RolePermissionsModule
        ],
        controllers: [tenant_setting_controller_1.TenantSettingController],
        providers: [tenant_setting_service_1.TenantSettingService],
        exports: [tenant_setting_service_1.TenantSettingService]
    })
], TenantSettingModule);
exports.TenantSettingModule = TenantSettingModule;


/***/ }),

/***/ "./src/app/tenant/tenant-setting/tenant-setting.service.ts":
/*!*****************************************************************!*\
  !*** ./src/app/tenant/tenant-setting/tenant-setting.service.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantSettingService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_1 = __webpack_require__(/*! ../../core/crud */ "./src/app/core/crud/index.ts");
const tenant_setting_entity_1 = __webpack_require__(/*! ./tenant-setting.entity */ "./src/app/tenant/tenant-setting/tenant-setting.entity.ts");
const _ = __webpack_require__(/*! underscore */ "underscore");
const context_1 = __webpack_require__(/*! ../../core/context */ "./src/app/core/context/index.ts");
let TenantSettingService = class TenantSettingService extends crud_1.CrudService {
    constructor(tenantSettingRepository) {
        super(tenantSettingRepository);
        this.tenantSettingRepository = tenantSettingRepository;
    }
    async get(requrst) {
        const settings = await this.tenantSettingRepository.find(requrst);
        return _.object(_.pluck(settings, 'name'), _.pluck(settings, 'value'));
    }
    async saveSettngs(input) {
        const settingsName = _.keys(input);
        const user = context_1.RequestContext.currentUser();
        const settings = await this.tenantSettingRepository.find({
            where: {
                name: typeorm_2.In(settingsName),
                tenantId: user.tenantId
            }
        });
        const settingsByName = _.indexBy(settings, 'name');
        const saveInput = [];
        for (const key in input) {
            if (Object.prototype.hasOwnProperty.call(input, key)) {
                const setting = settingsByName[key];
                if (setting !== undefined) {
                    setting.value = input[key];
                    saveInput.push(setting);
                }
                else {
                    saveInput.push(new tenant_setting_entity_1.TenantSetting({
                        value: input[key],
                        name: key,
                        tenantId: user.tenantId
                    }));
                }
            }
        }
        this.tenantSettingRepository.save(saveInput);
        return _.object(_.pluck(saveInput, 'name'), _.pluck(saveInput, 'value'));
    }
};
TenantSettingService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(tenant_setting_entity_1.TenantSetting)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], TenantSettingService);
exports.TenantSettingService = TenantSettingService;


/***/ }),

/***/ "./src/app/tenant/tenant.controller.ts":
/*!*********************************************!*\
  !*** ./src/app/tenant/tenant.controller.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const roles_1 = __webpack_require__(/*! ../shared/decorators/roles */ "./src/app/shared/decorators/roles.ts");
const role_guard_1 = __webpack_require__(/*! ../shared/guards/auth/role.guard */ "./src/app/shared/guards/auth/role.guard.ts");
const tenant_service_1 = __webpack_require__(/*! ./tenant.service */ "./src/app/tenant/tenant.service.ts");
let TenantController = class TenantController extends crud_controller_1.CrudController {
    constructor(tenantService) {
        super(tenantService);
        this.tenantService = tenantService;
    }
    async create(entity) {
        const user = context_1.RequestContext.currentUser();
        if (user.tenantId || user.roleId) {
            throw new common_1.BadRequestException('Tenant already exists');
        }
        return this.tenantService.onboardTenant(entity, user);
    }
    async delete(id) {
        return this.tenantService.delete(id);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Create new tenant. The user who creates the tenant is given the super admin role.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.CREATED),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.ITenantCreateInput !== "undefined" && models_1.ITenantCreateInput) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], TenantController.prototype, "create", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Delete tenant',
        security: [
            {
                role: [models_1.RolesEnum.ADMIN]
            }
        ]
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NO_CONTENT,
        description: 'The tenant has been successfully deleted'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Tenant not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(role_guard_1.RoleGuard),
    roles_1.Roles(models_1.RolesEnum.SUPER_ADMIN),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", Promise)
], TenantController.prototype, "delete", null);
TenantController = tslib_1.__decorate([
    swagger_1.ApiTags('Tenant'),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof tenant_service_1.TenantService !== "undefined" && tenant_service_1.TenantService) === "function" ? _c : Object])
], TenantController);
exports.TenantController = TenantController;


/***/ }),

/***/ "./src/app/tenant/tenant.entity.ts":
/*!*****************************************!*\
  !*** ./src/app/tenant/tenant.entity.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.Tenant = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const base_1 = __webpack_require__(/*! ../core/entities/base */ "./src/app/core/entities/base.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const role_permissions_entity_1 = __webpack_require__(/*! ../role-permissions/role-permissions.entity */ "./src/app/role-permissions/role-permissions.entity.ts");
const feature_organization_entity_1 = __webpack_require__(/*! ../feature/feature_organization.entity */ "./src/app/feature/feature_organization.entity.ts");
let Tenant = class Tenant extends base_1.Base {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    typeorm_1.Index(),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], Tenant.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: organization_entity_1.Organization }),
    typeorm_1.OneToMany(() => organization_entity_1.Organization, (organization) => organization.tenant),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Tenant.prototype, "organizations", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: role_permissions_entity_1.RolePermissions }),
    typeorm_1.OneToMany((type) => role_permissions_entity_1.RolePermissions, (rolePermission) => rolePermission.tenant),
    tslib_1.__metadata("design:type", Array)
], Tenant.prototype, "rolePermissions", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: feature_organization_entity_1.FeatureOrganization }),
    typeorm_1.OneToMany((type) => feature_organization_entity_1.FeatureOrganization, (featureOrganization) => featureOrganization.tenant),
    tslib_1.__metadata("design:type", Array)
], Tenant.prototype, "featureOrganizations", void 0);
Tenant = tslib_1.__decorate([
    typeorm_1.Entity('tenant')
], Tenant);
exports.Tenant = Tenant;


/***/ }),

/***/ "./src/app/tenant/tenant.module.ts":
/*!*****************************************!*\
  !*** ./src/app/tenant/tenant.module.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const auth_module_1 = __webpack_require__(/*! ../auth/auth.module */ "./src/app/auth/auth.module.ts");
const feature_entity_1 = __webpack_require__(/*! ../feature/feature.entity */ "./src/app/feature/feature.entity.ts");
const feature_service_1 = __webpack_require__(/*! ../feature/feature.service */ "./src/app/feature/feature.service.ts");
const feature_organization_entity_1 = __webpack_require__(/*! ../feature/feature_organization.entity */ "./src/app/feature/feature_organization.entity.ts");
const role_permissions_module_1 = __webpack_require__(/*! ../role-permissions/role-permissions.module */ "./src/app/role-permissions/role-permissions.module.ts");
const role_module_1 = __webpack_require__(/*! ../role/role.module */ "./src/app/role/role.module.ts");
const user_module_1 = __webpack_require__(/*! ../user/user.module */ "./src/app/user/user.module.ts");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/tenant/commands/handlers/index.ts");
const tenant_controller_1 = __webpack_require__(/*! ./tenant.controller */ "./src/app/tenant/tenant.controller.ts");
const tenant_entity_1 = __webpack_require__(/*! ./tenant.entity */ "./src/app/tenant/tenant.entity.ts");
const tenant_service_1 = __webpack_require__(/*! ./tenant.service */ "./src/app/tenant/tenant.service.ts");
let TenantModule = class TenantModule {
};
TenantModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([tenant_entity_1.Tenant, feature_entity_1.Feature, feature_organization_entity_1.FeatureOrganization]),
            auth_module_1.AuthModule,
            user_module_1.UserModule,
            role_module_1.RoleModule,
            role_permissions_module_1.RolePermissionsModule,
            cqrs_1.CqrsModule
        ],
        controllers: [tenant_controller_1.TenantController],
        providers: [tenant_service_1.TenantService, feature_service_1.FeatureService, ...handlers_1.CommandHandlers],
        exports: [tenant_service_1.TenantService, role_permissions_module_1.RolePermissionsModule]
    })
], TenantModule);
exports.TenantModule = TenantModule;


/***/ }),

/***/ "./src/app/tenant/tenant.seed.ts":
/*!***************************************!*\
  !*** ./src/app/tenant/tenant.seed.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomTenants = exports.createDefaultTenants = exports.getDefaultTenant = void 0;
const tenant_entity_1 = __webpack_require__(/*! ./tenant.entity */ "./src/app/tenant/tenant.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
exports.getDefaultTenant = async (connection) => {
    const repo = connection.getRepository(tenant_entity_1.Tenant);
    const existedTenant = await repo.findOne({ where: { name: 'Ever' } });
    return existedTenant;
};
exports.createDefaultTenants = async (connection) => {
    const tenant = {
        name: 'Ever'
    };
    await insertTenant(connection, tenant);
    return tenant;
};
exports.createRandomTenants = async (connection, noOfTenants = 0) => {
    const randomTenants = [];
    for (let i = 0; i < noOfTenants; i++) {
        const tenant = new tenant_entity_1.Tenant();
        tenant.name = faker.company.companyName();
        randomTenants.push(tenant);
    }
    return await insertTenants(connection, randomTenants);
};
const insertTenant = async (connection, tenant) => {
    const repo = connection.getRepository(tenant_entity_1.Tenant);
    const existedTenant = await repo.findOne({ where: { name: tenant.name } });
    if (existedTenant)
        return existedTenant;
    else {
        await connection
            .createQueryBuilder()
            .insert()
            .into(tenant_entity_1.Tenant)
            .values(tenant)
            .execute();
        return tenant;
    }
};
const insertTenants = async (connection, tenants) => {
    return await connection.manager.save(tenants);
};


/***/ }),

/***/ "./src/app/tenant/tenant.service.ts":
/*!******************************************!*\
  !*** ./src/app/tenant/tenant.service.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const tenant_entity_1 = __webpack_require__(/*! ./tenant.entity */ "./src/app/tenant/tenant.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const tenant_role_bulk_create_command_1 = __webpack_require__(/*! ../role/commands/tenant-role-bulk-create.command */ "./src/app/role/commands/tenant-role-bulk-create.command.ts");
const tenant_feature_organization_create_command_1 = __webpack_require__(/*! ./commands/tenant-feature-organization.create.command */ "./src/app/tenant/commands/tenant-feature-organization.create.command.ts");
let TenantService = class TenantService extends crud_service_1.CrudService {
    constructor(tenantRepository, userService, commandBus) {
        super(tenantRepository);
        this.tenantRepository = tenantRepository;
        this.userService = userService;
        this.commandBus = commandBus;
    }
    async onboardTenant(entity, user) {
        const tenant = await this.create(entity);
        this.commandBus.execute(new tenant_feature_organization_create_command_1.TenantFeatureOrganizationCreateCommand([tenant]));
        const roles = await this.commandBus.execute(new tenant_role_bulk_create_command_1.TenantRoleBulkCreateCommand([tenant]));
        const role = await roles.find((defaultRole) => defaultRole.name === models_1.RolesEnum.SUPER_ADMIN);
        await this.userService.update(user.id, {
            tenant: {
                id: tenant.id
            },
            role: {
                id: role.id
            }
        });
        return tenant;
    }
};
TenantService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(tenant_entity_1.Tenant)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" ? _b : Object, typeof (_c = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _c : Object])
], TenantService);
exports.TenantService = TenantService;


/***/ }),

/***/ "./src/app/time-off-policy/default-time-off-policies.ts":
/*!**************************************************************!*\
  !*** ./src/app/time-off-policy/default-time-off-policies.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_TIMEOFF_POLICIES = void 0;
exports.DEFAULT_TIMEOFF_POLICIES = [
    'Policy 1',
    'Policy 2',
    'Policy 3',
    'Policy 4',
    'Policy 5',
    'Policy 6',
    'Policy 7',
    'Policy 8',
    'Policy 9',
    'Policy 10'
];


/***/ }),

/***/ "./src/app/time-off-policy/time-off-policy.controller.ts":
/*!***************************************************************!*\
  !*** ./src/app/time-off-policy/time-off-policy.controller.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeOffPolicyController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const time_off_policy_entity_1 = __webpack_require__(/*! ./time-off-policy.entity */ "./src/app/time-off-policy/time-off-policy.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const time_off_policy_service_1 = __webpack_require__(/*! ./time-off-policy.service */ "./src/app/time-off-policy/time-off-policy.service.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const parse_json_pipe_1 = __webpack_require__(/*! ../shared/pipes/parse-json.pipe */ "./src/app/shared/pipes/parse-json.pipe.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let TimeOffPolicyController = class TimeOffPolicyController extends crud_controller_1.CrudController {
    constructor(policyService) {
        super(policyService);
        this.policyService = policyService;
    }
    async findAllTimeOffPolicies(data) {
        const { relations, findInput } = data;
        return this.policyService.getAllPolicies({
            where: findInput,
            relations
        });
    }
    async createTimeOffPolicy(entity, ...options) {
        return this.policyService.create(entity);
    }
    async updateOrganizationTeam(id, entity, ...options) {
        return this.policyService.update(id, entity);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all policies.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found policies',
        type: time_off_policy_entity_1.TimeOffPolicy
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.POLICY_VIEW),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], TimeOffPolicyController.prototype, "findAllTimeOffPolicies", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.POLICY_EDIT),
    common_1.Post('/create'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof models_1.ITimeOffPolicyCreateInput !== "undefined" && models_1.ITimeOffPolicyCreateInput) === "function" ? _b : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], TimeOffPolicyController.prototype, "createTimeOffPolicy", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully edited.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.POLICY_EDIT),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_d = typeof models_1.ITimeOffPolicyUpdateInput !== "undefined" && models_1.ITimeOffPolicyUpdateInput) === "function" ? _d : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], TimeOffPolicyController.prototype, "updateOrganizationTeam", null);
TimeOffPolicyController = tslib_1.__decorate([
    swagger_1.ApiTags('TimeOffPolicy'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_f = typeof time_off_policy_service_1.TimeOffPolicyService !== "undefined" && time_off_policy_service_1.TimeOffPolicyService) === "function" ? _f : Object])
], TimeOffPolicyController);
exports.TimeOffPolicyController = TimeOffPolicyController;


/***/ }),

/***/ "./src/app/time-off-policy/time-off-policy.entity.ts":
/*!***********************************************************!*\
  !*** ./src/app/time-off-policy/time-off-policy.entity.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeOffPolicy = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let TimeOffPolicy = class TimeOffPolicy extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], TimeOffPolicy.prototype, "name", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Boolean)
], TimeOffPolicy.prototype, "requiresApproval", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Boolean)
], TimeOffPolicy.prototype, "paid", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => employee_entity_1.Employee, { cascade: ['update'] }),
    typeorm_1.JoinTable({
        name: 'time_off_policy_employee'
    }),
    tslib_1.__metadata("design:type", Array)
], TimeOffPolicy.prototype, "employees", void 0);
TimeOffPolicy = tslib_1.__decorate([
    typeorm_1.Entity('time_off_policy')
], TimeOffPolicy);
exports.TimeOffPolicy = TimeOffPolicy;


/***/ }),

/***/ "./src/app/time-off-policy/time-off-policy.module.ts":
/*!***********************************************************!*\
  !*** ./src/app/time-off-policy/time-off-policy.module.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeOffPolicyModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const time_off_policy_service_1 = __webpack_require__(/*! ./time-off-policy.service */ "./src/app/time-off-policy/time-off-policy.service.ts");
const time_off_policy_entity_1 = __webpack_require__(/*! ./time-off-policy.entity */ "./src/app/time-off-policy/time-off-policy.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const time_off_policy_controller_1 = __webpack_require__(/*! ./time-off-policy.controller */ "./src/app/time-off-policy/time-off-policy.controller.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let TimeOffPolicyModule = class TimeOffPolicyModule {
};
TimeOffPolicyModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([user_entity_1.User, time_off_policy_entity_1.TimeOffPolicy, employee_entity_1.Employee]),
            tenant_module_1.TenantModule
        ],
        controllers: [time_off_policy_controller_1.TimeOffPolicyController],
        providers: [time_off_policy_service_1.TimeOffPolicyService, user_service_1.UserService],
        exports: [typeorm_1.TypeOrmModule, user_service_1.UserService]
    })
], TimeOffPolicyModule);
exports.TimeOffPolicyModule = TimeOffPolicyModule;


/***/ }),

/***/ "./src/app/time-off-policy/time-off-policy.seed.ts":
/*!*********************************************************!*\
  !*** ./src/app/time-off-policy/time-off-policy.seed.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomTimeOffPolicies = exports.createDefaultTimeOffPolicy = void 0;
const time_off_policy_entity_1 = __webpack_require__(/*! ./time-off-policy.entity */ "./src/app/time-off-policy/time-off-policy.entity.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const default_time_off_policies_1 = __webpack_require__(/*! ./default-time-off-policies */ "./src/app/time-off-policy/default-time-off-policies.ts");
exports.createDefaultTimeOffPolicy = async (connection, defaultData) => {
    const defaultTimeOffPolicy = new time_off_policy_entity_1.TimeOffPolicy();
    defaultTimeOffPolicy.name = 'Default Policy';
    defaultTimeOffPolicy.organization = defaultData.org;
    defaultTimeOffPolicy.tenant = defaultData.org.tenant;
    defaultTimeOffPolicy.requiresApproval = false;
    defaultTimeOffPolicy.paid = true;
    defaultTimeOffPolicy.employees = defaultData.employees;
    await insertDefaultPolicy(connection, defaultTimeOffPolicy);
    return defaultTimeOffPolicy;
};
const insertDefaultPolicy = async (connection, defaultPolicy) => {
    await connection
        .createQueryBuilder()
        .insert()
        .into(time_off_policy_entity_1.TimeOffPolicy)
        .values(defaultPolicy)
        .execute();
};
exports.createRandomTimeOffPolicies = async (connection, tenants, tenantOrganizationsMap) => {
    const policies = [];
    (tenants || []).forEach((tenant) => {
        const organizations = tenantOrganizationsMap.get(tenant);
        (organizations || []).forEach((organization) => {
            default_time_off_policies_1.DEFAULT_TIMEOFF_POLICIES.forEach((name) => {
                const policy = new time_off_policy_entity_1.TimeOffPolicy();
                policy.name = name;
                policy.organization = organization;
                policy.tenant = tenant;
                policy.paid = faker.random.arrayElement([true, false]);
                policy.requiresApproval = faker.random.arrayElement([
                    true,
                    false
                ]);
                policies.push(policy);
            });
        });
    });
    return await connection.manager.save(policies);
};


/***/ }),

/***/ "./src/app/time-off-policy/time-off-policy.service.ts":
/*!************************************************************!*\
  !*** ./src/app/time-off-policy/time-off-policy.service.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeOffPolicyService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const time_off_policy_entity_1 = __webpack_require__(/*! ./time-off-policy.entity */ "./src/app/time-off-policy/time-off-policy.entity.ts");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
let TimeOffPolicyService = class TimeOffPolicyService extends crud_service_1.CrudService {
    constructor(policyRepository, employeeRepository) {
        super(policyRepository);
        this.policyRepository = policyRepository;
        this.employeeRepository = employeeRepository;
    }
    async getAllPolicies(filter) {
        const total = await this.repository.count(filter);
        const items = await this.repository.find(filter);
        return { items, total };
    }
    async create(entity) {
        const policy = new time_off_policy_entity_1.TimeOffPolicy();
        policy.name = entity.name;
        policy.organizationId = entity.organizationId;
        policy.tenantId = entity.tenantId;
        policy.requiresApproval = entity.requiresApproval;
        policy.paid = entity.paid;
        const employees = await this.employeeRepository.findByIds(entity.employees, {
            relations: ['user']
        });
        policy.employees = employees;
        return this.policyRepository.save(policy);
    }
    async update(id, entity) {
        try {
            await this.policyRepository.delete(id);
            const policy = new time_off_policy_entity_1.TimeOffPolicy();
            policy.name = entity.name;
            policy.organizationId = entity.organizationId;
            policy.tenantId = entity.tenantId;
            policy.requiresApproval = entity.requiresApproval;
            policy.paid = entity.paid;
            const employees = await this.employeeRepository.findByIds(entity.employees, {
                relations: ['user']
            });
            policy.employees = employees;
            return this.policyRepository.save(policy);
        }
        catch (err) {
            throw new common_1.BadRequestException(err);
        }
    }
};
TimeOffPolicyService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(time_off_policy_entity_1.TimeOffPolicy)),
    tslib_1.__param(1, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], TimeOffPolicyService);
exports.TimeOffPolicyService = TimeOffPolicyService;


/***/ }),

/***/ "./src/app/time-off-request/commands/index.ts":
/*!****************************************************!*\
  !*** ./src/app/time-off-request/commands/index.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeOffUpdateCommand = exports.TimeOffCreateCommand = exports.TimeOffStatusCommand = void 0;
var time_off_status_command_1 = __webpack_require__(/*! ./time-off.status.command */ "./src/app/time-off-request/commands/time-off.status.command.ts");
Object.defineProperty(exports, "TimeOffStatusCommand", { enumerable: true, get: function () { return time_off_status_command_1.TimeOffStatusCommand; } });
var time_off_create_command_1 = __webpack_require__(/*! ./time-off.create.command */ "./src/app/time-off-request/commands/time-off.create.command.ts");
Object.defineProperty(exports, "TimeOffCreateCommand", { enumerable: true, get: function () { return time_off_create_command_1.TimeOffCreateCommand; } });
var time_off_update_command_1 = __webpack_require__(/*! ./time-off.update.command */ "./src/app/time-off-request/commands/time-off.update.command.ts");
Object.defineProperty(exports, "TimeOffUpdateCommand", { enumerable: true, get: function () { return time_off_update_command_1.TimeOffUpdateCommand; } });


/***/ }),

/***/ "./src/app/time-off-request/commands/time-off.create.command.ts":
/*!**********************************************************************!*\
  !*** ./src/app/time-off-request/commands/time-off.create.command.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeOffCreateCommand = void 0;
class TimeOffCreateCommand {
    constructor(timeOff) {
        this.timeOff = timeOff;
    }
}
exports.TimeOffCreateCommand = TimeOffCreateCommand;
TimeOffCreateCommand.type = '[TimeOff] Create';


/***/ }),

/***/ "./src/app/time-off-request/commands/time-off.status.command.ts":
/*!**********************************************************************!*\
  !*** ./src/app/time-off-request/commands/time-off.status.command.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeOffStatusCommand = void 0;
class TimeOffStatusCommand {
    constructor(id, status) {
        this.id = id;
        this.status = status;
    }
}
exports.TimeOffStatusCommand = TimeOffStatusCommand;
TimeOffStatusCommand.type = '[TimeOff] Status';


/***/ }),

/***/ "./src/app/time-off-request/commands/time-off.update.command.ts":
/*!**********************************************************************!*\
  !*** ./src/app/time-off-request/commands/time-off.update.command.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeOffUpdateCommand = void 0;
class TimeOffUpdateCommand {
    constructor(id, timeOff) {
        this.id = id;
        this.timeOff = timeOff;
    }
}
exports.TimeOffUpdateCommand = TimeOffUpdateCommand;
TimeOffUpdateCommand.type = '[TimeOff] update';


/***/ }),

/***/ "./src/app/time-off-request/time-off-request.controller.ts":
/*!*****************************************************************!*\
  !*** ./src/app/time-off-request/time-off-request.controller.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeOffRequestController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const time_off_request_entity_1 = __webpack_require__(/*! ./time-off-request.entity */ "./src/app/time-off-request/time-off-request.entity.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const time_off_request_service_1 = __webpack_require__(/*! ./time-off-request.service */ "./src/app/time-off-request/time-off-request.service.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const models_2 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/time-off-request/commands/index.ts");
const parse_json_pipe_1 = __webpack_require__(/*! ../shared/pipes/parse-json.pipe */ "./src/app/shared/pipes/parse-json.pipe.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let TimeOffRequestController = class TimeOffRequestController extends crud_controller_1.CrudController {
    constructor(requestService, commandBus) {
        super(requestService);
        this.requestService = requestService;
        this.commandBus = commandBus;
    }
    async findAllTimeOffRequest(data) {
        const { relations, findInput, filterDate } = data;
        return this.requestService.getAllTimeOffRequests(relations, findInput, filterDate);
    }
    async createTimeOffRequest(entity, ...options) {
        return this.requestService.create(entity);
    }
    async timeOffRequestUpdate(id, entity) {
        return this.requestService.updateTimeOffByAdmin(id, entity);
    }
    async timeOffRequestApproved(id) {
        return this.commandBus.execute(new commands_1.TimeOffStatusCommand(id, models_1.StatusTypesEnum.APPROVED));
    }
    async timeOffRequestDenied(id) {
        return this.commandBus.execute(new commands_1.TimeOffStatusCommand(id, models_1.StatusTypesEnum.DENIED));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all time off requests.' }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], TimeOffRequestController.prototype, "findAllTimeOffRequest", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new time off request / holiday record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The new time off request / holiday record created'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof models_1.ITimeOffCreateInput !== "undefined" && models_1.ITimeOffCreateInput) === "function" ? _b : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], TimeOffRequestController.prototype, "createTimeOffRequest", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Time off request update' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found request time off',
        type: time_off_request_entity_1.TimeOffRequest
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_2.PermissionsEnum.TIME_OFF_EDIT),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_d = typeof models_1.ITimeOffCreateInput !== "undefined" && models_1.ITimeOffCreateInput) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], TimeOffRequestController.prototype, "timeOffRequestUpdate", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Time off request approved' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found request time off',
        type: time_off_request_entity_1.TimeOffRequest
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_2.PermissionsEnum.TIME_OFF_EDIT),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_2.PermissionsEnum.TIME_OFF_EDIT),
    common_1.Put('approval/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], TimeOffRequestController.prototype, "timeOffRequestApproved", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Time off request denied' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found Time off',
        type: time_off_request_entity_1.TimeOffRequest
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_2.PermissionsEnum.TIME_OFF_EDIT),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Put('denied/:id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], TimeOffRequestController.prototype, "timeOffRequestDenied", null);
TimeOffRequestController = tslib_1.__decorate([
    swagger_1.ApiTags('TimeOffRequest'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_h = typeof time_off_request_service_1.TimeOffRequestService !== "undefined" && time_off_request_service_1.TimeOffRequestService) === "function" ? _h : Object, typeof (_j = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _j : Object])
], TimeOffRequestController);
exports.TimeOffRequestController = TimeOffRequestController;


/***/ }),

/***/ "./src/app/time-off-request/time-off-request.entity.ts":
/*!*************************************************************!*\
  !*** ./src/app/time-off-request/time-off-request.entity.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeOffRequest = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const time_off_policy_entity_1 = __webpack_require__(/*! ../time-off-policy/time-off-policy.entity */ "./src/app/time-off-policy/time-off-policy.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let TimeOffRequest = class TimeOffRequest extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    typeorm_1.ManyToMany((type) => employee_entity_1.Employee, { cascade: true }),
    typeorm_1.JoinTable({
        name: 'time_off_request_employee'
    }),
    tslib_1.__metadata("design:type", Array)
], TimeOffRequest.prototype, "employees", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], TimeOffRequest.prototype, "documentUrl", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], TimeOffRequest.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: time_off_policy_entity_1.TimeOffPolicy }),
    class_validator_1.IsOptional(),
    typeorm_1.ManyToOne((type) => time_off_policy_entity_1.TimeOffPolicy, {
        nullable: false,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.ITimeOffPolicy !== "undefined" && models_1.ITimeOffPolicy) === "function" ? _a : Object)
], TimeOffRequest.prototype, "policy", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    class_validator_1.IsDate(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], TimeOffRequest.prototype, "start", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    class_validator_1.IsDate(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], TimeOffRequest.prototype, "end", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Date }),
    class_validator_1.IsDate(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], TimeOffRequest.prototype, "requestDate", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.StatusTypesEnum }),
    class_validator_1.IsEnum(models_1.StatusTypesEnum),
    typeorm_1.Column({ nullable: false }),
    tslib_1.__metadata("design:type", String)
], TimeOffRequest.prototype, "status", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", Boolean)
], TimeOffRequest.prototype, "isHoliday", void 0);
TimeOffRequest = tslib_1.__decorate([
    typeorm_1.Entity('time_off_request')
], TimeOffRequest);
exports.TimeOffRequest = TimeOffRequest;


/***/ }),

/***/ "./src/app/time-off-request/time-off-request.module.ts":
/*!*************************************************************!*\
  !*** ./src/app/time-off-request/time-off-request.module.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeOffRequestModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const time_off_request_service_1 = __webpack_require__(/*! ./time-off-request.service */ "./src/app/time-off-request/time-off-request.service.ts");
const time_off_request_entity_1 = __webpack_require__(/*! ./time-off-request.entity */ "./src/app/time-off-request/time-off-request.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const time_off_request_controller_1 = __webpack_require__(/*! ./time-off-request.controller */ "./src/app/time-off-request/time-off-request.controller.ts");
const time_off_policy_entity_1 = __webpack_require__(/*! ../time-off-policy/time-off-policy.entity */ "./src/app/time-off-policy/time-off-policy.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const request_approval_entity_1 = __webpack_require__(/*! ../request-approval/request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const approval_policy_entity_1 = __webpack_require__(/*! ../approval-policy/approval-policy.entity */ "./src/app/approval-policy/approval-policy.entity.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let TimeOffRequestModule = class TimeOffRequestModule {
};
TimeOffRequestModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([
                time_off_request_entity_1.TimeOffRequest,
                employee_entity_1.Employee,
                user_entity_1.User,
                time_off_policy_entity_1.TimeOffPolicy,
                request_approval_entity_1.RequestApproval,
                approval_policy_entity_1.ApprovalPolicy
            ]),
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [time_off_request_controller_1.TimeOffRequestController],
        providers: [time_off_request_service_1.TimeOffRequestService, user_service_1.UserService],
        exports: [typeorm_1.TypeOrmModule]
    })
], TimeOffRequestModule);
exports.TimeOffRequestModule = TimeOffRequestModule;


/***/ }),

/***/ "./src/app/time-off-request/time-off-request.seed.ts":
/*!***********************************************************!*\
  !*** ./src/app/time-off-request/time-off-request.seed.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomEmployeeTimeOff = exports.createDefaultEmployeeTimeOff = void 0;
const faker = __webpack_require__(/*! faker */ "faker");
const time_off_request_entity_1 = __webpack_require__(/*! ./time-off-request.entity */ "./src/app/time-off-request/time-off-request.entity.ts");
const time_off_policy_entity_1 = __webpack_require__(/*! ../time-off-policy/time-off-policy.entity */ "./src/app/time-off-policy/time-off-policy.entity.ts");
const date_fns_1 = __webpack_require__(/*! date-fns */ "date-fns");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const _ = __webpack_require__(/*! underscore */ "underscore");
const status = Object.values(models_1.StatusTypesEnum);
exports.createDefaultEmployeeTimeOff = async (connection, tenant, organization, employees, noOfEmployeeTimeOffRequest) => {
    let requests = [];
    const policies = await connection.manager.find(time_off_policy_entity_1.TimeOffPolicy, {
        where: [{ organizationId: organization.id }]
    });
    requests = await dataOperation(connection, tenant, requests, noOfEmployeeTimeOffRequest, organization, employees, policies);
    return requests;
};
exports.createRandomEmployeeTimeOff = async (connection, tenants, tenantOrganizationsMap, tenantEmployeeMap, noOfEmployeeTimeOffRequest) => {
    let requests = [];
    for (const tenant of tenants) {
        const employees = tenantEmployeeMap.get(tenant);
        const organizations = tenantOrganizationsMap.get(tenant);
        for (const organization of organizations) {
            const policies = await connection.manager.find(time_off_policy_entity_1.TimeOffPolicy, {
                where: [{ organizationId: organization.id }]
            });
            requests = await dataOperation(connection, tenant, requests, noOfEmployeeTimeOffRequest, organization, employees, policies);
        }
    }
    return requests;
};
const dataOperation = async (connection, tenant, requests, noOfEmployeeTimeOffRequest, organization, employees, policies) => {
    for (let i = 0; i < noOfEmployeeTimeOffRequest; i++) {
        const request = new time_off_request_entity_1.TimeOffRequest();
        request.organizationId = organization.id;
        request.tenant = tenant;
        request.employees = _.chain(employees)
            .shuffle()
            .take(faker.random.number({ min: 1, max: 3 }))
            .values()
            .value();
        request.description = 'Time off';
        request.isHoliday = faker.random.arrayElement([true, false]);
        request.start = faker.date.future(0.5);
        request.end = date_fns_1.addDays(request.start, faker.random.number(7));
        request.policy = faker.random.arrayElement(policies);
        request.requestDate = faker.date.recent();
        request.status = faker.random.arrayElement(status);
        request.documentUrl = '';
        requests.push(request);
    }
    await connection.manager.save(requests);
    return requests;
};


/***/ }),

/***/ "./src/app/time-off-request/time-off-request.service.ts":
/*!**************************************************************!*\
  !*** ./src/app/time-off-request/time-off-request.service.ts ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeOffRequestService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const time_off_request_entity_1 = __webpack_require__(/*! ./time-off-request.entity */ "./src/app/time-off-request/time-off-request.entity.ts");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const request_approval_entity_1 = __webpack_require__(/*! ../request-approval/request-approval.entity */ "./src/app/request-approval/request-approval.entity.ts");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const moment = __webpack_require__(/*! moment */ "moment");
let TimeOffRequestService = class TimeOffRequestService extends crud_service_1.CrudService {
    constructor(timeOffRequestRepository, requestApprovalRepository) {
        super(timeOffRequestRepository);
        this.timeOffRequestRepository = timeOffRequestRepository;
        this.requestApprovalRepository = requestApprovalRepository;
    }
    async create(entity) {
        try {
            const request = new time_off_request_entity_1.TimeOffRequest();
            Object.assign(request, entity);
            const timeOffRequestSaved = await this.timeOffRequestRepository.save(request);
            const requestApproval = new request_approval_entity_1.RequestApproval();
            requestApproval.requestId = timeOffRequestSaved.id;
            requestApproval.requestType =
                models_1.ApprovalPolicyTypesStringEnum.TIME_OFF;
            requestApproval.status = timeOffRequestSaved.status
                ? models_1.StatusTypesMapRequestApprovalEnum[timeOffRequestSaved.status]
                : models_1.RequestApprovalStatusTypesEnum.REQUESTED;
            requestApproval.createdBy = context_1.RequestContext.currentUser().id;
            requestApproval.createdByName = context_1.RequestContext.currentUser().name;
            requestApproval.name = 'Request time off';
            requestApproval.min_count = 1;
            requestApproval.organizationId = timeOffRequestSaved.organizationId;
            requestApproval.tenantId = timeOffRequestSaved.tenantId;
            await this.requestApprovalRepository.save(requestApproval);
            return timeOffRequestSaved;
        }
        catch (err) {
            throw new common_1.BadRequestException(err);
        }
    }
    async getAllTimeOffRequests(relations, findInput, filterDate) {
        try {
            const tenantId = context_1.RequestContext.currentTenantId();
            const query = this.timeOffRequestRepository.createQueryBuilder('timeoff');
            query
                .leftJoinAndSelect(`${query.alias}.employees`, `employees`)
                .leftJoinAndSelect(`${query.alias}.policy`, `policy`)
                .leftJoinAndSelect(`employees.user`, `user`);
            query.where((qb) => {
                qb.andWhere(`"${query.alias}"."organizationId" = :organizationId`, {
                    organizationId: findInput.organizationId
                });
                qb.andWhere(`"${query.alias}"."tenantId" = :tenantId`, {
                    tenantId
                });
            });
            if (findInput['employeeId']) {
                const employeeIds = [findInput['employeeId']];
                query.innerJoin(`${query.alias}.employees`, 'employee', 'employee.id IN (:...employeeIds)', { employeeIds });
            }
            if (filterDate) {
                const startDate = moment(filterDate)
                    .startOf('month')
                    .format('YYYY-MM-DD hh:mm:ss');
                const endDate = moment(filterDate)
                    .endOf('month')
                    .format('YYYY-MM-DD hh:mm:ss');
                query.andWhere(`"${query.alias}"."start" BETWEEN :begin AND :end`, { begin: startDate, end: endDate });
            }
            const items = await query.getMany();
            return { items, total: items.length };
        }
        catch (err) {
            throw new common_1.BadRequestException(err);
        }
    }
    async updateTimeOffByAdmin(id, timeOffRequest) {
        await this.timeOffRequestRepository.delete(id);
        return await this.timeOffRequestRepository.save(timeOffRequest);
    }
    async updateStatusTimeOffByAdmin(id, status) {
        try {
            const timeOffRequest = await this.timeOffRequestRepository.findOne(id);
            if (!timeOffRequest) {
                throw new common_1.NotFoundException('Request time off not found');
            }
            if (timeOffRequest.status === models_1.StatusTypesEnum.REQUESTED) {
                timeOffRequest.status = status;
            }
            else {
                throw new common_1.ConflictException('Request time off is Conflict');
            }
            return await this.timeOffRequestRepository.save(timeOffRequest);
        }
        catch (err) {
            throw new common_1.BadRequestException(err);
        }
    }
};
TimeOffRequestService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(time_off_request_entity_1.TimeOffRequest)),
    tslib_1.__param(1, typeorm_1.InjectRepository(request_approval_entity_1.RequestApproval)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], TimeOffRequestService);
exports.TimeOffRequestService = TimeOffRequestService;


/***/ }),

/***/ "./src/app/timesheet/activity.entity.ts":
/*!**********************************************!*\
  !*** ./src/app/timesheet/activity.entity.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Activity = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const time_slot_entity_1 = __webpack_require__(/*! ./time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const task_entity_1 = __webpack_require__(/*! ../tasks/task.entity */ "./src/app/tasks/task.entity.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let Activity = class Activity extends tenant_organization_base_1.TenantOrganizationBase {
    getStoppedAt() {
        if (typeof this.metaData === 'string') {
            try {
                this.metaData = JSON.parse(this.metaData);
            }
            catch (error) {
                this.metaData = {};
            }
        }
    }
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.ManyToOne(() => employee_entity_1.Employee),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IEmployee !== "undefined" && models_1.IEmployee) === "function" ? _a : Object)
], Activity.prototype, "employee", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((activity) => activity.employee),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Activity.prototype, "employeeId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: organization_projects_entity_1.OrganizationProject }),
    typeorm_1.ManyToOne(() => organization_projects_entity_1.OrganizationProject, { nullable: true }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof models_1.IOrganizationProject !== "undefined" && models_1.IOrganizationProject) === "function" ? _b : Object)
], Activity.prototype, "project", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((activity) => activity.project),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Activity.prototype, "projectId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: time_slot_entity_1.TimeSlot }),
    typeorm_1.ManyToOne(() => time_slot_entity_1.TimeSlot, { nullable: true }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_c = typeof models_1.ITimeSlot !== "undefined" && models_1.ITimeSlot) === "function" ? _c : Object)
], Activity.prototype, "timeSlot", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((activity) => activity.timeSlot),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Activity.prototype, "timeSlotId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: task_entity_1.Task }),
    typeorm_1.ManyToOne(() => task_entity_1.Task, { nullable: true }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_d = typeof models_1.ITask !== "undefined" && models_1.ITask) === "function" ? _d : Object)
], Activity.prototype, "task", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((activity) => activity.task),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Activity.prototype, "taskId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Activity.prototype, "title", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Activity.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: 'json' }),
    class_validator_1.IsDateString(),
    typeorm_1.Column({
        nullable: true,
        type: environment_1.environment.database.type === 'sqlite' ? 'text' : 'json'
    }),
    tslib_1.__metadata("design:type", Object)
], Activity.prototype, "metaData", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: 'date' }),
    class_validator_1.IsDateString(),
    typeorm_1.CreateDateColumn({ type: 'date' }),
    tslib_1.__metadata("design:type", String)
], Activity.prototype, "date", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: 'time' }),
    class_validator_1.IsDateString(),
    typeorm_1.CreateDateColumn({ type: 'time' }),
    tslib_1.__metadata("design:type", String)
], Activity.prototype, "time", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ default: 0 }),
    tslib_1.__metadata("design:type", Number)
], Activity.prototype, "duration", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.ActivityType }),
    class_validator_1.IsEnum(models_1.ActivityType),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Activity.prototype, "type", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.TimeLogSourceEnum }),
    class_validator_1.IsEnum(models_1.TimeLogSourceEnum),
    class_validator_1.IsString(),
    typeorm_1.Column({ default: models_1.TimeLogSourceEnum.BROWSER }),
    tslib_1.__metadata("design:type", String)
], Activity.prototype, "source", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: 'timestamptz' }),
    class_validator_1.IsDateString(),
    typeorm_1.Column({ nullable: true, default: null }),
    tslib_1.__metadata("design:type", typeof (_f = typeof Date !== "undefined" && Date) === "function" ? _f : Object)
], Activity.prototype, "deletedAt", void 0);
tslib_1.__decorate([
    typeorm_1.AfterLoad(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], Activity.prototype, "getStoppedAt", null);
Activity = tslib_1.__decorate([
    typeorm_1.Entity('activity')
], Activity);
exports.Activity = Activity;


/***/ }),

/***/ "./src/app/timesheet/activity/activities.seed.ts":
/*!*******************************************************!*\
  !*** ./src/app/timesheet/activity/activities.seed.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomActivities = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const faker = __webpack_require__(/*! faker */ "faker");
const _ = __webpack_require__(/*! underscore */ "underscore");
const moment = __webpack_require__(/*! moment */ "moment");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const activity_entity_1 = __webpack_require__(/*! ../activity.entity */ "./src/app/timesheet/activity.entity.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const AppsNames = [
    'Sublime Text',
    'Chrome',
    'Visual Studio Core',
    'Git Desktop',
    'Slack',
    'Skype',
    'Mail',
    'Terminal'
];
exports.createRandomActivities = async (connection, tenant, timeSlots) => {
    var e_1, _a;
    const employees = await connection.getRepository(employee_entity_1.Employee).find();
    const allActivities = [];
    let query = connection
        .getRepository(organization_projects_entity_1.OrganizationProject)
        .createQueryBuilder();
    query = query.leftJoinAndSelect(`${query.alias}.tasks`, 'tasks');
    const projects = await query.getMany();
    const appNames = _.shuffle(AppsNames);
    for (let day = 0; day < 5; day++) {
        const date = moment().subtract(day, 'day').toDate();
        try {
            for (var _b = (e_1 = void 0, tslib_1.__asyncValues(employees || [])), _c; _c = await _b.next(), !_c.done;) {
                const employee = _c.value;
                const employeeTimeSlots = timeSlots.filter((x) => x.employeeId === employee.id);
                const activities = [];
                for (let i = 0; i < faker.random.number({ min: 0, max: appNames.length }); i++) {
                    const appName = appNames[i];
                    const project = faker.random.arrayElement(projects);
                    const task = faker.random.arrayElement(project.tasks);
                    const timeSlot = faker.random.arrayElement(employeeTimeSlots);
                    const activity = new activity_entity_1.Activity();
                    activity.organizationId = employee.organizationId;
                    activity.tenant = tenant;
                    activity.employee = employee;
                    activity.project = project;
                    activity.timeSlot = timeSlot;
                    activity.task = task;
                    activity.title = appName;
                    activity.date = moment(date).format('YYYY-MM-DD');
                    activity.time = moment(faker.date.between(moment(date).startOf('day').toDate(), moment(date).endOf('day').toDate())).format('HH:mm:ss');
                    activity.duration = faker.random.number(100);
                    activity.type = models_1.ActivityType.APP;
                    activities.push(activity);
                }
                for (let i = 0; i < faker.random.number({ min: 0, max: 10 }); i++) {
                    const url = faker.internet.domainName();
                    for (let j = 0; j < faker.random.number({ min: 5, max: 10 }); j++) {
                        const project = faker.random.arrayElement(projects);
                        const task = faker.random.arrayElement(project.tasks);
                        const timeSlot = faker.random.arrayElement(employeeTimeSlots);
                        const activity = new activity_entity_1.Activity();
                        activity.organizationId = employee.organizationId;
                        activity.tenant = tenant;
                        activity.employee = employee;
                        activity.project = project;
                        activity.timeSlot = timeSlot;
                        activity.task = task;
                        activity.title = url;
                        activity.metaData = {
                            title: faker.internet.domainSuffix(),
                            description: faker.lorem.sentence()
                        };
                        activity.description = faker.internet.url();
                        activity.date = moment(date).format('YYYY-MM-DD');
                        activity.time = moment(faker.date.between(moment(date).startOf('day').toDate(), moment(date).endOf('day').toDate())).format('HH:mm:ss');
                        activity.duration = faker.random.number({
                            min: 10,
                            max: 100
                        });
                        activity.type = models_1.ActivityType.URL;
                        activities.push(activity);
                    }
                }
                await connection.manager.save(activities);
                allActivities.push(...allActivities);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) await _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return allActivities;
};


/***/ }),

/***/ "./src/app/timesheet/activity/activity.controller.ts":
/*!***********************************************************!*\
  !*** ./src/app/timesheet/activity/activity.controller.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const crud_controller_1 = __webpack_require__(/*! ../../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const activity_service_1 = __webpack_require__(/*! ./activity.service */ "./src/app/timesheet/activity/activity.service.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
const activity_map_service_1 = __webpack_require__(/*! ./activity.map.service */ "./src/app/timesheet/activity/activity.map.service.ts");
let ActivityController = class ActivityController extends crud_controller_1.CrudController {
    constructor(activityService, activityMapService) {
        super(activityService);
        this.activityService = activityService;
        this.activityMapService = activityMapService;
    }
    async getActivities(request) {
        const defaultParams = {
            page: 0,
            limit: 30
        };
        request = Object.assign({}, defaultParams, request);
        return this.activityService.getActivities(request);
    }
    async getDailyActivities(request) {
        return this.activityService.getDailyActivities(request);
    }
    async getDailyActivitiesReport(request) {
        let activities = await this.activityService.getDailyActivitiesReport(request);
        if (request.groupBy === 'date') {
            activities = this.activityMapService.mapByDate(activities);
        }
        else if (request.groupBy === 'employee') {
            activities = this.activityMapService.mapByEmployee(activities);
        }
        else if (request.groupBy === 'project') {
            activities = this.activityMapService.mapByProject(activities);
        }
        return activities;
    }
    async bulkSaveActivities(entities) {
        return this.activityService.bulkSave(entities);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get Activities' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.IGetActivitiesInput !== "undefined" && models_1.IGetActivitiesInput) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ActivityController.prototype, "getActivities", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get Daily Activities' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/daily'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof models_1.IGetActivitiesInput !== "undefined" && models_1.IGetActivitiesInput) === "function" ? _b : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ActivityController.prototype, "getDailyActivities", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get Daily Activities' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/report'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.IGetActivitiesInput !== "undefined" && models_1.IGetActivitiesInput) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ActivityController.prototype, "getDailyActivitiesReport", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Save bulk Activities' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Post('/bulk'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof models_1.IBulkActivitiesInput !== "undefined" && models_1.IBulkActivitiesInput) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ActivityController.prototype, "bulkSaveActivities", null);
ActivityController = tslib_1.__decorate([
    swagger_1.ApiTags('Activity'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller('activity'),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof activity_service_1.ActivityService !== "undefined" && activity_service_1.ActivityService) === "function" ? _e : Object, typeof (_f = typeof activity_map_service_1.ActivityMapService !== "undefined" && activity_map_service_1.ActivityMapService) === "function" ? _f : Object])
], ActivityController);
exports.ActivityController = ActivityController;


/***/ }),

/***/ "./src/app/timesheet/activity/activity.map.service.ts":
/*!************************************************************!*\
  !*** ./src/app/timesheet/activity/activity.map.service.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityMapService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const moment = __webpack_require__(/*! moment */ "moment");
const underscore_1 = __webpack_require__(/*! underscore */ "underscore");
let ActivityMapService = class ActivityMapService {
    constructor() { }
    mapByDate(activities) {
        const dailyLogs = this.groupByDate(activities).map((byDateActivity, date) => {
            const sum = this.getDurationSum(byDateActivity);
            console.log({ sum });
            const byEmployee = this.groupByEmployee(byDateActivity).map((byEmployeeActivity) => {
                const byProject = this.groupByProject(byEmployeeActivity).map((byProjectActivity) => {
                    const project = byProjectActivity.length > 0 &&
                        byProjectActivity[0]
                        ? byProjectActivity[0].project
                        : null;
                    return {
                        project,
                        activity: byProjectActivity.map((row) => this.mapActivitiesPercentage(row, sum))
                    };
                });
                const employee = byEmployeeActivity.length > 0 &&
                    byEmployeeActivity[0]
                    ? byEmployeeActivity[0].employee
                    : null;
                return {
                    employee,
                    projects: byProject
                };
            });
            return {
                date,
                employees: byEmployee
            };
        });
        return dailyLogs;
    }
    mapByEmployee(activities) {
        const byEmployee = this.groupByEmployee(activities).map((byEmployeeActivity) => {
            const sum = this.getDurationSum(byEmployeeActivity);
            const dailyLogs = this.groupByDate(byEmployeeActivity).map((byDateActivity, date) => {
                const byProject = this.groupByProject(byDateActivity).map((byProjectActivity) => {
                    const project = byProjectActivity.length > 0 &&
                        byProjectActivity[0]
                        ? byProjectActivity[0].project
                        : null;
                    return {
                        project,
                        activity: byProjectActivity.map((row) => this.mapActivitiesPercentage(row, sum))
                    };
                });
                return {
                    date,
                    projects: byProject
                };
            });
            const employee = byEmployeeActivity.length > 0 && byEmployeeActivity[0]
                ? byEmployeeActivity[0].employee
                : null;
            return {
                employee,
                dates: dailyLogs
            };
        });
        return byEmployee;
    }
    mapByProject(activities) {
        const byEmployee = this.groupByProject(activities).map((byProjectActivity) => {
            const sum = this.getDurationSum(byProjectActivity);
            const dailyLogs = this.groupByDate(byProjectActivity).map((byDateActivity, date) => {
                const byProject = this.groupByEmployee(byDateActivity).map((byEmployeeActivity) => {
                    const employee = byEmployeeActivity.length > 0 &&
                        byEmployeeActivity[0]
                        ? byEmployeeActivity[0].employee
                        : null;
                    return {
                        employee,
                        activity: byEmployeeActivity.map((row) => this.mapActivitiesPercentage(row, sum))
                    };
                });
                return {
                    date,
                    employees: byProject
                };
            });
            const project = byProjectActivity.length > 0 && byProjectActivity[0]
                ? byProjectActivity[0].project
                : null;
            return {
                project,
                dates: dailyLogs
            };
        });
        return byEmployee;
    }
    groupByProject(activities) {
        return underscore_1.chain(activities).groupBy((activity) => {
            return activity.projectId;
        });
    }
    groupByDate(activities) {
        return underscore_1.chain(activities).groupBy((activity) => {
            return moment.utc(activity.date).format('YYYY-MM-DD');
        });
    }
    groupByEmployee(activities) {
        return underscore_1.chain(activities).groupBy((activity) => {
            return activity.employeeId;
        });
    }
    mapActivitiesPercentage(activity, sum = 0) {
        activity.duration_percentage =
            (parseInt(activity.duration, 10) * 100) / sum;
        return activity;
    }
    getDurationSum(activities) {
        return activities.reduce((iteratee, log) => {
            return iteratee + parseInt(log.duration, 10);
        }, 0);
    }
};
ActivityMapService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], ActivityMapService);
exports.ActivityMapService = ActivityMapService;


/***/ }),

/***/ "./src/app/timesheet/activity/activity.service.ts":
/*!********************************************************!*\
  !*** ./src/app/timesheet/activity/activity.service.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const activity_entity_1 = __webpack_require__(/*! ../activity.entity */ "./src/app/timesheet/activity.entity.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const context_1 = __webpack_require__(/*! ../../core/context */ "./src/app/core/context/index.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const bulk_activities_save_command_1 = __webpack_require__(/*! ./commands/bulk-activities-save.command */ "./src/app/timesheet/activity/commands/bulk-activities-save.command.ts");
const employee_entity_1 = __webpack_require__(/*! ../../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const underscore_1 = __webpack_require__(/*! underscore */ "underscore");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
let ActivityService = class ActivityService extends crud_service_1.CrudService {
    constructor(activityRepository, employeeRepository, organizationProjectRepository, commandBus) {
        super(activityRepository);
        this.activityRepository = activityRepository;
        this.employeeRepository = employeeRepository;
        this.organizationProjectRepository = organizationProjectRepository;
        this.commandBus = commandBus;
    }
    async getDailyActivities(request) {
        const query = this.filterQuery(request);
        query.select(`COUNT("${query.alias}"."id")`, `sessions`);
        query.addSelect(`SUM("${query.alias}"."duration")`, `duration`);
        query.addSelect(`"${query.alias}"."employeeId"`, `employeeId`);
        query.addSelect(`"${query.alias}"."date"`, `date`);
        if (environment_1.environment.database.type === 'sqlite') {
            query.addSelect(`time("${query.alias}"."time")`, `time`);
        }
        else {
            query.addSelect(`(to_char("${query.alias}"."time", 'HH24') || ':00')::time`, `time`);
        }
        query.addSelect(`"${query.alias}"."title"`, `title`);
        query.addGroupBy(`"${query.alias}"."date"`);
        if (environment_1.environment.database.type === 'sqlite') {
            query.addGroupBy(`time("${query.alias}"."time")`);
        }
        else {
            query.addGroupBy(`(to_char("${query.alias}"."time", 'HH24') || ':00')::time`);
        }
        query.addGroupBy(`"${query.alias}"."title"`);
        query.addGroupBy(`"${query.alias}"."employeeId"`);
        query.orderBy(`time`, 'ASC');
        query.addOrderBy(`"duration"`, 'DESC');
        return query.getRawMany();
    }
    async getDailyActivitiesReport(request) {
        const query = this.filterQuery(request);
        query.select(`COUNT("${query.alias}"."id")`, `sessions`);
        query.addSelect(`SUM("${query.alias}"."duration")`, `duration`);
        query.addSelect(`"${query.alias}"."employeeId"`, `employeeId`);
        query.addSelect(`"${query.alias}"."projectId"`, `projectId`);
        query.addSelect(`"${query.alias}"."date"`, `date`);
        query.addSelect(`"${query.alias}"."title"`, `title`);
        query.addGroupBy(`"${query.alias}"."date"`);
        query.addGroupBy(`"${query.alias}"."title"`);
        query.addGroupBy(`"${query.alias}"."employeeId"`);
        query.addGroupBy(`"${query.alias}"."projectId"`);
        query.orderBy(`"duration"`, 'DESC');
        query.limit(200);
        let activitiesData = await query.getRawMany();
        console.log(query.getQuery());
        const projectIds = underscore_1.pluck(activitiesData, 'projectId');
        const employeeIds = underscore_1.pluck(activitiesData, 'employeeId');
        let employeeById = {};
        if (employeeIds.length > 0) {
            const employees = await this.employeeRepository.find({
                where: {
                    id: typeorm_2.In(employeeIds)
                },
                relations: ['user']
            });
            employeeById = underscore_1.indexBy(employees, 'id');
        }
        let projectById = {};
        if (projectIds.length > 0) {
            const projects = await this.organizationProjectRepository.find({
                where: {
                    id: typeorm_2.In(projectIds)
                }
            });
            projectById = underscore_1.indexBy(projects, 'id');
        }
        activitiesData = activitiesData.map((activity) => {
            activity.employee = employeeById[activity.employeeId];
            activity.project = projectById[activity.projectId];
            return activity;
        });
        return activitiesData;
    }
    async getAllActivities(request) {
        const query = this.filterQuery(request);
        return await query.getMany();
    }
    async getActivities(request) {
        const query = this.filterQuery(request);
        if (context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)) {
            query.leftJoinAndSelect(`${query.alias}.employee`, 'activityEmployee');
            query.leftJoinAndSelect(`activityEmployee.user`, 'activityUser', '"employee"."userId" = activityUser.id');
        }
        query.orderBy(`${query.alias}.duration`, 'DESC');
        return await query.getMany();
    }
    bulkSave(input) {
        return this.commandBus.execute(new bulk_activities_save_command_1.BulkActivitiesSaveCommand(input));
    }
    filterQuery(request) {
        let employeeIds;
        const query = this.activityRepository.createQueryBuilder();
        if (request.limit > 0) {
            query.take(request.limit);
            query.skip((request.page || 0) * request.limit);
        }
        if (context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)) {
            if (request.employeeIds) {
                employeeIds = request.employeeIds;
            }
        }
        else {
            const user = context_1.RequestContext.currentUser();
            employeeIds = [user.employeeId];
        }
        query.innerJoin(`${query.alias}.employee`, 'employee');
        query.where((qb) => {
            if (request.startDate && request.endDate) {
                const startDate = moment.utc(request.startDate).toDate();
                const endDate = moment.utc(request.endDate).toDate();
                if (environment_1.environment.database.type === 'sqlite') {
                    qb.andWhere(`datetime("${query.alias}"."date" || ' ' || "${query.alias}"."time") Between :startDate AND :endDate`, {
                        startDate,
                        endDate
                    });
                }
                else {
                    qb.andWhere(`concat("${query.alias}"."date", ' ', "${query.alias}"."time")::timestamp Between :startDate AND :endDate`, {
                        startDate,
                        endDate
                    });
                }
            }
            if (employeeIds) {
                qb.andWhere(`"${query.alias}"."employeeId" IN (:...employeeId)`, {
                    employeeId: employeeIds
                });
            }
            if (request.projectIds) {
                qb.andWhere(`"${query.alias}"."projectId" IN (:...projectId)`, {
                    projectId: request.projectIds
                });
            }
            if (request.titles) {
                qb.andWhere(`"${query.alias}"."title" IN (:...title)`, {
                    title: request.titles
                });
            }
            if (request.organizationId) {
                qb.andWhere(`"${query.alias}"."organizationId" = :organizationId`, {
                    organizationId: request.organizationId
                });
            }
            qb.andWhere(`"${query.alias}"."tenantId" = :tenantId`, {
                tenantId: context_1.RequestContext.currentTenantId()
            });
            const sq = qb
                .subQuery()
                .select(`("${qb.alias}".duration * 100 ) / SUM("AvgActivity".duration)`, 'per')
                .from(activity_entity_1.Activity, 'AvgActivity')
                .getQuery();
            if (request.activityLevel) {
                qb.andWhere(`(${sq} BETWEEN :start AND :end)`, request.activityLevel);
            }
            if (request.source) {
                if (request.source instanceof Array) {
                    qb.andWhere(`"${query.alias}"."source" IN (:...source)`, {
                        source: request.source
                    });
                }
                else {
                    qb.andWhere(`"${query.alias}"."source" = :source`, {
                        source: request.source
                    });
                }
            }
            if (request.logType) {
                if (request.logType instanceof Array) {
                    qb.andWhere(`"${query.alias}"."logType" IN (:...logType)`, {
                        logType: request.logType
                    });
                }
                else {
                    qb.andWhere(`"${query.alias}"."logType" = :logType`, {
                        logType: request.logType
                    });
                }
            }
            if (request.types) {
                qb.andWhere(`"${query.alias}"."type" IN (:...type)`, {
                    type: request.types
                });
            }
        });
        return query;
    }
};
ActivityService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(activity_entity_1.Activity)),
    tslib_1.__param(1, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__param(2, typeorm_1.InjectRepository(organization_projects_entity_1.OrganizationProject)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _d : Object])
], ActivityService);
exports.ActivityService = ActivityService;


/***/ }),

/***/ "./src/app/timesheet/activity/commands/bulk-activities-save.command.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/timesheet/activity/commands/bulk-activities-save.command.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkActivitiesSaveCommand = void 0;
class BulkActivitiesSaveCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.BulkActivitiesSaveCommand = BulkActivitiesSaveCommand;
BulkActivitiesSaveCommand.type = '[Screenshot] Create Screenshot';


/***/ }),

/***/ "./src/app/timesheet/activity/commands/handlers/bulk-activities-save.handler.ts":
/*!**************************************************************************************!*\
  !*** ./src/app/timesheet/activity/commands/handlers/bulk-activities-save.handler.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkActivitiesSaveHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const bulk_activities_save_command_1 = __webpack_require__(/*! ../bulk-activities-save.command */ "./src/app/timesheet/activity/commands/bulk-activities-save.command.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const activity_entity_1 = __webpack_require__(/*! ../../../activity.entity */ "./src/app/timesheet/activity.entity.ts");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const context_1 = __webpack_require__(/*! src/app/core/context */ "./src/app/core/context/index.ts");
const employee_entity_1 = __webpack_require__(/*! src/app/employee/employee.entity */ "./src/app/employee/employee.entity.ts");
let BulkActivitiesSaveHandler = class BulkActivitiesSaveHandler {
    constructor(activityRepository, employeeRepository) {
        this.activityRepository = activityRepository;
        this.employeeRepository = employeeRepository;
    }
    async execute(command) {
        const { input } = command;
        if (!input.organizationId) {
            const user = context_1.RequestContext.currentUser();
            const employee = await this.employeeRepository.findOne(user.employeeId);
            input.organizationId = employee.organizationId;
        }
        const insertActivities = input.activities.map((activity) => {
            activity = new activity_entity_1.Activity(Object.assign(Object.assign({ employeeId: input.employeeId, organizationId: input.organizationId, tenantId: context_1.RequestContext.currentTenantId() }, (input.projectId ? { projectId: input.projectId } : {})), activity));
            return activity;
        });
        if (insertActivities.length > 0) {
            await this.activityRepository.save(insertActivities);
            return insertActivities;
        }
        else {
            return [];
        }
    }
};
BulkActivitiesSaveHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(bulk_activities_save_command_1.BulkActivitiesSaveCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(activity_entity_1.Activity)),
    tslib_1.__param(1, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], BulkActivitiesSaveHandler);
exports.BulkActivitiesSaveHandler = BulkActivitiesSaveHandler;


/***/ }),

/***/ "./src/app/timesheet/activity/commands/handlers/index.ts":
/*!***************************************************************!*\
  !*** ./src/app/timesheet/activity/commands/handlers/index.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityCommandHandlers = void 0;
const bulk_activities_save_handler_1 = __webpack_require__(/*! ./bulk-activities-save.handler */ "./src/app/timesheet/activity/commands/handlers/bulk-activities-save.handler.ts");
exports.ActivityCommandHandlers = [bulk_activities_save_handler_1.BulkActivitiesSaveHandler];


/***/ }),

/***/ "./src/app/timesheet/commands/activity-create.command.ts":
/*!***************************************************************!*\
  !*** ./src/app/timesheet/commands/activity-create.command.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityCreateCommand = void 0;
class ActivityCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.ActivityCreateCommand = ActivityCreateCommand;
ActivityCreateCommand.type = '[Activity] Create Activity';


/***/ }),

/***/ "./src/app/timesheet/commands/handlers/activity-create.handler.ts":
/*!************************************************************************!*\
  !*** ./src/app/timesheet/commands/handlers/activity-create.handler.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const activity_create_command_1 = __webpack_require__(/*! ../activity-create.command */ "./src/app/timesheet/commands/activity-create.command.ts");
const activity_service_1 = __webpack_require__(/*! ../../activity/activity.service */ "./src/app/timesheet/activity/activity.service.ts");
let ActivityCreateHandler = class ActivityCreateHandler {
    constructor(_activityService) {
        this._activityService = _activityService;
    }
    async execute(command) {
        try {
            const { input } = command;
            const { title, duration, type, projectId, date, employeeId, taskId = null, organizationId } = input;
            return await this._activityService.create({
                title,
                duration,
                type,
                date,
                projectId,
                employeeId,
                taskId,
                organizationId
            });
        }
        catch (error) {
            throw new common_1.BadRequestException('Cant create activity for time slot');
        }
    }
};
ActivityCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(activity_create_command_1.ActivityCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof activity_service_1.ActivityService !== "undefined" && activity_service_1.ActivityService) === "function" ? _a : Object])
], ActivityCreateHandler);
exports.ActivityCreateHandler = ActivityCreateHandler;


/***/ }),

/***/ "./src/app/timesheet/commands/handlers/index.ts":
/*!******************************************************!*\
  !*** ./src/app/timesheet/commands/handlers/index.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const time_slot_create_handler_1 = __webpack_require__(/*! ./time-slot-create.handler */ "./src/app/timesheet/commands/handlers/time-slot-create.handler.ts");
const timesheet_create_handler_1 = __webpack_require__(/*! ./timesheet-create.handler */ "./src/app/timesheet/commands/handlers/timesheet-create.handler.ts");
const timesheet_get_handler_1 = __webpack_require__(/*! ./timesheet-get.handler */ "./src/app/timesheet/commands/handlers/timesheet-get.handler.ts");
const screenshot_create_handler_1 = __webpack_require__(/*! ./screenshot-create.handler */ "./src/app/timesheet/commands/handlers/screenshot-create.handler.ts");
const activity_create_handler_1 = __webpack_require__(/*! ./activity-create.handler */ "./src/app/timesheet/commands/handlers/activity-create.handler.ts");
exports.CommandHandlers = [
    time_slot_create_handler_1.TimeSlotCreateHandler,
    timesheet_create_handler_1.TimesheetCreateHandler,
    timesheet_get_handler_1.TimesheetGetHandler,
    screenshot_create_handler_1.ScreenshotCreateHandler,
    activity_create_handler_1.ActivityCreateHandler
];


/***/ }),

/***/ "./src/app/timesheet/commands/handlers/screenshot-create.handler.ts":
/*!**************************************************************************!*\
  !*** ./src/app/timesheet/commands/handlers/screenshot-create.handler.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScreenshotCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const moment = __webpack_require__(/*! moment */ "moment");
const __1 = __webpack_require__(/*! .. */ "./src/app/timesheet/commands/index.ts");
const screenshot_service_1 = __webpack_require__(/*! ../../screenshot/screenshot.service */ "./src/app/timesheet/screenshot/screenshot.service.ts");
const time_slot_service_1 = __webpack_require__(/*! ../../time-slot/time-slot.service */ "./src/app/timesheet/time-slot/time-slot.service.ts");
let ScreenshotCreateHandler = class ScreenshotCreateHandler {
    constructor(_screenshotService, _timeSlotService) {
        this._screenshotService = _screenshotService;
        this._timeSlotService = _timeSlotService;
    }
    async execute(command) {
        try {
            const { input } = command;
            const { file, thumb, recordedAt, activityTimestamp, employeeId, organizationId } = input;
            let { record: timeSlot } = await this._timeSlotService.findOneOrFail({
                where: {
                    startedAt: new Date(moment(activityTimestamp).format('YYYY-MM-DD HH:mm:ss'))
                }
            });
            if (!timeSlot) {
                timeSlot = await this._timeSlotService.create({
                    employeeId,
                    duration: 600,
                    keyboard: 0,
                    mouse: 0,
                    overall: 0,
                    startedAt: new Date(moment(activityTimestamp).format('YYYY-MM-DD HH:mm:ss'))
                });
            }
            const { record: screenshot } = await this._screenshotService.findOneOrFail({
                where: {
                    timeSlotId: timeSlot
                }
            });
            if (screenshot) {
                const { id } = screenshot;
                await this._screenshotService.update(id, {
                    file,
                    thumb
                });
                return await this._screenshotService.findOne(id);
            }
            return await this._screenshotService.create({
                timeSlotId: timeSlot,
                file,
                thumb,
                recordedAt,
                organizationId
            });
        }
        catch (error) {
            throw new common_1.BadRequestException('Cant create screenshot for time slot');
        }
    }
};
ScreenshotCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(__1.ScreenshotCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof screenshot_service_1.ScreenshotService !== "undefined" && screenshot_service_1.ScreenshotService) === "function" ? _a : Object, typeof (_b = typeof time_slot_service_1.TimeSlotService !== "undefined" && time_slot_service_1.TimeSlotService) === "function" ? _b : Object])
], ScreenshotCreateHandler);
exports.ScreenshotCreateHandler = ScreenshotCreateHandler;


/***/ }),

/***/ "./src/app/timesheet/commands/handlers/time-slot-create.handler.ts":
/*!*************************************************************************!*\
  !*** ./src/app/timesheet/commands/handlers/time-slot-create.handler.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSlotCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const moment = __webpack_require__(/*! moment */ "moment");
const time_slot_create_command_1 = __webpack_require__(/*! ../time-slot-create.command */ "./src/app/timesheet/commands/time-slot-create.command.ts");
const time_slot_service_1 = __webpack_require__(/*! ../../time-slot/time-slot.service */ "./src/app/timesheet/time-slot/time-slot.service.ts");
let TimeSlotCreateHandler = class TimeSlotCreateHandler {
    constructor(_timeSlotService) {
        this._timeSlotService = _timeSlotService;
    }
    async execute(command) {
        try {
            const { input } = command;
            const { employeeId, duration, keyboard, mouse, overall, time_slot, organizationId } = input;
            return await this._timeSlotService.create({
                employeeId,
                duration,
                keyboard,
                mouse,
                overall,
                startedAt: new Date(moment(time_slot).format('YYYY-MM-DD HH:mm:ss')),
                organizationId
            });
        }
        catch (error) {
            throw new common_1.BadRequestException('Cant create time slot');
        }
    }
};
TimeSlotCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(time_slot_create_command_1.TimeSlotCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof time_slot_service_1.TimeSlotService !== "undefined" && time_slot_service_1.TimeSlotService) === "function" ? _a : Object])
], TimeSlotCreateHandler);
exports.TimeSlotCreateHandler = TimeSlotCreateHandler;


/***/ }),

/***/ "./src/app/timesheet/commands/handlers/timesheet-create.handler.ts":
/*!*************************************************************************!*\
  !*** ./src/app/timesheet/commands/handlers/timesheet-create.handler.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimesheetCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const __1 = __webpack_require__(/*! .. */ "./src/app/timesheet/commands/index.ts");
const timesheet_service_1 = __webpack_require__(/*! ../../timesheet/timesheet.service */ "./src/app/timesheet/timesheet/timesheet.service.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const context_1 = __webpack_require__(/*! ../../../core/context */ "./src/app/core/context/index.ts");
let TimesheetCreateHandler = class TimesheetCreateHandler {
    constructor(_timesheetService) {
        this._timesheetService = _timesheetService;
    }
    async execute(command) {
        try {
            const { input } = command;
            const { employeeId, duration, keyboard, mouse, overall, startedAt, organizationId } = input;
            const tenantId = context_1.RequestContext.currentTenantId();
            return await this._timesheetService.create({
                employeeId,
                duration,
                keyboard,
                mouse,
                overall,
                startedAt,
                organizationId,
                tenantId
            });
        }
        catch (error) {
            throw new common_1.BadRequestException('Cant create timesheet');
        }
    }
};
TimesheetCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(__1.TimesheetCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof timesheet_service_1.TimeSheetService !== "undefined" && timesheet_service_1.TimeSheetService) === "function" ? _a : Object])
], TimesheetCreateHandler);
exports.TimesheetCreateHandler = TimesheetCreateHandler;


/***/ }),

/***/ "./src/app/timesheet/commands/handlers/timesheet-get.handler.ts":
/*!**********************************************************************!*\
  !*** ./src/app/timesheet/commands/handlers/timesheet-get.handler.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimesheetGetHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const timesheet_service_1 = __webpack_require__(/*! ../../timesheet/timesheet.service */ "./src/app/timesheet/timesheet/timesheet.service.ts");
const __1 = __webpack_require__(/*! .. */ "./src/app/timesheet/commands/index.ts");
let TimesheetGetHandler = class TimesheetGetHandler {
    constructor(_timesheetService) {
        this._timesheetService = _timesheetService;
    }
    async execute(command) {
        const { input } = command;
        const { record } = await this._timesheetService.findOneOrFail(input);
        return record;
    }
};
TimesheetGetHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(__1.TimesheetGetCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof timesheet_service_1.TimeSheetService !== "undefined" && timesheet_service_1.TimeSheetService) === "function" ? _a : Object])
], TimesheetGetHandler);
exports.TimesheetGetHandler = TimesheetGetHandler;


/***/ }),

/***/ "./src/app/timesheet/commands/index.ts":
/*!*********************************************!*\
  !*** ./src/app/timesheet/commands/index.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
tslib_1.__exportStar(__webpack_require__(/*! ./time-slot-create.command */ "./src/app/timesheet/commands/time-slot-create.command.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./timesheet-create.command */ "./src/app/timesheet/commands/timesheet-create.command.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./timesheet-get.command */ "./src/app/timesheet/commands/timesheet-get.command.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./screenshot-create.command */ "./src/app/timesheet/commands/screenshot-create.command.ts"), exports);
tslib_1.__exportStar(__webpack_require__(/*! ./activity-create.command */ "./src/app/timesheet/commands/activity-create.command.ts"), exports);


/***/ }),

/***/ "./src/app/timesheet/commands/screenshot-create.command.ts":
/*!*****************************************************************!*\
  !*** ./src/app/timesheet/commands/screenshot-create.command.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ScreenshotCreateCommand = void 0;
class ScreenshotCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.ScreenshotCreateCommand = ScreenshotCreateCommand;
ScreenshotCreateCommand.type = '[Screenshot] Create Screenshot';


/***/ }),

/***/ "./src/app/timesheet/commands/time-slot-create.command.ts":
/*!****************************************************************!*\
  !*** ./src/app/timesheet/commands/time-slot-create.command.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSlotCreateCommand = void 0;
class TimeSlotCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.TimeSlotCreateCommand = TimeSlotCreateCommand;
TimeSlotCreateCommand.type = '[TimeSlot] Create TimeSlot';


/***/ }),

/***/ "./src/app/timesheet/commands/timesheet-create.command.ts":
/*!****************************************************************!*\
  !*** ./src/app/timesheet/commands/timesheet-create.command.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimesheetCreateCommand = void 0;
class TimesheetCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.TimesheetCreateCommand = TimesheetCreateCommand;
TimesheetCreateCommand.type = '[Timesheet] Create Timesheet';


/***/ }),

/***/ "./src/app/timesheet/commands/timesheet-get.command.ts":
/*!*************************************************************!*\
  !*** ./src/app/timesheet/commands/timesheet-get.command.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimesheetGetCommand = void 0;
class TimesheetGetCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.TimesheetGetCommand = TimesheetGetCommand;
TimesheetGetCommand.type = '[Timesheet] Get';


/***/ }),

/***/ "./src/app/timesheet/screenshot.entity.ts":
/*!************************************************!*\
  !*** ./src/app/timesheet/screenshot.entity.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Screenshot = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const time_slot_entity_1 = __webpack_require__(/*! ./time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const file_storage_1 = __webpack_require__(/*! ../core/file-storage */ "./src/app/core/file-storage/index.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let Screenshot = class Screenshot extends tenant_organization_base_1.TenantOrganizationBase {
    afterLoad() {
        this.fullUrl = new file_storage_1.FileStorage().getProvider().url(this.file);
        this.thumbUrl = new file_storage_1.FileStorage().getProvider().url(this.thumb);
    }
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: time_slot_entity_1.TimeSlot }),
    typeorm_1.ManyToOne(() => time_slot_entity_1.TimeSlot, (timeSlot) => timeSlot.screenshots, {
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.ITimeSlot !== "undefined" && models_1.ITimeSlot) === "function" ? _a : Object)
], Screenshot.prototype, "timeSlot", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((screenshot) => screenshot.timeSlot),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Screenshot.prototype, "timeSlotId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Screenshot.prototype, "file", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ default: null, nullable: true }),
    tslib_1.__metadata("design:type", String)
], Screenshot.prototype, "thumb", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: 'timestamptz' }),
    class_validator_1.IsNumber(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ default: null, nullable: true }),
    tslib_1.__metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], Screenshot.prototype, "recordedAt", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: 'timestamptz' }),
    class_validator_1.IsDateString(),
    typeorm_1.Column({ nullable: true, default: null }),
    tslib_1.__metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], Screenshot.prototype, "deletedAt", void 0);
tslib_1.__decorate([
    typeorm_1.AfterLoad(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], Screenshot.prototype, "afterLoad", null);
Screenshot = tslib_1.__decorate([
    typeorm_1.Entity('screenshot')
], Screenshot);
exports.Screenshot = Screenshot;


/***/ }),

/***/ "./src/app/timesheet/screenshot/screenshot.controller.ts":
/*!***************************************************************!*\
  !*** ./src/app/timesheet/screenshot/screenshot.controller.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScreenshotController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const screenshot_entity_1 = __webpack_require__(/*! ../screenshot.entity */ "./src/app/timesheet/screenshot.entity.ts");
const crud_controller_1 = __webpack_require__(/*! ../../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const screenshot_service_1 = __webpack_require__(/*! ./screenshot.service */ "./src/app/timesheet/screenshot/screenshot.service.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const platform_express_1 = __webpack_require__(/*! @nestjs/platform-express */ "@nestjs/platform-express");
const path = __webpack_require__(/*! path */ "path");
const moment = __webpack_require__(/*! moment */ "moment");
const sharp = __webpack_require__(/*! sharp */ "sharp");
const file_storage_1 = __webpack_require__(/*! ../../core/file-storage */ "./src/app/core/file-storage/index.ts");
const uploaded_file_storage_1 = __webpack_require__(/*! ../../core/file-storage/uploaded-file-storage */ "./src/app/core/file-storage/uploaded-file-storage.ts");
const fs = __webpack_require__(/*! fs */ "fs");
const utils_1 = __webpack_require__(/*! ../../core/utils */ "./src/app/core/utils.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let ScreenshotController = class ScreenshotController extends crud_controller_1.CrudController {
    constructor(screenshotService) {
        super(screenshotService);
        this.screenshotService = screenshotService;
    }
    async upload(entity, file) {
        let thumb;
        try {
            const fileContent = await new file_storage_1.FileStorage()
                .getProvider()
                .getFile(file.key);
            const inputFile = await utils_1.tempFile('screenshot-thumb');
            const outputFile = await utils_1.tempFile('screenshot-thumb');
            await fs.promises.writeFile(inputFile, fileContent);
            await new Promise((resolve, reject) => {
                sharp(inputFile)
                    .resize(250, 150)
                    .toFile(outputFile, (error, data) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(data);
                    }
                });
            });
            const thumbName = `thumb-${file.filename}`;
            const thumbDir = path.dirname(file.key);
            const data = await fs.promises.readFile(outputFile);
            await fs.promises.unlink(inputFile);
            await fs.promises.unlink(outputFile);
            thumb = await new file_storage_1.FileStorage()
                .getProvider()
                .putFile(data, path.join(thumbDir, thumbName));
        }
        catch (error) {
            console.log(error);
        }
        entity.file = file.key;
        entity.thumb = thumb.key;
        entity.recordedAt = entity.recordedAt ? entity.recordedAt : new Date();
        const screenshot = await this.screenshotService.create(entity);
        return this.screenshotService.findOne(screenshot.id);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Add manual time' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'The timer has been successfully On/Off.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Post('/'),
    common_1.UseInterceptors(platform_express_1.FileInterceptor('file', {
        storage: new file_storage_1.FileStorage().storage({
            dest: () => {
                return path.join('screenshots', moment().format('YYYY/MM/DD'));
            },
            prefix: 'screenshots'
        })
    })),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__param(1, uploaded_file_storage_1.UploadedFileStorage()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof screenshot_entity_1.Screenshot !== "undefined" && screenshot_entity_1.Screenshot) === "function" ? _a : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], ScreenshotController.prototype, "upload", null);
ScreenshotController = tslib_1.__decorate([
    swagger_1.ApiTags('Screenshot'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller('screenshot'),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof screenshot_service_1.ScreenshotService !== "undefined" && screenshot_service_1.ScreenshotService) === "function" ? _c : Object])
], ScreenshotController);
exports.ScreenshotController = ScreenshotController;


/***/ }),

/***/ "./src/app/timesheet/screenshot/screenshot.seed.ts":
/*!*********************************************************!*\
  !*** ./src/app/timesheet/screenshot/screenshot.seed.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomScreenshot = void 0;
const fs = __webpack_require__(/*! fs */ "fs");
const path = __webpack_require__(/*! path */ "path");
const faker = __webpack_require__(/*! faker */ "faker");
const screenshot_entity_1 = __webpack_require__(/*! ../screenshot.entity */ "./src/app/timesheet/screenshot.entity.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
let fileList = [];
let dir;
let baseDir;
if (environment_1.environment.isElectron) {
    dir = path.join(path.resolve(environment_1.environment.gauzyUserPath, ...['src', 'assets', 'seed']), 'screenshots');
    baseDir = path.join(path.resolve(environment_1.environment.gauzyUserPath));
}
else {
    dir = path.join(path.resolve('.', ...['apps', 'api', 'src', 'assets', 'seed']), 'screenshots');
    baseDir = path.join(path.resolve('.', ...['apps']), 'api');
}
const fileDir = path.join('screenshots', moment().format('YYYY/MM/DD'));
const destDir = path.join('public', fileDir);
exports.createRandomScreenshot = async (timeSlot, tenant) => {
    await getList();
    const screenshots = [];
    for (let index = 0; index < faker.random.number({ min: 1, max: 2 }); index++) {
        const sourceFile = faker.random.arrayElement(fileList);
        const sourceName = 'screenshot-' + moment().unix() + faker.random.number(999) + '.jpg';
        const destFile = path.join(destDir, sourceName);
        fs.mkdirSync(path.join(baseDir, destDir), { recursive: true });
        const file = await new Promise((resolve, reject) => {
            const sourceFilePath = path.join(dir, sourceFile);
            const destFilePath = path.join(baseDir, destFile);
            fs.copyFile(sourceFilePath, destFilePath, (err) => {
                if (err) {
                    resolve('');
                }
                resolve(path.join(fileDir, sourceName));
            });
        });
        if (file) {
            const screenshot = new screenshot_entity_1.Screenshot();
            screenshot.tenant = tenant;
            screenshot.organizationId = timeSlot.organizationId;
            screenshot.fullUrl = file;
            screenshot.file = file;
            screenshot.thumb = file;
            screenshot.timeSlot = timeSlot;
            screenshot.thumbUrl = file;
            screenshot.recordedAt = faker.date.between(timeSlot.startedAt, timeSlot.stoppedAt);
            screenshot.deletedAt = null;
            screenshots.push(screenshot);
        }
    }
    return screenshots;
};
const getList = () => {
    return new Promise((resolve, reject) => {
        fs.readdir(dir, (err, items) => {
            if (err) {
                reject();
            }
            else {
                fileList = items;
                resolve(items);
            }
        });
    });
};


/***/ }),

/***/ "./src/app/timesheet/screenshot/screenshot.service.ts":
/*!************************************************************!*\
  !*** ./src/app/timesheet/screenshot/screenshot.service.ts ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScreenshotService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const tenant_aware_crud_service_1 = __webpack_require__(/*! ../../core/crud/tenant-aware-crud.service */ "./src/app/core/crud/tenant-aware-crud.service.ts");
const screenshot_entity_1 = __webpack_require__(/*! ../screenshot.entity */ "./src/app/timesheet/screenshot.entity.ts");
let ScreenshotService = class ScreenshotService extends tenant_aware_crud_service_1.TenantAwareCrudService {
    constructor(screenShotRepository) {
        super(screenShotRepository);
        this.screenShotRepository = screenShotRepository;
    }
};
ScreenshotService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(screenshot_entity_1.Screenshot)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], ScreenshotService);
exports.ScreenshotService = ScreenshotService;


/***/ }),

/***/ "./src/app/timesheet/statistic/statistic.controller.ts":
/*!*************************************************************!*\
  !*** ./src/app/timesheet/statistic/statistic.controller.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatisticController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const statistic_service_1 = __webpack_require__(/*! ./statistic.service */ "./src/app/timesheet/statistic/statistic.service.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let StatisticController = class StatisticController {
    constructor(statisticService) {
        this.statisticService = statisticService;
    }
    async counts(request) {
        return await this.statisticService.getCounts(request);
    }
    async members(request) {
        return await this.statisticService.getMembers(request);
    }
    async projects(request) {
        return await this.statisticService.getProjects(request);
    }
    async tasks(request) {
        return await this.statisticService.getTasks(request);
    }
    async manualTimes(request) {
        return await this.statisticService.manualTimes(request);
    }
    async employeeTimeslots(request) {
        return await this.statisticService.getEmployeeTimeSlots(request);
    }
    async activities(request) {
        return await this.statisticService.getActivites(request);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Statistics - members' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Statistics - members'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/counts'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.IGetCountsStatistics !== "undefined" && models_1.IGetCountsStatistics) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], StatisticController.prototype, "counts", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Statistics - members' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Statistics - members'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/members'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof models_1.IGetMembersStatistics !== "undefined" && models_1.IGetMembersStatistics) === "function" ? _b : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], StatisticController.prototype, "members", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Statistics - projects' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Statistics - projects'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/projects'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.IGetProjectsStatistics !== "undefined" && models_1.IGetProjectsStatistics) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], StatisticController.prototype, "projects", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Statistics - tasks' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Statistics - tasks'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/tasks'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof models_1.IGetTasksStatistics !== "undefined" && models_1.IGetTasksStatistics) === "function" ? _d : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], StatisticController.prototype, "tasks", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Statistics - Manual Times' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Statistics - Manual Times'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/manual-times'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof models_1.IGetManualTimesStatistics !== "undefined" && models_1.IGetManualTimesStatistics) === "function" ? _e : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], StatisticController.prototype, "manualTimes", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Statistics - employee time-slots' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Statistics - employee time-slots'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/time-slots'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_f = typeof models_1.IGetTimeSlotStatistics !== "undefined" && models_1.IGetTimeSlotStatistics) === "function" ? _f : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], StatisticController.prototype, "employeeTimeslots", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Statistics - activities' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Statistics - activities'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/activities'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_g = typeof models_1.IGetActivitiesStatistics !== "undefined" && models_1.IGetActivitiesStatistics) === "function" ? _g : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], StatisticController.prototype, "activities", null);
StatisticController = tslib_1.__decorate([
    swagger_1.ApiTags('TimesheetStatistic'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller('statistics'),
    tslib_1.__metadata("design:paramtypes", [typeof (_h = typeof statistic_service_1.StatisticService !== "undefined" && statistic_service_1.StatisticService) === "function" ? _h : Object])
], StatisticController);
exports.StatisticController = StatisticController;


/***/ }),

/***/ "./src/app/timesheet/statistic/statistic.service.ts":
/*!**********************************************************!*\
  !*** ./src/app/timesheet/statistic/statistic.service.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatisticService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const _ = __webpack_require__(/*! underscore */ "underscore");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const time_slot_entity_1 = __webpack_require__(/*! ../time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const context_1 = __webpack_require__(/*! ../../core/context */ "./src/app/core/context/index.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const task_entity_1 = __webpack_require__(/*! ../../tasks/task.entity */ "./src/app/tasks/task.entity.ts");
const activity_entity_1 = __webpack_require__(/*! ../activity.entity */ "./src/app/timesheet/activity.entity.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const time_log_entity_1 = __webpack_require__(/*! ../time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
let StatisticService = class StatisticService {
    constructor(organizationProjectsRepository, taskRepository, timeSlotRepository, employeeRepository, activityRepository, timeLogRepository) {
        this.organizationProjectsRepository = organizationProjectsRepository;
        this.taskRepository = taskRepository;
        this.timeSlotRepository = timeSlotRepository;
        this.employeeRepository = employeeRepository;
        this.activityRepository = activityRepository;
        this.timeLogRepository = timeLogRepository;
    }
    async getCounts(request) {
        let start;
        let end;
        if (request.startDate) {
            start = moment(request.startDate).utc().format();
            end = moment(request.endDate).utc().format();
        }
        else {
            const date = request.date || new Date();
            start = moment.utc(date).startOf('week').format();
            end = moment.utc(date).endOf('week').format();
        }
        const user = context_1.RequestContext.currentUser();
        const tenantId = user.tenantId;
        let employeeIds = [];
        if ((user.employeeId && request.onlyMe) ||
            !context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)) {
            employeeIds = [user.employeeId];
        }
        else {
            employeeIds = await this.getEmployeesIds(request.organizationId, tenantId);
        }
        const employeesCountQuery = this.employeeRepository.createQueryBuilder();
        employeesCountQuery.innerJoin(`${employeesCountQuery.alias}.timeLogs`, 'timeLogs');
        if (employeeIds.length) {
            employeesCountQuery
                .where({
                id: typeorm_2.In(employeeIds)
            })
                .andWhere(`"timeLogs"."startedAt" BETWEEN :start AND :end`, {
                start,
                end
            });
        }
        const employeesCount = await employeesCountQuery
            .andWhere(`"${employeesCountQuery.alias}"."tenantId" = :tenantId`, {
            tenantId
        })
            .getCount();
        const projectsCountQuery = this.organizationProjectsRepository.createQueryBuilder();
        projectsCountQuery.innerJoin(`${projectsCountQuery.alias}.timeLogs`, 'timeLogs');
        if (employeeIds.length) {
            projectsCountQuery
                .where(`"timeLogs"."employeeId" IN (:...employeeId)`, {
                employeeId: employeeIds
            })
                .andWhere(`"timeLogs"."startedAt" BETWEEN :start AND :end`, {
                start,
                end
            });
        }
        const projectsCount = await projectsCountQuery
            .andWhere(`"${projectsCountQuery.alias}"."tenantId" = :tenantId`, {
            tenantId
        })
            .getCount();
        let weekActivities = {
            overall: 0,
            duration: 0
        };
        if (employeeIds.length > 0) {
            const activitiesQuery = await this.timeSlotRepository
                .createQueryBuilder()
                .select('AVG(overall)', 'overall')
                .addSelect('SUM(duration)', 'duration')
                .where({
                employeeId: typeorm_2.In(employeeIds),
                startedAt: typeorm_2.Between(start, end),
                tenantId
            });
            weekActivities = await activitiesQuery.getRawOne();
        }
        let todayActivities = {
            overall: 0,
            duration: 0
        };
        if (employeeIds.length > 0) {
            const activitiesQuery = await this.timeSlotRepository
                .createQueryBuilder()
                .select('AVG(overall)', 'overall')
                .addSelect('SUM(duration)', 'duration')
                .where({
                employeeId: typeorm_2.In(employeeIds),
                startedAt: typeorm_2.Between(moment().startOf('day').format(), moment().endOf('day').format()),
                tenantId
            });
            todayActivities = await activitiesQuery.getRawOne();
        }
        return {
            employeesCount,
            projectsCount,
            weekActivities: parseFloat(parseFloat(weekActivities.overall + '').toFixed(1)),
            weekDuration: weekActivities.duration,
            todayActivities: parseFloat(parseFloat(todayActivities.overall + '').toFixed(1)),
            todayDuration: todayActivities.duration
        };
    }
    async getMembers(request) {
        const date = request.date || new Date();
        const start = moment.utc(date).startOf('week').format();
        const end = moment.utc(date).endOf('week').format();
        const tenantId = context_1.RequestContext.currentTenantId();
        const query = this.employeeRepository.createQueryBuilder();
        const employees = await query
            .select(`"${query.alias}".id`)
            .addSelect(`("user"."firstName" || ' ' ||  "user"."lastName")`, 'user_name')
            .addSelect(`"user"."imageUrl"`, 'user_image_url')
            .addSelect(`${environment_1.environment.database.type === 'sqlite'
            ? 'SUM((julianday("timeLogs"."stoppedAt") - julianday("timeLogs"."startedAt")) * 86400)'
            : 'SUM(extract(epoch from ("timeLogs"."stoppedAt" - "timeLogs"."startedAt")))'}`, `duration`)
            .innerJoin(`${query.alias}.user`, 'user')
            .innerJoin(`${query.alias}.timeLogs`, 'timeLogs')
            .where(`"${query.alias}"."organizationId" = :organizationId`, {
            organizationId: request.organizationId
        })
            .andWhere(`"${query.alias}"."tenantId" = :tenantId`, { tenantId })
            .andWhere(`"timeLogs"."startedAt" BETWEEN :start AND :end`, {
            start,
            end
        })
            .addGroupBy(`"${query.alias}"."id"`)
            .addGroupBy(`"user"."id"`)
            .orderBy('duration', 'DESC')
            .limit(5)
            .getRawMany();
        if (employees.length > 0) {
            let weekTimeSlots = await this.timeSlotRepository
                .createQueryBuilder()
                .select('SUM(duration)', 'duration')
                .addSelect('AVG(overall)', 'overall')
                .addSelect('"employeeId"', 'employeeId')
                .where({
                employeeId: typeorm_2.In(_.pluck(employees, 'id')),
                startedAt: typeorm_2.Between(start, end),
                tenantId
            })
                .groupBy('"employeeId"')
                .getRawMany();
            weekTimeSlots = _.chain(weekTimeSlots)
                .map((weekTimeSlot) => {
                if (weekTimeSlot && weekTimeSlot.overall) {
                    weekTimeSlot.overall = parseFloat(weekTimeSlot.overall).toFixed(1);
                }
                return weekTimeSlot;
            })
                .indexBy('employeeId')
                .value();
            let dayTimeSlots = await this.timeSlotRepository
                .createQueryBuilder()
                .select('AVG(overall)', 'overall')
                .addSelect('SUM(duration)', 'duration')
                .addSelect('"employeeId"', 'employeeId')
                .where({
                employeeId: typeorm_2.In(_.pluck(employees, 'id')),
                startedAt: typeorm_2.Between(moment().startOf('day').format(), moment().endOf('day').format()),
                tenantId
            })
                .groupBy('"employeeId"')
                .getRawMany();
            dayTimeSlots = _.chain(dayTimeSlots)
                .map((dayTimeSlot) => {
                if (dayTimeSlot && dayTimeSlot.overall) {
                    dayTimeSlot.overall = parseFloat(dayTimeSlot.overall).toFixed(1);
                }
                return dayTimeSlot;
            })
                .indexBy('employeeId')
                .value();
            for (let index = 0; index < employees.length; index++) {
                const member = employees[index];
                member.weekTime = weekTimeSlots[member.id];
                member.todayTime = dayTimeSlots[member.id];
                member.user = {
                    name: member.user_name,
                    imageUrl: member.user_image_url
                };
                delete member.user_name;
                delete member.user_image_url;
                const weekHoursQuery = this.employeeRepository.createQueryBuilder();
                member.weekHours = await weekHoursQuery
                    .select(`${environment_1.environment.database.type === 'sqlite'
                    ? 'SUM((julianday("timeLogs"."stoppedAt") - julianday("timeLogs"."startedAt")) * 86400)'
                    : 'SUM(extract(epoch from ("timeLogs"."stoppedAt" - "timeLogs"."startedAt")))'}`, `duration`)
                    .addSelect(`${environment_1.environment.database.type === 'sqlite'
                    ? `(strftime('%w', timeLogs.startedAt))`
                    : 'EXTRACT(DOW FROM "timeLogs"."startedAt")'}`, 'day')
                    .where({ id: member.id })
                    .andWhere(`"timeLogs"."startedAt" BETWEEN :start AND :end`, {
                    start,
                    end
                })
                    .andWhere(`"${weekHoursQuery.alias}"."tenantId" = :tenantId`, { tenantId })
                    .innerJoin(`${weekHoursQuery.alias}.timeLogs`, 'timeLogs')
                    .addGroupBy(`${environment_1.environment.database.type === 'sqlite'
                    ? `(strftime('%w', timeLogs.startedAt))`
                    : 'EXTRACT(DOW FROM "timeLogs"."startedAt")'}`)
                    .getRawMany();
            }
        }
        return employees;
    }
    async getProjects(request) {
        const query = this.organizationProjectsRepository.createQueryBuilder();
        const date = request.date || new Date();
        const start = moment.utc(date).startOf('week').format();
        const end = moment.utc(date).endOf('week').format();
        const user = context_1.RequestContext.currentUser();
        const tenantId = user.tenantId;
        query
            .select(`"${query.alias}".*`)
            .addSelect(`${environment_1.environment.database.type === 'sqlite'
            ? 'SUM((julianday("timeLogs"."stoppedAt") - julianday("timeLogs"."startedAt")) * 86400)'
            : 'SUM(extract(epoch from ("timeLogs"."stoppedAt" - "timeLogs"."startedAt")))'}`, `duration`)
            .innerJoin(`${query.alias}.timeLogs`, 'timeLogs');
        if ((user.employeeId && request.onlyMe) ||
            !context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)) {
            const employeeId = user.employeeId;
            query.leftJoin(`${query.alias}.members`, 'members');
            query.where(`members.id = :employeeId`, { employeeId });
        }
        else {
            query.where(`"${query.alias}"."organizationId" = :organizationId`, {
                organizationId: request.organizationId
            });
        }
        query
            .andWhere(`"timeLogs"."startedAt" BETWEEN :start AND :end`, {
            start,
            end
        })
            .andWhere(`"${query.alias}"."tenantId" = :tenantId`, {
            tenantId
        })
            .orderBy('duration', 'DESC')
            .addGroupBy(`"${query.alias}"."id"`)
            .limit(5);
        let projects = await query.getRawMany();
        const totalDurationQuery = this.organizationProjectsRepository.createQueryBuilder();
        totalDurationQuery
            .select(`${environment_1.environment.database.type === 'sqlite'
            ? 'SUM((julianday("timeLogs"."stoppedAt") - julianday("timeLogs"."startedAt")) * 86400)'
            : 'SUM(extract(epoch from ("timeLogs"."stoppedAt" - "timeLogs"."startedAt")))'}`, `duration`)
            .innerJoin(`${query.alias}.timeLogs`, 'timeLogs')
            .where(`"${totalDurationQuery.alias}"."organizationId" = :organizationId`, {
            organizationId: request.organizationId
        })
            .andWhere(`"${query.alias}"."tenantId" = :tenantId`, {
            tenantId
        });
        if ((user.employeeId && request.onlyMe) ||
            !context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)) {
            const employeeId = user.employeeId;
            totalDurationQuery.leftJoin(`${totalDurationQuery.alias}.members`, 'members');
            totalDurationQuery.where(`members.id = :employeeId`, {
                employeeId
            });
        }
        else {
            totalDurationQuery.where(`"${totalDurationQuery.alias}"."organizationId" = :organizationId`, {
                organizationId: request.organizationId
            });
        }
        totalDurationQuery.andWhere(`"timeLogs"."startedAt" BETWEEN :start AND :end`, {
            start,
            end
        });
        const totalDueration = await totalDurationQuery.getRawOne();
        projects = projects.map((project) => {
            project.durationPercentage =
                (project.duration * 100) / totalDueration.duration;
            return project;
        });
        return projects;
    }
    async getTasks(request) {
        const date = request.date || new Date();
        const start = moment.utc(date).startOf('week').format();
        const end = moment.utc(date).endOf('week').format();
        const user = context_1.RequestContext.currentUser();
        const tenantId = user.tenantId;
        let employeeIds = [];
        if ((user.employeeId && request.onlyMe) ||
            !context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)) {
            employeeIds = [user.employeeId];
        }
        else {
            employeeIds = await this.getEmployeesIds(request.organizationId, tenantId);
        }
        if (employeeIds.length > 0) {
            const query = this.taskRepository.createQueryBuilder();
            let tasks = await query
                .innerJoin(`${query.alias}.project`, 'project')
                .select(`"${query.alias}".*`)
                .addSelect(`${environment_1.environment.database.type === 'sqlite'
                ? 'SUM((julianday("timeLogs"."stoppedAt") - julianday("timeLogs"."startedAt")) * 86400)'
                : 'SUM(extract(epoch from ("timeLogs"."stoppedAt" - "timeLogs"."startedAt")))'}`, `duration`)
                .innerJoin(`${query.alias}.timeLogs`, 'timeLogs')
                .andWhere(`"timeLogs"."employeeId" IN(:...employeeId)`, {
                employeeId: employeeIds
            })
                .andWhere(`"timeLogs"."startedAt" BETWEEN :start AND :end`, {
                start,
                end
            })
                .andWhere(`"${query.alias}"."tenantId" = :tenantId`, {
                tenantId
            })
                .orderBy('duration', 'DESC')
                .addGroupBy(`"${query.alias}"."id"`)
                .limit(5)
                .getRawMany();
            const totalDurationQuery = this.taskRepository.createQueryBuilder();
            const totalDuration = await totalDurationQuery
                .select(`${environment_1.environment.database.type === 'sqlite'
                ? 'SUM((julianday("timeLogs"."stoppedAt") - julianday("timeLogs"."startedAt")) * 86400)'
                : 'SUM(extract(epoch from ("timeLogs"."stoppedAt" - "timeLogs"."startedAt")))'}`, `duration`)
                .innerJoin(`${totalDurationQuery.alias}.timeLogs`, 'timeLogs')
                .andWhere(`"timeLogs"."employeeId" IN(:...employeeId)`, {
                employeeId: employeeIds
            })
                .andWhere(`"timeLogs"."startedAt" BETWEEN :start AND :end`, {
                start,
                end
            })
                .getRawOne();
            tasks = tasks.map((task) => {
                task.durationPercentage =
                    (task.duration * 100) / totalDuration.duration;
                return task;
            });
            return tasks;
        }
        else {
            return [];
        }
    }
    async manualTimes(request) {
        const date = request.date || new Date();
        const start = moment.utc(date).startOf('week').format();
        const end = moment.utc(date).endOf('week').format();
        const user = context_1.RequestContext.currentUser();
        const tenantId = user.tenantId;
        let employeeIds = [];
        if ((user.employeeId && request.onlyMe) ||
            !context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)) {
            employeeIds = [user.employeeId];
        }
        else {
            employeeIds = await this.getEmployeesIds(request.organizationId, tenantId);
        }
        if (employeeIds.length > 0) {
            const timeLogs = await this.timeLogRepository.find({
                relations: ['project', 'employee', 'employee.user'],
                where: {
                    employeeId: typeorm_2.In(employeeIds),
                    logType: models_1.TimeLogType.MANUAL,
                    startedAt: typeorm_2.Between(start, end),
                    tenantId
                },
                take: 5,
                order: {
                    startedAt: 'DESC'
                }
            });
            const mapedTimeLogs = timeLogs.map((timeLog) => {
                return {
                    id: timeLog.id,
                    startedAt: timeLog.startedAt,
                    duration: timeLog.duration,
                    user: _.pick(timeLog.employee.user, [
                        'name',
                        'imageUrl'
                    ]),
                    project: _.pick(timeLog.employee.user, ['name'])
                };
            });
            return mapedTimeLogs;
        }
        else {
            return [];
        }
    }
    async getActivites(request) {
        const date = request.date || new Date();
        const start = moment.utc(date).startOf('week').format();
        const end = moment.utc(date).endOf('week').format();
        const user = context_1.RequestContext.currentUser();
        const tenantId = user.tenantId;
        let employeeIds = [];
        if ((user.employeeId && request.onlyMe) ||
            !context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)) {
            employeeIds = [user.employeeId];
        }
        else {
            employeeIds = await this.getEmployeesIds(request.organizationId, tenantId);
        }
        if (employeeIds.length > 0) {
            const query = this.activityRepository.createQueryBuilder();
            query
                .select(`COUNT("${query.alias}"."id")`, `sessions`)
                .addSelect(`SUM("${query.alias}"."duration")`, `duration`)
                .addSelect(`"${query.alias}"."title"`, `title`)
                .addGroupBy(`"${query.alias}"."title"`)
                .andWhere(`"${query.alias}"."date" BETWEEN :start AND :end`, {
                start,
                end
            })
                .andWhere(`"${query.alias}"."employeeId" IN(:...employeeId)`, {
                employeeId: employeeIds
            })
                .andWhere(`"${query.alias}"."tenantId" = :tenantId`, {
                tenantId
            })
                .orderBy(`"duration"`, 'DESC')
                .limit(5);
            let activities = await query.getRawMany();
            const totalDurationQuery = this.activityRepository.createQueryBuilder();
            const totalDueration = await totalDurationQuery
                .select(`SUM("${totalDurationQuery.alias}"."duration")`, `duration`)
                .andWhere(`"${totalDurationQuery.alias}"."employeeId" IN(:...employeeId)`, {
                employeeId: employeeIds
            })
                .andWhere(`"${query.alias}"."date" BETWEEN :start AND :end`, {
                start,
                end
            })
                .andWhere(`"${query.alias}"."tenantId" = :tenantId`, {
                tenantId
            })
                .getRawOne();
            activities = activities.map((activity) => {
                activity.durationPercentage =
                    (activity.duration * 100) / totalDueration.duration;
                return activity;
            });
            return activities;
        }
        else {
            return [];
        }
    }
    async getEmployeeTimeSlots(request) {
        let employees = [];
        const date = request.date || new Date();
        const start = moment.utc(date).startOf('week').format();
        const end = moment.utc(date).endOf('week').format();
        const user = context_1.RequestContext.currentUser();
        const tenantId = user.tenantId;
        const query = this.employeeRepository.createQueryBuilder();
        query
            .select(`"${query.alias}".*`)
            .addSelect('MAX(timeLogs.startedAt)', 'startedAt')
            .addSelect(`("user"."firstName" || ' ' ||  "user"."lastName")`, 'user_name')
            .addSelect(`"user"."imageUrl"`, 'user_image_url')
            .innerJoin(`${query.alias}.timeLogs`, 'timeLogs')
            .innerJoin(`${query.alias}.user`, 'user')
            .andWhere(`"timeLogs"."startedAt" BETWEEN :start AND :end`, {
            start,
            end
        })
            .groupBy(`"${query.alias}".id`)
            .addGroupBy('user.id')
            .orderBy('"startedAt"', 'DESC')
            .limit(3);
        if ((user.employeeId && request.onlyMe) ||
            !context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)) {
            const employeeId = user.employeeId;
            query.andWhere(`"${query.alias}".id = :employeeId`, { employeeId });
        }
        else {
            query.andWhere(`"${query.alias}"."organizationId" = :organizationId`, {
                organizationId: request.organizationId
            });
        }
        employees = await query
            .andWhere(`"${query.alias}"."tenantId" = :tenantId`, {
            tenantId
        })
            .getRawMany();
        for (let index = 0; index < employees.length; index++) {
            const employee = employees[index];
            employee.user = {
                imageUrl: employee.user_image_url,
                name: employee.user_name
            };
            delete employee.user_image_url;
            delete employee.user_name;
            employee.timeSlots = await this.timeSlotRepository.find({
                relations: ['screenshots'],
                where: {
                    employeeId: employee.id,
                    tenantId
                },
                take: 3,
                order: {
                    startedAt: 'DESC'
                }
            });
        }
        return employees;
    }
    async getEmployeesIds(organizationId, tenantId) {
        const employees = await this.employeeRepository
            .createQueryBuilder()
            .select(['id'])
            .andWhere('"organizationId" = :organizationId', { organizationId })
            .andWhere('"tenantId" = :tenantId', { tenantId })
            .getRawMany();
        return _.pluck(employees, 'id');
    }
};
StatisticService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(organization_projects_entity_1.OrganizationProject)),
    tslib_1.__param(1, typeorm_1.InjectRepository(task_entity_1.Task)),
    tslib_1.__param(2, typeorm_1.InjectRepository(time_slot_entity_1.TimeSlot)),
    tslib_1.__param(3, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__param(4, typeorm_1.InjectRepository(activity_entity_1.Activity)),
    tslib_1.__param(5, typeorm_1.InjectRepository(time_log_entity_1.TimeLog)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _d : Object, typeof (_e = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _e : Object, typeof (_f = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _f : Object])
], StatisticService);
exports.StatisticService = StatisticService;


/***/ }),

/***/ "./src/app/timesheet/time-log.entity.ts":
/*!**********************************************!*\
  !*** ./src/app/timesheet/time-log.entity.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeLog = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const timesheet_entity_1 = __webpack_require__(/*! ./timesheet.entity */ "./src/app/timesheet/timesheet.entity.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const task_entity_1 = __webpack_require__(/*! ../tasks/task.entity */ "./src/app/tasks/task.entity.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const time_slot_entity_1 = __webpack_require__(/*! ./time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let TimeLog = class TimeLog extends tenant_organization_base_1.TenantOrganizationBase {
    getDuration() {
        const end = this.stoppedAt ? this.stoppedAt : new Date();
        this.duration = moment(end).diff(moment(this.startedAt), 'seconds');
    }
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.ManyToOne(() => employee_entity_1.Employee, { nullable: true }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IEmployee !== "undefined" && models_1.IEmployee) === "function" ? _a : Object)
], TimeLog.prototype, "employee", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((timeLog) => timeLog.employee),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], TimeLog.prototype, "employeeId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: timesheet_entity_1.Timesheet }),
    typeorm_1.ManyToOne(() => timesheet_entity_1.Timesheet, { nullable: true, onDelete: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof models_1.ITimesheet !== "undefined" && models_1.ITimesheet) === "function" ? _b : Object)
], TimeLog.prototype, "timesheet", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((timeLog) => timeLog.timesheet),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], TimeLog.prototype, "timesheetId", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany(() => time_slot_entity_1.TimeSlot, (timeLogs) => timeLogs.timeLogs, {
        cascade: true
    }),
    typeorm_1.JoinTable({
        name: 'time_slot_time_logs'
    }),
    tslib_1.__metadata("design:type", Array)
], TimeLog.prototype, "timeSlots", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: organization_projects_entity_1.OrganizationProject }),
    typeorm_1.ManyToOne(() => organization_projects_entity_1.OrganizationProject, { nullable: true }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_c = typeof models_1.IOrganizationProject !== "undefined" && models_1.IOrganizationProject) === "function" ? _c : Object)
], TimeLog.prototype, "project", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((timeLog) => timeLog.project),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], TimeLog.prototype, "projectId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: task_entity_1.Task }),
    typeorm_1.ManyToOne(() => task_entity_1.Task, { nullable: true }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_d = typeof models_1.ITask !== "undefined" && models_1.ITask) === "function" ? _d : Object)
], TimeLog.prototype, "task", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((timeLog) => timeLog.task),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], TimeLog.prototype, "taskId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: organization_contact_entity_1.OrganizationContact }),
    typeorm_1.ManyToOne(() => organization_contact_entity_1.OrganizationContact, { nullable: true }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_e = typeof models_1.IOrganizationContact !== "undefined" && models_1.IOrganizationContact) === "function" ? _e : Object)
], TimeLog.prototype, "organizationContact", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((timeLog) => timeLog.organizationContact),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], TimeLog.prototype, "organizationContactId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: 'timestamptz' }),
    class_validator_1.IsDateString(),
    typeorm_1.Column({ nullable: true, default: null }),
    tslib_1.__metadata("design:type", typeof (_f = typeof Date !== "undefined" && Date) === "function" ? _f : Object)
], TimeLog.prototype, "startedAt", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: 'timestamptz' }),
    class_validator_1.IsDateString(),
    typeorm_1.Column({ nullable: true, default: null }),
    tslib_1.__metadata("design:type", typeof (_g = typeof Date !== "undefined" && Date) === "function" ? _g : Object)
], TimeLog.prototype, "stoppedAt", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.TimeLogType }),
    class_validator_1.IsEnum(models_1.TimeLogType),
    class_validator_1.IsString(),
    typeorm_1.Column({ default: models_1.TimeLogType.TRACKED }),
    tslib_1.__metadata("design:type", String)
], TimeLog.prototype, "logType", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.TimeLogSourceEnum }),
    class_validator_1.IsEnum(models_1.TimeLogSourceEnum),
    class_validator_1.IsString(),
    typeorm_1.Column({ default: models_1.TimeLogSourceEnum.BROWSER }),
    tslib_1.__metadata("design:type", String)
], TimeLog.prototype, "source", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ default: null, nullable: true }),
    tslib_1.__metadata("design:type", String)
], TimeLog.prototype, "description", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ default: null, nullable: true }),
    tslib_1.__metadata("design:type", String)
], TimeLog.prototype, "reason", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], TimeLog.prototype, "isBillable", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: 'timestamptz' }),
    class_validator_1.IsDateString(),
    typeorm_1.Column({ nullable: true, default: null }),
    tslib_1.__metadata("design:type", typeof (_h = typeof Date !== "undefined" && Date) === "function" ? _h : Object)
], TimeLog.prototype, "deletedAt", void 0);
tslib_1.__decorate([
    typeorm_1.AfterLoad(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], TimeLog.prototype, "getDuration", null);
TimeLog = tslib_1.__decorate([
    typeorm_1.Entity('time_log')
], TimeLog);
exports.TimeLog = TimeLog;


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/delete-time-span.command.ts":
/*!*************************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/delete-time-span.command.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteTimeSpanCommand = void 0;
class DeleteTimeSpanCommand {
    constructor(newTime, timeLog) {
        this.newTime = newTime;
        this.timeLog = timeLog;
    }
}
exports.DeleteTimeSpanCommand = DeleteTimeSpanCommand;
DeleteTimeSpanCommand.type = '[TimeLog] delete time span';


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/get-conflict-time-log.command.ts":
/*!******************************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/get-conflict-time-log.command.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IGetConflictTimeLogCommand = void 0;
class IGetConflictTimeLogCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.IGetConflictTimeLogCommand = IGetConflictTimeLogCommand;
IGetConflictTimeLogCommand.type = '[TimeLog] get conflict';


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/get-time-log-group-by-client.command.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/get-time-log-group-by-client.command.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTimeLogGroupByClientCommand = void 0;
class GetTimeLogGroupByClientCommand {
    constructor(timeLogs) {
        this.timeLogs = timeLogs;
    }
}
exports.GetTimeLogGroupByClientCommand = GetTimeLogGroupByClientCommand;
GetTimeLogGroupByClientCommand.type = '[TimeLog] group by client';


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/get-time-log-group-by-date.command.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/get-time-log-group-by-date.command.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTimeLogGroupByDateCommand = void 0;
class GetTimeLogGroupByDateCommand {
    constructor(timeLogs) {
        this.timeLogs = timeLogs;
    }
}
exports.GetTimeLogGroupByDateCommand = GetTimeLogGroupByDateCommand;
GetTimeLogGroupByDateCommand.type = '[TimeLog] group by date';


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/get-time-log-group-by-employee.command.ts":
/*!***************************************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/get-time-log-group-by-employee.command.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTimeLogGroupByEmployeeCommand = void 0;
class GetTimeLogGroupByEmployeeCommand {
    constructor(timeLogs) {
        this.timeLogs = timeLogs;
    }
}
exports.GetTimeLogGroupByEmployeeCommand = GetTimeLogGroupByEmployeeCommand;
GetTimeLogGroupByEmployeeCommand.type = '[TimeLog] group by employee';


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/get-time-log-group-by-project.command.ts":
/*!**************************************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/get-time-log-group-by-project.command.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTimeLogGroupByProjectCommand = void 0;
class GetTimeLogGroupByProjectCommand {
    constructor(timeLogs) {
        this.timeLogs = timeLogs;
    }
}
exports.GetTimeLogGroupByProjectCommand = GetTimeLogGroupByProjectCommand;
GetTimeLogGroupByProjectCommand.type = '[TimeLog] group by project';


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/handlers/delete-time-span.handler.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/handlers/delete-time-span.handler.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteTimeSpanHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const time_log_entity_1 = __webpack_require__(/*! ../../../time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const time_slot_service_1 = __webpack_require__(/*! ../../../time-slot/time-slot.service */ "./src/app/timesheet/time-slot/time-slot.service.ts");
const _ = __webpack_require__(/*! underscore */ "underscore");
const delete_time_span_command_1 = __webpack_require__(/*! ../delete-time-span.command */ "./src/app/timesheet/time-log/commands/delete-time-span.command.ts");
const time_log_update_command_1 = __webpack_require__(/*! ../time-log-update.command */ "./src/app/timesheet/time-log/commands/time-log-update.command.ts");
const time_log_delete_command_1 = __webpack_require__(/*! ../time-log-delete.command */ "./src/app/timesheet/time-log/commands/time-log-delete.command.ts");
const moment_extend_1 = __webpack_require__(/*! ../../../../core/moment-extend */ "./src/app/core/moment-extend.ts");
let DeleteTimeSpanHandler = class DeleteTimeSpanHandler {
    constructor(timeLogRepository, commandBus, timeSlotService) {
        this.timeLogRepository = timeLogRepository;
        this.commandBus = commandBus;
        this.timeSlotService = timeSlotService;
    }
    async execute(command) {
        const { newTime, timeLog } = command;
        const { start, end } = newTime;
        const newTimeRange = moment_extend_1.moment.range(start, end);
        const dbTimeRange = moment_extend_1.moment.range(timeLog.startedAt, timeLog.stoppedAt);
        if (!newTimeRange.overlaps(dbTimeRange, { adjacent: false })) {
            console.log('not overlaping', newTimeRange, dbTimeRange);
            return false;
        }
        if (moment_extend_1.moment(timeLog.startedAt).isBetween(moment_extend_1.moment(start), moment_extend_1.moment(end), null, '[]')) {
            if (moment_extend_1.moment(timeLog.stoppedAt).isBetween(moment_extend_1.moment(start), moment_extend_1.moment(end), null, '[]')) {
                console.log('Delete time log because overlap entire time');
                await this.commandBus.execute(new time_log_delete_command_1.TimeLogDeleteCommand(timeLog, true));
            }
            else {
                console.log('Update start time');
                const reamingDueration = moment_extend_1.moment(timeLog.stoppedAt).diff(moment_extend_1.moment(end), 'seconds');
                if (reamingDueration > 0) {
                    await this.commandBus.execute(new time_log_update_command_1.TimeLogUpdateCommand({
                        startedAt: end
                    }, timeLog));
                }
                else {
                    await this.commandBus.execute(new time_log_delete_command_1.TimeLogDeleteCommand(timeLog, true));
                }
            }
        }
        else {
            if (moment_extend_1.moment(timeLog.stoppedAt).isBetween(moment_extend_1.moment(start), moment_extend_1.moment(end), null, '[]')) {
                console.log('Update stopped time');
                const reamingDueration = moment_extend_1.moment(end).diff(moment_extend_1.moment(timeLog.startedAt), 'seconds');
                if (reamingDueration > 0) {
                    await this.commandBus.execute(new time_log_update_command_1.TimeLogUpdateCommand({
                        stoppedAt: start
                    }, timeLog));
                }
                else {
                    await this.commandBus.execute(new time_log_delete_command_1.TimeLogDeleteCommand(timeLog));
                }
            }
            else {
                console.log('Split database time in two entries');
                const reamingDueration = moment_extend_1.moment(start).diff(moment_extend_1.moment(timeLog.startedAt), 'seconds');
                const timeLogClone = _.omit(timeLog, [
                    'createdAt',
                    'updatedAt',
                    'id'
                ]);
                if (reamingDueration > 0) {
                    timeLog.stoppedAt = start;
                    timeLog.timeSlots = await this.timeSlotService.getTimeSlots({
                        startDate: timeLog.startedAt,
                        endDate: moment_extend_1.moment(timeLog.stoppedAt)
                            .subtract(1, 'second')
                            .toDate()
                    });
                    await this.timeLogRepository.save(timeLog);
                }
                else {
                    await this.commandBus.execute(new time_log_delete_command_1.TimeLogDeleteCommand(timeLog, true));
                }
                this.timeSlotService.rangeDelete(timeLog.employeeId, start, end);
                const newLog = timeLogClone;
                newLog.startedAt = end;
                newLog.timeSlots = await this.timeSlotService.getTimeSlots({
                    startDate: newLog.startedAt,
                    endDate: moment_extend_1.moment(newLog.stoppedAt)
                        .subtract(1, 'second')
                        .toDate()
                });
                const newLogReamingDueration = moment_extend_1.moment(newLog.stoppedAt).diff(moment_extend_1.moment(newLog.startedAt), 'seconds');
                if (newLogReamingDueration > 0) {
                    await this.timeLogRepository.save(newLog);
                }
            }
        }
        return true;
    }
};
DeleteTimeSpanHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(delete_time_span_command_1.DeleteTimeSpanCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(time_log_entity_1.TimeLog)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _b : Object, typeof (_c = typeof time_slot_service_1.TimeSlotService !== "undefined" && time_slot_service_1.TimeSlotService) === "function" ? _c : Object])
], DeleteTimeSpanHandler);
exports.DeleteTimeSpanHandler = DeleteTimeSpanHandler;


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/handlers/get-conflict-time-log.handler.ts":
/*!***************************************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/handlers/get-conflict-time-log.handler.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetConflictTimeLogHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const time_log_entity_1 = __webpack_require__(/*! ../../../time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const moment = __webpack_require__(/*! moment */ "moment");
const get_conflict_time_log_command_1 = __webpack_require__(/*! ../get-conflict-time-log.command */ "./src/app/timesheet/time-log/commands/get-conflict-time-log.command.ts");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
let GetConflictTimeLogHandler = class GetConflictTimeLogHandler {
    constructor(timeLogRepository) {
        this.timeLogRepository = timeLogRepository;
    }
    async execute(command) {
        const { input } = command;
        const startedAt = moment.utc(input.startDate).toISOString();
        const stoppedAt = moment.utc(input.endDate).toISOString();
        let conflictQuery = this.timeLogRepository.createQueryBuilder();
        conflictQuery = conflictQuery
            .where(`"${conflictQuery.alias}"."employeeId" = :employeeId`, {
            employeeId: input.employeeId
        })
            .andWhere(`"${conflictQuery.alias}"."deletedAt" IS null`)
            .andWhere(environment_1.environment.database.type === 'sqlite'
            ? `'${startedAt}' >= "${conflictQuery.alias}"."startedAt" and '${startedAt}' <= "${conflictQuery.alias}"."stoppedAt"`
            : `("${conflictQuery.alias}"."startedAt", "${conflictQuery.alias}"."stoppedAt") OVERLAPS (timestamptz '${startedAt}', timestamptz '${stoppedAt}')`);
        if (input.relations) {
            input.relations.forEach((relation) => {
                conflictQuery = conflictQuery.leftJoinAndSelect(`${conflictQuery.alias}.${relation}`, relation);
            });
        }
        if (input.ignoreId) {
            conflictQuery = conflictQuery.andWhere(`${conflictQuery.alias}.id NOT IN (:...id)`, {
                id: input.ignoreId instanceof Array
                    ? input.ignoreId
                    : [input.ignoreId]
            });
        }
        return await conflictQuery.getMany();
    }
};
GetConflictTimeLogHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(get_conflict_time_log_command_1.IGetConflictTimeLogCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(time_log_entity_1.TimeLog)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], GetConflictTimeLogHandler);
exports.GetConflictTimeLogHandler = GetConflictTimeLogHandler;


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/handlers/get-time-log-group-by-client.handler.ts":
/*!**********************************************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/handlers/get-time-log-group-by-client.handler.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTimeLogGroupByClientHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const underscore_1 = __webpack_require__(/*! underscore */ "underscore");
const moment = __webpack_require__(/*! moment */ "moment");
const get_time_log_group_by_client_command_1 = __webpack_require__(/*! ../get-time-log-group-by-client.command */ "./src/app/timesheet/time-log/commands/get-time-log-group-by-client.command.ts");
let GetTimeLogGroupByClientHandler = class GetTimeLogGroupByClientHandler {
    constructor() { }
    async execute(command) {
        const { timeLogs } = command;
        const dailyLogs = underscore_1.chain(timeLogs)
            .groupBy((log) => log.project ? log.project.organizationContactId : null)
            .map((byClientLogs) => {
            const log = byClientLogs.length > 0 ? byClientLogs[0] : null;
            let client = null;
            if (log && log.project && log.project.organizationContact) {
                client = log.project.organizationContact;
            }
            const byClient = underscore_1.chain(byClientLogs)
                .groupBy((log) => log.projectId)
                .map((byProjectLogs) => {
                const project = byProjectLogs.length > 0
                    ? byProjectLogs[0].project
                    : null;
                const byDate = underscore_1.chain(byProjectLogs)
                    .groupBy((log) => moment(log.startedAt).format('YYYY-MM-DD'))
                    .map((byDateLogs, date) => {
                    const byEmployee = underscore_1.chain(byDateLogs)
                        .groupBy('employeeId')
                        .map((byEmployeeLogs) => {
                        const employee = byEmployeeLogs.length > 0
                            ? byEmployeeLogs[0].employee
                            : null;
                        const sum = byEmployeeLogs.reduce((iteratee, log) => {
                            return iteratee + log.duration;
                        }, 0);
                        const timeSlots = underscore_1.chain(byEmployeeLogs)
                            .pluck('timeSlots')
                            .flatten(true)
                            .value();
                        const activitiesSum = byEmployeeLogs.reduce((iteratee, timeSlot) => {
                            return (iteratee +
                                timeSlot.overall);
                        }, 0) || 0;
                        const task = byEmployeeLogs.length > 0
                            ? byEmployeeLogs[0].task
                            : null;
                        const activity = activitiesSum / timeSlots.length;
                        return {
                            task,
                            employee,
                            sum,
                            activity: activity
                        };
                    })
                        .value();
                    return {
                        date,
                        projectLogs: byEmployee
                    };
                })
                    .value();
                return { project, logs: byDate };
            })
                .value();
            return { client, logs: byClient };
        });
        return dailyLogs;
    }
};
GetTimeLogGroupByClientHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(get_time_log_group_by_client_command_1.GetTimeLogGroupByClientCommand),
    tslib_1.__metadata("design:paramtypes", [])
], GetTimeLogGroupByClientHandler);
exports.GetTimeLogGroupByClientHandler = GetTimeLogGroupByClientHandler;


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/handlers/get-time-log-group-by-date.handler.ts":
/*!********************************************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/handlers/get-time-log-group-by-date.handler.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTimeLogGroupByDateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const get_time_log_group_by_date_command_1 = __webpack_require__(/*! ../get-time-log-group-by-date.command */ "./src/app/timesheet/time-log/commands/get-time-log-group-by-date.command.ts");
const underscore_1 = __webpack_require__(/*! underscore */ "underscore");
const moment = __webpack_require__(/*! moment */ "moment");
let GetTimeLogGroupByDateHandler = class GetTimeLogGroupByDateHandler {
    constructor() { }
    async execute(command) {
        const { timeLogs } = command;
        const dailyLogs = underscore_1.chain(timeLogs)
            .groupBy((log) => moment(log.startedAt).format('YYYY-MM-DD'))
            .map((byDateLogs, date) => {
            const byProject = underscore_1.chain(byDateLogs)
                .groupBy('projectId')
                .map((byProjectLogs) => {
                const project = byProjectLogs.length > 0
                    ? byProjectLogs[0].project
                    : null;
                const byEmployee = underscore_1.chain(byProjectLogs)
                    .groupBy('employeeId')
                    .map((byEmployeeLogs) => {
                    const sum = byEmployeeLogs.reduce((iteratee, log) => {
                        return iteratee + log.duration;
                    }, 0);
                    const timeSlots = underscore_1.chain(byEmployeeLogs)
                        .pluck('timeSlots')
                        .flatten(true)
                        .value();
                    const activitiesSum = byEmployeeLogs.reduce((iteratee, timeSlot) => {
                        return iteratee + timeSlot.overall;
                    }, 0) || 0;
                    const activity = activitiesSum / timeSlots.length;
                    const employee = byEmployeeLogs.length > 0
                        ? byEmployeeLogs[0].employee
                        : null;
                    const task = byEmployeeLogs.length > 0
                        ? byEmployeeLogs[0].task
                        : null;
                    return {
                        employee,
                        sum: sum,
                        task,
                        activity
                    };
                })
                    .value();
                return {
                    project,
                    employeeLogs: byEmployee
                };
            })
                .value();
            return { date, logs: byProject };
        })
            .value();
        return dailyLogs;
    }
};
GetTimeLogGroupByDateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(get_time_log_group_by_date_command_1.GetTimeLogGroupByDateCommand),
    tslib_1.__metadata("design:paramtypes", [])
], GetTimeLogGroupByDateHandler);
exports.GetTimeLogGroupByDateHandler = GetTimeLogGroupByDateHandler;


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/handlers/get-time-log-group-by-employee.handler.ts":
/*!************************************************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/handlers/get-time-log-group-by-employee.handler.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTimeLogGroupByEmployeeHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const underscore_1 = __webpack_require__(/*! underscore */ "underscore");
const moment = __webpack_require__(/*! moment */ "moment");
const get_time_log_group_by_employee_command_1 = __webpack_require__(/*! ../get-time-log-group-by-employee.command */ "./src/app/timesheet/time-log/commands/get-time-log-group-by-employee.command.ts");
let GetTimeLogGroupByEmployeeHandler = class GetTimeLogGroupByEmployeeHandler {
    constructor() { }
    async execute(command) {
        const { timeLogs } = command;
        const dailyLogs = underscore_1.chain(timeLogs)
            .groupBy((log) => log.employeeId)
            .map((byEmployeeLogs) => {
            const employee = byEmployeeLogs.length > 0
                ? byEmployeeLogs[0].employee
                : null;
            const byDate = underscore_1.chain(byEmployeeLogs)
                .groupBy((log) => moment(log.startedAt).format('YYYY-MM-DD'))
                .map((byDateLogs, date) => {
                const byProject = underscore_1.chain(byDateLogs)
                    .groupBy('projectId')
                    .map((byProjectLogs) => {
                    const sum = byProjectLogs.reduce((iteratee, log) => {
                        return iteratee + log.duration;
                    }, 0);
                    const timeSlots = underscore_1.chain(byProjectLogs)
                        .pluck('timeSlots')
                        .flatten(true)
                        .value();
                    const activitiesSum = byProjectLogs.reduce((iteratee, timeSlot) => {
                        return iteratee + timeSlot.overall;
                    }, 0) || 0;
                    const activity = activitiesSum / timeSlots.length;
                    const project = byProjectLogs.length > 0
                        ? byProjectLogs[0].project
                        : null;
                    const task = byProjectLogs.length > 0
                        ? byProjectLogs[0].task
                        : null;
                    return {
                        task,
                        project,
                        sum,
                        activity: activity
                    };
                })
                    .value();
                return {
                    date,
                    projectLogs: byProject
                };
            })
                .value();
            return { employee, logs: byDate };
        })
            .value();
        return dailyLogs;
    }
};
GetTimeLogGroupByEmployeeHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(get_time_log_group_by_employee_command_1.GetTimeLogGroupByEmployeeCommand),
    tslib_1.__metadata("design:paramtypes", [])
], GetTimeLogGroupByEmployeeHandler);
exports.GetTimeLogGroupByEmployeeHandler = GetTimeLogGroupByEmployeeHandler;


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/handlers/get-time-log-group-by-project.handler.ts":
/*!***********************************************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/handlers/get-time-log-group-by-project.handler.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTimeLogGroupByProjectHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const underscore_1 = __webpack_require__(/*! underscore */ "underscore");
const moment = __webpack_require__(/*! moment */ "moment");
const get_time_log_group_by_project_command_1 = __webpack_require__(/*! ../get-time-log-group-by-project.command */ "./src/app/timesheet/time-log/commands/get-time-log-group-by-project.command.ts");
let GetTimeLogGroupByProjectHandler = class GetTimeLogGroupByProjectHandler {
    constructor() { }
    async execute(command) {
        const { timeLogs } = command;
        const dailyLogs = underscore_1.chain(timeLogs)
            .groupBy((log) => log.projectId)
            .map((byProjectLogs) => {
            const project = byProjectLogs.length > 0 ? byProjectLogs[0].project : null;
            const byDate = underscore_1.chain(byProjectLogs)
                .groupBy((log) => moment(log.startedAt).format('YYYY-MM-DD'))
                .map((byDateLogs, date) => {
                const byEmployee = underscore_1.chain(byDateLogs)
                    .groupBy('employeeId')
                    .map((byEmployeeLogs) => {
                    const sum = byEmployeeLogs.reduce((iteratee, log) => {
                        return iteratee + log.duration;
                    }, 0);
                    const timeSlots = underscore_1.chain(byEmployeeLogs)
                        .pluck('timeSlots')
                        .flatten(true)
                        .value();
                    const activitiesSum = byEmployeeLogs.reduce((iteratee, timeSlot) => {
                        return iteratee + timeSlot.overall;
                    }, 0) || 0;
                    const activity = activitiesSum / timeSlots.length;
                    const task = byEmployeeLogs.length > 0
                        ? byEmployeeLogs[0].task
                        : null;
                    const employee = byEmployeeLogs.length > 0
                        ? byEmployeeLogs[0].employee
                        : null;
                    return {
                        task,
                        employee,
                        sum,
                        activity
                    };
                })
                    .value();
                return {
                    date,
                    employeeLogs: byEmployee
                };
            })
                .value();
            return { project, logs: byDate };
        })
            .value();
        return dailyLogs;
    }
};
GetTimeLogGroupByProjectHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(get_time_log_group_by_project_command_1.GetTimeLogGroupByProjectCommand),
    tslib_1.__metadata("design:paramtypes", [])
], GetTimeLogGroupByProjectHandler);
exports.GetTimeLogGroupByProjectHandler = GetTimeLogGroupByProjectHandler;


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/handlers/index.ts":
/*!***************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/handlers/index.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeLogCommandHandlers = void 0;
const time_log_create_handler_1 = __webpack_require__(/*! ./time-log-create.handler */ "./src/app/timesheet/time-log/commands/handlers/time-log-create.handler.ts");
const time_log_update_handler_1 = __webpack_require__(/*! ./time-log-update.handler */ "./src/app/timesheet/time-log/commands/handlers/time-log-update.handler.ts");
const time_log_delete_handler_1 = __webpack_require__(/*! ./time-log-delete.handler */ "./src/app/timesheet/time-log/commands/handlers/time-log-delete.handler.ts");
const delete_time_span_handler_1 = __webpack_require__(/*! ./delete-time-span.handler */ "./src/app/timesheet/time-log/commands/handlers/delete-time-span.handler.ts");
const get_conflict_time_log_handler_1 = __webpack_require__(/*! ./get-conflict-time-log.handler */ "./src/app/timesheet/time-log/commands/handlers/get-conflict-time-log.handler.ts");
const get_time_log_group_by_date_handler_1 = __webpack_require__(/*! ./get-time-log-group-by-date.handler */ "./src/app/timesheet/time-log/commands/handlers/get-time-log-group-by-date.handler.ts");
const get_time_log_group_by_employee_handler_1 = __webpack_require__(/*! ./get-time-log-group-by-employee.handler */ "./src/app/timesheet/time-log/commands/handlers/get-time-log-group-by-employee.handler.ts");
const get_time_log_group_by_project_handler_1 = __webpack_require__(/*! ./get-time-log-group-by-project.handler */ "./src/app/timesheet/time-log/commands/handlers/get-time-log-group-by-project.handler.ts");
const get_time_log_group_by_client_handler_1 = __webpack_require__(/*! ./get-time-log-group-by-client.handler */ "./src/app/timesheet/time-log/commands/handlers/get-time-log-group-by-client.handler.ts");
exports.TimeLogCommandHandlers = [
    time_log_create_handler_1.TimeLogCreateHandler,
    time_log_update_handler_1.TimeLogUpdateHandler,
    time_log_delete_handler_1.TimeLogDeleteHandler,
    get_conflict_time_log_handler_1.GetConflictTimeLogHandler,
    delete_time_span_handler_1.DeleteTimeSpanHandler,
    get_time_log_group_by_date_handler_1.GetTimeLogGroupByDateHandler,
    get_time_log_group_by_project_handler_1.GetTimeLogGroupByProjectHandler,
    get_time_log_group_by_employee_handler_1.GetTimeLogGroupByEmployeeHandler,
    get_time_log_group_by_client_handler_1.GetTimeLogGroupByClientHandler
];


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/handlers/time-log-create.handler.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/handlers/time-log-create.handler.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeLogCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const time_log_entity_1 = __webpack_require__(/*! ../../../time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const time_log_create_command_1 = __webpack_require__(/*! ../time-log-create.command */ "./src/app/timesheet/time-log/commands/time-log-create.command.ts");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const time_slot_service_1 = __webpack_require__(/*! ../../../time-slot/time-slot.service */ "./src/app/timesheet/time-slot/time-slot.service.ts");
const timesheet_first_or_create_command_1 = __webpack_require__(/*! ../../../timesheet/commands/timesheet-first-or-create.command */ "./src/app/timesheet/timesheet/commands/timesheet-first-or-create.command.ts");
const timesheet_recalculate_command_1 = __webpack_require__(/*! ../../../timesheet/commands/timesheet-recalculate.command */ "./src/app/timesheet/timesheet/commands/timesheet-recalculate.command.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const commands_1 = __webpack_require__(/*! src/app/employee/commands */ "./src/app/employee/commands/index.ts");
const context_1 = __webpack_require__(/*! src/app/core/context */ "./src/app/core/context/index.ts");
let TimeLogCreateHandler = class TimeLogCreateHandler {
    constructor(timeLogRepository, commandBus, timeSlotService) {
        this.timeLogRepository = timeLogRepository;
        this.commandBus = commandBus;
        this.timeSlotService = timeSlotService;
    }
    async execute(command) {
        const { input } = command;
        const timesheet = await this.commandBus.execute(new timesheet_first_or_create_command_1.TimesheetFirstOrCreateCommand(input.startedAt, input.employeeId));
        const newTimeLog = new time_log_entity_1.TimeLog(Object.assign(Object.assign({ startedAt: moment.utc(input.startedAt).toDate() }, (input.stoppedAt
            ? { stoppedAt: moment.utc(input.stoppedAt).toDate() }
            : {})), { timesheetId: timesheet.id, organizationId: input.organizationId, employeeId: input.employeeId, projectId: input.projectId || null, taskId: input.taskId || null, organizationContactId: input.organizationContactId || null, logType: input.logType || models_1.TimeLogType.MANUAL, description: input.description || '', reason: input.reason || '', isBillable: input.isBillable || false, source: input.source || models_1.TimeLogSourceEnum.BROWSER }));
        let timeSlots = [];
        if (input.stoppedAt) {
            timeSlots = this.timeSlotService.generateTimeSlots(input.startedAt, input.stoppedAt);
            timeSlots = timeSlots.map((slot) => (Object.assign(Object.assign({}, slot), { employeeId: input.employeeId, keyboard: 0, mouse: 0, overall: 0 })));
        }
        if (input.timeSlots) {
            input.timeSlots = input.timeSlots.map((timeSlot) => {
                timeSlot.startedAt = moment.utc(input.startedAt).toDate();
                timeSlot.employeeId = input.employeeId;
                return timeSlot;
            });
            timeSlots = timeSlots.map((blankTimeSlot) => {
                let timeSlot = input.timeSlots.find((requestTimeSlot) => {
                    return (moment
                        .utc(requestTimeSlot.startedAt)
                        .format('YYYY-MM-DD HH:mm') ===
                        moment
                            .utc(blankTimeSlot.startedAt)
                            .format('YYYY-MM-DD HH:mm'));
                });
                timeSlot = timeSlot ? timeSlot : blankTimeSlot;
                timeSlot.employeeId = input.employeeId;
                return timeSlot;
            });
        }
        newTimeLog.timeSlots = await this.timeSlotService.bulkCreate(timeSlots);
        newTimeLog.tenantId = context_1.RequestContext.currentTenantId();
        await this.timeLogRepository.save(newTimeLog);
        await this.commandBus.execute(new timesheet_recalculate_command_1.TimesheetRecalculateCommand(timesheet.id));
        await this.commandBus.execute(new commands_1.UpdateEmployeeTotalWorkedHoursCommand(newTimeLog.employeeId));
        return newTimeLog;
    }
};
TimeLogCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(time_log_create_command_1.TimeLogCreateCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(time_log_entity_1.TimeLog)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _b : Object, typeof (_c = typeof time_slot_service_1.TimeSlotService !== "undefined" && time_slot_service_1.TimeSlotService) === "function" ? _c : Object])
], TimeLogCreateHandler);
exports.TimeLogCreateHandler = TimeLogCreateHandler;


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/handlers/time-log-delete.handler.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/handlers/time-log-delete.handler.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeLogDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const time_log_entity_1 = __webpack_require__(/*! ../../../time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const time_slot_service_1 = __webpack_require__(/*! ../../../time-slot/time-slot.service */ "./src/app/timesheet/time-slot/time-slot.service.ts");
const timesheet_recalculate_command_1 = __webpack_require__(/*! ../../../timesheet/commands/timesheet-recalculate.command */ "./src/app/timesheet/timesheet/commands/timesheet-recalculate.command.ts");
const time_log_delete_command_1 = __webpack_require__(/*! ../time-log-delete.command */ "./src/app/timesheet/time-log/commands/time-log-delete.command.ts");
const _ = __webpack_require__(/*! underscore */ "underscore");
const commands_1 = __webpack_require__(/*! src/app/employee/commands */ "./src/app/employee/commands/index.ts");
let TimeLogDeleteHandler = class TimeLogDeleteHandler {
    constructor(timeLogRepository, commandBus, timeSlotService) {
        this.timeLogRepository = timeLogRepository;
        this.commandBus = commandBus;
        this.timeSlotService = timeSlotService;
    }
    async execute(command) {
        const { ids, forceDelete } = command;
        let timeLogs;
        if (typeof ids === 'string') {
            timeLogs = await this.timeLogRepository.find({ id: ids });
        }
        else if (ids instanceof Array && typeof ids[0] === 'string') {
            timeLogs = await this.timeLogRepository.find({
                id: typeorm_2.In(ids)
            });
        }
        else if (ids instanceof time_log_entity_1.TimeLog) {
            timeLogs = [ids];
        }
        else {
            timeLogs = ids;
        }
        for (let index = 0; index < timeLogs.length; index++) {
            const timeLog = timeLogs[index];
            await this.timeSlotService.rangeDelete(timeLog.employeeId, timeLog.startedAt, timeLog.stoppedAt);
        }
        let deleteResult;
        if (forceDelete) {
            deleteResult = await this.timeLogRepository.delete({
                id: typeorm_2.In(_.pluck(timeLogs, 'id'))
            });
        }
        else {
            deleteResult = await this.timeLogRepository.update({ id: typeorm_2.In(_.pluck(timeLogs, 'id')) }, { deletedAt: new Date() });
        }
        const timesheetPromises = _.chain(timeLogs)
            .pluck('timesheetId')
            .uniq()
            .map(async (timesheetId) => await this.commandBus.execute(new timesheet_recalculate_command_1.TimesheetRecalculateCommand(timesheetId)))
            .value();
        const totalWorkedHoursPromises = _.chain(timeLogs)
            .pluck('employeeId')
            .uniq()
            .map(async (employeeId) => await this.commandBus.execute(new commands_1.UpdateEmployeeTotalWorkedHoursCommand(employeeId)))
            .value();
        try {
            await Promise.all(timesheetPromises);
            await Promise.all(totalWorkedHoursPromises);
        }
        catch (error) {
            console.log('TimeLogDeleteHandler', { error });
        }
        return deleteResult;
    }
};
TimeLogDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(time_log_delete_command_1.TimeLogDeleteCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(time_log_entity_1.TimeLog)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _b : Object, typeof (_c = typeof time_slot_service_1.TimeSlotService !== "undefined" && time_slot_service_1.TimeSlotService) === "function" ? _c : Object])
], TimeLogDeleteHandler);
exports.TimeLogDeleteHandler = TimeLogDeleteHandler;


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/handlers/time-log-update.handler.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/handlers/time-log-update.handler.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeLogUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const time_log_entity_1 = __webpack_require__(/*! ../../../time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const time_log_update_command_1 = __webpack_require__(/*! ../time-log-update.command */ "./src/app/timesheet/time-log/commands/time-log-update.command.ts");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const time_slot_service_1 = __webpack_require__(/*! ../../../time-slot/time-slot.service */ "./src/app/timesheet/time-slot/time-slot.service.ts");
const timesheet_first_or_create_command_1 = __webpack_require__(/*! ../../../timesheet/commands/timesheet-first-or-create.command */ "./src/app/timesheet/timesheet/commands/timesheet-first-or-create.command.ts");
const timesheet_recalculate_command_1 = __webpack_require__(/*! ../../../timesheet/commands/timesheet-recalculate.command */ "./src/app/timesheet/timesheet/commands/timesheet-recalculate.command.ts");
const commands_1 = __webpack_require__(/*! src/app/employee/commands */ "./src/app/employee/commands/index.ts");
let TimeLogUpdateHandler = class TimeLogUpdateHandler {
    constructor(timeLogRepository, commandBus, timeSlotService) {
        this.timeLogRepository = timeLogRepository;
        this.commandBus = commandBus;
        this.timeSlotService = timeSlotService;
    }
    async execute(command) {
        const { id, input, manualTimeSlot } = command;
        let timeLog;
        if (id instanceof time_log_entity_1.TimeLog) {
            timeLog = id;
        }
        else {
            timeLog = await this.timeLogRepository.findOne(id);
        }
        const updatedTimeLog = Object.assign({}, timeLog, input);
        const timeSlots = this.timeSlotService.generateTimeSlots(timeLog.startedAt, timeLog.stoppedAt);
        let timesheet;
        let updateTimeSlots = [];
        let needToUpdateTimeSlots = false;
        if (input.startedAt || input.stoppedAt) {
            needToUpdateTimeSlots = true;
        }
        if (needToUpdateTimeSlots) {
            timesheet = await this.commandBus.execute(new timesheet_first_or_create_command_1.TimesheetFirstOrCreateCommand(input.startedAt, timeLog.employeeId));
            updateTimeSlots = this.timeSlotService.generateTimeSlots(updatedTimeLog.startedAt, updatedTimeLog.stoppedAt);
        }
        await this.timeLogRepository.update(timeLog.id, Object.assign(Object.assign({}, input), (timesheet ? { timesheetId: timesheet.id } : {})));
        timeLog = await this.timeLogRepository.findOne(timeLog.id);
        if (needToUpdateTimeSlots) {
            const startTimes = timeSlots
                .filter((timeslot) => {
                return (updateTimeSlots.filter((newSlot) => newSlot.startedAt.getTime() ===
                    timeslot.startedAt.getTime()).length === 0);
            })
                .map((timeslot) => new Date(timeslot.startedAt));
            if (startTimes.length > 0) {
                await this.timeSlotService.delete({
                    employeeId: timeLog.employeeId,
                    startedAt: typeorm_2.In(startTimes)
                });
            }
            updateTimeSlots = updateTimeSlots.map((slot) => (Object.assign(Object.assign({}, slot), { employeeId: timeLog.employeeId, keyboard: 0, mouse: 0, overall: 0 })));
            if (!manualTimeSlot) {
                updateTimeSlots = await this.timeSlotService.bulkCreate(updateTimeSlots);
            }
            timeLog.timeSlots = updateTimeSlots;
            this.timeLogRepository.save(timeLog);
            await this.commandBus.execute(new timesheet_recalculate_command_1.TimesheetRecalculateCommand(timeLog.timesheetId));
            await this.commandBus.execute(new commands_1.UpdateEmployeeTotalWorkedHoursCommand(timeLog.employeeId));
        }
        return timeLog;
    }
};
TimeLogUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(time_log_update_command_1.TimeLogUpdateCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(time_log_entity_1.TimeLog)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _b : Object, typeof (_c = typeof time_slot_service_1.TimeSlotService !== "undefined" && time_slot_service_1.TimeSlotService) === "function" ? _c : Object])
], TimeLogUpdateHandler);
exports.TimeLogUpdateHandler = TimeLogUpdateHandler;


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/time-log-create.command.ts":
/*!************************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/time-log-create.command.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeLogCreateCommand = void 0;
class TimeLogCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.TimeLogCreateCommand = TimeLogCreateCommand;
TimeLogCreateCommand.type = '[TimeLog] create';


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/time-log-delete.command.ts":
/*!************************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/time-log-delete.command.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeLogDeleteCommand = void 0;
class TimeLogDeleteCommand {
    constructor(ids, forceDelete = false) {
        this.ids = ids;
        this.forceDelete = forceDelete;
    }
}
exports.TimeLogDeleteCommand = TimeLogDeleteCommand;
TimeLogDeleteCommand.type = '[TimeLog] delete';


/***/ }),

/***/ "./src/app/timesheet/time-log/commands/time-log-update.command.ts":
/*!************************************************************************!*\
  !*** ./src/app/timesheet/time-log/commands/time-log-update.command.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeLogUpdateCommand = void 0;
class TimeLogUpdateCommand {
    constructor(input, id, manualTimeSlot) {
        this.input = input;
        this.id = id;
        this.manualTimeSlot = manualTimeSlot;
    }
}
exports.TimeLogUpdateCommand = TimeLogUpdateCommand;
TimeLogUpdateCommand.type = '[TimeLog] update';


/***/ }),

/***/ "./src/app/timesheet/time-log/time-log.controller.ts":
/*!***********************************************************!*\
  !*** ./src/app/timesheet/time-log/time-log.controller.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeLogController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const time_log_service_1 = __webpack_require__(/*! ./time-log.service */ "./src/app/timesheet/time-log/time-log.service.ts");
const permissions_1 = __webpack_require__(/*! ../../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const organization_permission_guard_1 = __webpack_require__(/*! ../../shared/guards/auth/organization-permission.guard */ "./src/app/shared/guards/auth/organization-permission.guard.ts");
const context_1 = __webpack_require__(/*! ../../core/context */ "./src/app/core/context/index.ts");
const core_1 = __webpack_require__(/*! ../../core */ "./src/app/core/index.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const tenant_base_guard_1 = __webpack_require__(/*! ../../shared/guards/auth/tenant-base.guard  */ "./src/app/shared/guards/auth/tenant-base.guard .ts");
let TimeLogController = class TimeLogController extends core_1.CrudController {
    constructor(timeLogService) {
        super(timeLogService);
        this.timeLogService = timeLogService;
    }
    async getLogs(entity) {
        return this.timeLogService.getTimeLogs(entity);
    }
    async getConflict(entity) {
        return this.timeLogService.checkConflictTime(entity);
    }
    async getDailyReport(options) {
        return this.timeLogService.getDailyReport(options);
    }
    async getDailyReportChartData(options) {
        return this.timeLogService.getDailyReportChartData(options);
    }
    async getOwedAmountReport(entity) {
        return this.timeLogService.getOwedAmountReport(entity);
    }
    async getOwedAmountReportChartData(entity) {
        return this.timeLogService.getOwedAmountReportChartData(entity);
    }
    async getWeeklyReport(options) {
        return this.timeLogService.getWeeklyReport(options);
    }
    async weeklyLimit(request) {
        return this.timeLogService.getTimeLimit(request);
    }
    async projectBudgetLimit(request) {
        return this.timeLogService.projectBudgetLimit(request);
    }
    async clientBudgetLimit(request) {
        return this.timeLogService.clientBudgetLimit(request);
    }
    async findOne(id, options) {
        return this.timeLogService.findOne(id, options);
    }
    async addManualTime(entity) {
        let employeeId;
        if (context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)) {
            if (entity.employeeId) {
                employeeId = entity.employeeId;
            }
        }
        if (!employeeId) {
            const user = context_1.RequestContext.currentUser();
            employeeId = user.employeeId;
        }
        entity.employeeId = employeeId;
        return this.timeLogService.addManualTime(entity);
    }
    async updateManualTime(id, entity) {
        return this.timeLogService.updateTime(id, entity);
    }
    async deleteTimeTime(query) {
        return this.timeLogService.deleteTimeLog(query.logIds);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get Timer Logs' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.IGetTimeLogInput !== "undefined" && models_1.IGetTimeLogInput) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], TimeLogController.prototype, "getLogs", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get Timer Logs Conflict' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/conflict'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.IGetTimeLogConflictInput !== "undefined" && models_1.IGetTimeLogConflictInput) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], TimeLogController.prototype, "getConflict", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find Timer Log by id' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found one record'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('report/daily'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof models_1.IGetTimeLogReportInput !== "undefined" && models_1.IGetTimeLogReportInput) === "function" ? _e : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], TimeLogController.prototype, "getDailyReport", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find Timer Log by id' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found one record'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('report/daily-chart'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_f = typeof models_1.IGetTimeLogReportInput !== "undefined" && models_1.IGetTimeLogReportInput) === "function" ? _f : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], TimeLogController.prototype, "getDailyReportChartData", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get Owed Amount Report' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Get report data'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/report/owed-report'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_g = typeof models_1.IGetTimeLogReportInput !== "undefined" && models_1.IGetTimeLogReportInput) === "function" ? _g : Object]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], TimeLogController.prototype, "getOwedAmountReport", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get Owed Amount Report Chart Data' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Get report chart data'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/report/owed-chart-data'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_j = typeof models_1.IGetTimeLogReportInput !== "undefined" && models_1.IGetTimeLogReportInput) === "function" ? _j : Object]),
    tslib_1.__metadata("design:returntype", typeof (_k = typeof Promise !== "undefined" && Promise) === "function" ? _k : Object)
], TimeLogController.prototype, "getOwedAmountReportChartData", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find Timer Log by id' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found one record'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('report/weekly'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_l = typeof models_1.IGetTimeLogReportInput !== "undefined" && models_1.IGetTimeLogReportInput) === "function" ? _l : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], TimeLogController.prototype, "getWeeklyReport", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find Timer Log by id' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found one record'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiOperation({ summary: 'Time Limit' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found records'
    }),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Get('time-limit'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_m = typeof models_1.IGetTimeLimitReportInput !== "undefined" && models_1.IGetTimeLimitReportInput) === "function" ? _m : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], TimeLogController.prototype, "weeklyLimit", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Budget limit' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found one record'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiOperation({ summary: 'Time Limit' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found records'
    }),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Get('project-budget-limit'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_o = typeof models_1.IProjectBudgetLimitReportInput !== "undefined" && models_1.IProjectBudgetLimitReportInput) === "function" ? _o : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], TimeLogController.prototype, "projectBudgetLimit", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Budget limit' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found one record'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiOperation({ summary: 'Time Limit' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found records'
    }),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Get('client-budget-limit'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_p = typeof models_1.IClientBudgetLimitReportInput !== "undefined" && models_1.IClientBudgetLimitReportInput) === "function" ? _p : Object]),
    tslib_1.__metadata("design:returntype", Promise)
], TimeLogController.prototype, "clientBudgetLimit", null);
tslib_1.__decorate([
    common_1.Get(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_q = typeof typeorm_1.FindOneOptions !== "undefined" && typeorm_1.FindOneOptions) === "function" ? _q : Object]),
    tslib_1.__metadata("design:returntype", typeof (_r = typeof Promise !== "undefined" && Promise) === "function" ? _r : Object)
], TimeLogController.prototype, "findOne", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Add manual time' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'The timer has been successfully On/Off.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Post('/'),
    common_1.UseGuards(organization_permission_guard_1.OrganizationPermissionGuard),
    permissions_1.Permissions(models_1.OrganizationPermissionsEnum.ALLOW_MANUAL_TIME),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_s = typeof models_1.IManualTimeInput !== "undefined" && models_1.IManualTimeInput) === "function" ? _s : Object]),
    tslib_1.__metadata("design:returntype", typeof (_t = typeof Promise !== "undefined" && Promise) === "function" ? _t : Object)
], TimeLogController.prototype, "addManualTime", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update time log' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'The timer has been successfully On/Off.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Put('/:id'),
    common_1.UseGuards(organization_permission_guard_1.OrganizationPermissionGuard),
    permissions_1.Permissions(models_1.OrganizationPermissionsEnum.ALLOW_MODIFY_TIME),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_u = typeof models_1.IManualTimeInput !== "undefined" && models_1.IManualTimeInput) === "function" ? _u : Object]),
    tslib_1.__metadata("design:returntype", typeof (_v = typeof Promise !== "undefined" && Promise) === "function" ? _v : Object)
], TimeLogController.prototype, "updateManualTime", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Delete time log' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'The timer has been successfully On/Off.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Delete('/'),
    common_1.UseGuards(organization_permission_guard_1.OrganizationPermissionGuard),
    permissions_1.Permissions(models_1.OrganizationPermissionsEnum.ALLOW_DELETE_TIME),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_w = typeof Promise !== "undefined" && Promise) === "function" ? _w : Object)
], TimeLogController.prototype, "deleteTimeTime", null);
TimeLogController = tslib_1.__decorate([
    swagger_1.ApiTags('TimeLog'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_base_guard_1.TenantBaseGuard),
    common_1.Controller('time-log'),
    tslib_1.__metadata("design:paramtypes", [typeof (_x = typeof time_log_service_1.TimeLogService !== "undefined" && time_log_service_1.TimeLogService) === "function" ? _x : Object])
], TimeLogController);
exports.TimeLogController = TimeLogController;


/***/ }),

/***/ "./src/app/timesheet/time-log/time-log.seed.ts":
/*!*****************************************************!*\
  !*** ./src/app/timesheet/time-log/time-log.seed.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomTimeLogs = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const faker = __webpack_require__(/*! faker */ "faker");
const _ = __webpack_require__(/*! underscore */ "underscore");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const time_log_entity_1 = __webpack_require__(/*! ../time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const screenshot_seed_1 = __webpack_require__(/*! ../screenshot/screenshot.seed */ "./src/app/timesheet/screenshot/screenshot.seed.ts");
const time_slot_seed_1 = __webpack_require__(/*! ../time-slot/time-slot.seed */ "./src/app/timesheet/time-slot/time-slot.seed.ts");
exports.createRandomTimeLogs = async (connection, tenant, timeSheets, defaultProjects, noOfTimeLogsPerTimeSheet) => {
    var e_1, _a, e_2, _b;
    let query = connection
        .getRepository(organization_projects_entity_1.OrganizationProject)
        .createQueryBuilder()
        .where({
        id: typeorm_1.In(_.pluck(defaultProjects, 'id'))
    });
    query = query.leftJoinAndSelect(`${query.alias}.tasks`, 'tasks');
    const projects = await query.getMany();
    const timeSheetChunk = _.chunk(timeSheets, 5);
    const allTimeSlots = [];
    for (let timeSheetChunkIndex = 0; timeSheetChunkIndex < timeSheetChunk.length; timeSheetChunkIndex++) {
        let timeSlots = [];
        const timeLogs = [];
        const screenshotsPromise = [];
        for (let timeSheetIndex = 0; timeSheetIndex < timeSheetChunk[timeSheetChunkIndex].length; timeSheetIndex++) {
            const timesheet = timeSheetChunk[timeSheetChunkIndex][timeSheetIndex];
            const randomDays = _.chain([0, 1, 2, 3, 4, 5, 6])
                .shuffle()
                .take(faker.random.number({ min: 3, max: 5 }))
                .values()
                .value();
            for (let index = 0; index <= randomDays.length; index++) {
                const day = randomDays[index];
                const date = moment(timesheet.startedAt)
                    .add(day, 'day')
                    .toDate();
                const range = dateRanges(moment(date).startOf('day').toDate(), moment(date).endOf('day').toDate());
                for (let rangeIndex = 0; rangeIndex < range.length; rangeIndex++) {
                    const { startedAt, stoppedAt } = range[rangeIndex];
                    const project = faker.random.arrayElement(projects);
                    const task = faker.random.arrayElement(project.tasks);
                    const source = faker.random.arrayElement(Object.keys(models_1.TimeLogSourceEnum));
                    const timeLog = new time_log_entity_1.TimeLog({
                        employeeId: timesheet.employeeId
                    });
                    let logType = models_1.TimeLogType.TRACKED;
                    if (source === models_1.TimeLogSourceEnum.WEB_TIMER ||
                        source === models_1.TimeLogSourceEnum.BROWSER) {
                        logType = models_1.TimeLogType.MANUAL;
                    }
                    const newTimeSlot = time_slot_seed_1.createTimeSlots(startedAt, stoppedAt).map((timeSlot) => {
                        timeSlot.employeeId = timesheet.employeeId;
                        timeSlot.organizationId = timesheet.organizationId;
                        timeSlot.tenant = tenant;
                        return timeSlot;
                    });
                    timeSlots = timeSlots.concat(newTimeSlot);
                    timeLog.timesheet = timesheet;
                    timeLog.timeSlots = newTimeSlot;
                    timeLog.project = project;
                    timeLog.task = task;
                    timeLog.organizationContact = project.organizationContact;
                    timeLog.startedAt = startedAt;
                    timeLog.stoppedAt = stoppedAt;
                    timeLog.logType = logType;
                    timeLog.source = source;
                    timeLog.description = faker.lorem.sentence(faker.random.number(10));
                    timeLog.isBillable = faker.random.arrayElement([
                        true,
                        true,
                        false
                    ]);
                    timeLog.deletedAt = null;
                    (timeLog.organizationId = timesheet.organizationId),
                        (timeLog.tenantId = timesheet.tenantId);
                    timeLogs.push(timeLog);
                }
            }
        }
        const savedTimeSlots = await connection.manager.save(timeSlots);
        const savedTimeLogs = await connection.manager.save(timeLogs);
        allTimeSlots.push(...savedTimeSlots);
        try {
            for (var savedTimeLogs_1 = (e_1 = void 0, tslib_1.__asyncValues(savedTimeLogs)), savedTimeLogs_1_1; savedTimeLogs_1_1 = await savedTimeLogs_1.next(), !savedTimeLogs_1_1.done;) {
                const timeLog = savedTimeLogs_1_1.value;
                if (timeLog.logType === models_1.TimeLogType.TRACKED) {
                    const filterTimeSlots = savedTimeSlots.filter((x) => x.employeeId === timeLog.employeeId);
                    try {
                        for (var filterTimeSlots_1 = (e_2 = void 0, tslib_1.__asyncValues(filterTimeSlots)), filterTimeSlots_1_1; filterTimeSlots_1_1 = await filterTimeSlots_1.next(), !filterTimeSlots_1_1.done;) {
                            const timeSlot = filterTimeSlots_1_1.value;
                            for (let i = 0; i < noOfTimeLogsPerTimeSheet; i++) {
                                screenshotsPromise.push(screenshot_seed_1.createRandomScreenshot(timeSlot, tenant));
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (filterTimeSlots_1_1 && !filterTimeSlots_1_1.done && (_b = filterTimeSlots_1.return)) await _b.call(filterTimeSlots_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (savedTimeLogs_1_1 && !savedTimeLogs_1_1.done && (_a = savedTimeLogs_1.return)) await _a.call(savedTimeLogs_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        await Promise.all(screenshotsPromise)
            .then(async (data) => {
            const screenshots = [];
            data.forEach((row) => {
                screenshots.push(...row);
            });
            await connection.manager.save(screenshots);
        })
            .catch((err) => {
            console.log({ err });
        });
    }
    return allTimeSlots;
};
function dateRanges(start, stop) {
    const range = [];
    const startedAt = faker.date.between(start, stop);
    const stoppedAt = faker.date.between(startedAt, moment(startedAt).add(2, 'hours').toDate());
    range.push({ startedAt, stoppedAt });
    return range;
}


/***/ }),

/***/ "./src/app/timesheet/time-log/time-log.service.ts":
/*!********************************************************!*\
  !*** ./src/app/timesheet/time-log/time-log.service.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeLogService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const time_log_entity_1 = __webpack_require__(/*! ../time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const context_1 = __webpack_require__(/*! ../../core/context */ "./src/app/core/context/index.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const core_1 = __webpack_require__(/*! ../../core */ "./src/app/core/index.ts");
const employee_entity_1 = __webpack_require__(/*! ../../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const time_log_create_command_1 = __webpack_require__(/*! ./commands/time-log-create.command */ "./src/app/timesheet/time-log/commands/time-log-create.command.ts");
const time_log_update_command_1 = __webpack_require__(/*! ./commands/time-log-update.command */ "./src/app/timesheet/time-log/commands/time-log-update.command.ts");
const time_log_delete_command_1 = __webpack_require__(/*! ./commands/time-log-delete.command */ "./src/app/timesheet/time-log/commands/time-log-delete.command.ts");
const delete_time_span_command_1 = __webpack_require__(/*! ./commands/delete-time-span.command */ "./src/app/timesheet/time-log/commands/delete-time-span.command.ts");
const get_conflict_time_log_command_1 = __webpack_require__(/*! ./commands/get-conflict-time-log.command */ "./src/app/timesheet/time-log/commands/get-conflict-time-log.command.ts");
const _ = __webpack_require__(/*! underscore */ "underscore");
const get_time_log_group_by_date_command_1 = __webpack_require__(/*! ./commands/get-time-log-group-by-date.command */ "./src/app/timesheet/time-log/commands/get-time-log-group-by-date.command.ts");
const get_time_log_group_by_employee_command_1 = __webpack_require__(/*! ./commands/get-time-log-group-by-employee.command */ "./src/app/timesheet/time-log/commands/get-time-log-group-by-employee.command.ts");
const get_time_log_group_by_project_command_1 = __webpack_require__(/*! ./commands/get-time-log-group-by-project.command */ "./src/app/timesheet/time-log/commands/get-time-log-group-by-project.command.ts");
const get_time_log_group_by_client_command_1 = __webpack_require__(/*! ./commands/get-time-log-group-by-client.command */ "./src/app/timesheet/time-log/commands/get-time-log-group-by-client.command.ts");
const underscore_1 = __webpack_require__(/*! underscore */ "underscore");
const organization_contact_entity_1 = __webpack_require__(/*! ../../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
let TimeLogService = class TimeLogService extends core_1.CrudService {
    constructor(commandBus, timeLogRepository, employeeRepository, organizationContactsRepository, organizationProjectRepository) {
        super(timeLogRepository);
        this.commandBus = commandBus;
        this.timeLogRepository = timeLogRepository;
        this.employeeRepository = employeeRepository;
        this.organizationContactsRepository = organizationContactsRepository;
        this.organizationProjectRepository = organizationProjectRepository;
    }
    async getTimeLogs(request) {
        const logs = await this.timeLogRepository.find({
            join: {
                alias: 'timeLogs',
                innerJoin: {
                    employee: 'timeLogs.employee'
                }
            },
            relations: [
                'project',
                'task',
                'organizationContact',
                ...(context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)
                    ? ['employee', 'employee.organization', 'employee.user']
                    : [])
            ],
            order: {
                startedAt: 'ASC'
            },
            where: (qb) => {
                this.getFilterTimeLogQuery(qb, request);
            }
        });
        return logs;
    }
    async getWeeklyReport(request) {
        const logs = await this.timeLogRepository.find({
            join: {
                alias: 'timeLogs',
                innerJoin: {
                    employee: 'timeLogs.employee'
                }
            },
            relations: [
                'project',
                'task',
                'organizationContact',
                ...(context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)
                    ? ['employee', 'employee.organization', 'employee.user']
                    : [])
            ],
            order: {
                startedAt: 'ASC'
            },
            where: (qb) => {
                this.getFilterTimeLogQuery(qb, request);
            }
        });
        let dayList = [];
        const range = {};
        let i = 0;
        const start = moment(request.startDate);
        while (start.isSameOrBefore(request.endDate) && i < 7) {
            const date = start.format('YYYY-MM-DD');
            range[date] = null;
            start.add(1, 'day');
            i++;
        }
        dayList = Object.keys(range);
        const weeklyLogs = _.chain(logs)
            .groupBy('employeeId')
            .map((innerLogs, _projectId) => {
            const byDate = _.chain(innerLogs)
                .groupBy((log) => moment(log.startedAt).format('YYYY-MM-DD'))
                .mapObject((res) => {
                const sum = res.reduce((iteratee, log) => {
                    return iteratee + log.duration;
                }, 0);
                return { sum, logs: res };
            })
                .value();
            const employee = innerLogs.length > 0 ? innerLogs[0].employee : null;
            const dates = {};
            dayList.forEach((date) => {
                dates[date] = byDate[date] || 0;
            });
            return { employee, dates };
        })
            .value();
        return weeklyLogs;
    }
    async getDailyReportChartData(request) {
        const logs = await this.timeLogRepository.find({
            join: {
                alias: 'timeLogs',
                innerJoin: {
                    employee: 'timeLogs.employee'
                }
            },
            order: {
                startedAt: 'ASC'
            },
            where: (qb) => {
                this.getFilterTimeLogQuery(qb, request);
            }
        });
        let dayList = [];
        const range = {};
        let i = 0;
        const start = moment(request.startDate);
        while (start.isSameOrBefore(request.endDate) && i < 7) {
            const date = start.format('YYYY-MM-DD');
            range[date] = null;
            start.add(1, 'day');
            i++;
        }
        dayList = Object.keys(range);
        const byDate = underscore_1.chain(logs)
            .groupBy((log) => moment(log.startedAt).format('YYYY-MM-DD'))
            .mapObject((logs, date) => {
            const tacked = logs
                .filter((log) => log.logType === models_1.TimeLogType.TRACKED)
                .reduce((iteratee, log) => {
                return iteratee + log.duration;
            }, 0);
            const manual = logs
                .filter((log) => log.logType === models_1.TimeLogType.MANUAL)
                .reduce((iteratee, log) => {
                return iteratee + log.duration;
            }, 0);
            return {
                date,
                value: {
                    [models_1.TimeLogType.TRACKED]: parseFloat((tacked / 3600).toFixed(1)),
                    [models_1.TimeLogType.MANUAL]: parseFloat((manual / 3600).toFixed(1))
                }
            };
        })
            .value();
        const dates = dayList.map((date) => {
            if (byDate[date]) {
                return byDate[date];
            }
            else {
                return {
                    date: date,
                    value: {
                        [models_1.TimeLogType.TRACKED]: 0,
                        [models_1.TimeLogType.MANUAL]: 0
                    }
                };
            }
        });
        return dates;
    }
    async getDailyReport(request) {
        const logs = await this.timeLogRepository.find({
            join: {
                alias: 'timeLogs',
                innerJoin: {
                    employee: 'timeLogs.employee'
                }
            },
            relations: [
                'project',
                'task',
                'timeSlots',
                'organizationContact',
                ...(context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)
                    ? ['employee', 'employee.organization', 'employee.user']
                    : [])
            ],
            order: {
                startedAt: 'ASC'
            },
            where: (qb) => {
                this.getFilterTimeLogQuery(qb, request);
            }
        });
        let dailyLogs;
        switch (request.groupBy) {
            case 'employee':
                dailyLogs = await this.commandBus.execute(new get_time_log_group_by_employee_command_1.GetTimeLogGroupByEmployeeCommand(logs));
                break;
            case 'project':
                dailyLogs = await this.commandBus.execute(new get_time_log_group_by_project_command_1.GetTimeLogGroupByProjectCommand(logs));
                break;
            case 'client':
                dailyLogs = await this.commandBus.execute(new get_time_log_group_by_client_command_1.GetTimeLogGroupByClientCommand(logs));
                break;
            default:
                dailyLogs = await this.commandBus.execute(new get_time_log_group_by_date_command_1.GetTimeLogGroupByDateCommand(logs));
                break;
        }
        return dailyLogs;
    }
    async getOwedAmountReport(request) {
        const timeLogs = await this.timeLogRepository.find({
            relations: ['employee', 'employee.user'],
            order: {
                startedAt: 'ASC'
            },
            where: (qb) => {
                this.getFilterTimeLogQuery(qb, request);
            }
        });
        const dailyLogs = underscore_1.chain(timeLogs)
            .groupBy((log) => moment(log.startedAt).format('YYYY-MM-DD'))
            .map((byDateLogs, date) => {
            const byEmployee = underscore_1.chain(byDateLogs)
                .groupBy('employeeId')
                .map((byEmployeeLogs) => {
                const durationSum = byEmployeeLogs.reduce((iteratee, log) => {
                    return iteratee + log.duration;
                }, 0);
                const employee = byEmployeeLogs.length > 0
                    ? byEmployeeLogs[0].employee
                    : null;
                const amount = (employee === null || employee === void 0 ? void 0 : employee.billRateValue) * (durationSum / 3600);
                return {
                    employee,
                    amount: parseFloat(amount.toFixed(1)),
                    duration: durationSum
                };
            })
                .value();
            return { date, employees: byEmployee };
        })
            .value();
        return dailyLogs;
    }
    async getOwedAmountReportChartData(request) {
        const timeLogs = await this.timeLogRepository.find({
            relations: ['employee', 'employee.user'],
            order: {
                startedAt: 'ASC'
            },
            where: (qb) => {
                this.getFilterTimeLogQuery(qb, request);
            }
        });
        let dayList = [];
        const range = {};
        let i = 0;
        const start = moment(request.startDate);
        while (start.isSameOrBefore(request.endDate) && i < 7) {
            const date = start.format('YYYY-MM-DD');
            range[date] = null;
            start.add(1, 'day');
            i++;
        }
        dayList = Object.keys(range);
        const byDate = underscore_1.chain(timeLogs)
            .groupBy((log) => moment(log.startedAt).format('YYYY-MM-DD'))
            .mapObject((byDateLogs, date) => {
            const byEmployee = underscore_1.chain(byDateLogs)
                .groupBy('employeeId')
                .map((byEmployeeLogs) => {
                const durationSum = byEmployeeLogs.reduce((iteratee, log) => {
                    return iteratee + log.duration;
                }, 0);
                const employee = byEmployeeLogs.length > 0
                    ? byEmployeeLogs[0].employee
                    : null;
                const amount = (employee === null || employee === void 0 ? void 0 : employee.billRateValue) * (durationSum / 3600);
                return {
                    employee,
                    amount: parseFloat(amount.toFixed(1)),
                    duration: durationSum
                };
            })
                .value();
            const value = byEmployee.reduce((iteratee, obj) => {
                return iteratee + obj.amount;
            }, 0);
            return { date, value };
        })
            .value();
        const dates = dayList.map((date) => {
            if (byDate[date]) {
                return byDate[date];
            }
            else {
                return {
                    date: date,
                    value: 0
                };
            }
        });
        return dates;
    }
    async getTimeLimit(request) {
        if (!request.duration) {
            request.duration = 'day';
        }
        const timeLogs = await this.timeLogRepository.find({
            relations: ['employee', 'employee.user'],
            order: {
                startedAt: 'ASC'
            },
            where: (qb) => {
                this.getFilterTimeLogQuery(qb, request);
            }
        });
        let dayList = [];
        const range = {};
        let i = 0;
        const start = moment(request.startDate);
        while (start.isSameOrBefore(request.endDate) && i < 7) {
            const date = start.format('YYYY-MM-DD');
            range[date] = null;
            start.add(1, request.duration);
            i++;
        }
        dayList = Object.keys(range);
        const byDate = underscore_1.chain(timeLogs)
            .groupBy((log) => {
            return moment(log.startedAt)
                .startOf(request.duration)
                .format('YYYY-MM-DD');
        })
            .mapObject((byDateLogs, date) => {
            const byEmployee = underscore_1.chain(byDateLogs)
                .groupBy('employeeId')
                .map((byEmployeeLogs) => {
                const durationSum = byEmployeeLogs.reduce((iteratee, log) => {
                    return iteratee + log.duration;
                }, 0);
                const employee = byEmployeeLogs.length > 0
                    ? byEmployeeLogs[0].employee
                    : null;
                let limit = employee.reWeeklyLimit * 60 * 60;
                if (request.duration === 'day') {
                    limit = limit / 5;
                }
                else if (request.duration === 'month') {
                    limit = limit * 4;
                }
                const durationPercentage = (durationSum * 100) / limit;
                return {
                    employee,
                    duration: durationSum,
                    durationPercentage: durationPercentage.toFixed(2),
                    limit
                };
            })
                .value();
            return { date, employees: byEmployee };
        })
            .value();
        const dates = dayList.map((date) => {
            if (byDate[date]) {
                return byDate[date];
            }
            else {
                return {
                    date: date,
                    employees: []
                };
            }
        });
        return dates;
    }
    async projectBudgetLimit(request) {
        const projects = await this.organizationProjectRepository.find({
            relations: ['timeLogs', 'timeLogs.employee'],
            where: {
                organizationId: request.organizationId
            }
        });
        const projectTimeLogs = projects.map((project) => {
            let spent = 0;
            let spentPercentage = 0;
            if (project.budgetType ==
                models_1.OrganizationProjectBudgetTypeEnum.HOURS) {
                spent = project.timeLogs.reduce((iteratee, log) => {
                    return iteratee + log.duration;
                }, 0);
                spentPercentage = (spent * 100) / project.budget;
            }
            else {
                spent = project.timeLogs.reduce((iteratee, log) => {
                    let amount = 0;
                    if (log.employee) {
                        amount =
                            log.duration *
                                60 *
                                60 *
                                log.employee.billRateValue;
                    }
                    return iteratee + amount;
                }, 0);
                spentPercentage = (spent * 100) / project.budget;
            }
            const reamingBudget = Math.max(project.budget - spent, 0);
            return {
                project,
                budgetType: project.budgetType,
                budget: project.budget,
                spent: spent,
                reamingBudget,
                spentPercentage: parseFloat(spentPercentage.toFixed(2))
            };
        });
        return projectTimeLogs;
    }
    async clientBudgetLimit(request) {
        const organizationContacts = await this.organizationContactsRepository.find({
            where: {
                organizationId: request.organizationId
            }
        });
        const clientProjects = await this.organizationProjectRepository.find({
            relations: ['timeLogs', 'timeLogs.employee'],
            where: {
                organizationContactId: underscore_1.pluck(organizationContacts, 'id')
            }
        });
        const projects = clientProjects.map((project) => {
            const organizationContact = project.organizationContact;
            let spent = 0;
            let spentPercentage = 0;
            if (organizationContact.budgetType ==
                models_1.OrganizationContactBudgetTypeEnum.HOURS) {
                spent = project.timeLogs.reduce((iteratee, log) => {
                    return iteratee + log.duration;
                }, 0);
                spentPercentage =
                    (spent * 100) / organizationContact.budget;
            }
            else {
                spent = project.timeLogs.reduce((iteratee, log) => {
                    let amount = 0;
                    if (log.employee) {
                        amount =
                            log.duration *
                                60 *
                                60 *
                                log.employee.billRateValue;
                    }
                    return iteratee + amount;
                }, 0);
                spentPercentage =
                    (spent * 100) / organizationContact.budget;
            }
            const reamingBudget = Math.max(organizationContact.budget - spent, 0);
            return {
                organizationContact,
                budgetType: organizationContact.budgetType,
                budget: organizationContact.budget,
                spent: spent,
                reamingBudget,
                spentPercentage: parseFloat(spentPercentage.toFixed(2))
            };
        });
        return projects;
    }
    getFilterTimeLogQuery(qb, request) {
        let employeeIds;
        if (context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)) {
            if (request.employeeIds) {
                employeeIds = request.employeeIds;
            }
        }
        else {
            const user = context_1.RequestContext.currentUser();
            employeeIds = [user.employeeId];
        }
        qb.where({
            deletedAt: null
        });
        if (request.timesheetId) {
            qb.andWhere('"timesheetId" = :timesheetId', {
                timesheetId: request.timesheetId
            });
        }
        if (request.startDate && request.endDate) {
            const startDate = moment.utc(request.startDate).format();
            const endDate = moment.utc(request.endDate).format();
            console.log({ startDate, endDate });
            qb.andWhere(`"${qb.alias}"."startedAt" Between :startDate AND :endDate`, {
                startDate,
                endDate
            });
        }
        if (employeeIds) {
            qb.andWhere(`"${qb.alias}"."employeeId" IN (:...employeeId)`, {
                employeeId: employeeIds
            });
        }
        if (request.projectIds) {
            qb.andWhere(`"${qb.alias}"."projectId" IN (:...projectIds)`, {
                projectIds: request.projectIds
            });
        }
        if (request.activityLevel) {
        }
        if (request.source) {
            if (request.source instanceof Array) {
                qb.andWhere(`"${qb.alias}"."source" IN (:...source)`, {
                    source: request.source
                });
            }
            else {
                qb.andWhere(`"${qb.alias}"."source" = :source`, {
                    source: request.source
                });
            }
        }
        if (request.logType) {
            if (request.logType instanceof Array) {
                qb.andWhere(`"${qb.alias}"."logType" IN (:...logType)`, {
                    logType: request.logType
                });
            }
            else {
                qb.andWhere(`"${qb.alias}"."logType" = :logType`, {
                    logType: request.logType
                });
            }
        }
        if (request.organizationId) {
            qb.andWhere(`"${qb.alias}"."organizationId" = :organizationId`, {
                organizationId: request.organizationId
            });
        }
        const tenantId = context_1.RequestContext.currentTenantId();
        if (tenantId) {
            qb.andWhere(`"${qb.alias}"."tenantId" = :tenantId`, {
                tenantId
            });
        }
        return qb;
    }
    async addManualTime(request) {
        if (!request.startedAt || !request.stoppedAt) {
            throw new common_1.BadRequestException('Please select valid Date, start time and end time');
        }
        const employee = await this.employeeRepository.findOne(request.employeeId, { relations: ['organization'] });
        const isDateAllow = this.allowDate(request.startedAt, request.stoppedAt, employee.organization);
        if (!isDateAllow) {
            throw new common_1.BadRequestException('Please select valid Date, start time and end time');
        }
        const conflict = await this.checkConflictTime(Object.assign({ employeeId: request.employeeId, startDate: request.startedAt, endDate: request.stoppedAt }, (request.id ? { ignoreId: request.id } : {})));
        const times = {
            start: new Date(request.startedAt),
            end: new Date(request.stoppedAt)
        };
        for (let index = 0; index < conflict.length; index++) {
            await this.commandBus.execute(new delete_time_span_command_1.DeleteTimeSpanCommand(times, conflict[index]));
        }
        const timeLog = await this.commandBus.execute(new time_log_create_command_1.TimeLogCreateCommand(request));
        return timeLog;
    }
    async updateTime(id, request) {
        if (!request.startedAt || !request.stoppedAt) {
            throw new common_1.BadRequestException('Please select valid Date start and end time');
        }
        const employee = await this.employeeRepository.findOne(request.employeeId, { relations: ['organization'] });
        const isDateAllow = this.allowDate(request.startedAt, request.stoppedAt, employee.organization);
        if (!isDateAllow) {
            throw new common_1.BadRequestException('Please select valid Date start and end time');
        }
        const timeLog = await this.timeLogRepository.findOne(request.id);
        if (request.startedAt || request.stoppedAt) {
            const conflict = await this.checkConflictTime(Object.assign({ employeeId: timeLog.employeeId, startDate: request.startedAt || timeLog.startedAt, endDate: request.stoppedAt || timeLog.stoppedAt }, (id ? { ignoreId: id } : {})));
            const times = {
                start: new Date(request.startedAt),
                end: new Date(request.stoppedAt)
            };
            for (let index = 0; index < conflict.length; index++) {
                await this.commandBus.execute(new delete_time_span_command_1.DeleteTimeSpanCommand(times, conflict[index]));
            }
        }
        await this.commandBus.execute(new time_log_update_command_1.TimeLogUpdateCommand(request, timeLog));
        return await this.timeLogRepository.findOne(request.id);
    }
    async deleteTimeLog(ids) {
        const user = context_1.RequestContext.currentUser();
        if (typeof ids === 'string') {
            ids = [ids];
        }
        const timeLogs = await this.timeLogRepository.find(Object.assign(Object.assign({}, (context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)
            ? {}
            : { employeeId: user.employeeId })), { id: typeorm_2.In(ids) }));
        return await this.commandBus.execute(new time_log_delete_command_1.TimeLogDeleteCommand(timeLogs));
    }
    async checkConflictTime(request) {
        return await this.commandBus.execute(new get_conflict_time_log_command_1.IGetConflictTimeLogCommand(request));
    }
    allowDate(start, end, organization) {
        if (!moment.utc(start).isBefore(moment.utc(end))) {
            return false;
        }
        if (organization.futureDateAllowed) {
            return true;
        }
        return moment(end).isSameOrBefore(moment());
    }
};
TimeLogService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(1, typeorm_1.InjectRepository(time_log_entity_1.TimeLog)),
    tslib_1.__param(2, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__param(3, typeorm_1.InjectRepository(organization_contact_entity_1.OrganizationContact)),
    tslib_1.__param(4, typeorm_1.InjectRepository(organization_projects_entity_1.OrganizationProject)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _d : Object, typeof (_e = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _e : Object])
], TimeLogService);
exports.TimeLogService = TimeLogService;


/***/ }),

/***/ "./src/app/timesheet/time-slot-minute.entity.ts":
/*!******************************************************!*\
  !*** ./src/app/timesheet/time-slot-minute.entity.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSlotMinute = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const time_slot_entity_1 = __webpack_require__(/*! ./time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let TimeSlotMinute = class TimeSlotMinute extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: time_slot_entity_1.TimeSlot }),
    typeorm_1.ManyToOne(() => time_slot_entity_1.TimeSlot, { nullable: true, onDelete: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof time_slot_entity_1.TimeSlot !== "undefined" && time_slot_entity_1.TimeSlot) === "function" ? _a : Object)
], TimeSlotMinute.prototype, "timeSlot", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((activity) => activity.timeSlot),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], TimeSlotMinute.prototype, "timeSlotId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ default: 0 }),
    tslib_1.__metadata("design:type", Number)
], TimeSlotMinute.prototype, "keyboard", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ default: 0 }),
    tslib_1.__metadata("design:type", Number)
], TimeSlotMinute.prototype, "mouse", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: 'timestamptz' }),
    class_validator_1.IsDateString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], TimeSlotMinute.prototype, "datetime", void 0);
TimeSlotMinute = tslib_1.__decorate([
    typeorm_1.Entity('time_slot_minute'),
    typeorm_1.Unique(['timeSlotId', 'datetime'])
], TimeSlotMinute);
exports.TimeSlotMinute = TimeSlotMinute;


/***/ }),

/***/ "./src/app/timesheet/time-slot.entity.ts":
/*!***********************************************!*\
  !*** ./src/app/timesheet/time-slot.entity.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSlot = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const screenshot_entity_1 = __webpack_require__(/*! ./screenshot.entity */ "./src/app/timesheet/screenshot.entity.ts");
const time_slot_minute_entity_1 = __webpack_require__(/*! ./time-slot-minute.entity */ "./src/app/timesheet/time-slot-minute.entity.ts");
const time_log_entity_1 = __webpack_require__(/*! ./time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const activity_entity_1 = __webpack_require__(/*! ./activity.entity */ "./src/app/timesheet/activity.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let TimeSlot = class TimeSlot extends tenant_organization_base_1.TenantOrganizationBase {
    getStoppedAt() {
        this.stoppedAt = moment(this.startedAt).add(10, 'minutes').toDate();
    }
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.ManyToOne(() => employee_entity_1.Employee),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IEmployee !== "undefined" && models_1.IEmployee) === "function" ? _a : Object)
], TimeSlot.prototype, "employee", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((timeSlot) => timeSlot.employee),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], TimeSlot.prototype, "employeeId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: screenshot_entity_1.Screenshot }),
    typeorm_1.OneToMany(() => screenshot_entity_1.Screenshot, (screenshot) => screenshot.timeSlot, {
        cascade: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], TimeSlot.prototype, "screenshots", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: activity_entity_1.Activity }),
    typeorm_1.OneToMany(() => activity_entity_1.Activity, (activities) => activities.timeSlot, {
        cascade: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], TimeSlot.prototype, "activities", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: time_slot_minute_entity_1.TimeSlotMinute }),
    typeorm_1.OneToMany(() => time_slot_minute_entity_1.TimeSlotMinute, (timeSlotMinute) => timeSlotMinute.timeSlot, {
        cascade: true,
        onDelete: 'CASCADE'
    }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], TimeSlot.prototype, "timeSlotMinutes", void 0);
tslib_1.__decorate([
    typeorm_1.ManyToMany(() => time_log_entity_1.TimeLog, (timeLogs) => timeLogs.timeSlots),
    tslib_1.__metadata("design:type", Array)
], TimeSlot.prototype, "timeLogs", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ default: 0 }),
    tslib_1.__metadata("design:type", Number)
], TimeSlot.prototype, "duration", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ default: 0 }),
    tslib_1.__metadata("design:type", Number)
], TimeSlot.prototype, "keyboard", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ default: 0 }),
    tslib_1.__metadata("design:type", Number)
], TimeSlot.prototype, "mouse", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ default: 0 }),
    tslib_1.__metadata("design:type", Number)
], TimeSlot.prototype, "overall", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: 'timestamptz' }),
    class_validator_1.IsDateString(),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], TimeSlot.prototype, "startedAt", void 0);
tslib_1.__decorate([
    typeorm_1.AfterLoad(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], TimeSlot.prototype, "getStoppedAt", null);
TimeSlot = tslib_1.__decorate([
    typeorm_1.Entity('time_slot')
], TimeSlot);
exports.TimeSlot = TimeSlot;


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/create-time-slot-minutes.command.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/create-time-slot-minutes.command.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateTimeSlotMinutesCommand = void 0;
class CreateTimeSlotMinutesCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.CreateTimeSlotMinutesCommand = CreateTimeSlotMinutesCommand;
CreateTimeSlotMinutesCommand.type = '[TimeSlotMinutes] create';


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/create-time-slot.command.ts":
/*!**************************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/create-time-slot.command.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateTimeSlotCommand = void 0;
class CreateTimeSlotCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.CreateTimeSlotCommand = CreateTimeSlotCommand;
CreateTimeSlotCommand.type = '[TimeSlot] create';


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/delete-time-slot.command.ts":
/*!**************************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/delete-time-slot.command.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteTimeSlotCommand = void 0;
class DeleteTimeSlotCommand {
    constructor(ids) {
        this.ids = ids;
    }
}
exports.DeleteTimeSlotCommand = DeleteTimeSlotCommand;
DeleteTimeSlotCommand.type = '[TimeSlot] delete';


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/handlers/create-time-slot-minutes.handler.ts":
/*!*******************************************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/handlers/create-time-slot-minutes.handler.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateTimeSlotMinutesHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const create_time_slot_minutes_command_1 = __webpack_require__(/*! ../create-time-slot-minutes.command */ "./src/app/timesheet/time-slot/commands/create-time-slot-minutes.command.ts");
const time_slot_minute_entity_1 = __webpack_require__(/*! ../../../time-slot-minute.entity */ "./src/app/timesheet/time-slot-minute.entity.ts");
const update_time_slot_minutes_command_1 = __webpack_require__(/*! ../update-time-slot-minutes.command */ "./src/app/timesheet/time-slot/commands/update-time-slot-minutes.command.ts");
const context_1 = __webpack_require__(/*! src/app/core/context */ "./src/app/core/context/index.ts");
let CreateTimeSlotMinutesHandler = class CreateTimeSlotMinutesHandler {
    constructor(timeSlotMinuteRepository, commandBus) {
        this.timeSlotMinuteRepository = timeSlotMinuteRepository;
        this.commandBus = commandBus;
    }
    async execute(command) {
        const { input } = command;
        const timeMinute = await this.timeSlotMinuteRepository.findOne({
            where: {
                timeSlot: input.timeSlot,
                datetime: input.datetime
            }
        });
        if (timeMinute) {
            return this.commandBus.execute(new update_time_slot_minutes_command_1.UpdateTimeSlotMinutesCommand(timeMinute.id, Object.assign(Object.assign({}, input), { timeSlotId: timeMinute.id })));
        }
        else {
            input.tenantId = context_1.RequestContext.currentTenantId();
            return this.timeSlotMinuteRepository.save(input);
        }
    }
};
CreateTimeSlotMinutesHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(create_time_slot_minutes_command_1.CreateTimeSlotMinutesCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(time_slot_minute_entity_1.TimeSlotMinute)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _b : Object])
], CreateTimeSlotMinutesHandler);
exports.CreateTimeSlotMinutesHandler = CreateTimeSlotMinutesHandler;


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/handlers/create-time-slot.handler.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/handlers/create-time-slot.handler.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateTimeSlotHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const context_1 = __webpack_require__(/*! src/app/core/context */ "./src/app/core/context/index.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const create_time_slot_command_1 = __webpack_require__(/*! ../create-time-slot.command */ "./src/app/timesheet/time-slot/commands/create-time-slot.command.ts");
const time_slot_entity_1 = __webpack_require__(/*! ../../../time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const time_log_entity_1 = __webpack_require__(/*! ../../../time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const _ = __webpack_require__(/*! underscore */ "underscore");
const employee_entity_1 = __webpack_require__(/*! src/app/employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const bulk_activities_save_command_1 = __webpack_require__(/*! ../../../activity/commands/bulk-activities-save.command */ "./src/app/timesheet/activity/commands/bulk-activities-save.command.ts");
let CreateTimeSlotHandler = class CreateTimeSlotHandler {
    constructor(timeSlotRepository, timeLogRepository, employeeRepository, commandBus) {
        this.timeSlotRepository = timeSlotRepository;
        this.timeLogRepository = timeLogRepository;
        this.employeeRepository = employeeRepository;
        this.commandBus = commandBus;
    }
    async execute(command) {
        const { input } = command;
        if (!context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)) {
            const user = context_1.RequestContext.currentUser();
            input.employeeId = user.employeeId;
        }
        input.startedAt = moment(input.startedAt)
            .set('millisecond', 0)
            .toDate();
        let timeSlot = await this.timeSlotRepository.findOne({
            where: {
                employeeId: input.employeeId,
                startedAt: input.startedAt
            }
        });
        if (!timeSlot) {
            timeSlot = new time_slot_entity_1.TimeSlot(_.omit(input, ['timeLogId']));
        }
        if (input.timeLogId) {
            let timeLogIds = [];
            if (input.timeLogId instanceof Array) {
                timeLogIds = input.timeLogId;
            }
            else {
                timeLogIds = [input.timeLogId];
            }
            timeSlot.timeLogs = await this.timeLogRepository.find({
                id: typeorm_2.In(timeLogIds)
            });
        }
        else {
            timeSlot.timeLogs = await this.timeLogRepository
                .createQueryBuilder()
                .where(`:startedAt BETWEEN "startedAt" AND "stoppedAt"`, {
                startedAt: timeSlot.startedAt
            })
                .orWhere('"startedAt" <= :startedAt AND "stoppedAt" IS NULL', {
                startedAt: timeSlot.startedAt
            })
                .getMany();
        }
        if (input.activities) {
            timeSlot.activities = await this.commandBus.execute(new bulk_activities_save_command_1.BulkActivitiesSaveCommand({
                employeeId: timeSlot.employeeId,
                projectId: timeSlot.timeLogs && timeSlot.timeLogs.length > 0
                    ? timeSlot.timeLogs[0].projectId
                    : null,
                activities: input.activities
            }));
        }
        timeSlot.tenantId = context_1.RequestContext.currentTenantId();
        if (!timeSlot.organizationId) {
            const employee = await this.employeeRepository.findOne(input.employeeId);
            timeSlot.organizationId = employee.organizationId;
        }
        console.log({ timeSlot });
        await this.timeSlotRepository.save(timeSlot);
        timeSlot = await this.timeSlotRepository.findOne(timeSlot.id, {
            relations: ['timeLogs', 'screenshots']
        });
        return timeSlot;
    }
};
CreateTimeSlotHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(create_time_slot_command_1.CreateTimeSlotCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(time_slot_entity_1.TimeSlot)),
    tslib_1.__param(1, typeorm_1.InjectRepository(time_log_entity_1.TimeLog)),
    tslib_1.__param(2, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _d : Object])
], CreateTimeSlotHandler);
exports.CreateTimeSlotHandler = CreateTimeSlotHandler;


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/handlers/delete-time-slot.handler.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/handlers/delete-time-slot.handler.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteTimeSlotHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const time_slot_entity_1 = __webpack_require__(/*! ../../../time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const delete_time_span_command_1 = __webpack_require__(/*! ../../../time-log/commands/delete-time-span.command */ "./src/app/timesheet/time-log/commands/delete-time-span.command.ts");
const delete_time_slot_command_1 = __webpack_require__(/*! ../delete-time-slot.command */ "./src/app/timesheet/time-slot/commands/delete-time-slot.command.ts");
let DeleteTimeSlotHandler = class DeleteTimeSlotHandler {
    constructor(timeSlotRepository, commandBus) {
        this.timeSlotRepository = timeSlotRepository;
        this.commandBus = commandBus;
    }
    async execute(command) {
        const { ids } = command;
        const timeSlots = await this.timeSlotRepository.find({
            where: { id: typeorm_2.In(ids) }
        });
        for (let i = 0; i < ids.length; i++) {
            const timeSlot = await this.timeSlotRepository.findOne({
                where: {
                    startedAt: timeSlots[i].startedAt
                },
                relations: ['timeLogs']
            });
            if (timeSlot && timeSlot.timeLogs.length > 0) {
                const deleteSlotPromise = timeSlot.timeLogs.map(async (timeLog) => {
                    await this.commandBus.execute(new delete_time_span_command_1.DeleteTimeSpanCommand({
                        start: timeSlot.startedAt,
                        end: timeSlot.stoppedAt
                    }, timeLog));
                    return;
                });
                await Promise.all(deleteSlotPromise);
            }
        }
        return true;
    }
};
DeleteTimeSlotHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(delete_time_slot_command_1.DeleteTimeSlotCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(time_slot_entity_1.TimeSlot)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _b : Object])
], DeleteTimeSlotHandler);
exports.DeleteTimeSlotHandler = DeleteTimeSlotHandler;


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/handlers/index.ts":
/*!****************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/handlers/index.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSlotCommandHandlers = void 0;
const create_time_slot_handler_1 = __webpack_require__(/*! ./create-time-slot.handler */ "./src/app/timesheet/time-slot/commands/handlers/create-time-slot.handler.ts");
const update_time_slot_handler_1 = __webpack_require__(/*! ./update-time-slot.handler */ "./src/app/timesheet/time-slot/commands/handlers/update-time-slot.handler.ts");
const create_time_slot_minutes_handler_1 = __webpack_require__(/*! ./create-time-slot-minutes.handler */ "./src/app/timesheet/time-slot/commands/handlers/create-time-slot-minutes.handler.ts");
const update_time_slot_minutes_handler_1 = __webpack_require__(/*! ./update-time-slot-minutes.handler */ "./src/app/timesheet/time-slot/commands/handlers/update-time-slot-minutes.handler.ts");
const time_slot_bulk_create_or_update_handler_1 = __webpack_require__(/*! ./time-slot-bulk-create-or-update.handler */ "./src/app/timesheet/time-slot/commands/handlers/time-slot-bulk-create-or-update.handler.ts");
const time_slot_bulk_create_handler_1 = __webpack_require__(/*! ./time-slot-bulk-create.handler */ "./src/app/timesheet/time-slot/commands/handlers/time-slot-bulk-create.handler.ts");
const delete_time_slot_handler_1 = __webpack_require__(/*! ./delete-time-slot.handler */ "./src/app/timesheet/time-slot/commands/handlers/delete-time-slot.handler.ts");
const time_slot_range_delete_handler_1 = __webpack_require__(/*! ./time-slot-range-delete.handler */ "./src/app/timesheet/time-slot/commands/handlers/time-slot-range-delete.handler.ts");
const time_slot_merge_handler_1 = __webpack_require__(/*! ./time-slot-merge.handler */ "./src/app/timesheet/time-slot/commands/handlers/time-slot-merge.handler.ts");
exports.TimeSlotCommandHandlers = [
    create_time_slot_handler_1.CreateTimeSlotHandler,
    update_time_slot_handler_1.UpdateTimeSlotHandler,
    delete_time_slot_handler_1.DeleteTimeSlotHandler,
    time_slot_bulk_create_or_update_handler_1.TimeSlotBulkCreateOrUpdateHandler,
    time_slot_bulk_create_handler_1.TimeSlotBulkCreateHandler,
    create_time_slot_minutes_handler_1.CreateTimeSlotMinutesHandler,
    update_time_slot_minutes_handler_1.UpdateTimeSlotMinutesHandler,
    time_slot_range_delete_handler_1.TimeSlotRangeDeleteHandler,
    time_slot_merge_handler_1.TimeSlotMergeHandler
];


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/handlers/time-slot-bulk-create-or-update.handler.ts":
/*!**************************************************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/handlers/time-slot-bulk-create-or-update.handler.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSlotBulkCreateOrUpdateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const moment = __webpack_require__(/*! moment */ "moment");
const time_slot_entity_1 = __webpack_require__(/*! ../../../time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const _ = __webpack_require__(/*! underscore */ "underscore");
const time_slot_bulk_create_or_update_command_1 = __webpack_require__(/*! ../time-slot-bulk-create-or-update.command */ "./src/app/timesheet/time-slot/commands/time-slot-bulk-create-or-update.command.ts");
const context_1 = __webpack_require__(/*! src/app/core/context */ "./src/app/core/context/index.ts");
const employee_entity_1 = __webpack_require__(/*! src/app/employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const time_log_entity_1 = __webpack_require__(/*! ../../../time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const time_slot_merge_command_1 = __webpack_require__(/*! ../time-slot-merge.command */ "./src/app/timesheet/time-slot/commands/time-slot-merge.command.ts");
let TimeSlotBulkCreateOrUpdateHandler = class TimeSlotBulkCreateOrUpdateHandler {
    constructor(timeLogRepository, timeSlotRepository, employeeRepository, commandBus) {
        this.timeLogRepository = timeLogRepository;
        this.timeSlotRepository = timeSlotRepository;
        this.employeeRepository = employeeRepository;
        this.commandBus = commandBus;
    }
    async execute(command) {
        let { slots } = command;
        if (slots.length === 0) {
            return [];
        }
        slots = slots.map((slot) => {
            slot.startedAt = moment.utc(slot.startedAt).toDate();
            return slot;
        });
        const insertedSlots = await this.timeSlotRepository.find({
            where: {
                startedAt: typeorm_2.In(_.pluck(slots, 'startedAt'))
            },
            relations: ['timeLogs']
        });
        let organizationId;
        if (!slots[0].organizationId) {
            const employee = await this.employeeRepository.findOne(slots[0].employeeId);
            organizationId = employee.organizationId;
        }
        else {
            organizationId = slots[0].organizationId;
        }
        const newSlotsTimeLogIds = _.chain(slots)
            .map((slot) => _.pluck(slot.timeLogs, 'id'))
            .flatten()
            .value();
        const oldSlotsTimeLogIds = _.chain(insertedSlots)
            .map((slot) => _.pluck(slot.timeLogs, 'id'))
            .flatten()
            .value();
        const timeLogIds = _.chain(oldSlotsTimeLogIds)
            .concat(newSlotsTimeLogIds)
            .uniq()
            .values()
            .value();
        const timeLogs = await this.timeLogRepository.find({
            where: {
                id: typeorm_2.In(timeLogIds)
            }
        });
        if (insertedSlots.length > 0) {
            slots = slots.map((slot) => {
                const oldSlot = insertedSlots.find((insertedSlot) => moment(insertedSlot.startedAt).format('YYYY-MM-DD HH:mm') === moment(slot.startedAt).format('YYYY-MM-DD HH:mm'));
                if (oldSlot) {
                    oldSlot.keyboard = oldSlot.keyboard + slot.keyboard;
                    oldSlot.mouse = oldSlot.mouse + slot.mouse;
                    oldSlot.overall = oldSlot.overall + slot.overall;
                    const foundTimeLogs = _.where(timeLogs, {
                        id: oldSlotsTimeLogIds
                    });
                    if (foundTimeLogs.length > 0) {
                        oldSlot.timeLogs = oldSlot.timeLogs.concat(foundTimeLogs);
                        oldSlot.timeLogs = _.uniq(oldSlot.timeLogs, 'id');
                    }
                    return oldSlot;
                }
                else {
                    if (!slot.organizationId) {
                        slot.organizationId = organizationId;
                    }
                    slot.tenantId = context_1.RequestContext.currentTenantId();
                    return slot;
                }
            });
        }
        await this.timeSlotRepository.save(slots);
        const dates = slots.map((slot) => moment.utc(slot.startedAt).toDate());
        const mnDate = dates.reduce(function (a, b) {
            return a < b ? a : b;
        });
        const mxDate = dates.reduce(function (a, b) {
            return a > b ? a : b;
        });
        return await this.commandBus.execute(new time_slot_merge_command_1.TimeSlotMergeCommand(slots[0].employeeId, mnDate, mxDate));
    }
};
TimeSlotBulkCreateOrUpdateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(time_slot_bulk_create_or_update_command_1.TimeSlotBulkCreateOrUpdateCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(time_log_entity_1.TimeLog)),
    tslib_1.__param(1, typeorm_1.InjectRepository(time_slot_entity_1.TimeSlot)),
    tslib_1.__param(2, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _d : Object])
], TimeSlotBulkCreateOrUpdateHandler);
exports.TimeSlotBulkCreateOrUpdateHandler = TimeSlotBulkCreateOrUpdateHandler;


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/handlers/time-slot-bulk-create.handler.ts":
/*!****************************************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/handlers/time-slot-bulk-create.handler.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSlotBulkCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const moment = __webpack_require__(/*! moment */ "moment");
const time_slot_entity_1 = __webpack_require__(/*! ../../../time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const _ = __webpack_require__(/*! underscore */ "underscore");
const time_slot_bulk_create_command_1 = __webpack_require__(/*! ../time-slot-bulk-create.command */ "./src/app/timesheet/time-slot/commands/time-slot-bulk-create.command.ts");
const context_1 = __webpack_require__(/*! src/app/core/context */ "./src/app/core/context/index.ts");
const employee_entity_1 = __webpack_require__(/*! src/app/employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const time_log_entity_1 = __webpack_require__(/*! ../../../time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const time_slot_merge_command_1 = __webpack_require__(/*! ../time-slot-merge.command */ "./src/app/timesheet/time-slot/commands/time-slot-merge.command.ts");
let TimeSlotBulkCreateHandler = class TimeSlotBulkCreateHandler {
    constructor(timeLogRepository, timeSlotRepository, employeeRepository, commandBus) {
        this.timeLogRepository = timeLogRepository;
        this.timeSlotRepository = timeSlotRepository;
        this.employeeRepository = employeeRepository;
        this.commandBus = commandBus;
    }
    async execute(command) {
        let { slots } = command;
        if (slots.length === 0) {
            return [];
        }
        slots = slots.map((slot) => {
            slot.startedAt = moment.utc(slot.startedAt).toDate();
            return slot;
        });
        const insertedSlots = await this.timeSlotRepository.find({
            where: Object.assign({ startedAt: typeorm_2.In(_.pluck(slots, 'startedAt')) }, (slots[0].employeeId
                ? { employeeId: slots[0].employeeId }
                : {}))
        });
        if (insertedSlots.length > 0) {
            slots = slots.filter((slot) => !insertedSlots.find((insertedSlot) => moment(insertedSlot.startedAt).format('YYYY-MM-DD HH:mm') ===
                moment(slot.startedAt).format('YYYY-MM-DD HH:mm')));
        }
        if (slots.length === 0) {
            return [];
        }
        let organizationId;
        if (!slots[0].organizationId) {
            const employee = await this.employeeRepository.findOne(slots[0].employeeId);
            organizationId = employee.organizationId;
        }
        else {
            organizationId = slots[0].organizationId;
        }
        const timeLogs = await this.timeLogRepository.find({
            where: {
                id: typeorm_2.In(_.chain(slots).pluck('timeLogId').flatten().value())
            }
        });
        slots = slots.map((slot) => {
            let timeLogIds;
            if (slot.timeLogId instanceof Array) {
                timeLogIds = slot.timeLogId;
            }
            else {
                timeLogIds = [slot.timeLogId];
            }
            slot.timeLogs = _.where(timeLogs, { id: timeLogIds });
            if (!slot.organizationId) {
                slot.organizationId = organizationId;
            }
            slot.tenantId = context_1.RequestContext.currentTenantId();
            return slot;
        });
        if (slots.length > 0) {
            await this.timeSlotRepository.save(slots);
        }
        slots = insertedSlots.concat(slots);
        const dates = slots.map((slot) => moment(slot.startedAt).toDate());
        const mnDate = dates.reduce(function (a, b) {
            return a < b ? a : b;
        });
        const mxDate = dates.reduce(function (a, b) {
            return a > b ? a : b;
        });
        return await this.commandBus.execute(new time_slot_merge_command_1.TimeSlotMergeCommand(slots[0].employeeId, mnDate, mxDate));
    }
};
TimeSlotBulkCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(time_slot_bulk_create_command_1.TimeSlotBulkCreateCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(time_log_entity_1.TimeLog)),
    tslib_1.__param(1, typeorm_1.InjectRepository(time_slot_entity_1.TimeSlot)),
    tslib_1.__param(2, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _d : Object])
], TimeSlotBulkCreateHandler);
exports.TimeSlotBulkCreateHandler = TimeSlotBulkCreateHandler;


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/handlers/time-slot-merge.handler.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/handlers/time-slot-merge.handler.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSlotMergeHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const moment = __webpack_require__(/*! moment */ "moment");
const time_slot_entity_1 = __webpack_require__(/*! ../../../time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const _ = __webpack_require__(/*! underscore */ "underscore");
const time_slot_merge_command_1 = __webpack_require__(/*! ../time-slot-merge.command */ "./src/app/timesheet/time-slot/commands/time-slot-merge.command.ts");
const screenshot_entity_1 = __webpack_require__(/*! ../../../screenshot.entity */ "./src/app/timesheet/screenshot.entity.ts");
let TimeSlotMergeHandler = class TimeSlotMergeHandler {
    constructor(timeSlotRepository, screenshotRepository) {
        this.timeSlotRepository = timeSlotRepository;
        this.screenshotRepository = screenshotRepository;
    }
    async execute(command) {
        let { employeeId, start, end } = command;
        let startMinute = moment(start).get('minute');
        startMinute = startMinute - (startMinute % 10);
        start = moment(start)
            .set('minute', startMinute)
            .set('millisecond', 0)
            .toDate();
        let endMinute = moment(end).get('minute');
        endMinute = endMinute - (endMinute % 10);
        end = moment(end)
            .set('minute', endMinute + 10)
            .set('millisecond', 0)
            .toDate();
        const timerSlots = await this.timeSlotRepository.find({
            where: (qb) => {
                qb.where(`"${qb.alias}"."startedAt" >= :start AND "${qb.alias}"."startedAt" <= :end`, { start, end }).andWhere(`"${qb.alias}"."employeeId" >= :employeeId`, {
                    employeeId
                });
            },
            relations: ['timeLogs', 'screenshots']
        });
        if (timerSlots.length > 0) {
            const savePromises = _.chain(timerSlots)
                .groupBy((timeSlots) => {
                let date = moment.utc(timeSlots.startedAt);
                const minutes = date.get('minute');
                date = date
                    .set('minute', minutes - (minutes % 10))
                    .set('second', 0)
                    .set('millisecond', 0);
                return date.format('YYYY-MM-DD HH:mm:ss');
            })
                .mapObject(async (timeSlots, slotStart) => {
                let timeLogs = [];
                let screenshots = [];
                let duration = 0;
                for (let index = 0; index < timeSlots.length; index++) {
                    const timeSlot = timeSlots[index];
                    duration =
                        duration + parseInt(timeSlot.duration + '', 10);
                    screenshots = screenshots.concat(timeSlot.screenshots);
                    timeLogs = timeLogs.concat(timeSlot.timeLogs);
                }
                screenshots = screenshots.map((screenshot) => new screenshot_entity_1.Screenshot(_.omit(screenshot, ['timeSlotId'])));
                const newTimeSlot = new time_slot_entity_1.TimeSlot(Object.assign(Object.assign({}, _.omit(timeSlots[0])), { duration,
                    screenshots,
                    timeLogs, startedAt: moment.utc(slotStart).toDate() }));
                await this.timeSlotRepository.save(newTimeSlot);
                const ids = _.pluck(timeSlots, 'id');
                ids.splice(0, 1);
                if (ids.length > 0) {
                    await this.timeSlotRepository.delete({
                        id: typeorm_2.In(ids)
                    });
                }
            })
                .values()
                .value();
            await Promise.all(savePromises);
        }
    }
};
TimeSlotMergeHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(time_slot_merge_command_1.TimeSlotMergeCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(time_slot_entity_1.TimeSlot)),
    tslib_1.__param(1, typeorm_1.InjectRepository(screenshot_entity_1.Screenshot)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], TimeSlotMergeHandler);
exports.TimeSlotMergeHandler = TimeSlotMergeHandler;


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/handlers/time-slot-range-delete.handler.ts":
/*!*****************************************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/handlers/time-slot-range-delete.handler.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSlotRangeDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const time_slot_entity_1 = __webpack_require__(/*! ../../../time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const time_slot_range_delete_command_1 = __webpack_require__(/*! ../time-slot-range-delete.command */ "./src/app/timesheet/time-slot/commands/time-slot-range-delete.command.ts");
const moment = __webpack_require__(/*! moment */ "moment");
let TimeSlotRangeDeleteHandler = class TimeSlotRangeDeleteHandler {
    constructor(timeSlotRepository) {
        this.timeSlotRepository = timeSlotRepository;
    }
    async execute(command) {
        const { employeeId, start, stop } = command;
        const mStart = moment(start);
        mStart.set('minute', mStart.get('minute') - (mStart.get('minute') % 10));
        mStart.set('second', 0);
        mStart.set('millisecond', 0);
        const mEnd = moment(stop);
        mEnd.set('minute', mEnd.get('minute') + (mEnd.get('minute') % 10) - 1);
        mEnd.set('second', 59);
        mEnd.set('millisecond', 0);
        await this.timeSlotRepository.delete({
            employeeId: employeeId,
            startedAt: typeorm_2.Between(mStart.toDate(), mEnd.toDate())
        });
        return true;
    }
};
TimeSlotRangeDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(time_slot_range_delete_command_1.TimeSlotRangeDeleteCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(time_slot_entity_1.TimeSlot)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], TimeSlotRangeDeleteHandler);
exports.TimeSlotRangeDeleteHandler = TimeSlotRangeDeleteHandler;


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/handlers/update-time-slot-minutes.handler.ts":
/*!*******************************************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/handlers/update-time-slot-minutes.handler.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateTimeSlotMinutesHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const time_slot_minute_entity_1 = __webpack_require__(/*! ../../../time-slot-minute.entity */ "./src/app/timesheet/time-slot-minute.entity.ts");
const update_time_slot_minutes_command_1 = __webpack_require__(/*! ../update-time-slot-minutes.command */ "./src/app/timesheet/time-slot/commands/update-time-slot-minutes.command.ts");
let UpdateTimeSlotMinutesHandler = class UpdateTimeSlotMinutesHandler {
    constructor(timeSlotMinuteRepository) {
        this.timeSlotMinuteRepository = timeSlotMinuteRepository;
    }
    async execute(command) {
        const { input, id } = command;
        let timeMinute = await this.timeSlotMinuteRepository.findOne({
            where: {
                id: id
            }
        });
        if (timeMinute) {
            delete input.timeSlotId;
            await this.timeSlotMinuteRepository.update(id, input);
            timeMinute = await this.timeSlotMinuteRepository.findOne(id, {
                relations: ['timeSlot']
            });
            return timeMinute;
        }
        else {
            return null;
        }
    }
};
UpdateTimeSlotMinutesHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(update_time_slot_minutes_command_1.UpdateTimeSlotMinutesCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(time_slot_minute_entity_1.TimeSlotMinute)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], UpdateTimeSlotMinutesHandler);
exports.UpdateTimeSlotMinutesHandler = UpdateTimeSlotMinutesHandler;


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/handlers/update-time-slot.handler.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/handlers/update-time-slot.handler.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateTimeSlotHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const context_1 = __webpack_require__(/*! src/app/core/context */ "./src/app/core/context/index.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const activity_entity_1 = __webpack_require__(/*! ../../../activity.entity */ "./src/app/timesheet/activity.entity.ts");
const update_time_slot_command_1 = __webpack_require__(/*! ../update-time-slot.command */ "./src/app/timesheet/time-slot/commands/update-time-slot.command.ts");
const time_slot_entity_1 = __webpack_require__(/*! ../../../time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
let UpdateTimeSlotHandler = class UpdateTimeSlotHandler {
    constructor(timeSlotRepository, activityRepository) {
        this.timeSlotRepository = timeSlotRepository;
        this.activityRepository = activityRepository;
    }
    async execute(command) {
        const { input, id } = command;
        let employeeId = input.employeeId;
        if (!context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)) {
            const user = context_1.RequestContext.currentUser();
            employeeId = user.employeeId;
        }
        let timeSlot = await this.timeSlotRepository.findOne({
            where: Object.assign(Object.assign({}, (employeeId ? { employeeId: employeeId } : {})), { id: id })
        });
        if (timeSlot) {
            if (input.startedAt) {
                input.startedAt = moment(input.startedAt)
                    .set('millisecond', 0)
                    .toDate();
            }
            let newActivites = [];
            if (input.activities) {
                newActivites = input.activities.map((activity) => {
                    activity = new activity_entity_1.Activity(activity);
                    activity.employeeId = timeSlot.employeeId;
                    activity.tenantId = context_1.RequestContext.currentTenantId();
                    return activity;
                });
                await this.activityRepository.save(newActivites);
                input.activities = (timeSlot.activities || []).concat(newActivites);
            }
            await this.timeSlotRepository.update(id, input);
            timeSlot = await this.timeSlotRepository.findOne(id, {
                relations: ['timeLogs', 'screenshots', 'activities']
            });
            return timeSlot;
        }
        else {
            return null;
        }
    }
};
UpdateTimeSlotHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(update_time_slot_command_1.UpdateTimeSlotCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(time_slot_entity_1.TimeSlot)),
    tslib_1.__param(1, typeorm_1.InjectRepository(activity_entity_1.Activity)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], UpdateTimeSlotHandler);
exports.UpdateTimeSlotHandler = UpdateTimeSlotHandler;


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/time-slot-bulk-create-or-update.command.ts":
/*!*****************************************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/time-slot-bulk-create-or-update.command.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSlotBulkCreateOrUpdateCommand = void 0;
class TimeSlotBulkCreateOrUpdateCommand {
    constructor(slots) {
        this.slots = slots;
    }
}
exports.TimeSlotBulkCreateOrUpdateCommand = TimeSlotBulkCreateOrUpdateCommand;
TimeSlotBulkCreateOrUpdateCommand.type = '[TimeSlot] bulk create / update';


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/time-slot-bulk-create.command.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/time-slot-bulk-create.command.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSlotBulkCreateCommand = void 0;
class TimeSlotBulkCreateCommand {
    constructor(slots) {
        this.slots = slots;
    }
}
exports.TimeSlotBulkCreateCommand = TimeSlotBulkCreateCommand;
TimeSlotBulkCreateCommand.type = '[TimeSlot] bulk create';


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/time-slot-merge.command.ts":
/*!*************************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/time-slot-merge.command.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSlotMergeCommand = void 0;
class TimeSlotMergeCommand {
    constructor(employeeId, start, end) {
        this.employeeId = employeeId;
        this.start = start;
        this.end = end;
    }
}
exports.TimeSlotMergeCommand = TimeSlotMergeCommand;
TimeSlotMergeCommand.type = '[TimeSlot] mearge';


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/time-slot-range-delete.command.ts":
/*!********************************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/time-slot-range-delete.command.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSlotRangeDeleteCommand = void 0;
class TimeSlotRangeDeleteCommand {
    constructor(employeeId, start, stop) {
        this.employeeId = employeeId;
        this.start = start;
        this.stop = stop;
    }
}
exports.TimeSlotRangeDeleteCommand = TimeSlotRangeDeleteCommand;
TimeSlotRangeDeleteCommand.type = '[TimeSlot] delete';


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/update-time-slot-minutes.command.ts":
/*!**********************************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/update-time-slot-minutes.command.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateTimeSlotMinutesCommand = void 0;
class UpdateTimeSlotMinutesCommand {
    constructor(id, input) {
        this.id = id;
        this.input = input;
    }
}
exports.UpdateTimeSlotMinutesCommand = UpdateTimeSlotMinutesCommand;
UpdateTimeSlotMinutesCommand.type = '[TimeSlotMinutes] update';


/***/ }),

/***/ "./src/app/timesheet/time-slot/commands/update-time-slot.command.ts":
/*!**************************************************************************!*\
  !*** ./src/app/timesheet/time-slot/commands/update-time-slot.command.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateTimeSlotCommand = void 0;
class UpdateTimeSlotCommand {
    constructor(id, input) {
        this.id = id;
        this.input = input;
    }
}
exports.UpdateTimeSlotCommand = UpdateTimeSlotCommand;
UpdateTimeSlotCommand.type = '[TimeSlot] update';


/***/ }),

/***/ "./src/app/timesheet/time-slot/time-slot.controller.ts":
/*!*************************************************************!*\
  !*** ./src/app/timesheet/time-slot/time-slot.controller.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSlotController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const time_slot_entity_1 = __webpack_require__(/*! ../time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const crud_controller_1 = __webpack_require__(/*! ../../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const time_slot_service_1 = __webpack_require__(/*! ./time-slot.service */ "./src/app/timesheet/time-slot/time-slot.service.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const tenant_permission_guard_1 = __webpack_require__(/*! ../../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let TimeSlotController = class TimeSlotController extends crud_controller_1.CrudController {
    constructor(timeSlotService) {
        super(timeSlotService);
        this.timeSlotService = timeSlotService;
    }
    async getAll(entity) {
        return this.timeSlotService.getTimeSlots(entity);
    }
    async getOne({ id }, option) {
        return this.timeSlotService.findOne(id, option);
    }
    async create(entity) {
        return this.timeSlotService.create(entity);
    }
    async update(params, entity) {
        return this.timeSlotService.update(params.id, entity);
    }
    async deleteTimeSlot({ ids }) {
        return this.timeSlotService.deleteTimeSlot(ids);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get Time Slots' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.IGetTimeSlotInput !== "undefined" && models_1.IGetTimeSlotInput) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], TimeSlotController.prototype, "getAll", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get Time Slots' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/:id'),
    tslib_1.__param(0, common_1.Param()),
    tslib_1.__param(1, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, typeof (_c = typeof typeorm_1.FindOneOptions !== "undefined" && typeorm_1.FindOneOptions) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], TimeSlotController.prototype, "getOne", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create or Update Time Slot' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Post('/'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof time_slot_entity_1.TimeSlot !== "undefined" && time_slot_entity_1.TimeSlot) === "function" ? _e : Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], TimeSlotController.prototype, "create", null);
tslib_1.__decorate([
    common_1.Put('/:id'),
    tslib_1.__param(0, common_1.Param()), tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, typeof (_g = typeof time_slot_entity_1.TimeSlot !== "undefined" && time_slot_entity_1.TimeSlot) === "function" ? _g : Object]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], TimeSlotController.prototype, "update", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Delete TimeSlot' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Delete('/'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Promise)
], TimeSlotController.prototype, "deleteTimeSlot", null);
TimeSlotController = tslib_1.__decorate([
    swagger_1.ApiTags('TimeSlot'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller('time-slot'),
    tslib_1.__metadata("design:paramtypes", [typeof (_j = typeof time_slot_service_1.TimeSlotService !== "undefined" && time_slot_service_1.TimeSlotService) === "function" ? _j : Object])
], TimeSlotController);
exports.TimeSlotController = TimeSlotController;


/***/ }),

/***/ "./src/app/timesheet/time-slot/time-slot.seed.ts":
/*!*******************************************************!*\
  !*** ./src/app/timesheet/time-slot/time-slot.seed.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createTimeSlots = void 0;
const faker = __webpack_require__(/*! faker */ "faker");
const time_slot_entity_1 = __webpack_require__(/*! ../time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const utils_1 = __webpack_require__(/*! ./utils */ "./src/app/timesheet/time-slot/utils.ts");
function createTimeSlots(start, end) {
    const timeSlots = utils_1.generateTimeSlots(start, end).map((timeSlot) => {
        const keyboard = faker.random.number(100);
        const mouse = faker.random.number(100);
        const overall = (keyboard + mouse) / 2;
        const slot = new time_slot_entity_1.TimeSlot();
        slot.startedAt = timeSlot.startedAt;
        slot.stoppedAt = timeSlot.stoppedAt;
        slot.duration = timeSlot.duration;
        slot.screenshots = [];
        slot.timeSlotMinutes = [];
        slot.keyboard = keyboard;
        slot.mouse = mouse;
        slot.overall = Math.ceil(overall);
        return slot;
    });
    return timeSlots;
}
exports.createTimeSlots = createTimeSlots;


/***/ }),

/***/ "./src/app/timesheet/time-slot/time-slot.service.ts":
/*!**********************************************************!*\
  !*** ./src/app/timesheet/time-slot/time-slot.service.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSlotService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const time_slot_entity_1 = __webpack_require__(/*! ../time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const moment_extend_1 = __webpack_require__(/*! ../../core/moment-extend */ "./src/app/core/moment-extend.ts");
const request_context_1 = __webpack_require__(/*! ../../core/context/request-context */ "./src/app/core/context/request-context.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const utils_1 = __webpack_require__(/*! ./utils */ "./src/app/timesheet/time-slot/utils.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const create_time_slot_command_1 = __webpack_require__(/*! ./commands/create-time-slot.command */ "./src/app/timesheet/time-slot/commands/create-time-slot.command.ts");
const update_time_slot_command_1 = __webpack_require__(/*! ./commands/update-time-slot.command */ "./src/app/timesheet/time-slot/commands/update-time-slot.command.ts");
const time_slot_bulk_create_or_update_command_1 = __webpack_require__(/*! ./commands/time-slot-bulk-create-or-update.command */ "./src/app/timesheet/time-slot/commands/time-slot-bulk-create-or-update.command.ts");
const time_slot_bulk_create_command_1 = __webpack_require__(/*! ./commands/time-slot-bulk-create.command */ "./src/app/timesheet/time-slot/commands/time-slot-bulk-create.command.ts");
const create_time_slot_minutes_command_1 = __webpack_require__(/*! ./commands/create-time-slot-minutes.command */ "./src/app/timesheet/time-slot/commands/create-time-slot-minutes.command.ts");
const update_time_slot_minutes_command_1 = __webpack_require__(/*! ./commands/update-time-slot-minutes.command */ "./src/app/timesheet/time-slot/commands/update-time-slot-minutes.command.ts");
const delete_time_slot_command_1 = __webpack_require__(/*! ./commands/delete-time-slot.command */ "./src/app/timesheet/time-slot/commands/delete-time-slot.command.ts");
const time_slot_range_delete_command_1 = __webpack_require__(/*! ./commands/time-slot-range-delete.command */ "./src/app/timesheet/time-slot/commands/time-slot-range-delete.command.ts");
let TimeSlotService = class TimeSlotService extends crud_service_1.CrudService {
    constructor(timeSlotRepository, commandBus) {
        super(timeSlotRepository);
        this.timeSlotRepository = timeSlotRepository;
        this.commandBus = commandBus;
    }
    async getTimeSlots(request) {
        let employeeIds;
        if (request_context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)) {
            if (request.employeeIds) {
                employeeIds = request.employeeIds;
            }
        }
        else {
            const user = request_context_1.RequestContext.currentUser();
            employeeIds = [user.employeeId];
        }
        const logs = await this.timeSlotRepository.find({
            join: {
                alias: 'time_slots',
                leftJoin: {
                    employee: 'time_slots.employee',
                    timeLog: 'time_slots.timeLogs'
                }
            },
            relations: [
                ...(request_context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)
                    ? ['employee', 'employee.user']
                    : []),
                ...(request.relations ? request.relations : [])
            ],
            where: (qb) => {
                if (request.startDate && request.endDate) {
                    const startDate = moment_extend_1.moment
                        .utc(request.startDate)
                        .format('YYYY-MM-DD HH:mm:ss');
                    const endDate = moment_extend_1.moment
                        .utc(request.endDate)
                        .format('YYYY-MM-DD HH:mm:ss');
                    qb.andWhere(`"${qb.alias}"."startedAt" Between :startDate AND :endDate`, {
                        startDate,
                        endDate
                    });
                }
                if (employeeIds) {
                    qb.andWhere(`"${qb.alias}"."employeeId" IN (:...employeeId)`, {
                        employeeId: employeeIds
                    });
                }
                if (request.organizationId) {
                    qb.andWhere(`"${qb.alias}"."organizationId" = :organizationId`, {
                        organizationId: request.organizationId
                    });
                }
                const tenantId = request_context_1.RequestContext.currentTenantId();
                if (tenantId) {
                    qb.andWhere(`"${qb.alias}"."tenantId" = :tenantId`, {
                        tenantId
                    });
                }
                if (request.projectIds) {
                    qb.andWhere('"timeLog"."projectId" IN (:...projectIds)', {
                        projectIds: request.projectIds
                    });
                }
                if (request.activityLevel) {
                    qb.andWhere(`"${qb.alias}"."overall" BETWEEN :start AND :end`, request.activityLevel);
                }
                if (request.source) {
                    if (request.source instanceof Array) {
                        qb.andWhere('"timeLog"."source" IN (:...source)', {
                            source: request.source
                        });
                    }
                    else {
                        qb.andWhere('"timeLog"."source" = :source', {
                            source: request.source
                        });
                    }
                }
                if (request.logType) {
                    if (request.logType instanceof Array) {
                        qb.andWhere('"timeLog"."logType" IN (:...logType)', {
                            logType: request.logType
                        });
                    }
                    else {
                        qb.andWhere('"timeLog"."logType" = :logType', {
                            logType: request.logType
                        });
                    }
                }
            }
        });
        return logs;
    }
    async bulkCreateOrUpdate(slots) {
        return this.commandBus.execute(new time_slot_bulk_create_or_update_command_1.TimeSlotBulkCreateOrUpdateCommand(slots));
    }
    async bulkCreate(slots) {
        return this.commandBus.execute(new time_slot_bulk_create_command_1.TimeSlotBulkCreateCommand(slots));
    }
    async rangeDelete(employeeId, start, stop) {
        return this.commandBus.execute(new time_slot_range_delete_command_1.TimeSlotRangeDeleteCommand(employeeId, start, stop));
    }
    generateTimeSlots(start, end) {
        return utils_1.generateTimeSlots(start, end);
    }
    async create(request) {
        return this.commandBus.execute(new create_time_slot_command_1.CreateTimeSlotCommand(request));
    }
    async update(id, request) {
        return this.commandBus.execute(new update_time_slot_command_1.UpdateTimeSlotCommand(id, request));
    }
    async createTimeSlotMinute(request) {
        return this.commandBus.execute(new create_time_slot_minutes_command_1.CreateTimeSlotMinutesCommand(request));
    }
    async updateTimeSlotMinute(id, request) {
        return this.commandBus.execute(new update_time_slot_minutes_command_1.UpdateTimeSlotMinutesCommand(id, request));
    }
    async deleteTimeSlot(ids) {
        return this.commandBus.execute(new delete_time_slot_command_1.DeleteTimeSlotCommand(ids));
    }
};
TimeSlotService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(time_slot_entity_1.TimeSlot)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _b : Object])
], TimeSlotService);
exports.TimeSlotService = TimeSlotService;


/***/ }),

/***/ "./src/app/timesheet/time-slot/utils.ts":
/*!**********************************************!*\
  !*** ./src/app/timesheet/time-slot/utils.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTimeSlots = void 0;
const moment = __webpack_require__(/*! moment */ "moment");
function generateTimeSlots(start, end) {
    let mStart = moment(start);
    const mEnd = moment(end);
    const slots = [];
    while (mStart.isBefore(mEnd)) {
        let tempEnd;
        let duration = 0;
        if (mStart.get('minute') % 10 === 0) {
            tempEnd = mStart.clone().add(10, 'minute');
            if (tempEnd.isBefore(mEnd)) {
                duration = tempEnd.diff(mStart, 'seconds');
            }
            else {
                duration = mEnd.diff(mStart, 'seconds');
            }
        }
        else {
            const tempStart = mStart
                .clone()
                .set('minute', mStart.get('minute') - (mStart.minutes() % 10));
            tempEnd = tempStart.clone().add(10, 'minute');
            if (mEnd.isBefore(tempEnd)) {
                duration = mEnd.diff(mStart, 'seconds');
            }
            else {
                duration = tempEnd.diff(mStart, 'seconds');
            }
            mStart = tempStart;
        }
        mStart.set('second', 0);
        mStart.set('second', 0);
        mEnd.set('millisecond', 0);
        mEnd.set('millisecond', 0);
        slots.push({
            startedAt: mStart.toDate(),
            stoppedAt: tempEnd.toDate(),
            duration: Math.abs(duration)
        });
        mStart = tempEnd.clone();
    }
    return slots;
}
exports.generateTimeSlots = generateTimeSlots;


/***/ }),

/***/ "./src/app/timesheet/timer/timer.controller.ts":
/*!*****************************************************!*\
  !*** ./src/app/timesheet/timer/timer.controller.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimerController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const timer_service_1 = __webpack_require__(/*! ./timer.service */ "./src/app/timesheet/timer/timer.service.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let TimerController = class TimerController {
    constructor(timerService) {
        this.timerService = timerService;
    }
    async getTimerStatus(require) {
        return this.timerService.getTimerStatus(require);
    }
    async toggleTimer(entity) {
        return this.timerService.toggleTimeLog(entity);
    }
    async startTimer(entity) {
        return this.timerService.startTimer(entity);
    }
    async stopTimer(entity) {
        return this.timerService.stopTimer(entity);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Toggle timer' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'The timer has been successfully On/Off.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/status'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.ITimerStatusInput !== "undefined" && models_1.ITimerStatusInput) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], TimerController.prototype, "getTimerStatus", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Toggle timer' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'The timer has been successfully On/Off.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Post('/toggle'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.ITimerToggleInput !== "undefined" && models_1.ITimerToggleInput) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], TimerController.prototype, "toggleTimer", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Start timer' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'The timer has been successfully On.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Post('/start'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof models_1.ITimerToggleInput !== "undefined" && models_1.ITimerToggleInput) === "function" ? _e : Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], TimerController.prototype, "startTimer", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Stop timer' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'The timer has been successfully Off.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Post('/stop'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_g = typeof models_1.ITimerToggleInput !== "undefined" && models_1.ITimerToggleInput) === "function" ? _g : Object]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], TimerController.prototype, "stopTimer", null);
TimerController = tslib_1.__decorate([
    swagger_1.ApiTags('Timer'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller('timer'),
    tslib_1.__metadata("design:paramtypes", [typeof (_j = typeof timer_service_1.TimerService !== "undefined" && timer_service_1.TimerService) === "function" ? _j : Object])
], TimerController);
exports.TimerController = TimerController;


/***/ }),

/***/ "./src/app/timesheet/timer/timer.service.ts":
/*!**************************************************!*\
  !*** ./src/app/timesheet/timer/timer.service.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimerService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const time_log_entity_1 = __webpack_require__(/*! ../time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const context_1 = __webpack_require__(/*! ../../core/context */ "./src/app/core/context/index.ts");
const employee_entity_1 = __webpack_require__(/*! ../../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const get_conflict_time_log_command_1 = __webpack_require__(/*! ../time-log/commands/get-conflict-time-log.command */ "./src/app/timesheet/time-log/commands/get-conflict-time-log.command.ts");
const time_log_create_command_1 = __webpack_require__(/*! ../time-log/commands/time-log-create.command */ "./src/app/timesheet/time-log/commands/time-log-create.command.ts");
const delete_time_span_command_1 = __webpack_require__(/*! ../time-log/commands/delete-time-span.command */ "./src/app/timesheet/time-log/commands/delete-time-span.command.ts");
const time_log_update_command_1 = __webpack_require__(/*! ../time-log/commands/time-log-update.command */ "./src/app/timesheet/time-log/commands/time-log-update.command.ts");
let TimerService = class TimerService {
    constructor(timeLogRepository, employeeRepository, commandBus) {
        this.timeLogRepository = timeLogRepository;
        this.employeeRepository = employeeRepository;
        this.commandBus = commandBus;
    }
    async getTimerStatus(request) {
        const user = context_1.RequestContext.currentUser();
        const { tenantId } = user;
        const employee = await this.employeeRepository.findOne({
            userId: user.id,
            tenantId
        });
        if (!employee) {
            throw new common_1.BadRequestException('Employee not found.');
        }
        const todayLog = await this.timeLogRepository.find({
            where: {
                deletedAt: typeorm_2.IsNull(),
                employeeId: employee.id,
                source: request.source || models_1.TimeLogSourceEnum.BROWSER,
                startedAt: typeorm_2.Between(moment().startOf('day'), moment().endOf('day')),
                tenantId
            },
            order: {
                startedAt: 'DESC'
            }
        });
        const status = {
            duration: 0,
            running: false,
            lastLog: null
        };
        if (todayLog.length > 0) {
            const lastLog = todayLog[0];
            status.lastLog = lastLog;
            if (lastLog.stoppedAt) {
                status.running = false;
            }
            else {
                status.running = true;
                status.duration = Math.abs((lastLog.startedAt.getTime() - new Date().getTime()) / 1000);
            }
            for (let index = 0; index < todayLog.length; index++) {
                status.duration += todayLog[index].duration;
            }
        }
        return status;
    }
    async startTimer(request) {
        const user = context_1.RequestContext.currentUser();
        const lastLog = await this.timeLogRepository.findOne({
            where: {
                deletedAt: typeorm_2.IsNull(),
                employeeId: user.employeeId,
                stoppedAt: typeorm_2.IsNull()
            },
            order: {
                startedAt: 'DESC'
            }
        });
        if (lastLog) {
            await this.stopTimer(request);
        }
        let organizationId;
        if (!request.organizationId) {
            const employee = await this.employeeRepository.findOne(user.employeeId);
            organizationId = employee.organizationId;
        }
        else {
            organizationId = request.organizationId;
        }
        const newTimeLogInput = {
            organizationId,
            tenantId: context_1.RequestContext.currentTenantId(),
            startedAt: moment.utc().toDate(),
            duration: 0,
            employeeId: user.employeeId,
            source: request.source || models_1.TimeLogSourceEnum.BROWSER,
            projectId: request.projectId || null,
            taskId: request.taskId || null,
            organizationContactId: request.organizationContactId || null,
            logType: request.logType || models_1.TimeLogType.TRACKED,
            description: request.description || '',
            isBillable: request.isBillable || false
        };
        return await this.commandBus.execute(new time_log_create_command_1.TimeLogCreateCommand(newTimeLogInput));
    }
    async stopTimer(request) {
        const user = context_1.RequestContext.currentUser();
        let lastLog = await this.timeLogRepository.findOne({
            where: {
                deletedAt: typeorm_2.IsNull(),
                employeeId: user.employeeId,
                stoppedAt: typeorm_2.IsNull()
            },
            order: {
                startedAt: 'DESC'
            }
        });
        const stoppedAt = new Date();
        if (lastLog.startedAt === stoppedAt) {
            await this.timeLogRepository.delete(lastLog.id);
            return;
        }
        lastLog = await this.commandBus.execute(new time_log_update_command_1.TimeLogUpdateCommand({ stoppedAt }, lastLog.id, request.manualTimeSlot));
        const conflictInput = {
            ignoreId: lastLog.id,
            startDate: lastLog.startedAt,
            endDate: lastLog.stoppedAt,
            employeeId: lastLog.employeeId
        };
        const conflict = await this.commandBus.execute(new get_conflict_time_log_command_1.IGetConflictTimeLogCommand(conflictInput));
        const times = {
            start: new Date(lastLog.startedAt),
            end: new Date(lastLog.stoppedAt)
        };
        for (let index = 0; index < conflict.length; index++) {
            await this.commandBus.execute(new delete_time_span_command_1.DeleteTimeSpanCommand(times, conflict[index]));
        }
        return lastLog;
    }
    async toggleTimeLog(request) {
        const user = context_1.RequestContext.currentUser();
        const lastLog = await this.timeLogRepository.findOne({
            where: {
                deletedAt: typeorm_2.IsNull(),
                employeeId: user.employeeId,
                stoppedAt: typeorm_2.IsNull()
            },
            order: {
                startedAt: 'DESC'
            }
        });
        if (!lastLog) {
            return this.startTimer(request);
        }
        else {
            return this.stopTimer(request);
        }
    }
};
TimerService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(time_log_entity_1.TimeLog)),
    tslib_1.__param(1, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _c : Object])
], TimerService);
exports.TimerService = TimerService;


/***/ }),

/***/ "./src/app/timesheet/timesheet.entity.ts":
/*!***********************************************!*\
  !*** ./src/app/timesheet/timesheet.entity.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Timesheet = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const time_log_entity_1 = __webpack_require__(/*! ./time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let Timesheet = class Timesheet extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.ManyToOne(() => employee_entity_1.Employee, { nullable: true }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof employee_entity_1.Employee !== "undefined" && employee_entity_1.Employee) === "function" ? _a : Object)
], Timesheet.prototype, "employee", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((timesheet) => timesheet.employee),
    typeorm_1.Column(),
    tslib_1.__metadata("design:type", String)
], Timesheet.prototype, "employeeId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: employee_entity_1.Employee }),
    typeorm_1.ManyToOne(() => employee_entity_1.Employee, { nullable: true }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof employee_entity_1.Employee !== "undefined" && employee_entity_1.Employee) === "function" ? _b : Object)
], Timesheet.prototype, "approvedBy", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, readOnly: true }),
    typeorm_1.RelationId((timesheet) => timesheet.approvedBy),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], Timesheet.prototype, "approvedById", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: time_log_entity_1.TimeLog }),
    typeorm_1.OneToMany(() => time_log_entity_1.TimeLog, (timeLog) => timeLog.timesheet),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", Array)
], Timesheet.prototype, "timeLogs", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ default: 0 }),
    tslib_1.__metadata("design:type", Number)
], Timesheet.prototype, "duration", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ default: 0 }),
    tslib_1.__metadata("design:type", Number)
], Timesheet.prototype, "keyboard", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ default: 0 }),
    tslib_1.__metadata("design:type", Number)
], Timesheet.prototype, "mouse", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Number }),
    class_validator_1.IsNumber(),
    typeorm_1.Column({ default: 0 }),
    tslib_1.__metadata("design:type", Number)
], Timesheet.prototype, "overall", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: 'timestamptz' }),
    class_validator_1.IsDateString(),
    typeorm_1.Column({ nullable: true, default: null }),
    tslib_1.__metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], Timesheet.prototype, "startedAt", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: 'timestamptz' }),
    class_validator_1.IsDateString(),
    typeorm_1.Column({ nullable: true, default: null }),
    tslib_1.__metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], Timesheet.prototype, "stoppedAt", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: 'timestamptz' }),
    class_validator_1.IsDateString(),
    typeorm_1.Column({ nullable: true, default: null }),
    tslib_1.__metadata("design:type", typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object)
], Timesheet.prototype, "approvedAt", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: 'timestamptz' }),
    class_validator_1.IsDateString(),
    typeorm_1.Column({ nullable: true, default: null }),
    tslib_1.__metadata("design:type", typeof (_f = typeof Date !== "undefined" && Date) === "function" ? _f : Object)
], Timesheet.prototype, "submittedAt", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: 'timestamptz' }),
    class_validator_1.IsDateString(),
    typeorm_1.Column({ nullable: true, default: null }),
    tslib_1.__metadata("design:type", typeof (_g = typeof Date !== "undefined" && Date) === "function" ? _g : Object)
], Timesheet.prototype, "lockedAt", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean }),
    class_validator_1.IsBoolean(),
    typeorm_1.Column({ default: false }),
    tslib_1.__metadata("design:type", Boolean)
], Timesheet.prototype, "isBilled", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.TimesheetStatus }),
    class_validator_1.IsEnum(models_1.TimesheetStatus),
    class_validator_1.IsString(),
    typeorm_1.Column({ default: models_1.TimesheetStatus.PENDING }),
    tslib_1.__metadata("design:type", String)
], Timesheet.prototype, "status", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: 'timestamptz' }),
    class_validator_1.IsDateString(),
    typeorm_1.Column({ nullable: true, default: null }),
    tslib_1.__metadata("design:type", typeof (_h = typeof Date !== "undefined" && Date) === "function" ? _h : Object)
], Timesheet.prototype, "deletedAt", void 0);
Timesheet = tslib_1.__decorate([
    typeorm_1.Entity('timesheet')
], Timesheet);
exports.Timesheet = Timesheet;


/***/ }),

/***/ "./src/app/timesheet/timesheet.module.ts":
/*!***********************************************!*\
  !*** ./src/app/timesheet/timesheet.module.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimesheetModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const timesheet_entity_1 = __webpack_require__(/*! ./timesheet.entity */ "./src/app/timesheet/timesheet.entity.ts");
const time_slot_entity_1 = __webpack_require__(/*! ./time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const activity_entity_1 = __webpack_require__(/*! ./activity.entity */ "./src/app/timesheet/activity.entity.ts");
const screenshot_entity_1 = __webpack_require__(/*! ./screenshot.entity */ "./src/app/timesheet/screenshot.entity.ts");
const time_log_entity_1 = __webpack_require__(/*! ./time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const timer_controller_1 = __webpack_require__(/*! ./timer/timer.controller */ "./src/app/timesheet/timer/timer.controller.ts");
const timer_service_1 = __webpack_require__(/*! ./timer/timer.service */ "./src/app/timesheet/timer/timer.service.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const time_slot_minute_entity_1 = __webpack_require__(/*! ./time-slot-minute.entity */ "./src/app/timesheet/time-slot-minute.entity.ts");
const timesheet_service_1 = __webpack_require__(/*! ./timesheet/timesheet.service */ "./src/app/timesheet/timesheet/timesheet.service.ts");
const activity_service_1 = __webpack_require__(/*! ./activity/activity.service */ "./src/app/timesheet/activity/activity.service.ts");
const screenshot_service_1 = __webpack_require__(/*! ./screenshot/screenshot.service */ "./src/app/timesheet/screenshot/screenshot.service.ts");
const time_slot_service_1 = __webpack_require__(/*! ./time-slot/time-slot.service */ "./src/app/timesheet/time-slot/time-slot.service.ts");
const time_log_controller_1 = __webpack_require__(/*! ./time-log/time-log.controller */ "./src/app/timesheet/time-log/time-log.controller.ts");
const time_log_service_1 = __webpack_require__(/*! ./time-log/time-log.service */ "./src/app/timesheet/time-log/time-log.service.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/timesheet/commands/handlers/index.ts");
const timesheet_controller_1 = __webpack_require__(/*! ./timesheet/timesheet.controller */ "./src/app/timesheet/timesheet/timesheet.controller.ts");
const time_slot_controller_1 = __webpack_require__(/*! ./time-slot/time-slot.controller */ "./src/app/timesheet/time-slot/time-slot.controller.ts");
const screenshot_controller_1 = __webpack_require__(/*! ./screenshot/screenshot.controller */ "./src/app/timesheet/screenshot/screenshot.controller.ts");
const activity_controller_1 = __webpack_require__(/*! ./activity/activity.controller */ "./src/app/timesheet/activity/activity.controller.ts");
const handlers_2 = __webpack_require__(/*! ./timesheet/commands/handlers */ "./src/app/timesheet/timesheet/commands/handlers/index.ts");
const handlers_3 = __webpack_require__(/*! ./time-log/commands/handlers */ "./src/app/timesheet/time-log/commands/handlers/index.ts");
const statistic_service_1 = __webpack_require__(/*! ./statistic/statistic.service */ "./src/app/timesheet/statistic/statistic.service.ts");
const statistic_controller_1 = __webpack_require__(/*! ./statistic/statistic.controller */ "./src/app/timesheet/statistic/statistic.controller.ts");
const organization_projects_entity_1 = __webpack_require__(/*! ../organization-projects/organization-projects.entity */ "./src/app/organization-projects/organization-projects.entity.ts");
const task_entity_1 = __webpack_require__(/*! ../tasks/task.entity */ "./src/app/tasks/task.entity.ts");
const email_template_entity_1 = __webpack_require__(/*! ../email-template/email-template.entity */ "./src/app/email-template/email-template.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const email_entity_1 = __webpack_require__(/*! ../email/email.entity */ "./src/app/email/email.entity.ts");
const email_service_1 = __webpack_require__(/*! ../email/email.service */ "./src/app/email/email.service.ts");
const email_1 = __webpack_require__(/*! ../email */ "./src/app/email/index.ts");
const handlers_4 = __webpack_require__(/*! ./time-slot/commands/handlers */ "./src/app/timesheet/time-slot/commands/handlers/index.ts");
const handlers_5 = __webpack_require__(/*! ./activity/commands/handlers */ "./src/app/timesheet/activity/commands/handlers/index.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
const activity_map_service_1 = __webpack_require__(/*! ./activity/activity.map.service */ "./src/app/timesheet/activity/activity.map.service.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
let TimesheetModule = class TimesheetModule {
};
TimesheetModule = tslib_1.__decorate([
    common_1.Module({
        controllers: [
            timer_controller_1.TimerController,
            activity_controller_1.ActivityController,
            time_log_controller_1.TimeLogController,
            time_slot_controller_1.TimeSlotController,
            screenshot_controller_1.ScreenshotController,
            statistic_controller_1.StatisticController,
            timesheet_controller_1.TimeSheetController
        ],
        imports: [
            typeorm_1.TypeOrmModule.forFeature([
                time_slot_entity_1.TimeSlot,
                activity_entity_1.Activity,
                screenshot_entity_1.Screenshot,
                time_log_entity_1.TimeLog,
                timesheet_entity_1.Timesheet,
                employee_entity_1.Employee,
                time_slot_minute_entity_1.TimeSlotMinute,
                organization_projects_entity_1.OrganizationProject,
                task_entity_1.Task,
                email_entity_1.Email,
                email_template_entity_1.EmailTemplate,
                organization_entity_1.Organization,
                organization_contact_entity_1.OrganizationContact
            ]),
            cqrs_1.CqrsModule,
            email_1.EmailModule,
            tenant_module_1.TenantModule
        ],
        providers: [
            timer_service_1.TimerService,
            timesheet_service_1.TimeSheetService,
            activity_service_1.ActivityService,
            screenshot_service_1.ScreenshotService,
            time_log_service_1.TimeLogService,
            time_slot_service_1.TimeSlotService,
            statistic_service_1.StatisticService,
            email_service_1.EmailService,
            activity_map_service_1.ActivityMapService,
            ...handlers_3.TimeLogCommandHandlers,
            ...handlers_2.TimesheetCommandHandlers,
            ...handlers_4.TimeSlotCommandHandlers,
            ...handlers_5.ActivityCommandHandlers,
            ...handlers_1.CommandHandlers
        ],
        exports: [
            timesheet_service_1.TimeSheetService,
            activity_service_1.ActivityService,
            screenshot_service_1.ScreenshotService,
            time_log_service_1.TimeLogService,
            time_slot_service_1.TimeSlotService,
            statistic_service_1.StatisticService
        ]
    })
], TimesheetModule);
exports.TimesheetModule = TimesheetModule;


/***/ }),

/***/ "./src/app/timesheet/timesheet/commands/handlers/index.ts":
/*!****************************************************************!*\
  !*** ./src/app/timesheet/timesheet/commands/handlers/index.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimesheetCommandHandlers = void 0;
const timesheet_recalculate_handler_1 = __webpack_require__(/*! ./timesheet-recalculate.handler */ "./src/app/timesheet/timesheet/commands/handlers/timesheet-recalculate.handler.ts");
const timesheet_first_or_create_handler_1 = __webpack_require__(/*! ./timesheet-first-or-create.handler */ "./src/app/timesheet/timesheet/commands/handlers/timesheet-first-or-create.handler.ts");
const timesheet_update_status_handler_1 = __webpack_require__(/*! ./timesheet-update-status.handler */ "./src/app/timesheet/timesheet/commands/handlers/timesheet-update-status.handler.ts");
const timesheet_submit_handler_1 = __webpack_require__(/*! ./timesheet-submit.handler */ "./src/app/timesheet/timesheet/commands/handlers/timesheet-submit.handler.ts");
exports.TimesheetCommandHandlers = [
    timesheet_recalculate_handler_1.TimesheetRecalculateHandler,
    timesheet_first_or_create_handler_1.TimesheetFirstOrCreateHandler,
    timesheet_update_status_handler_1.TimesheetUpdateStatusHandler,
    timesheet_submit_handler_1.TimesheetSubmitHandler
];


/***/ }),

/***/ "./src/app/timesheet/timesheet/commands/handlers/timesheet-first-or-create.handler.ts":
/*!********************************************************************************************!*\
  !*** ./src/app/timesheet/timesheet/commands/handlers/timesheet-first-or-create.handler.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimesheetFirstOrCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const timesheet_first_or_create_command_1 = __webpack_require__(/*! ../timesheet-first-or-create.command */ "./src/app/timesheet/timesheet/commands/timesheet-first-or-create.command.ts");
const timesheet_entity_1 = __webpack_require__(/*! ../../../timesheet.entity */ "./src/app/timesheet/timesheet.entity.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const context_1 = __webpack_require__(/*! src/app/core/context */ "./src/app/core/context/index.ts");
const employee_entity_1 = __webpack_require__(/*! src/app/employee/employee.entity */ "./src/app/employee/employee.entity.ts");
let TimesheetFirstOrCreateHandler = class TimesheetFirstOrCreateHandler {
    constructor(timeSheetRepository, employeeRepository) {
        this.timeSheetRepository = timeSheetRepository;
        this.employeeRepository = employeeRepository;
    }
    async execute(command) {
        const { date, employeeId } = command;
        const from_date = moment(date).startOf('week');
        const to_date = moment(date).endOf('week');
        let timesheet = await this.timeSheetRepository.findOne({
            where: {
                startedAt: typeorm_2.Between(from_date, to_date),
                employeeId: employeeId
            }
        });
        let organizationId;
        if (!command.organizationId) {
            const employee = await this.employeeRepository.findOne(employeeId);
            organizationId = employee.organizationId;
        }
        else {
            organizationId = command.organizationId;
        }
        if (!timesheet) {
            timesheet = await this.timeSheetRepository.save({
                tenantId: context_1.RequestContext.currentTenantId(),
                employeeId: employeeId,
                organizationId,
                startedAt: from_date.toISOString(),
                stoppedAt: to_date.toISOString()
            });
        }
        return timesheet;
    }
};
TimesheetFirstOrCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(timesheet_first_or_create_command_1.TimesheetFirstOrCreateCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(timesheet_entity_1.Timesheet)),
    tslib_1.__param(1, typeorm_1.InjectRepository(employee_entity_1.Employee)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], TimesheetFirstOrCreateHandler);
exports.TimesheetFirstOrCreateHandler = TimesheetFirstOrCreateHandler;


/***/ }),

/***/ "./src/app/timesheet/timesheet/commands/handlers/timesheet-recalculate.handler.ts":
/*!****************************************************************************************!*\
  !*** ./src/app/timesheet/timesheet/commands/handlers/timesheet-recalculate.handler.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimesheetRecalculateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const timesheet_service_1 = __webpack_require__(/*! ../../timesheet.service */ "./src/app/timesheet/timesheet/timesheet.service.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const time_slot_entity_1 = __webpack_require__(/*! ../../../time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const timesheet_recalculate_command_1 = __webpack_require__(/*! ../timesheet-recalculate.command */ "./src/app/timesheet/timesheet/commands/timesheet-recalculate.command.ts");
let TimesheetRecalculateHandler = class TimesheetRecalculateHandler {
    constructor(timesheetService, timeSlotRepository) {
        this.timesheetService = timesheetService;
        this.timeSlotRepository = timeSlotRepository;
    }
    async execute(command) {
        const { id } = command;
        const timesheet = await this.timesheetService.findOne(id);
        const timeslotsData = await this.timeSlotRepository
            .createQueryBuilder()
            .select('SUM(duration)', 'duration')
            .addSelect('AVG(keyboard)', 'keyboard')
            .addSelect('AVG(mouse)', 'mouse')
            .addSelect('AVG(overall)', 'overall')
            .where({
            startedAt: typeorm_2.Between(timesheet.startedAt, timesheet.stoppedAt),
            employeeId: timesheet.employeeId
        })
            .getRawOne();
        await this.timesheetService.update(id, {
            duration: Math.round(timeslotsData.duration),
            keyboard: Math.round(timeslotsData.keyboard),
            mouse: Math.round(timeslotsData.mouse),
            overall: Math.round(timeslotsData.overall)
        });
        return timesheet;
    }
};
TimesheetRecalculateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(timesheet_recalculate_command_1.TimesheetRecalculateCommand),
    tslib_1.__param(1, typeorm_1.InjectRepository(time_slot_entity_1.TimeSlot)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof timesheet_service_1.TimeSheetService !== "undefined" && timesheet_service_1.TimeSheetService) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], TimesheetRecalculateHandler);
exports.TimesheetRecalculateHandler = TimesheetRecalculateHandler;


/***/ }),

/***/ "./src/app/timesheet/timesheet/commands/handlers/timesheet-submit.handler.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/timesheet/timesheet/commands/handlers/timesheet-submit.handler.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimesheetSubmitHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const timesheet_entity_1 = __webpack_require__(/*! ../../../timesheet.entity */ "./src/app/timesheet/timesheet.entity.ts");
const email_service_1 = __webpack_require__(/*! src/app/email/email.service */ "./src/app/email/email.service.ts");
const timesheet_submit_command_1 = __webpack_require__(/*! ../timesheet-submit.command */ "./src/app/timesheet/timesheet/commands/timesheet-submit.command.ts");
let TimesheetSubmitHandler = class TimesheetSubmitHandler {
    constructor(timeSheetRepository, emailService) {
        this.timeSheetRepository = timeSheetRepository;
        this.emailService = emailService;
    }
    async execute(command) {
        let { ids, status } = command.input;
        if (typeof ids === 'string') {
            ids = [ids];
        }
        await this.timeSheetRepository.update({
            id: typeorm_2.In(ids)
        }, {
            submittedAt: status === 'submit' ? new Date() : null
        });
        const timesheets = await this.timeSheetRepository.find({
            relations: ['employee', 'employee.user'],
            where: {
                id: typeorm_2.In(ids)
            }
        });
        timesheets.forEach((timesheet) => {
            if (status === 'submit') {
                if (timesheet.employee && timesheet.employee.user) {
                    this.emailService.timesheetSubmit(timesheet.employee.user.email, timesheet);
                }
            }
        });
        return timesheets;
    }
};
TimesheetSubmitHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(timesheet_submit_command_1.TimesheetSubmitCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(timesheet_entity_1.Timesheet)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof email_service_1.EmailService !== "undefined" && email_service_1.EmailService) === "function" ? _b : Object])
], TimesheetSubmitHandler);
exports.TimesheetSubmitHandler = TimesheetSubmitHandler;


/***/ }),

/***/ "./src/app/timesheet/timesheet/commands/handlers/timesheet-update-status.handler.ts":
/*!******************************************************************************************!*\
  !*** ./src/app/timesheet/timesheet/commands/handlers/timesheet-update-status.handler.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimesheetUpdateStatusHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const timesheet_update_status_command_1 = __webpack_require__(/*! ../timesheet-update-status.command */ "./src/app/timesheet/timesheet/commands/timesheet-update-status.command.ts");
const context_1 = __webpack_require__(/*! src/app/core/context */ "./src/app/core/context/index.ts");
const timesheet_entity_1 = __webpack_require__(/*! ../../../timesheet.entity */ "./src/app/timesheet/timesheet.entity.ts");
const email_service_1 = __webpack_require__(/*! src/app/email/email.service */ "./src/app/email/email.service.ts");
let TimesheetUpdateStatusHandler = class TimesheetUpdateStatusHandler {
    constructor(timeSheetRepository, emailService) {
        this.timeSheetRepository = timeSheetRepository;
        this.emailService = emailService;
    }
    async execute(command) {
        let { ids, status } = command.input;
        if (typeof ids === 'string') {
            ids = [ids];
        }
        let approvedBy = null;
        if (status === models_1.TimesheetStatus.APPROVED) {
            const user = context_1.RequestContext.currentUser();
            approvedBy = user.employeeId;
        }
        await this.timeSheetRepository.update({
            id: typeorm_2.In(ids)
        }, {
            status: status,
            approvedById: approvedBy,
            approvedAt: status === models_1.TimesheetStatus.APPROVED ? new Date() : null
        });
        const timesheets = await this.timeSheetRepository.find({
            relations: ['employee', 'employee.user'],
            where: {
                id: typeorm_2.In(ids)
            }
        });
        timesheets.forEach((timesheet) => {
            if (timesheet.employee && timesheet.employee.user) {
                this.emailService.setTimesheetAction(timesheet.employee.user.email, timesheet);
            }
        });
        return timesheets;
    }
};
TimesheetUpdateStatusHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(timesheet_update_status_command_1.TimesheetUpdateStatusCommand),
    tslib_1.__param(0, typeorm_1.InjectRepository(timesheet_entity_1.Timesheet)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof email_service_1.EmailService !== "undefined" && email_service_1.EmailService) === "function" ? _b : Object])
], TimesheetUpdateStatusHandler);
exports.TimesheetUpdateStatusHandler = TimesheetUpdateStatusHandler;


/***/ }),

/***/ "./src/app/timesheet/timesheet/commands/timesheet-first-or-create.command.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/timesheet/timesheet/commands/timesheet-first-or-create.command.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimesheetFirstOrCreateCommand = void 0;
class TimesheetFirstOrCreateCommand {
    constructor(date, employeeId, organizationId) {
        this.date = date;
        this.employeeId = employeeId;
        this.organizationId = organizationId;
    }
}
exports.TimesheetFirstOrCreateCommand = TimesheetFirstOrCreateCommand;
TimesheetFirstOrCreateCommand.type = '[Timesheet] first-or-create';


/***/ }),

/***/ "./src/app/timesheet/timesheet/commands/timesheet-recalculate.command.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/timesheet/timesheet/commands/timesheet-recalculate.command.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimesheetRecalculateCommand = void 0;
class TimesheetRecalculateCommand {
    constructor(id) {
        this.id = id;
    }
}
exports.TimesheetRecalculateCommand = TimesheetRecalculateCommand;
TimesheetRecalculateCommand.type = '[Timesheet] recalculate';


/***/ }),

/***/ "./src/app/timesheet/timesheet/commands/timesheet-submit.command.ts":
/*!**************************************************************************!*\
  !*** ./src/app/timesheet/timesheet/commands/timesheet-submit.command.ts ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimesheetSubmitCommand = void 0;
class TimesheetSubmitCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.TimesheetSubmitCommand = TimesheetSubmitCommand;
TimesheetSubmitCommand.type = '[Timesheet] update-status';


/***/ }),

/***/ "./src/app/timesheet/timesheet/commands/timesheet-update-status.command.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/timesheet/timesheet/commands/timesheet-update-status.command.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TimesheetUpdateStatusCommand = void 0;
class TimesheetUpdateStatusCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.TimesheetUpdateStatusCommand = TimesheetUpdateStatusCommand;
TimesheetUpdateStatusCommand.type = '[Timesheet] update-status';


/***/ }),

/***/ "./src/app/timesheet/timesheet/timesheet.controller.ts":
/*!*************************************************************!*\
  !*** ./src/app/timesheet/timesheet/timesheet.controller.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSheetController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const crud_controller_1 = __webpack_require__(/*! ../../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const timesheet_service_1 = __webpack_require__(/*! ./timesheet.service */ "./src/app/timesheet/timesheet/timesheet.service.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const nestjs_i18n_1 = __webpack_require__(/*! nestjs-i18n */ "nestjs-i18n");
const tenant_permission_guard_1 = __webpack_require__(/*! ../../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let TimeSheetController = class TimeSheetController extends crud_controller_1.CrudController {
    constructor(timeSheetService) {
        super(timeSheetService);
        this.timeSheetService = timeSheetService;
    }
    async get(entity) {
        return this.timeSheetService.getTimeSheets(entity);
    }
    async getCount(entity) {
        return this.timeSheetService.getTimeSheetCount(entity);
    }
    async updateStatus(entity, i18nLang) {
        console.log({ i18nLang });
        return this.timeSheetService.updateStatus(entity);
    }
    async submitTimeheet(entity) {
        return this.timeSheetService.submitTimeheet(entity);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get timesheet' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Get timesheet'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof models_1.IGetTimesheetInput !== "undefined" && models_1.IGetTimesheetInput) === "function" ? _a : Object]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], TimeSheetController.prototype, "get", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get timesheet Count' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Get timesheet Count'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Get('/count'),
    tslib_1.__param(0, common_1.Query()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_c = typeof models_1.IGetTimesheetInput !== "undefined" && models_1.IGetTimesheetInput) === "function" ? _c : Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], TimeSheetController.prototype, "getCount", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Update timesheet' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'The timesheet has been successfully updated.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Put('/status'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__param(1, nestjs_i18n_1.I18nLang()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof models_1.IUpdateTimesheetStatusInput !== "undefined" && models_1.IUpdateTimesheetStatusInput) === "function" ? _e : Object, typeof (_f = typeof models_1.LanguagesEnum !== "undefined" && models_1.LanguagesEnum) === "function" ? _f : Object]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], TimeSheetController.prototype, "updateStatus", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Submit timesheet' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'The timesheet has been successfully submit.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.Put('/submit'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_h = typeof models_1.ISubmitTimesheetInput !== "undefined" && models_1.ISubmitTimesheetInput) === "function" ? _h : Object]),
    tslib_1.__metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], TimeSheetController.prototype, "submitTimeheet", null);
TimeSheetController = tslib_1.__decorate([
    swagger_1.ApiTags('TimeSheet'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_k = typeof timesheet_service_1.TimeSheetService !== "undefined" && timesheet_service_1.TimeSheetService) === "function" ? _k : Object])
], TimeSheetController);
exports.TimeSheetController = TimeSheetController;


/***/ }),

/***/ "./src/app/timesheet/timesheet/timesheet.seed.ts":
/*!*******************************************************!*\
  !*** ./src/app/timesheet/timesheet/timesheet.seed.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomTimesheet = exports.createDefaultTimeSheet = void 0;
const faker = __webpack_require__(/*! faker */ "faker");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const timesheet_entity_1 = __webpack_require__(/*! ../timesheet.entity */ "./src/app/timesheet/timesheet.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const _ = __webpack_require__(/*! underscore */ "underscore");
const time_log_seed_1 = __webpack_require__(/*! ../time-log/time-log.seed */ "./src/app/timesheet/time-log/time-log.seed.ts");
const activities_seed_1 = __webpack_require__(/*! ../activity/activities.seed */ "./src/app/timesheet/activity/activities.seed.ts");
const chalk_1 = __webpack_require__(/*! chalk */ "chalk");
exports.createDefaultTimeSheet = async (connection, tenant, employees, defaultProjects, noOfTimeLogsPerTimeSheet) => {
    if (!defaultProjects) {
        console.warn('Warning: defaultProjects not found, RandomTimesheet will not be created');
        return;
    }
    const timesheets = [];
    for (let index = 0; index < 2; index++) {
        const date = moment().subtract(index, 'week').toDate();
        const startedAt = moment(date).startOf('week').toDate();
        const stoppedAt = moment(date).endOf('week').toDate();
        for (const employee of employees) {
            const status = faker.random.arrayElement(Object.keys(models_1.TimesheetStatus));
            let isBilled = false;
            let approvedAt = null;
            let submittedAt = null;
            if (models_1.TimesheetStatus[status] === models_1.TimesheetStatus.PENDING) {
                approvedAt = null;
                submittedAt = faker.date.past();
            }
            else if (models_1.TimesheetStatus[status] === models_1.TimesheetStatus.IN_REVIEW) {
                approvedAt = null;
                submittedAt = faker.date.between(startedAt, new Date());
            }
            else if (models_1.TimesheetStatus[status] === models_1.TimesheetStatus.APPROVED) {
                isBilled = faker.random.arrayElement([true, false]);
                approvedAt = faker.date.between(startedAt, new Date());
                submittedAt = faker.date.between(startedAt, approvedAt);
            }
            const timesheet = new timesheet_entity_1.Timesheet();
            timesheet.employee = employee;
            timesheet.organization = employee.organization;
            timesheet.tenant = tenant;
            timesheet.approvedBy = null;
            timesheet.startedAt = startedAt;
            timesheet.stoppedAt = stoppedAt;
            timesheet.duration = 0;
            timesheet.keyboard = 0;
            timesheet.mouse = 0;
            timesheet.overall = 0;
            timesheet.approvedAt = approvedAt;
            timesheet.submittedAt = submittedAt;
            timesheet.lockedAt = null;
            timesheet.isBilled = isBilled;
            timesheet.status = models_1.TimesheetStatus[status];
            timesheet.deletedAt = null;
            timesheets.push(timesheet);
        }
    }
    await connection.getRepository(timesheet_entity_1.Timesheet).save(timesheets);
    const createdTimesheets = await connection.getRepository(timesheet_entity_1.Timesheet).find();
    let timeSlots;
    try {
        console.log(chalk_1.default.green(`SEEDING Default TimeLogs`));
        timeSlots = await time_log_seed_1.createRandomTimeLogs(connection, tenant, createdTimesheets, defaultProjects, noOfTimeLogsPerTimeSheet);
    }
    catch (error) {
        console.log(chalk_1.default.red(`SEEDING Default TimeLogs`, error));
    }
    try {
        console.log(chalk_1.default.green(`SEEDING Default Activities`));
        await activities_seed_1.createRandomActivities(connection, tenant, timeSlots);
    }
    catch (error) {
        console.log(chalk_1.default.red(`SEEDING Default Activities`, error));
    }
    return createdTimesheets;
};
exports.createRandomTimesheet = async (connection, tenant, defaultProjects, noOfTimeLogsPerTimeSheet) => {
    if (!defaultProjects) {
        console.warn('Warning: defaultProjects not found, RandomTimesheet will not be created');
        return;
    }
    const timesheets = [];
    const employees = await connection.getRepository(employee_entity_1.Employee).find({
        relations: ['organization']
    });
    for (let index = 0; index < 2; index++) {
        const date = moment().subtract(index, 'week').toDate();
        const startedAt = moment(date).startOf('week').toDate();
        const stoppedAt = moment(date).endOf('week').toDate();
        _.chain(employees)
            .shuffle()
            .take(faker.random.number(employees.length))
            .each((employee) => {
            const status = faker.random.arrayElement(Object.keys(models_1.TimesheetStatus));
            let isBilled = false;
            let approvedAt = null;
            let submittedAt = null;
            if (models_1.TimesheetStatus[status] === models_1.TimesheetStatus.PENDING) {
                approvedAt = null;
                submittedAt = faker.date.past();
            }
            else if (models_1.TimesheetStatus[status] === models_1.TimesheetStatus.IN_REVIEW) {
                approvedAt = null;
                submittedAt = faker.date.between(startedAt, new Date());
            }
            else if (models_1.TimesheetStatus[status] === models_1.TimesheetStatus.APPROVED) {
                isBilled = faker.random.arrayElement([true, false]);
                approvedAt = faker.date.between(startedAt, new Date());
                submittedAt = faker.date.between(startedAt, approvedAt);
            }
            const timesheet = new timesheet_entity_1.Timesheet();
            timesheet.employee = employee;
            timesheet.organization = employee.organization;
            timesheet.tenant = tenant;
            timesheet.approvedBy = null;
            timesheet.startedAt = startedAt;
            timesheet.stoppedAt = stoppedAt;
            timesheet.duration = 0;
            timesheet.keyboard = 0;
            timesheet.mouse = 0;
            timesheet.overall = 0;
            timesheet.approvedAt = approvedAt;
            timesheet.submittedAt = submittedAt;
            timesheet.lockedAt = null;
            timesheet.isBilled = isBilled;
            timesheet.status = models_1.TimesheetStatus[status];
            timesheet.deletedAt = null;
            timesheets.push(timesheet);
        });
    }
    await connection.getRepository(timesheet_entity_1.Timesheet).save(timesheets);
    const createdTimesheets = await connection.getRepository(timesheet_entity_1.Timesheet).find();
    let timeSlots;
    try {
        console.log(chalk_1.default.green(`SEEDING Random TimeLogs`));
        timeSlots = await time_log_seed_1.createRandomTimeLogs(connection, tenant, createdTimesheets, defaultProjects, noOfTimeLogsPerTimeSheet);
    }
    catch (error) {
        console.log(chalk_1.default.red(`SEEDING Random TimeLogs`, error));
    }
    try {
        console.log(chalk_1.default.green(`SEEDING Random Activities`));
        await activities_seed_1.createRandomActivities(connection, tenant, timeSlots);
    }
    catch (error) {
        console.log(chalk_1.default.red(`SEEDING Random Activities`, error));
    }
    return createdTimesheets;
};


/***/ }),

/***/ "./src/app/timesheet/timesheet/timesheet.service.ts":
/*!**********************************************************!*\
  !*** ./src/app/timesheet/timesheet/timesheet.service.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSheetService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const timesheet_entity_1 = __webpack_require__(/*! ../timesheet.entity */ "./src/app/timesheet/timesheet.entity.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const context_1 = __webpack_require__(/*! ../../core/context */ "./src/app/core/context/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const timesheet_first_or_create_command_1 = __webpack_require__(/*! ./commands/timesheet-first-or-create.command */ "./src/app/timesheet/timesheet/commands/timesheet-first-or-create.command.ts");
const timesheet_update_status_command_1 = __webpack_require__(/*! ./commands/timesheet-update-status.command */ "./src/app/timesheet/timesheet/commands/timesheet-update-status.command.ts");
const timesheet_submit_command_1 = __webpack_require__(/*! ./commands/timesheet-submit.command */ "./src/app/timesheet/timesheet/commands/timesheet-submit.command.ts");
let TimeSheetService = class TimeSheetService extends crud_service_1.CrudService {
    constructor(timeSheetRepository, commandBus) {
        super(timeSheetRepository);
        this.timeSheetRepository = timeSheetRepository;
        this.commandBus = commandBus;
    }
    async createOrFindTimeSheet(employeeId, date = new Date()) {
        const timesheet = await this.commandBus.execute(new timesheet_first_or_create_command_1.TimesheetFirstOrCreateCommand(date, employeeId));
        return timesheet;
    }
    submitTimeheet(input) {
        return this.commandBus.execute(new timesheet_submit_command_1.TimesheetSubmitCommand(input));
    }
    updateStatus(input) {
        return this.commandBus.execute(new timesheet_update_status_command_1.TimesheetUpdateStatusCommand(input));
    }
    async getTimeSheetCount(request) {
        const timesheets = await this.getTimeSheets(request);
        return timesheets.length;
    }
    async getTimeSheets(request) {
        let employeeIds;
        const startDate = moment(request.startDate).format('YYYY-MM-DD HH:mm:ss');
        const endDate = moment(request.endDate).format('YYYY-MM-DD HH:mm:ss');
        if (context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)) {
            if (request.employeeIds) {
                employeeIds = request.employeeIds;
            }
        }
        else {
            const user = context_1.RequestContext.currentUser();
            employeeIds = [user.employeeId];
        }
        const timesheet = await this.timeSheetRepository.find({
            join: {
                alias: 'timesheet',
                innerJoin: {
                    employee: 'timesheet.employee',
                    timeLogs: 'timesheet.timeLogs'
                }
            },
            relations: [
                ...(context_1.RequestContext.hasPermission(models_1.PermissionsEnum.CHANGE_SELECTED_EMPLOYEE)
                    ? ['employee', 'employee.organization', 'employee.user']
                    : [])
            ],
            where: (qb) => {
                qb.where(Object.assign({ startedAt: typeorm_2.Between(startDate, endDate) }, (employeeIds ? { employeeId: typeorm_2.In(employeeIds) } : {})));
                qb.andWhere(`"${qb.alias}"."startedAt" Between :startDate AND :endDate`, {
                    startDate,
                    endDate
                });
                qb.andWhere(`"${qb.alias}"."deletedAt" IS NULL`);
                const { organizationId = null } = request;
                if (typeof organizationId === 'string') {
                    qb.andWhere(`"${qb.alias}"."organizationId" = :organizationId`, { organizationId: request.organizationId });
                }
                let { tenantId = null } = request;
                if (typeof tenantId !== 'string') {
                    const user = context_1.RequestContext.currentUser();
                    tenantId = user.tenantId;
                }
                if (tenantId) {
                    qb.andWhere(`"${qb.alias}"."tenantId" = :tenantId`, {
                        tenantId
                    });
                }
            }
        });
        return timesheet;
    }
};
TimeSheetService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(timesheet_entity_1.Timesheet)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _b : Object])
], TimeSheetService);
exports.TimeSheetService = TimeSheetService;


/***/ }),

/***/ "./src/app/upwork/upwork-transaction.service.ts":
/*!******************************************************!*\
  !*** ./src/app/upwork/upwork-transaction.service.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpworkTransactionService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const fs = __webpack_require__(/*! fs */ "fs");
const fse = __webpack_require__(/*! fs-extra */ "fs-extra");
const csv = __webpack_require__(/*! csv-parser */ "csv-parser");
const income_create_command_1 = __webpack_require__(/*! ../income/commands/income.create.command */ "./src/app/income/commands/income.create.command.ts");
const expense_create_command_1 = __webpack_require__(/*! ../expense/commands/expense.create.command */ "./src/app/expense/commands/expense.create.command.ts");
const organization_vendors_service_1 = __webpack_require__(/*! ../organization-vendors/organization-vendors.service */ "./src/app/organization-vendors/organization-vendors.service.ts");
const organization_contact_service_1 = __webpack_require__(/*! ../organization-contact/organization-contact.service */ "./src/app/organization-contact/organization-contact.service.ts");
const expense_categories_service_1 = __webpack_require__(/*! ../expense-categories/expense-categories.service */ "./src/app/expense-categories/expense-categories.service.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const expense_entity_1 = __webpack_require__(/*! ../expense/expense.entity */ "./src/app/expense/expense.entity.ts");
const income_entity_1 = __webpack_require__(/*! ../income/income.entity */ "./src/app/income/income.entity.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const uuid_1 = __webpack_require__(/*! uuid */ "uuid");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
let UpworkTransactionService = class UpworkTransactionService {
    constructor(_userService, _employeeService, _orgVendorService, _orgClientService, _expenseCategoryService, commandBus) {
        this._userService = _userService;
        this._employeeService = _employeeService;
        this._orgVendorService = _orgVendorService;
        this._orgClientService = _orgClientService;
        this._expenseCategoryService = _expenseCategoryService;
        this.commandBus = commandBus;
        this.commandBusMapper = {
            [models_1.IncomeTypeEnum.HOURLY]: {
                command: ({ dto, client }) => new income_create_command_1.IncomeCreateCommand(Object.assign(Object.assign({}, dto), { clientName: client.name, clientId: client.id }))
            },
            [models_1.ExpenseCategoriesEnum.SERVICE_FEE]: {
                command: ({ dto, category, vendor }) => new expense_create_command_1.ExpenseCreateCommand(Object.assign(Object.assign({}, dto), { vendor,
                    category }))
            }
        };
    }
    async handleTransactions(file, { organizationId }) {
        const uuid = uuid_1.v4();
        const dirPath = `src/app/integrations/upwork/csv/${uuid}`;
        const csvData = file.buffer.toString();
        const filePath = `${dirPath}/${file.originalname}`;
        let results = [];
        fs.mkdirSync(dirPath, { recursive: true });
        fs.writeFileSync(filePath, csvData);
        const csvReader = fs
            .createReadStream(filePath)
            .pipe(csv())
            .on('data', (data) => (results = results.concat(data)));
        const tenantId = context_1.RequestContext.currentTenantId();
        return new Promise((resolve, reject) => {
            csvReader.on('end', async () => {
                fse.removeSync(dirPath);
                const transactions = results
                    .filter((result) => result.Type === models_1.IncomeTypeEnum.HOURLY ||
                    result.Type === models_1.ExpenseCategoriesEnum.SERVICE_FEE)
                    .map(async (result) => {
                    const { Date: date, Amount, Freelancer, Currency, Team } = result;
                    const [firstName, lastName] = Freelancer.split(' ');
                    const { record: user } = await this._findRecordOrThrow(this._userService, {
                        where: {
                            firstName,
                            lastName
                        }
                    }, `User: ${Freelancer} not found`);
                    const { record: employee } = await this._findRecordOrThrow(this._employeeService, { where: { user, organizationId, tenantId } }, `Employee ${Freelancer} not found`);
                    const { record: category } = await this._findRecordOrThrow(this._expenseCategoryService, {
                        where: {
                            name: models_1.ExpenseCategoriesEnum.SERVICE_FEE,
                            organizationId,
                            tenantId
                        }
                    }, `Category: ${models_1.ExpenseCategoriesEnum.SERVICE_FEE} not found`);
                    const { record: vendor } = await this._findRecordOrThrow(this._orgVendorService, {
                        where: {
                            name: models_1.OrganizationVendorEnum.UPWORK,
                            organizationId,
                            tenantId
                        }
                    }, `Vendor: ${models_1.OrganizationVendorEnum.UPWORK} not found`);
                    const { record: client } = await this._findRecordOrThrow(this._orgClientService, {
                        where: { name: Team, organizationId, tenantId }
                    }, `Client: ${Team} not found`);
                    const dto = {
                        amount: Amount,
                        reference: result['Ref ID'],
                        valueDate: new Date(date),
                        employeeId: employee.id,
                        currency: Currency,
                        organizationId
                    };
                    const cmd = this.commandBusMapper[result.Type];
                    return await this.commandBus.execute(cmd.command({
                        dto,
                        client,
                        vendor,
                        category
                    }));
                });
                const processedTransactions = await Promise.all(transactions.map(core_1.reflect));
                const { rejectedTransactions, totalExpenses, totalIncomes } = this._proccessTransactions(processedTransactions);
                if (rejectedTransactions.length) {
                    const errors = rejectedTransactions.map(({ error }) => error.response.message);
                    const message = this._formatErrorMesage([...new Set(errors)], totalExpenses, totalIncomes);
                    reject(new common_1.BadRequestException(message));
                }
                resolve({ totalExpenses, totalIncomes });
            });
        });
    }
    _formatErrorMesage(errors, totalExpenses, totalIncomes) {
        return `Total succeed expenses transactions: ${totalExpenses}.
			Total succeed incomes transactions: ${totalIncomes}.
			Failed transactions: ${errors.join(', ')}
		`;
    }
    _proccessTransactions(processedTransactions) {
        const { rejectedTransactions, totalExpenses, totalIncomes } = processedTransactions.reduce((prev, current) => {
            return {
                rejectedTransactions: current.status === 'rejected'
                    ? prev.rejectedTransactions.concat(current)
                    : prev.rejectedTransactions,
                totalExpenses: current.item instanceof expense_entity_1.Expense
                    ? (prev.totalExpenses++, prev.totalExpenses)
                    : prev.totalExpenses,
                totalIncomes: current.item instanceof income_entity_1.Income
                    ? (prev.totalIncomes++, prev.totalIncomes)
                    : prev.totalIncomes
            };
        }, {
            rejectedTransactions: [],
            totalExpenses: 0,
            totalIncomes: 0
        });
        return {
            rejectedTransactions,
            totalExpenses,
            totalIncomes
        };
    }
    async _findRecordOrThrow(service, condition, errorMsg) {
        const response = await service.findOneOrFail(condition);
        if (response.success) {
            return { record: response.record };
        }
        throw new common_1.BadRequestException(errorMsg);
    }
};
UpworkTransactionService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" ? _a : Object, typeof (_b = typeof employee_service_1.EmployeeService !== "undefined" && employee_service_1.EmployeeService) === "function" ? _b : Object, typeof (_c = typeof organization_vendors_service_1.OrganizationVendorsService !== "undefined" && organization_vendors_service_1.OrganizationVendorsService) === "function" ? _c : Object, typeof (_d = typeof organization_contact_service_1.OrganizationContactService !== "undefined" && organization_contact_service_1.OrganizationContactService) === "function" ? _d : Object, typeof (_e = typeof expense_categories_service_1.ExpenseCategoriesService !== "undefined" && expense_categories_service_1.ExpenseCategoriesService) === "function" ? _e : Object, typeof (_f = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _f : Object])
], UpworkTransactionService);
exports.UpworkTransactionService = UpworkTransactionService;


/***/ }),

/***/ "./src/app/upwork/upwork.controller.ts":
/*!*********************************************!*\
  !*** ./src/app/upwork/upwork.controller.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpworkController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const platform_express_1 = __webpack_require__(/*! @nestjs/platform-express */ "@nestjs/platform-express");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const upwork_transaction_service_1 = __webpack_require__(/*! ./upwork-transaction.service */ "./src/app/upwork/upwork-transaction.service.ts");
const upwork_service_1 = __webpack_require__(/*! ./upwork.service */ "./src/app/upwork/upwork.service.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const expense_entity_1 = __webpack_require__(/*! ../expense/expense.entity */ "./src/app/expense/expense.entity.ts");
const income_entity_1 = __webpack_require__(/*! ../income/income.entity */ "./src/app/income/income.entity.ts");
let UpworkController = class UpworkController {
    constructor(_upworkTransactionService, _upworkService) {
        this._upworkTransactionService = _upworkTransactionService;
        this._upworkService = _upworkService;
    }
    async create(file, organizationDto) {
        return await this._upworkTransactionService.handleTransactions(file, organizationDto);
    }
    async getAccessTokenSecretPair(config, organizationId) {
        return await this._upworkService.getAccessTokenSecretPair(config, organizationId);
    }
    async getAccessToken(accessTokenDto, organizationId) {
        return await this._upworkService.getAccessToken(accessTokenDto, organizationId);
    }
    async getWorkDiary(data) {
        const getWorkDiaryDto = JSON.parse(data);
        return await this._upworkService.getWorkDiary(getWorkDiaryDto);
    }
    async getContracts(data) {
        const getContractsDto = JSON.parse(data);
        return await this._upworkService.getContractsForFreelancer(getContractsDto);
    }
    async getConfig(integrationId, data) {
        const { filter } = JSON.parse(data);
        return await this._upworkService.getConfig(integrationId, filter);
    }
    async syncContracts(syncContractsDto) {
        return await this._upworkService.syncContracts(syncContractsDto);
    }
    async syncContractsRelatedData(dto) {
        return await this._upworkService.syncContractsRelatedData(dto);
    }
    async getReports(integrationId, data) {
        const { relations, filter } = JSON.parse(data);
        return await this._upworkService.getReportListByIntegration(integrationId, filter, relations);
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Upload Upwork transaction.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Uploaded transaction'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Freelancer not found'
    }),
    common_1.Post('/transactions'),
    common_1.UseInterceptors(platform_express_1.FileInterceptor('file')),
    tslib_1.__param(0, common_1.UploadedFile()), tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], UpworkController.prototype, "create", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Authorize Upwork.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Authorized Upwork'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Cannot Authorize'
    }),
    common_1.Post('/token-secret-pair/:organizationId'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__param(1, common_1.Param('organizationId')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_b = typeof models_1.IUpworkClientSecretPair !== "undefined" && models_1.IUpworkClientSecretPair) === "function" ? _b : Object, String]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], UpworkController.prototype, "getAccessTokenSecretPair", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get Access Token.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Get Access Token'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid request'
    }),
    common_1.Post('/access-token/:organizationId'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__param(1, common_1.Param('organizationId')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_d = typeof models_1.IAccessTokenDto !== "undefined" && models_1.IAccessTokenDto) === "function" ? _d : Object, String]),
    tslib_1.__metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], UpworkController.prototype, "getAccessToken", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get Work Diary.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Get Work Diary'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid request'
    }),
    common_1.Get('work-diary'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], UpworkController.prototype, "getWorkDiary", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get Contracts.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Get Contracts'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid request'
    }),
    common_1.Get('freelancer-contracts'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], UpworkController.prototype, "getContracts", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Get Config.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Get Config'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid request'
    }),
    common_1.Get('config/:integrationId'),
    tslib_1.__param(0, common_1.Param('integrationId')),
    tslib_1.__param(1, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, String]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], UpworkController.prototype, "getConfig", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Sync Contracts.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Sync Contracts'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid request'
    }),
    common_1.Post('sync-contracts'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], UpworkController.prototype, "syncContracts", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Sync Contracts Related Data.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'Sync Contracts Related Data'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid request'
    }),
    common_1.Post('sync-contracts-related-data'),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_k = typeof Promise !== "undefined" && Promise) === "function" ? _k : Object)
], UpworkController.prototype, "syncContractsRelatedData", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({
        summary: 'Find all expense and income for logged upwork user.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found income & expense',
        type: income_entity_1.Income || expense_entity_1.Expense
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid request'
    }),
    common_1.Get('report/:integrationId'),
    tslib_1.__param(0, common_1.Param('integrationId')),
    tslib_1.__param(1, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, String]),
    tslib_1.__metadata("design:returntype", typeof (_l = typeof Promise !== "undefined" && Promise) === "function" ? _l : Object)
], UpworkController.prototype, "getReports", null);
UpworkController = tslib_1.__decorate([
    swagger_1.ApiTags('Integrations'),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_m = typeof upwork_transaction_service_1.UpworkTransactionService !== "undefined" && upwork_transaction_service_1.UpworkTransactionService) === "function" ? _m : Object, typeof (_o = typeof upwork_service_1.UpworkService !== "undefined" && upwork_service_1.UpworkService) === "function" ? _o : Object])
], UpworkController);
exports.UpworkController = UpworkController;


/***/ }),

/***/ "./src/app/upwork/upwork.module.ts":
/*!*****************************************!*\
  !*** ./src/app/upwork/upwork.module.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UpworkModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const employee_entity_1 = __webpack_require__(/*! ../employee/employee.entity */ "./src/app/employee/employee.entity.ts");
const organization_vendors_entity_1 = __webpack_require__(/*! ../organization-vendors/organization-vendors.entity */ "./src/app/organization-vendors/organization-vendors.entity.ts");
const organization_vendors_service_1 = __webpack_require__(/*! ../organization-vendors/organization-vendors.service */ "./src/app/organization-vendors/organization-vendors.service.ts");
const organization_contact_entity_1 = __webpack_require__(/*! ../organization-contact/organization-contact.entity */ "./src/app/organization-contact/organization-contact.entity.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const expense_category_entity_1 = __webpack_require__(/*! ../expense-categories/expense-category.entity */ "./src/app/expense-categories/expense-category.entity.ts");
const expense_categories_service_1 = __webpack_require__(/*! ../expense-categories/expense-categories.service */ "./src/app/expense-categories/expense-categories.service.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const upwork_transaction_service_1 = __webpack_require__(/*! ./upwork-transaction.service */ "./src/app/upwork/upwork-transaction.service.ts");
const employee_service_1 = __webpack_require__(/*! ../employee/employee.service */ "./src/app/employee/employee.service.ts");
const organization_contact_service_1 = __webpack_require__(/*! ../organization-contact/organization-contact.service */ "./src/app/organization-contact/organization-contact.service.ts");
const upwork_controller_1 = __webpack_require__(/*! ./upwork.controller */ "./src/app/upwork/upwork.controller.ts");
const upwork_service_1 = __webpack_require__(/*! ./upwork.service */ "./src/app/upwork/upwork.service.ts");
const integration_map_entity_1 = __webpack_require__(/*! ../integration-map/integration-map.entity */ "./src/app/integration-map/integration-map.entity.ts");
const integration_map_service_1 = __webpack_require__(/*! ../integration-map/integration-map.service */ "./src/app/integration-map/integration-map.service.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const organization_service_1 = __webpack_require__(/*! ../organization/organization.service */ "./src/app/organization/organization.service.ts");
const role_entity_1 = __webpack_require__(/*! ../role/role.entity */ "./src/app/role/role.entity.ts");
const role_service_1 = __webpack_require__(/*! ../role/role.service */ "./src/app/role/role.service.ts");
const time_slot_service_1 = __webpack_require__(/*! ../timesheet/time-slot/time-slot.service */ "./src/app/timesheet/time-slot/time-slot.service.ts");
const time_slot_entity_1 = __webpack_require__(/*! ../timesheet/time-slot.entity */ "./src/app/timesheet/time-slot.entity.ts");
const time_slot_minute_entity_1 = __webpack_require__(/*! ../timesheet/time-slot-minute.entity */ "./src/app/timesheet/time-slot-minute.entity.ts");
const export_all_module_1 = __webpack_require__(/*! ../export_import/export-all.module */ "./src/app/export_import/export-all.module.ts");
const activity_entity_1 = __webpack_require__(/*! ../timesheet/activity.entity */ "./src/app/timesheet/activity.entity.ts");
const time_log_entity_1 = __webpack_require__(/*! ../timesheet/time-log.entity */ "./src/app/timesheet/time-log.entity.ts");
const integration_upwork_1 = __webpack_require__(/*! @gauzy/integration-upwork */ "./libs/integration-upwork/src/index.ts");
let UpworkModule = class UpworkModule {
};
UpworkModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([
                user_entity_1.User,
                employee_entity_1.Employee,
                organization_vendors_entity_1.OrganizationVendor,
                organization_contact_entity_1.OrganizationContact,
                expense_category_entity_1.ExpenseCategory,
                integration_map_entity_1.IntegrationMap,
                organization_entity_1.Organization,
                role_entity_1.Role,
                time_slot_entity_1.TimeSlot,
                activity_entity_1.Activity,
                time_log_entity_1.TimeLog,
                time_slot_minute_entity_1.TimeSlotMinute
            ]),
            cqrs_1.CqrsModule,
            export_all_module_1.ExportAllModule
        ],
        controllers: [upwork_controller_1.UpworkController],
        providers: [
            integration_upwork_1.UpworkJobService,
            integration_upwork_1.UpworkOffersService,
            upwork_transaction_service_1.UpworkTransactionService,
            upwork_service_1.UpworkService,
            user_service_1.UserService,
            employee_service_1.EmployeeService,
            organization_vendors_service_1.OrganizationVendorsService,
            organization_contact_service_1.OrganizationContactService,
            expense_categories_service_1.ExpenseCategoriesService,
            integration_map_service_1.IntegrationMapService,
            organization_service_1.OrganizationService,
            role_service_1.RoleService,
            time_slot_service_1.TimeSlotService
        ]
    })
], UpworkModule);
exports.UpworkModule = UpworkModule;


/***/ }),

/***/ "./src/app/upwork/upwork.service.ts":
/*!******************************************!*\
  !*** ./src/app/upwork/upwork.service.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpworkService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const UpworkApi = __webpack_require__(/*! upwork-api */ "upwork-api");
const _ = __webpack_require__(/*! underscore */ "underscore");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const commands_1 = __webpack_require__(/*! ../integration-tenant/commands */ "./src/app/integration-tenant/commands/index.ts");
const commands_2 = __webpack_require__(/*! ../integration-setting/commands */ "./src/app/integration-setting/commands/index.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const engagements_js_1 = __webpack_require__(/*! upwork-api/lib/routers/hr/engagements.js */ "upwork-api/lib/routers/hr/engagements.js");
const workdiary_js_1 = __webpack_require__(/*! upwork-api/lib/routers/workdiary.js */ "upwork-api/lib/routers/workdiary.js");
const snapshot_js_1 = __webpack_require__(/*! upwork-api/lib/routers/snapshot.js */ "upwork-api/lib/routers/snapshot.js");
const auth_js_1 = __webpack_require__(/*! upwork-api/lib/routers/auth.js */ "upwork-api/lib/routers/auth.js");
const users_js_1 = __webpack_require__(/*! upwork-api/lib/routers/organization/users.js */ "upwork-api/lib/routers/organization/users.js");
const commands_3 = __webpack_require__(/*! ../integration-map/commands */ "./src/app/integration-map/commands/index.ts");
const commands_4 = __webpack_require__(/*! ../timesheet/commands */ "./src/app/timesheet/commands/index.ts");
const moment = __webpack_require__(/*! moment */ "moment");
const organization_project_create_command_1 = __webpack_require__(/*! ../organization-projects/commands/organization-project.create.command */ "./src/app/organization-projects/commands/organization-project.create.command.ts");
const employee_get_command_1 = __webpack_require__(/*! ../employee/commands/employee.get.command */ "./src/app/employee/commands/employee.get.command.ts");
const commands_5 = __webpack_require__(/*! ../employee/commands */ "./src/app/employee/commands/index.ts");
const integration_map_service_1 = __webpack_require__(/*! ../integration-map/integration-map.service */ "./src/app/integration-map/integration-map.service.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const organization_service_1 = __webpack_require__(/*! ../organization/organization.service */ "./src/app/organization/organization.service.ts");
const organization_vendors_service_1 = __webpack_require__(/*! ../organization-vendors/organization-vendors.service */ "./src/app/organization-vendors/organization-vendors.service.ts");
const role_service_1 = __webpack_require__(/*! ../role/role.service */ "./src/app/role/role.service.ts");
const time_slot_service_1 = __webpack_require__(/*! ../timesheet/time-slot/time-slot.service */ "./src/app/timesheet/time-slot/time-slot.service.ts");
const expense_service_1 = __webpack_require__(/*! ../expense/expense.service */ "./src/app/expense/expense.service.ts");
const expense_categories_service_1 = __webpack_require__(/*! ../expense-categories/expense-categories.service */ "./src/app/expense-categories/expense-categories.service.ts");
const income_service_1 = __webpack_require__(/*! ../income/income.service */ "./src/app/income/income.service.ts");
const organization_contact_service_1 = __webpack_require__(/*! ../organization-contact/organization-contact.service */ "./src/app/organization-contact/organization-contact.service.ts");
const income_create_command_1 = __webpack_require__(/*! ../income/commands/income.create.command */ "./src/app/income/commands/income.create.command.ts");
const expense_create_command_1 = __webpack_require__(/*! ../expense/commands/expense.create.command */ "./src/app/expense/commands/expense.create.command.ts");
const organization_contact_create_command_1 = __webpack_require__(/*! ../organization-contact/commands/organization-contact-create.command */ "./src/app/organization-contact/commands/organization-contact-create.command.ts");
const integration_upwork_1 = __webpack_require__(/*! @gauzy/integration-upwork */ "./libs/integration-upwork/src/index.ts");
const timesheet_first_or_create_command_1 = __webpack_require__(/*! ../timesheet/timesheet/commands/timesheet-first-or-create.command */ "./src/app/timesheet/timesheet/commands/timesheet-first-or-create.command.ts");
const time_log_create_command_1 = __webpack_require__(/*! ../timesheet/time-log/commands/time-log-create.command */ "./src/app/timesheet/time-log/commands/time-log-create.command.ts");
const proposal_create_command_1 = __webpack_require__(/*! ../proposal/commands/proposal-create.command */ "./src/app/proposal/commands/proposal-create.command.ts");
const organization_project_update_command_1 = __webpack_require__(/*! ../organization-projects/commands/organization-project.update.command */ "./src/app/organization-projects/commands/organization-project.update.command.ts");
const create_time_slot_minutes_command_1 = __webpack_require__(/*! ../timesheet/time-slot/commands/create-time-slot-minutes.command */ "./src/app/timesheet/time-slot/commands/create-time-slot-minutes.command.ts");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const environment_2 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
let UpworkService = class UpworkService {
    constructor(_expenseService, _expenseCategoryService, _incomeService, _integrationMapService, _userService, _roleService, _organizationService, _orgVendorService, _orgClientService, _timeSlotService, _upworkReportService, _upworkJobService, _upworkOfferService, commandBus) {
        this._expenseService = _expenseService;
        this._expenseCategoryService = _expenseCategoryService;
        this._incomeService = _incomeService;
        this._integrationMapService = _integrationMapService;
        this._userService = _userService;
        this._roleService = _roleService;
        this._organizationService = _organizationService;
        this._orgVendorService = _orgVendorService;
        this._orgClientService = _orgClientService;
        this._timeSlotService = _timeSlotService;
        this._upworkReportService = _upworkReportService;
        this._upworkJobService = _upworkJobService;
        this._upworkOfferService = _upworkOfferService;
        this.commandBus = commandBus;
    }
    async _consumerHasAccessToken(config, organizationId) {
        const integrationSetting = await this.commandBus.execute(new commands_2.IntegrationSettingGetCommand({
            where: {
                settingsValue: config.consumerKey,
                organizationId: organizationId
            },
            relations: ['integration']
        }));
        if (!integrationSetting) {
            return false;
        }
        const integrationSettings = await this.commandBus.execute(new commands_2.IntegrationSettingGetManyCommand({
            where: {
                integration: integrationSetting.integration,
                organizationId
            }
        }));
        if (!integrationSettings.length) {
            return false;
        }
        const integrationSettingMap = core_1.arrayToObject(integrationSettings, 'settingsName', 'settingsValue');
        if (integrationSettingMap.accessToken &&
            integrationSettingMap.accessTokenSecret) {
            return Object.assign({ integrationId: integrationSetting.integration.id }, integrationSettingMap);
        }
        return false;
    }
    async getAccessTokenSecretPair(config, organizationId) {
        const consumerAccessToken = await this._consumerHasAccessToken(config, organizationId);
        if (consumerAccessToken) {
            console.log('consumerAccessToken already exits and will be reused');
            return consumerAccessToken;
        }
        this._upworkApi = new UpworkApi(config);
        const authUrl = environment_1.environment.upworkConfig.callbackUrl;
        console.log(`Upwork callback URL: ${authUrl}`);
        return new Promise((resolve, reject) => {
            this._upworkApi.getAuthorizationUrl(authUrl, async (error, url, requestToken, requestTokenSecret) => {
                if (error)
                    reject(`can't get authorization url, error: ${error}`);
                await this.commandBus.execute(new commands_1.IntegrationTenantCreateCommand({
                    organizationId,
                    name: models_1.IntegrationEnum.UPWORK,
                    entitySettings: [],
                    settings: [
                        {
                            settingsName: 'consumerKey',
                            settingsValue: config.consumerKey
                        },
                        {
                            settingsName: 'consumerSecret',
                            settingsValue: config.consumerSecret
                        },
                        {
                            settingsName: 'requestToken',
                            settingsValue: requestToken
                        },
                        {
                            settingsName: 'requestTokenSecret',
                            settingsValue: requestTokenSecret
                        }
                    ].map((setting) => {
                        return Object.assign({ organizationId }, setting);
                    })
                }));
                return resolve({
                    url,
                    requestToken,
                    requestTokenSecret,
                    organizationId
                });
            });
        });
    }
    getAccessToken({ requestToken, verifier }, organizationId) {
        return new Promise(async (resolve, reject) => {
            const { integration } = await this.commandBus.execute(new commands_2.IntegrationSettingGetCommand({
                where: {
                    settingsValue: requestToken,
                    organizationId
                },
                relations: ['integration']
            }));
            const integrationSettings = await this.commandBus.execute(new commands_2.IntegrationSettingGetManyCommand({
                where: {
                    integration,
                    organizationId
                }
            }));
            const integrationSetting = core_1.arrayToObject(integrationSettings, 'settingsName', 'settingsValue');
            this._upworkApi.getAccessToken(requestToken, integrationSetting.requestTokenSecret, verifier, async (error, accessToken, accessTokenSecret) => {
                if (error)
                    reject(new Error(error));
                await this.commandBus.execute(new commands_2.IntegrationSettingCreateCommand({
                    integration,
                    settingsName: 'accessToken',
                    settingsValue: accessToken,
                    organizationId
                }));
                await this.commandBus.execute(new commands_2.IntegrationSettingCreateCommand({
                    integration,
                    settingsName: 'accessTokenSecret',
                    settingsValue: accessTokenSecret,
                    organizationId
                }));
                resolve({
                    integrationId: integration.id,
                    accessToken,
                    accessTokenSecret
                });
            });
        });
    }
    async getConfig(integrationId, filter) {
        const { organizationId, tenantId } = filter;
        const integration = await this.commandBus.execute(new commands_1.IntegrationTenantGetCommand({
            where: {
                id: integrationId,
                tenant: {
                    id: tenantId
                },
                organizationId
            }
        }));
        const integrationSettings = await this.commandBus.execute(new commands_2.IntegrationSettingGetManyCommand({
            where: {
                integration,
                organizationId
            }
        }));
        const { accessToken, consumerKey, consumerSecret, accessTokenSecret: accessSecret } = core_1.arrayToObject(integrationSettings, 'settingsName', 'settingsValue');
        return { accessToken, consumerKey, consumerSecret, accessSecret };
    }
    async getContractsForFreelancer(getEngagementsDto) {
        const api = new UpworkApi(getEngagementsDto.config);
        const engagements = new engagements_js_1.Engagements(api);
        const params = {};
        return new Promise((resolve, reject) => {
            api.setAccessToken(getEngagementsDto.config.accessToken, getEngagementsDto.config.accessSecret, () => {
                engagements.getList(params, (error, data) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        const { engagements: { engagement } } = data;
                        resolve(engagement);
                    }
                });
            });
        });
    }
    async _getContractByContractId(config, contractId) {
        const api = new UpworkApi(config);
        const engagements = new engagements_js_1.Engagements(api);
        return new Promise((resolve, reject) => {
            api.setAccessToken(config.accessToken, config.accessSecret, () => {
                engagements.getSpecific(contractId, (error, data) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        const { engagement } = data;
                        resolve(engagement);
                    }
                });
            });
        });
    }
    async syncContracts({ integrationId, organizationId, contracts }) {
        return await Promise.all(await contracts.map(async ({ job__title: name, reference: sourceId, engagement_start_date, engagement_end_date, active_milestone }) => {
            const payload = {
                name,
                organizationId,
                public: true,
                currency: environment_2.environment.defaultCurrency
            };
            if (typeof active_milestone === 'object') {
                payload['billing'] = models_1.ProjectBillingEnum.MILESTONES;
            }
            else {
                payload['billing'] = models_1.ProjectBillingEnum.RATE;
            }
            if (typeof engagement_start_date === 'string' &&
                engagement_start_date.length > 0) {
                payload['startDate'] = new Date(core_1.unixTimestampToDate(engagement_start_date));
            }
            if (typeof engagement_end_date === 'string' &&
                engagement_end_date.length > 0) {
                payload['endDate'] = new Date(core_1.unixTimestampToDate(engagement_end_date));
            }
            const tenantId = context_1.RequestContext.currentTenantId();
            const { record: integrationMap } = await this._integrationMapService.findOneOrFail({
                where: {
                    sourceId,
                    entity: models_1.IntegrationEntity.PROJECT,
                    organizationId,
                    tenantId
                }
            });
            if (integrationMap) {
                await this.commandBus.execute(new organization_project_update_command_1.OrganizationProjectUpdateCommand(Object.assign(payload, {
                    id: integrationMap.gauzyId
                })));
                return integrationMap;
            }
            const project = await this.commandBus.execute(new organization_project_create_command_1.OrganizationProjectCreateCommand(Object.assign({}, payload)));
            return await this.commandBus.execute(new commands_3.IntegrationMapSyncEntityCommand({
                gauzyId: project.id,
                integrationId,
                sourceId,
                entity: models_1.IntegrationEntity.PROJECT,
                organizationId
            }));
        }));
    }
    async getWorkDiary(getWorkDiaryDto) {
        const api = new UpworkApi(getWorkDiaryDto.config);
        const workdiary = new workdiary_js_1.Workdiary(api);
        const params = {
            offset: 0
        };
        return new Promise((resolve, reject) => {
            api.setAccessToken(getWorkDiaryDto.config.accessToken, getWorkDiaryDto.config.accessSecret, () => {
                workdiary.getByContract(getWorkDiaryDto.contractId, moment(getWorkDiaryDto.forDate).format('YYYYMMDD'), params, (err, data) => (err ? reject(err) : resolve(data)));
            });
        });
    }
    async syncTimeLog(timeLog) {
        const organizationId = timeLog.organizationId;
        const timesheet = await this.commandBus.execute(new timesheet_first_or_create_command_1.TimesheetFirstOrCreateCommand(moment(timeLog.startDate).toDate(), timeLog.employeeId, organizationId));
        const gauzyTimeLog = await this.commandBus.execute(new time_log_create_command_1.TimeLogCreateCommand({
            projectId: timeLog.projectId,
            employeeId: timeLog.employeeId,
            logType: timeLog.logType,
            startedAt: timeLog.startDate,
            stoppedAt: moment(timeLog.startedAt)
                .add(timeLog.duration, 'seconds')
                .toDate(),
            timesheetId: timesheet.id,
            source: models_1.TimeLogSourceEnum.UPWORK,
            organizationId
        }));
        await this.commandBus.execute(new commands_3.IntegrationMapSyncEntityCommand({
            gauzyId: gauzyTimeLog.id,
            integrationId: timeLog.integrationId,
            sourceId: timeLog.sourceId,
            entity: models_1.IntegrationEntity.TIME_LOG,
            organizationId
        }));
        return gauzyTimeLog;
    }
    async syncTimeSlots({ timeSlots, employeeId, integrationId, sourceId, organizationId }) {
        var e_1, _a;
        let integratedTimeSlots = [];
        try {
            for (var timeSlots_1 = tslib_1.__asyncValues(timeSlots), timeSlots_1_1; timeSlots_1_1 = await timeSlots_1.next(), !timeSlots_1_1.done;) {
                const timeSlot = timeSlots_1_1.value;
                const multiply = 10;
                const durtion = 600;
                const { keyboard_events_count, mouse_events_count, cell_time, activity } = timeSlot;
                const gauzyTimeSlot = await this.commandBus.execute(new commands_4.TimeSlotCreateCommand({
                    employeeId,
                    startedAt: new Date(moment.unix(cell_time).format('YYYY-MM-DD HH:mm:ss')),
                    keyboard: keyboard_events_count,
                    mouse: mouse_events_count,
                    time_slot: new Date(moment.unix(cell_time).format('YYYY-MM-DD HH:mm:ss')),
                    overall: activity * multiply,
                    duration: durtion,
                    organizationId
                }));
                const integratedSlot = await this.commandBus.execute(new commands_3.IntegrationMapSyncEntityCommand({
                    gauzyId: gauzyTimeSlot.id,
                    integrationId,
                    sourceId,
                    entity: models_1.IntegrationEntity.TIME_SLOT,
                    organizationId
                }));
                integratedTimeSlots = integratedTimeSlots.concat(integratedSlot);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (timeSlots_1_1 && !timeSlots_1_1.done && (_a = timeSlots_1.return)) await _a.call(timeSlots_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return integratedTimeSlots;
    }
    async syncWorkDiaries(organizationId, integrationId, syncedContracts, config, employeeId, forDate) {
        const workDiaries = await Promise.all(syncedContracts.map(async (contract) => {
            const wd = await this.getWorkDiary({
                contractId: contract.sourceId,
                config,
                forDate
            })
                .then((response) => response)
                .catch((error) => error);
            if (wd.hasOwnProperty('statusCode') && wd.statusCode === 404) {
                return wd;
            }
            const cells = wd.data.cells;
            const sourceId = wd.data.contract.record_id;
            if (!cells.length) {
                return [];
            }
            const timeLogDto = Object.assign(Object.assign({}, this.formatLogFromSlots(cells)), { employeeId,
                integrationId,
                organizationId, projectId: contract.gauzyId, startDate: moment
                    .unix(cells[0].cell_time)
                    .format('YYYY-MM-DD HH:mm:ss'), duration: cells.length * 10 * 60, sourceId });
            const timeSlotsDto = {
                timeSlots: cells,
                employeeId,
                integrationId,
                sourceId,
                organizationId
            };
            const integratedTimeLog = await this.syncTimeLog(timeLogDto);
            const integratedTimeSlots = await this.syncTimeSlots(timeSlotsDto);
            const integratedScreenshots = await this.syncSnapshots(timeSlotsDto);
            const timeSlotsActivities = await this.getTimeSlotActivitiesByContractId({
                contractId: sourceId,
                employeeId,
                organizationId,
                config,
                timeSlots: cells
            });
            return {
                integratedTimeLog,
                integratedTimeSlots,
                integratedScreenshots,
                timeSlotsActivities
            };
        }));
        return workDiaries;
    }
    formatLogFromSlots(slots) {
        return slots.reduce((prev, current) => {
            return Object.assign(Object.assign({}, prev), { keyboard: prev.keyboard += +current.keyboard_events_count, mouse: prev.mouse += +current.mouse_events_count, logType: slots.manual
                    ? models_1.TimeLogType.MANUAL
                    : models_1.TimeLogType.TRACKED });
        }, {
            keyboard: 0,
            mouse: 0
        });
    }
    async syncContractsRelatedData({ integrationId, organizationId, contracts, employeeId, config, entitiesToSync, providerRefernceId, providerId }) {
        const syncedContracts = await this.syncContracts({
            contracts,
            integrationId,
            organizationId
        });
        if (!employeeId) {
            const employee = await this._getUpworkGauzyEmployee(providerRefernceId, integrationId, organizationId, config);
            employeeId = employee.gauzyId;
        }
        return await Promise.all(entitiesToSync.map(async (entity) => {
            switch (entity.key) {
                case 'workDiary':
                    return await this.syncWorkDiaries(organizationId, integrationId, syncedContracts, config, employeeId, entity.datePicker.selectedDate);
                case 'report':
                    return await this.syncReports(organizationId, integrationId, config, employeeId, providerRefernceId, providerId, entity.datePicker.selectedDate);
                case 'proposal':
                    return await this.syncProposalsOffers(organizationId, integrationId, config, employeeId);
                default:
                    return;
            }
        }));
    }
    async syncTimeSlotsActivity({ employeeId, organizationId, timeSlot, timeSlotActivity }) {
        try {
            const { minutes } = timeSlotActivity;
            const { cell_time } = timeSlot;
            const integratedTimeSlotsMinutes = await Promise.all(minutes.map(async (minute) => {
                const { record: findTimeSlot } = await this._timeSlotService.findOneOrFail({
                    where: {
                        employeeId: employeeId,
                        startedAt: moment
                            .unix(cell_time)
                            .format('YYYY-MM-DD HH:mm:ss')
                    }
                });
                if (!findTimeSlot) {
                    return;
                }
                const { time, mouse, keyboard } = minute;
                const gauzyTimeSlotMinute = await this.commandBus.execute(new create_time_slot_minutes_command_1.CreateTimeSlotMinutesCommand({
                    mouse,
                    keyboard,
                    datetime: new Date(moment.unix(time).format('YYYY-MM-DD HH:mm:ss')),
                    timeSlot: findTimeSlot,
                    organizationId
                }));
                return gauzyTimeSlotMinute;
            }));
            return integratedTimeSlotsMinutes;
        }
        catch (error) {
            throw new common_1.BadRequestException('Cannot sync timeslot every minute activity');
        }
    }
    async getTimeSlotActivitiesByContractId({ contractId, employeeId, organizationId, config, timeSlots }) {
        const timeSlotActivities = await Promise.all(timeSlots.map(async (timeslot) => {
            const { snapshot: timeSlotActivity } = await this.getSnapshotByContractId(config, contractId, timeslot);
            const integratedTimeSlotActivities = await this.syncTimeSlotsActivity({
                employeeId,
                organizationId,
                timeSlot: timeslot,
                timeSlotActivity
            });
            return {
                integratedTimeSlotActivities
            };
        }));
        return timeSlotActivities;
    }
    async getSnapshotByContractId(config, contractId, timeSlot) {
        const api = new UpworkApi(config);
        const snapshots = new snapshot_js_1.Snapshot(api);
        const { snapshot_time: snapshotTime } = timeSlot;
        return new Promise((resolve, reject) => {
            api.setAccessToken(config.accessToken, config.accessSecret, () => {
                snapshots.getByContract(contractId, snapshotTime, (err, data) => err ? reject(err) : resolve(data));
            });
        });
    }
    async syncSnapshots(timeSlotsData) {
        const { timeSlots = [], employeeId, integrationId, sourceId, organizationId } = timeSlotsData;
        const integrationMaps = await timeSlots.map(async ({ cell_time, screenshot_img, screenshot_img_thmb, snapshot_time }) => {
            const recordedAt = moment
                .unix(snapshot_time)
                .format('YYYY-MM-DD HH:mm:ss');
            const activityTimestamp = moment
                .unix(cell_time)
                .format('YYYY-MM-DD HH:mm:ss');
            const gauzyScreenshot = await this.commandBus.execute(new commands_4.ScreenshotCreateCommand({
                file: screenshot_img,
                thumb: screenshot_img_thmb,
                recordedAt,
                activityTimestamp,
                employeeId,
                organizationId
            }));
            return await this._integrationMapService.create({
                gauzyId: gauzyScreenshot.id,
                integrationId,
                sourceId,
                entity: models_1.IntegrationEntity.SCREENSHOT,
                organizationId
            });
        });
        return await Promise.all(integrationMaps);
    }
    async _getUpworkAuthenticatedUser(config) {
        const api = new UpworkApi(config);
        const users = new users_js_1.Users(api);
        return new Promise((resolve, reject) => {
            api.setAccessToken(config.accessToken, config.accessSecret, () => {
                users.getMyInfo((err, data) => err ? reject(err) : resolve(data));
            });
        });
    }
    async _getUpworkUserInfo(config) {
        const api = new UpworkApi(config);
        const auth = new auth_js_1.Auth(api);
        return new Promise((resolve, reject) => {
            api.setAccessToken(config.accessToken, config.accessSecret, () => {
                auth.getUserInfo((err, data) => err ? reject(err) : resolve(data));
            });
        });
    }
    async _handleEmployee({ integrationId, organizationId, config }) {
        const promises = [];
        promises.push(this._getUpworkAuthenticatedUser(config));
        promises.push(this._getUpworkUserInfo(config));
        return Promise.all(promises).then(async (results) => {
            const { user } = results[0];
            const { info } = results[1];
            user['info'] = info;
            return await this.syncEmployee({
                integrationId,
                user,
                organizationId
            });
        });
    }
    async _getUpworkGauzyEmployee(providerRefernceId, integrationId, organizationId, config) {
        const tenantId = context_1.RequestContext.currentTenantId();
        const { record } = await this._integrationMapService.findOneOrFail({
            where: {
                sourceId: providerRefernceId,
                entity: models_1.IntegrationEntity.EMPLOYEE,
                organizationId,
                tenantId
            }
        });
        return record
            ? record
            : await this._handleEmployee({
                integrationId,
                organizationId,
                config
            });
    }
    async syncEmployee({ integrationId, user, organizationId }) {
        const { reference: userId, email, info } = user;
        const { record } = await this._userService.findOneOrFail({
            where: { email: email }
        });
        const { portrait_100_img: imageUrl } = info;
        let employee;
        if (record) {
            employee = await this.commandBus.execute(new employee_get_command_1.EmployeeGetCommand({ where: { userId: record.id } }));
        }
        else {
            const [role, organization] = await Promise.all([
                await this._roleService.findOne({
                    where: { name: models_1.RolesEnum.EMPLOYEE }
                }),
                await this._organizationService.findOne({
                    where: { id: organizationId }
                })
            ]);
            const { first_name: firstName, last_name: lastName, status } = user;
            const isActive = status === 'active' ? true : false;
            employee = await this.commandBus.execute(new commands_5.EmployeeCreateCommand({
                user: {
                    email,
                    firstName,
                    lastName,
                    role,
                    tags: null,
                    tenant: null,
                    imageUrl
                },
                password: environment_1.environment.defaultHubstaffUserPass,
                organization,
                startedWorkOn: new Date(moment().format('YYYY-MM-DD HH:mm:ss')),
                isActive
            }));
        }
        return await this._integrationMapService.create({
            gauzyId: employee.id,
            integrationId,
            sourceId: userId,
            entity: models_1.IntegrationEntity.EMPLOYEE,
            organizationId
        });
    }
    async syncClient(integrationId, organizationId, client) {
        const { company_id: sourceId, company_name: name } = client;
        const { record } = await this._orgClientService.findOneOrFail({
            where: {
                name,
                organizationId: organizationId
            }
        });
        if (record) {
            return record;
        }
        const gauzyClient = await this.commandBus.execute(new organization_contact_create_command_1.OrganizationContactCreateCommand({
            name,
            organizationId,
            contactType: models_1.ContactType.CLIENT
        }));
        await this._integrationMapService.create({
            gauzyId: gauzyClient.id,
            integrationId,
            sourceId,
            entity: models_1.IntegrationEntity.CLIENT,
            organizationId
        });
        return gauzyClient;
    }
    async syncReports(organizationId, integrationId, config, employeeId, providerRefernceId, providerId, dateRange) {
        try {
            const syncedIncome = await this._syncIncome(organizationId, integrationId, config, employeeId, providerId, dateRange);
            const syncedExpense = await this._syncExpense(organizationId, integrationId, config, employeeId, providerRefernceId, dateRange);
            return {
                syncedIncome,
                syncedExpense
            };
        }
        catch (error) {
            throw new common_1.BadRequestException('Cannot sync reports');
        }
    }
    async _syncExpense(organizationId, integrationId, config, employeeId, providerRefernceId, dateRange) {
        const reports = await this._upworkReportService.getEarningReportByFreelancer(config, providerRefernceId, dateRange);
        const { table: { cols = [] } } = reports;
        let { table: { rows = [] } } = reports;
        const columns = _.pluck(cols, 'label');
        rows = _.map(rows, function (row) {
            const innerRow = _.pluck(row['c'], 'v');
            const ele = {};
            for (let index = 0; index < columns.length; index++) {
                ele[columns[index]] = innerRow[index];
            }
            return ele;
        });
        return await Promise.all(rows
            .filter((row) => row.subtype === models_1.ExpenseCategoriesEnum.SERVICE_FEE)
            .map(async (row) => {
            const { amount, date, description, subtype, reference } = row;
            const { record: category } = await this._expenseCategoryService.findOneOrFail({
                where: {
                    name: models_1.ExpenseCategoriesEnum.SERVICE_FEE,
                    organizationId
                }
            });
            const { record: vendor } = await this._orgVendorService.findOneOrFail({
                where: {
                    name: models_1.OrganizationVendorEnum.UPWORK,
                    organizationId
                }
            });
            const { record: integrationMap } = await this._integrationMapService.findOneOrFail({
                where: {
                    integrationId,
                    sourceId: reference,
                    entity: models_1.IntegrationEntity.EXPENSE,
                    organizationId
                }
            });
            if (integrationMap) {
                return integrationMap;
            }
            const gauzyExpense = await this.commandBus.execute(new expense_create_command_1.ExpenseCreateCommand({
                employeeId,
                organizationId,
                amount,
                category,
                valueDate: new Date(moment(date).format('YYYY-MM-DD HH:mm:ss')),
                vendor,
                reference,
                notes: description,
                typeOfExpense: subtype,
                currency: environment_2.environment.defaultCurrency
            }));
            return await this._integrationMapService.create({
                gauzyId: gauzyExpense.id,
                integrationId,
                sourceId: reference,
                entity: models_1.IntegrationEntity.EXPENSE,
                organizationId
            });
        }));
    }
    async _syncIncome(organizationId, integrationId, config, employeeId, providerId, dateRange) {
        var e_2, _a;
        const reports = await this._upworkReportService.getFullReportByFreelancer(config, providerId, dateRange);
        const { table: { cols = [] } } = reports;
        let { table: { rows = [] } } = reports;
        const columns = _.pluck(cols, 'label');
        rows = _.map(rows, function (row) {
            const innerRow = _.pluck(row['c'], 'v');
            const ele = {};
            for (let index = 0; index < columns.length; index++) {
                ele[columns[index]] = innerRow[index];
            }
            return ele;
        });
        let integratedIncomes = [];
        try {
            for (var rows_1 = tslib_1.__asyncValues(rows), rows_1_1; rows_1_1 = await rows_1.next(), !rows_1_1.done;) {
                const row = rows_1_1.value;
                const { company_id: clientId, company_name: clientName, memo: notes, worked_on, assignment_rate, hours, assignment_ref: contractId } = row;
                await this.syncClient(integrationId, organizationId, row);
                const { record: income } = await this._incomeService.findOneOrFail({
                    where: {
                        employeeId,
                        clientId,
                        reference: contractId,
                        valueDate: new Date(moment(worked_on).format('YYYY-MM-DD HH:mm:ss')),
                        organizationId
                    }
                });
                let integratedIncome;
                if (income) {
                    const findIntegration = await this._integrationMapService.findOneOrFail({
                        where: {
                            gauzyId: income.id,
                            integrationId,
                            entity: models_1.IntegrationEntity.INCOME,
                            organizationId
                        }
                    });
                    integratedIncome = findIntegration.record;
                }
                else {
                    const amount = parseFloat((parseFloat(hours) * parseFloat(assignment_rate)).toFixed(2));
                    const gauzyIncome = await this.commandBus.execute(new income_create_command_1.IncomeCreateCommand({
                        employeeId,
                        organizationId,
                        clientName,
                        clientId,
                        amount,
                        valueDate: new Date(moment(worked_on).format('YYYY-MM-DD HH:mm:ss')),
                        notes,
                        tags: [],
                        reference: contractId,
                        currency: environment_2.environment.defaultCurrency
                    }));
                    integratedIncome = await this._integrationMapService.create({
                        gauzyId: gauzyIncome.id,
                        integrationId,
                        sourceId: contractId,
                        entity: models_1.IntegrationEntity.INCOME,
                        organizationId
                    });
                }
                integratedIncomes = integratedIncomes.concat(integratedIncome);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (rows_1_1 && !rows_1_1.done && (_a = rows_1.return)) await _a.call(rows_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return integratedIncomes;
    }
    async getReportListByIntegration(integrationId, filter, relations) {
        const { organizationId, tenantId } = filter;
        const { items, total } = await this._integrationMapService.findAll({
            where: {
                integration: {
                    id: integrationId
                },
                entity: typeorm_1.In([
                    models_1.IntegrationEntity.INCOME,
                    models_1.IntegrationEntity.EXPENSE
                ]),
                organizationId,
                tenantId
            }
        });
        const reports = {
            items: [],
            total
        };
        if (items.length === 0) {
            return reports;
        }
        const gauzyIds = _.pluck(items, 'gauzyId');
        const { dateRange: { start, end } } = filter;
        const whereClause = {
            id: typeorm_1.In(gauzyIds),
            valueDate: typeorm_1.Between(moment(start).format('YYYY-MM-DD hh:mm:ss'), moment(end).format('YYYY-MM-DD hh:mm:ss')),
            organizationId,
            tenantId
        };
        const income = await this._incomeService.findAll({
            where: whereClause,
            relations: relations.income
        });
        const expense = await this._expenseService.findAll({
            where: whereClause,
            relations: relations.expense
        });
        reports.total = income.total + expense.total;
        reports.items = reports.items.concat(income.items);
        reports.items = reports.items.concat(expense.items);
        reports.items = _.sortBy(reports.items, function (item) {
            return item.valueDate;
        }).reverse();
        return reports;
    }
    async syncProposalsOffers(organizationId, integrationId, config, employeeId) {
        const proposals = await this._getProposals(config);
        const offers = await this._getOffers(config);
        const syncedOffers = await this._syncOffers(config, offers, organizationId, integrationId, employeeId);
        const syncedProposals = await this._syncProposals(config, proposals, organizationId, integrationId, employeeId);
        return {
            syncedOffers,
            syncedProposals
        };
    }
    async _getProposals(config) {
        try {
            const promises = [];
            for (const status in models_1.IUpworkProposalStatusEnum) {
                if (isNaN(Number(status))) {
                    promises.push(this._upworkOfferService
                        .getProposalLisByFreelancer(config, models_1.IUpworkProposalStatusEnum[status])
                        .then((response) => response)
                        .catch((error) => error));
                }
            }
            return Promise.all(promises).then(async (results) => {
                return results;
            });
        }
        catch (error) {
            throw new common_1.BadRequestException('Cannot sync proposals');
        }
    }
    async _getOffers(config) {
        try {
            const promises = [];
            for (const status in models_1.IUpworkOfferStatusEnum) {
                if (isNaN(Number(status))) {
                    promises.push(this._upworkOfferService
                        .getOffersListByFreelancer(config, models_1.IUpworkOfferStatusEnum[status])
                        .then((response) => response)
                        .catch((error) => error));
                }
            }
            return Promise.all(promises).then(async (results) => {
                return results;
            });
        }
        catch (error) {
            throw new common_1.BadRequestException('Cannot sync offers');
        }
    }
    async _syncOffers(config, offers, organizationId, integrationId, employeeId) {
        return await Promise.all(offers
            .filter((row) => row['offers'] && row['offers'].hasOwnProperty('offer'))
            .map((row) => row['offers'])
            .map(async (row) => {
            var e_3, _a;
            const { offer: items } = row;
            let integratedOffers = [];
            try {
                for (var items_1 = tslib_1.__asyncValues(items), items_1_1; items_1_1 = await items_1.next(), !items_1_1.done;) {
                    const item = items_1_1.value;
                    const { title: proposalContent, terms_data, last_event_state, job_posting_ref, rid: sourceId } = item;
                    let { title: jobPostContent } = item;
                    const job = await this._upworkJobService
                        .getJobProfileByKey(config, job_posting_ref)
                        .then((response) => response)
                        .catch((error) => error);
                    if (job.statusCode !== 400) {
                        const { profile } = job;
                        jobPostContent = profile['op_description'];
                    }
                    const tenantId = context_1.RequestContext.currentTenantId();
                    const integrationMap = await this._integrationMapService.findOneOrFail({
                        where: {
                            sourceId,
                            entity: models_1.IntegrationEntity.PROPOSAL,
                            organizationId,
                            tenantId
                        }
                    });
                    let integratedOffer;
                    if (integrationMap &&
                        integrationMap['success'] === true) {
                        integratedOffer = integrationMap.record;
                    }
                    else {
                        const gauzyOffer = await this.commandBus.execute(new proposal_create_command_1.ProposalCreateCommand({
                            employeeId,
                            organizationId,
                            valueDate: new Date(core_1.unixTimestampToDate(terms_data.start_date)),
                            status: last_event_state
                                .trim()
                                .toUpperCase(),
                            proposalContent,
                            jobPostContent,
                            jobPostUrl: job_posting_ref
                        }));
                        integratedOffer = await this._integrationMapService.create({
                            gauzyId: gauzyOffer.id,
                            integrationId,
                            sourceId,
                            entity: models_1.IntegrationEntity.PROPOSAL,
                            organizationId
                        });
                    }
                    integratedOffers = integratedOffers.concat(integratedOffer);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (items_1_1 && !items_1_1.done && (_a = items_1.return)) await _a.call(items_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return integratedOffers;
        }));
    }
    async _syncProposals(config, proposals, organizationId, integrationId, employeeId) {
        return await Promise.all(proposals
            .filter((row) => row['data'] &&
            row['data'].hasOwnProperty('applications'))
            .map((row) => row.data.applications)
            .map(async (row) => row));
    }
};
UpworkService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof expense_service_1.ExpenseService !== "undefined" && expense_service_1.ExpenseService) === "function" ? _a : Object, typeof (_b = typeof expense_categories_service_1.ExpenseCategoriesService !== "undefined" && expense_categories_service_1.ExpenseCategoriesService) === "function" ? _b : Object, typeof (_c = typeof income_service_1.IncomeService !== "undefined" && income_service_1.IncomeService) === "function" ? _c : Object, typeof (_d = typeof integration_map_service_1.IntegrationMapService !== "undefined" && integration_map_service_1.IntegrationMapService) === "function" ? _d : Object, typeof (_e = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" ? _e : Object, typeof (_f = typeof role_service_1.RoleService !== "undefined" && role_service_1.RoleService) === "function" ? _f : Object, typeof (_g = typeof organization_service_1.OrganizationService !== "undefined" && organization_service_1.OrganizationService) === "function" ? _g : Object, typeof (_h = typeof organization_vendors_service_1.OrganizationVendorsService !== "undefined" && organization_vendors_service_1.OrganizationVendorsService) === "function" ? _h : Object, typeof (_j = typeof organization_contact_service_1.OrganizationContactService !== "undefined" && organization_contact_service_1.OrganizationContactService) === "function" ? _j : Object, typeof (_k = typeof time_slot_service_1.TimeSlotService !== "undefined" && time_slot_service_1.TimeSlotService) === "function" ? _k : Object, typeof (_l = typeof integration_upwork_1.UpworkReportService !== "undefined" && integration_upwork_1.UpworkReportService) === "function" ? _l : Object, typeof (_m = typeof integration_upwork_1.UpworkJobService !== "undefined" && integration_upwork_1.UpworkJobService) === "function" ? _m : Object, typeof (_o = typeof integration_upwork_1.UpworkOffersService !== "undefined" && integration_upwork_1.UpworkOffersService) === "function" ? _o : Object, typeof (_p = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _p : Object])
], UpworkService);
exports.UpworkService = UpworkService;


/***/ }),

/***/ "./src/app/user-organization/commands/handlers/user-organization.delete.handler.ts":
/*!*****************************************************************************************!*\
  !*** ./src/app/user-organization/commands/handlers/user-organization.delete.handler.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserOrganizationDeleteHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const user_organization_delete_command_1 = __webpack_require__(/*! ../user-organization.delete.command */ "./src/app/user-organization/commands/user-organization.delete.command.ts");
const user_service_1 = __webpack_require__(/*! ../../../user/user.service */ "./src/app/user/user.service.ts");
const user_organization_services_1 = __webpack_require__(/*! ../../user-organization.services */ "./src/app/user-organization/user-organization.services.ts");
const role_service_1 = __webpack_require__(/*! ../../../role/role.service */ "./src/app/role/role.service.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const nestjs_i18n_1 = __webpack_require__(/*! nestjs-i18n */ "nestjs-i18n");
let UserOrganizationDeleteHandler = class UserOrganizationDeleteHandler {
    constructor(userOrganizationService, userService, roleService, i18n) {
        this.userOrganizationService = userOrganizationService;
        this.userService = userService;
        this.roleService = roleService;
        this.i18n = i18n;
    }
    async execute(command) {
        const { input } = command;
        const { user: { role: { name: roleName } }, userId } = await this.userOrganizationService.findOne(input.userOrganizationId, { relations: ['user', 'user.role'] });
        if (roleName === models_1.RolesEnum.SUPER_ADMIN)
            return this._removeSuperAdmin(input.requestingUser, userId, input.language);
        return this._removeUserFromOrganization(userId, input.userOrganizationId);
    }
    async _removeUserFromOrganization(userId, userOrganizationId) {
        const { total } = await this.userOrganizationService.findAll({
            where: { userId }
        });
        return total === 1
            ? this.userService.delete(userId)
            : this.userOrganizationService.delete(userOrganizationId);
    }
    async _removeSuperAdmin(requestingUser, userId, language) {
        const { name: requestingUserRoleName } = await this.roleService.findOne(requestingUser.roleId);
        if (requestingUserRoleName !== models_1.RolesEnum.SUPER_ADMIN)
            throw new common_1.UnauthorizedException('Only Super Admin user can delete Super Admin users');
        const { total } = await this.userService.findAll({
            where: {
                role: { id: requestingUser.roleId },
                tenant: { id: requestingUser.tenantId }
            },
            relations: ['role', 'tenant']
        });
        if (total === 1)
            throw new common_1.BadRequestException(await this.i18n.translate('USER_ORGANIZATION.CANNOT_DELETE_ALL_SUPER_ADMINS', {
                lang: language,
                args: { count: 1 }
            }));
        return this.userService.delete(userId);
    }
};
UserOrganizationDeleteHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(user_organization_delete_command_1.UserOrganizationDeleteCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof user_organization_services_1.UserOrganizationService !== "undefined" && user_organization_services_1.UserOrganizationService) === "function" ? _a : Object, typeof (_b = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" ? _b : Object, typeof (_c = typeof role_service_1.RoleService !== "undefined" && role_service_1.RoleService) === "function" ? _c : Object, typeof (_d = typeof nestjs_i18n_1.I18nService !== "undefined" && nestjs_i18n_1.I18nService) === "function" ? _d : Object])
], UserOrganizationDeleteHandler);
exports.UserOrganizationDeleteHandler = UserOrganizationDeleteHandler;


/***/ }),

/***/ "./src/app/user-organization/commands/index.ts":
/*!*****************************************************!*\
  !*** ./src/app/user-organization/commands/index.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const user_organization_delete_handler_1 = __webpack_require__(/*! ./handlers/user-organization.delete.handler */ "./src/app/user-organization/commands/handlers/user-organization.delete.handler.ts");
exports.CommandHandlers = [user_organization_delete_handler_1.UserOrganizationDeleteHandler];


/***/ }),

/***/ "./src/app/user-organization/commands/user-organization.delete.command.ts":
/*!********************************************************************************!*\
  !*** ./src/app/user-organization/commands/user-organization.delete.command.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UserOrganizationDeleteCommand = void 0;
class UserOrganizationDeleteCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.UserOrganizationDeleteCommand = UserOrganizationDeleteCommand;
UserOrganizationDeleteCommand.type = '[UserOrganization] Delete';


/***/ }),

/***/ "./src/app/user-organization/user-organization.controller.ts":
/*!*******************************************************************!*\
  !*** ./src/app/user-organization/user-organization.controller.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserOrganizationController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const user_organization_services_1 = __webpack_require__(/*! ./user-organization.services */ "./src/app/user-organization/user-organization.services.ts");
const user_organization_entity_1 = __webpack_require__(/*! ./user-organization.entity */ "./src/app/user-organization/user-organization.entity.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const user_organization_delete_command_1 = __webpack_require__(/*! ./commands/user-organization.delete.command */ "./src/app/user-organization/commands/user-organization.delete.command.ts");
const nestjs_i18n_1 = __webpack_require__(/*! nestjs-i18n */ "nestjs-i18n");
const parse_json_pipe_1 = __webpack_require__(/*! ../shared/pipes/parse-json.pipe */ "./src/app/shared/pipes/parse-json.pipe.ts");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let UserOrganizationController = class UserOrganizationController extends crud_controller_1.CrudController {
    constructor(userOrganizationService, commandBus) {
        super(userOrganizationService);
        this.userOrganizationService = userOrganizationService;
        this.commandBus = commandBus;
    }
    async findAllEmployees(data) {
        const { relations, findInput } = data;
        return this.userOrganizationService.findAll({
            where: findInput,
            relations
        });
    }
    async delete(id, request, language) {
        return this.commandBus.execute(new user_organization_delete_command_1.UserOrganizationDeleteCommand({
            userOrganizationId: id,
            requestingUser: request.user,
            language
        }));
    }
    async findOrganizationCount(id) {
        const { userId } = await this.findById(id);
        const { total } = await this.userOrganizationService.findAll({
            where: {
                userId,
                isActive: true,
                user: {
                    role: { name: typeorm_1.Not(models_1.RolesEnum.EMPLOYEE) }
                }
            },
            relations: ['user', 'user.role']
        });
        return total;
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all UserOrganizations.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found UserOrganizations',
        type: user_organization_entity_1.UserOrganization
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', parse_json_pipe_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], UserOrganizationController.prototype, "findAllEmployees", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Delete user from organization' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NO_CONTENT,
        description: 'The user has been successfully deleted'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.Delete(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Req()),
    tslib_1.__param(2, nestjs_i18n_1.I18nLang()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object, typeof (_b = typeof models_1.LanguagesEnum !== "undefined" && models_1.LanguagesEnum) === "function" ? _b : Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], UserOrganizationController.prototype, "delete", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find number of Organizations user belongs to' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Count of Organizations given user belongs to',
        type: Number
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], UserOrganizationController.prototype, "findOrganizationCount", null);
UserOrganizationController = tslib_1.__decorate([
    swagger_1.ApiTags('UserOrganization'),
    common_1.UseGuards(passport_1.AuthGuard('jwt'), tenant_permission_guard_1.TenantPermissionGuard),
    common_1.Controller(),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof user_organization_services_1.UserOrganizationService !== "undefined" && user_organization_services_1.UserOrganizationService) === "function" ? _e : Object, typeof (_f = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _f : Object])
], UserOrganizationController);
exports.UserOrganizationController = UserOrganizationController;


/***/ }),

/***/ "./src/app/user-organization/user-organization.entity.ts":
/*!***************************************************************!*\
  !*** ./src/app/user-organization/user-organization.entity.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserOrganization = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const tenant_organization_base_1 = __webpack_require__(/*! ../core/entities/tenant-organization-base */ "./src/app/core/entities/tenant-organization-base.ts");
let UserOrganization = class UserOrganization extends tenant_organization_base_1.TenantOrganizationBase {
};
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: user_entity_1.User }),
    typeorm_1.ManyToOne((type) => user_entity_1.User, { nullable: true, onDelete: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_a = typeof user_entity_1.User !== "undefined" && user_entity_1.User) === "function" ? _a : Object)
], UserOrganization.prototype, "user", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index(),
    typeorm_1.Column(),
    typeorm_1.RelationId((userOrganization) => userOrganization.user),
    tslib_1.__metadata("design:type", String)
], UserOrganization.prototype, "userId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean, default: true }),
    typeorm_1.Index(),
    typeorm_1.Column({ default: true }),
    tslib_1.__metadata("design:type", Boolean)
], UserOrganization.prototype, "isDefault", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: Boolean, default: true }),
    typeorm_1.Index(),
    typeorm_1.Column({ default: true }),
    tslib_1.__metadata("design:type", Boolean)
], UserOrganization.prototype, "isActive", void 0);
UserOrganization = tslib_1.__decorate([
    typeorm_1.Entity('user_organization')
], UserOrganization);
exports.UserOrganization = UserOrganization;


/***/ }),

/***/ "./src/app/user-organization/user-organization.module.ts":
/*!***************************************************************!*\
  !*** ./src/app/user-organization/user-organization.module.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UserOrganizationModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const user_organization_services_1 = __webpack_require__(/*! ./user-organization.services */ "./src/app/user-organization/user-organization.services.ts");
const user_organization_controller_1 = __webpack_require__(/*! ./user-organization.controller */ "./src/app/user-organization/user-organization.controller.ts");
const user_organization_entity_1 = __webpack_require__(/*! ./user-organization.entity */ "./src/app/user-organization/user-organization.entity.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
const user_entity_1 = __webpack_require__(/*! ../user/user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ../user/user.service */ "./src/app/user/user.service.ts");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/user-organization/commands/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const role_entity_1 = __webpack_require__(/*! ../role/role.entity */ "./src/app/role/role.entity.ts");
const role_service_1 = __webpack_require__(/*! ../role/role.service */ "./src/app/role/role.service.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let UserOrganizationModule = class UserOrganizationModule {
};
UserOrganizationModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            common_1.forwardRef(() => typeorm_1.TypeOrmModule.forFeature([
                user_organization_entity_1.UserOrganization,
                organization_entity_1.Organization,
                user_entity_1.User,
                role_entity_1.Role
            ])),
            shared_1.SharedModule,
            cqrs_1.CqrsModule,
            tenant_module_1.TenantModule
        ],
        controllers: [user_organization_controller_1.UserOrganizationController],
        providers: [
            user_organization_services_1.UserOrganizationService,
            user_service_1.UserService,
            role_service_1.RoleService,
            ...commands_1.CommandHandlers
        ],
        exports: [user_organization_services_1.UserOrganizationService]
    })
], UserOrganizationModule);
exports.UserOrganizationModule = UserOrganizationModule;


/***/ }),

/***/ "./src/app/user-organization/user-organization.seed.ts":
/*!*************************************************************!*\
  !*** ./src/app/user-organization/user-organization.seed.ts ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomUsersOrganizations = exports.createDefaultUsersOrganizations = void 0;
const user_organization_entity_1 = __webpack_require__(/*! ./user-organization.entity */ "./src/app/user-organization/user-organization.entity.ts");
exports.createDefaultUsersOrganizations = async (connection, defaultData) => {
    let userOrganization;
    const usersOrganizations = [];
    const defaultUsers = defaultData.users;
    const defaultOrgs = defaultData.organizations;
    defaultOrgs.forEach((org) => {
        for (const user of defaultUsers) {
            userOrganization = new user_organization_entity_1.UserOrganization();
            userOrganization.organizationId = org.id;
            userOrganization.tenant = org.tenant;
            userOrganization.userId = user.id;
            usersOrganizations.push(userOrganization);
        }
    });
    return await insertUserOrganization(connection, usersOrganizations);
};
exports.createRandomUsersOrganizations = async (connection, tenants, tenantOrganizationsMap, tenantSuperAdminsMap, tenantUsersMap, employeesPerOrganization) => {
    const usersOrganizations = [];
    for (const tenant of tenants) {
        const orgs = tenantOrganizationsMap.get(tenant);
        const superAdmins = tenantSuperAdminsMap.get(tenant);
        const { adminUsers, employeeUsers } = tenantUsersMap.get(tenant);
        let start = 0;
        let end = employeesPerOrganization;
        let count = 0;
        orgs.forEach((org) => {
            const userList = [
                ...employeeUsers.slice(start, end),
                adminUsers[count % adminUsers.length],
                ...superAdmins
            ];
            start = end;
            end = end + employeesPerOrganization;
            count++;
            userList.forEach(async (user) => {
                if (user.id) {
                    const userOrganization = new user_organization_entity_1.UserOrganization();
                    userOrganization.organizationId = org.id;
                    userOrganization.userId = user.id;
                    userOrganization.tenant = org.tenant;
                    usersOrganizations.push(userOrganization);
                }
            });
        });
    }
    return await insertUserOrganization(connection, usersOrganizations);
};
const insertUserOrganization = async (connection, userOrganizations) => {
    return await connection.manager.save(userOrganizations);
};


/***/ }),

/***/ "./src/app/user-organization/user-organization.services.ts":
/*!*****************************************************************!*\
  !*** ./src/app/user-organization/user-organization.services.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserOrganizationService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
const user_organization_entity_1 = __webpack_require__(/*! ./user-organization.entity */ "./src/app/user-organization/user-organization.entity.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const organization_entity_1 = __webpack_require__(/*! ../organization/organization.entity */ "./src/app/organization/organization.entity.ts");
let UserOrganizationService = class UserOrganizationService extends crud_service_1.CrudService {
    constructor(userOrganizationRepository, organizationRepository) {
        super(userOrganizationRepository);
        this.userOrganizationRepository = userOrganizationRepository;
        this.organizationRepository = organizationRepository;
    }
    async addUserToOrganization(user, organizationId) {
        const roleName = user.role.name;
        if (roleName === models_1.RolesEnum.SUPER_ADMIN)
            return this._addUserToAllOrganizations(user.id, user.tenant.id);
        const entity = new user_organization_entity_1.UserOrganization();
        entity.organizationId = organizationId;
        entity.tenantId = user.tenantId;
        entity.userId = user.id;
        return this.create(entity);
    }
    async _addUserToAllOrganizations(userId, tenantId) {
        const organizations = await this.organizationRepository.find({
            select: ['id'],
            where: { tenant: { id: tenantId } },
            relations: ['tenant']
        });
        const entities = [];
        organizations.forEach((organization) => {
            const entity = new user_organization_entity_1.UserOrganization();
            entity.organizationId = organization.id;
            entity.tenantId = tenantId;
            entity.userId = userId;
            entities.push(entity);
        });
        return this.repository.save(entities);
    }
};
UserOrganizationService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(user_organization_entity_1.UserOrganization)),
    tslib_1.__param(1, typeorm_1.InjectRepository(organization_entity_1.Organization)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], UserOrganizationService);
exports.UserOrganizationService = UserOrganizationService;


/***/ }),

/***/ "./src/app/user/commands/handlers/index.ts":
/*!*************************************************!*\
  !*** ./src/app/user/commands/handlers/index.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandHandlers = void 0;
const user_create_handler_1 = __webpack_require__(/*! ./user.create.handler */ "./src/app/user/commands/handlers/user.create.handler.ts");
exports.CommandHandlers = [user_create_handler_1.UserCreateHandler];


/***/ }),

/***/ "./src/app/user/commands/handlers/user.create.handler.ts":
/*!***************************************************************!*\
  !*** ./src/app/user/commands/handlers/user.create.handler.ts ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserCreateHandler = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const user_create_command_1 = __webpack_require__(/*! ../user.create.command */ "./src/app/user/commands/user.create.command.ts");
const user_service_1 = __webpack_require__(/*! ../../user.service */ "./src/app/user/user.service.ts");
let UserCreateHandler = class UserCreateHandler {
    constructor(userService) {
        this.userService = userService;
    }
    async execute(command) {
        const { input } = command;
        return await this.userService.create(input);
    }
};
UserCreateHandler = tslib_1.__decorate([
    cqrs_1.CommandHandler(user_create_command_1.UserCreateCommand),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" ? _a : Object])
], UserCreateHandler);
exports.UserCreateHandler = UserCreateHandler;


/***/ }),

/***/ "./src/app/user/commands/index.ts":
/*!****************************************!*\
  !*** ./src/app/user/commands/index.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UserCreateCommand = void 0;
var user_create_command_1 = __webpack_require__(/*! ./user.create.command */ "./src/app/user/commands/user.create.command.ts");
Object.defineProperty(exports, "UserCreateCommand", { enumerable: true, get: function () { return user_create_command_1.UserCreateCommand; } });


/***/ }),

/***/ "./src/app/user/commands/user.create.command.ts":
/*!******************************************************!*\
  !*** ./src/app/user/commands/user.create.command.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UserCreateCommand = void 0;
class UserCreateCommand {
    constructor(input) {
        this.input = input;
    }
}
exports.UserCreateCommand = UserCreateCommand;
UserCreateCommand.type = '[User] Register';


/***/ }),

/***/ "./src/app/user/default-users.ts":
/*!***************************************!*\
  !*** ./src/app/user/default-users.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_ADMINS = exports.DEFAULT_SUPER_ADMINS = void 0;
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
exports.DEFAULT_SUPER_ADMINS = [
    {
        email: 'admin@ever.co',
        password: 'admin',
        firstName: 'Admin',
        lastName: 'Super',
        imageUrl: 'assets/images/avatars/ruslan.jpg',
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    }
];
exports.DEFAULT_ADMINS = [
    {
        email: 'local.admin@ever.co',
        password: 'admin',
        firstName: 'Admin',
        lastName: 'Local',
        imageUrl: 'assets/images/avatars/ruslan.jpg',
        preferredLanguage: models_1.LanguagesEnum.ENGLISH
    }
];


/***/ }),

/***/ "./src/app/user/user.controller.ts":
/*!*****************************************!*\
  !*** ./src/app/user/user.controller.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserController = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const crud_controller_1 = __webpack_require__(/*! ../core/crud/crud.controller */ "./src/app/core/crud/crud.controller.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const user_entity_1 = __webpack_require__(/*! ./user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ./user.service */ "./src/app/user/user.service.ts");
const permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/permission.guard */ "./src/app/shared/guards/auth/permission.guard.ts");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const permissions_1 = __webpack_require__(/*! ../shared/decorators/permissions */ "./src/app/shared/decorators/permissions.ts");
const context_1 = __webpack_require__(/*! ../core/context */ "./src/app/core/context/index.ts");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const commands_1 = __webpack_require__(/*! ./commands */ "./src/app/user/commands/index.ts");
const models_2 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");
const tenant_permission_guard_1 = __webpack_require__(/*! ../shared/guards/auth/tenant-permission.guard */ "./src/app/shared/guards/auth/tenant-permission.guard.ts");
let UserController = class UserController extends crud_controller_1.CrudController {
    constructor(userService, commandBus) {
        super(userService);
        this.userService = userService;
        this.commandBus = commandBus;
    }
    async findCurrentUser(data) {
        const { relations } = JSON.parse(data);
        const currentUserId = context_1.RequestContext.currentUser().id;
        return this.userService.findOne(currentUserId, {
            relations
        });
    }
    async findByEmail(email) {
        return this.userService.getUserByEmail(email);
    }
    async findById(id, data) {
        const { relations } = data;
        return this.userService.findOne(id, { relations });
    }
    async findAllUsers(data) {
        const { relations, findInput } = data;
        return this.userService.findAll({
            where: findInput,
            relations
        });
    }
    async create(entity, ...options) {
        return this.commandBus.execute(new commands_1.UserCreateCommand(entity));
    }
    async update(id, entity, ...options) {
        return this.userService.updateProfile(id, Object.assign({ id }, entity));
    }
};
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find current user.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found current user',
        type: user_entity_1.User
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('/me'),
    tslib_1.__param(0, common_1.Query('data')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], UserController.prototype, "findCurrentUser", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find user by email address.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found user by email address',
        type: user_entity_1.User
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get('/email/:email'),
    tslib_1.__param(0, common_1.Param('email')),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String]),
    tslib_1.__metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], UserController.prototype, "findByEmail", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find User by id.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found one record',
        type: user_entity_1.User
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.Get(':id'),
    tslib_1.__param(0, common_1.Param('id', shared_1.UUIDValidationPipe)),
    tslib_1.__param(1, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, Object]),
    tslib_1.__metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], UserController.prototype, "findById", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Find all users.' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.OK,
        description: 'Found users',
        type: user_entity_1.User
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Record not found'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_USERS_VIEW),
    common_1.Get(),
    tslib_1.__param(0, common_1.Query('data', shared_1.ParseJsonPipe)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], UserController.prototype, "findAllUsers", null);
tslib_1.__decorate([
    swagger_1.ApiOperation({ summary: 'Create new record' }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.CREATED,
        description: 'The record has been successfully created.'
    }),
    swagger_1.ApiResponse({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Invalid input, The response body may contain clues as to what went wrong'
    }),
    common_1.UseGuards(permission_guard_1.PermissionGuard),
    common_1.UseGuards(tenant_permission_guard_1.TenantPermissionGuard, permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_USERS_EDIT),
    common_1.HttpCode(common_1.HttpStatus.CREATED),
    common_1.Post(),
    tslib_1.__param(0, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [typeof (_e = typeof models_2.IUserCreateInput !== "undefined" && models_2.IUserCreateInput) === "function" ? _e : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], UserController.prototype, "create", null);
tslib_1.__decorate([
    common_1.HttpCode(common_1.HttpStatus.ACCEPTED),
    common_1.UseGuards(tenant_permission_guard_1.TenantPermissionGuard, permission_guard_1.PermissionGuard),
    permissions_1.Permissions(models_1.PermissionsEnum.ORG_USERS_EDIT),
    common_1.Put(':id'),
    tslib_1.__param(0, common_1.Param('id')),
    tslib_1.__param(1, common_1.Body()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [String, typeof (_g = typeof models_2.IUserUpdateInput !== "undefined" && models_2.IUserUpdateInput) === "function" ? _g : Object, Object]),
    tslib_1.__metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], UserController.prototype, "update", null);
UserController = tslib_1.__decorate([
    swagger_1.ApiTags('User'),
    swagger_1.ApiBearerAuth(),
    common_1.Controller(),
    common_1.UseGuards(passport_1.AuthGuard('jwt')),
    tslib_1.__metadata("design:paramtypes", [typeof (_j = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" ? _j : Object, typeof (_k = typeof cqrs_1.CommandBus !== "undefined" && cqrs_1.CommandBus) === "function" ? _k : Object])
], UserController);
exports.UserController = UserController;


/***/ }),

/***/ "./src/app/user/user.entity.ts":
/*!*************************************!*\
  !*** ./src/app/user/user.entity.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");
const typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");
const role_entity_1 = __webpack_require__(/*! ../role/role.entity */ "./src/app/role/role.entity.ts");
const tag_entity_1 = __webpack_require__(/*! ../tags/tag.entity */ "./src/app/tags/tag.entity.ts");
const tenant_base_1 = __webpack_require__(/*! ../core/entities/tenant-base */ "./src/app/core/entities/tenant-base.ts");
let User = class User extends tenant_base_1.TenantBase {
    afterLoad() {
        const name = this.firstName + ' ' + this.lastName;
        this.name = name;
        this.employeeId = this.employee ? this.employee.id : null;
    }
};
tslib_1.__decorate([
    typeorm_1.ManyToMany(() => tag_entity_1.Tag),
    typeorm_1.JoinTable({
        name: 'tag_user'
    }),
    tslib_1.__metadata("design:type", Array)
], User.prototype, "tags", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], User.prototype, "thirdPartyId", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], User.prototype, "firstName", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Index(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], User.prototype, "lastName", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, minLength: 3, maxLength: 100 }),
    class_validator_1.IsEmail(),
    class_validator_1.IsNotEmpty(),
    typeorm_1.Index({ unique: true }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], User.prototype, "email", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String, minLength: 3, maxLength: 20 }),
    class_validator_1.IsAscii(),
    class_validator_1.MinLength(3),
    class_validator_1.MaxLength(20),
    typeorm_1.Index({ unique: true }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], User.prototype, "username", void 0);
tslib_1.__decorate([
    typeorm_1.OneToOne('Employee', (employee) => employee.user),
    tslib_1.__metadata("design:type", typeof (_a = typeof models_1.IEmployee !== "undefined" && models_1.IEmployee) === "function" ? _a : Object)
], User.prototype, "employee", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: role_entity_1.Role }),
    typeorm_1.ManyToOne(() => role_entity_1.Role, { nullable: true, onDelete: 'CASCADE' }),
    typeorm_1.JoinColumn(),
    tslib_1.__metadata("design:type", typeof (_b = typeof models_1.IRole !== "undefined" && models_1.IRole) === "function" ? _b : Object)
], User.prototype, "role", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String, readOnly: true }),
    typeorm_1.RelationId((user) => user.role),
    tslib_1.__metadata("design:type", String)
], User.prototype, "roleId", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String }),
    class_validator_1.IsString(),
    typeorm_1.Column(),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], User.prototype, "hash", void 0);
tslib_1.__decorate([
    swagger_1.ApiPropertyOptional({ type: String, maxLength: 500 }),
    class_validator_1.IsOptional(),
    typeorm_1.Column({ length: 500, nullable: true }),
    tslib_1.__metadata("design:type", String)
], User.prototype, "imageUrl", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.LanguagesEnum }),
    class_validator_1.IsEnum(models_1.LanguagesEnum),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], User.prototype, "preferredLanguage", void 0);
tslib_1.__decorate([
    swagger_1.ApiProperty({ type: String, enum: models_1.ComponentLayoutStyleEnum }),
    class_validator_1.IsEnum(models_1.ComponentLayoutStyleEnum),
    typeorm_1.Column({ nullable: true }),
    tslib_1.__metadata("design:type", String)
], User.prototype, "preferredComponentLayout", void 0);
tslib_1.__decorate([
    typeorm_1.AfterLoad(),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], User.prototype, "afterLoad", null);
User = tslib_1.__decorate([
    typeorm_1.Entity('user')
], User);
exports.User = User;


/***/ }),

/***/ "./src/app/user/user.module.ts":
/*!*************************************!*\
  !*** ./src/app/user/user.module.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.UserModule = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const cqrs_1 = __webpack_require__(/*! @nestjs/cqrs */ "@nestjs/cqrs");
const handlers_1 = __webpack_require__(/*! ./commands/handlers */ "./src/app/user/commands/handlers/index.ts");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const user_entity_1 = __webpack_require__(/*! ./user.entity */ "./src/app/user/user.entity.ts");
const user_service_1 = __webpack_require__(/*! ./user.service */ "./src/app/user/user.service.ts");
const user_controller_1 = __webpack_require__(/*! ./user.controller */ "./src/app/user/user.controller.ts");
const shared_1 = __webpack_require__(/*! ../shared */ "./src/app/shared/index.ts");
const tenant_module_1 = __webpack_require__(/*! ../tenant/tenant.module */ "./src/app/tenant/tenant.module.ts");
let UserModule = class UserModule {
};
UserModule = tslib_1.__decorate([
    common_1.Module({
        imports: [
            common_1.forwardRef(() => typeorm_1.TypeOrmModule.forFeature([user_entity_1.User])),
            common_1.forwardRef(() => tenant_module_1.TenantModule),
            shared_1.SharedModule,
            cqrs_1.CqrsModule
        ],
        controllers: [user_controller_1.UserController],
        providers: [user_service_1.UserService, ...handlers_1.CommandHandlers],
        exports: [typeorm_1.TypeOrmModule, user_service_1.UserService]
    })
], UserModule);
exports.UserModule = UserModule;


/***/ }),

/***/ "./src/app/user/user.seed.ts":
/*!***********************************!*\
  !*** ./src/app/user/user.seed.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.createRandomUsers = exports.createDefaultUsers = exports.createRandomSuperAdminUsers = exports.createDefaultSuperAdminUsers = void 0;
const bcrypt = __webpack_require__(/*! bcryptjs */ "bcryptjs");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const faker = __webpack_require__(/*! faker */ "faker");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const user_entity_1 = __webpack_require__(/*! ./user.entity */ "./src/app/user/user.entity.ts");
const core_1 = __webpack_require__(/*! ../core */ "./src/app/core/index.ts");
const default_employees_1 = __webpack_require__(/*! ../employee/default-employees */ "./src/app/employee/default-employees.ts");
const default_candidates_1 = __webpack_require__(/*! ../candidate/default-candidates */ "./src/app/candidate/default-candidates.ts");
const default_users_1 = __webpack_require__(/*! ./default-users */ "./src/app/user/default-users.ts");
exports.createDefaultSuperAdminUsers = async (connection, roles, tenant) => {
    const superAdmins = [];
    const superAdminRole = roles.find((role) => role.name === models_1.RolesEnum.SUPER_ADMIN);
    for (const superAdmin of default_users_1.DEFAULT_SUPER_ADMINS) {
        const superAdminUser = await generateDefaultUser(superAdmin, superAdminRole, tenant);
        superAdmins.push(superAdminUser);
    }
    return await insertUsers(connection, superAdmins);
};
exports.createRandomSuperAdminUsers = async (connection, roles, tenants, noOfSuperAdmins = 1) => {
    const superAdminRole = roles.find((role) => role.name === models_1.RolesEnum.SUPER_ADMIN);
    const tenantSuperAdminsMap = new Map();
    const superAdmins = [];
    for (const tenant of tenants) {
        const tenantSuperAdmins = [];
        for (let i = 0; i < noOfSuperAdmins; i++) {
            const superAdminUser = await generateRandomUser(superAdminRole, tenant);
            tenantSuperAdmins.push(superAdminUser);
            superAdmins.push(superAdminUser);
        }
        tenantSuperAdminsMap.set(tenant, tenantSuperAdmins);
    }
    await insertUsers(connection, superAdmins);
    return tenantSuperAdminsMap;
};
exports.createDefaultUsers = async (connection, roles, tenant) => {
    const _adminUsers = seedAdminUsers(roles, tenant);
    const _defaultEmployeeUsers = seedDefaultEmployeeUsers(roles, tenant);
    const _defaultCandidateUsers = seedDefaultCandidateUsers(roles, tenant);
    const [adminUsers, defaultEmployeeUsers, defaultCandidateUsers] = await Promise.all([
        _adminUsers,
        _defaultEmployeeUsers,
        _defaultCandidateUsers
    ]);
    await insertUsers(connection, [
        ...adminUsers,
        ...defaultEmployeeUsers,
        ...defaultCandidateUsers
    ]);
    return {
        adminUsers,
        defaultEmployeeUsers,
        defaultCandidateUsers
    };
};
exports.createRandomUsers = async (connection, roles, tenants, organizationPerTenant, employeesPerOrganization, candidatesPerOrganization, managersPerOrganization, dataEntriesPerOrganization, viewerPerOrganization) => {
    const randomTenantUsers = new Map();
    for (const tenant of tenants) {
        const _adminUsers = seedRandomUsers(models_1.RolesEnum.ADMIN, roles, tenant, organizationPerTenant);
        const _employeeUsers = seedRandomUsers(models_1.RolesEnum.EMPLOYEE, roles, tenant, employeesPerOrganization * organizationPerTenant);
        const _candidateUsers = seedRandomUsers(models_1.RolesEnum.CANDIDATE, roles, tenant, candidatesPerOrganization * organizationPerTenant);
        const _managerUsers = seedRandomUsers(models_1.RolesEnum.MANAGER, roles, tenant, managersPerOrganization * organizationPerTenant);
        const _dataEntryUsers = seedRandomUsers(models_1.RolesEnum.DATA_ENTRY, roles, tenant, dataEntriesPerOrganization * organizationPerTenant);
        const _viewerUsers = seedRandomUsers(models_1.RolesEnum.VIEWER, roles, tenant, viewerPerOrganization * organizationPerTenant);
        const [promiseAdminUsers, promiseEmployeeUsers, promiseCandidateUsers, promiseManagerUsers, promiseDataEntryUsers, promiseViewerUsers] = await Promise.all([
            _adminUsers,
            _employeeUsers,
            _candidateUsers,
            _managerUsers,
            _dataEntryUsers,
            _viewerUsers
        ]);
        const adminUsers = await insertUsers(connection, [
            ...promiseAdminUsers
        ]);
        const employeeUsers = await insertUsers(connection, [
            ...promiseEmployeeUsers
        ]);
        const candidateUsers = await insertUsers(connection, [
            ...promiseCandidateUsers
        ]);
        await insertUsers(connection, [
            ...promiseManagerUsers,
            ...promiseDataEntryUsers,
            ...promiseViewerUsers
        ]);
        randomTenantUsers.set(tenant, {
            adminUsers,
            employeeUsers,
            candidateUsers
        });
    }
    return randomTenantUsers;
};
const seedAdminUsers = async (roles, tenant) => {
    const adminRole = roles.find((role) => role.name === models_1.RolesEnum.ADMIN);
    const admins = [];
    let adminUser;
    for (const admin of default_users_1.DEFAULT_ADMINS) {
        adminUser = generateDefaultUser(admin, adminRole, tenant);
        admins.push(adminUser);
    }
    return Promise.all(admins);
};
const seedDefaultEmployeeUsers = async (roles, tenant) => {
    const employeeRole = roles.find((role) => role.name === models_1.RolesEnum.EMPLOYEE);
    const defaultEmployees = default_employees_1.DEFAULT_EMPLOYEES;
    const defaultUsers = [];
    let user;
    for (const employee of defaultEmployees) {
        user = generateDefaultUser(employee, employeeRole, tenant);
        defaultUsers.push(user);
    }
    return Promise.all(defaultUsers);
};
const seedRandomUsers = async (roleEnum, roles, tenant, maxUserCount) => {
    const role = roles.find(({ name }) => name === roleEnum);
    const randomUsers = [];
    let user;
    for (let i = 0; i < maxUserCount; i++) {
        user = generateRandomUser(role, tenant);
        randomUsers.push(user);
    }
    return Promise.all(randomUsers);
};
const seedDefaultCandidateUsers = async (roles, tenant) => {
    const candidateRole = roles.find((role) => role.name === models_1.RolesEnum.CANDIDATE);
    const defaultCandidates = default_candidates_1.DEFAULT_CANDIDATES;
    const defaultCandidateUsers = [];
    let user;
    for (const candidate of defaultCandidates) {
        user = generateDefaultUser(candidate, candidateRole, tenant);
        defaultCandidateUsers.push(user);
    }
    return Promise.all(defaultCandidateUsers);
};
const generateDefaultUser = async (defaultUser, role, tenant) => {
    const user = new user_entity_1.User();
    const { firstName, lastName, email, imageUrl, preferredLanguage } = defaultUser;
    user.email = email;
    user.firstName = firstName;
    user.lastName = lastName;
    user.role = role;
    user.imageUrl = core_1.getUserDummyImage(user);
    user.imageUrl = imageUrl;
    user.tenant = tenant;
    user.preferredLanguage = preferredLanguage;
    user.hash = await bcrypt.hash(defaultUser.password, environment_1.environment.USER_PASSWORD_BCRYPT_SALT_ROUNDS);
    return user;
};
const generateRandomUser = async (role, tenant) => {
    const gender = faker.random.number(1);
    const firstName = faker.name.firstName(gender);
    const lastName = faker.name.lastName(gender);
    const username = faker.internet.userName(firstName, lastName);
    const email = faker.internet.email(firstName, lastName);
    const avatar = faker.image.avatar();
    const user = new user_entity_1.User();
    user.firstName = firstName;
    user.lastName = lastName;
    user.username = username;
    user.email = email;
    user.role = role;
    user.imageUrl = avatar;
    user.tenant = tenant;
    const languages = Object.values(models_1.LanguagesEnum);
    user.preferredLanguage =
        languages[Math.floor(Math.random() * languages.length)];
    user.hash = await bcrypt.hash('123456', environment_1.environment.USER_PASSWORD_BCRYPT_SALT_ROUNDS);
    return user;
};
const insertUsers = async (connection, users) => {
    return await connection.manager.save(users);
};


/***/ }),

/***/ "./src/app/user/user.service.ts":
/*!**************************************!*\
  !*** ./src/app/user/user.service.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserService = void 0;
const tslib_1 = __webpack_require__(/*! tslib */ "tslib");
const common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");
const typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");
const typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");
const user_entity_1 = __webpack_require__(/*! ./user.entity */ "./src/app/user/user.entity.ts");
const crud_service_1 = __webpack_require__(/*! ../core/crud/crud.service */ "./src/app/core/crud/crud.service.ts");
let UserService = class UserService extends crud_service_1.CrudService {
    constructor(userRepository) {
        super(userRepository);
    }
    async getUserByEmail(email) {
        const user = await this.repository
            .createQueryBuilder('user')
            .where('user.email = :email', { email })
            .getOne();
        return user;
    }
    async getUserIdByEmail(email) {
        const user = await this.getUserByEmail(email);
        const userId = user.id;
        return userId;
    }
    async checkIfExistsEmail(email) {
        const count = await this.repository
            .createQueryBuilder('user')
            .where('user.email = :email', { email })
            .getCount();
        return count > 0;
    }
    async checkIfExists(id) {
        const count = await this.repository
            .createQueryBuilder('user')
            .where('user.id = :id', { id })
            .getCount();
        return count > 0;
    }
    async checkIfExistsThirdParty(thirdPartyId) {
        const count = await this.repository
            .createQueryBuilder('user')
            .where('user.thirdPartyId = :thirdPartyId', { thirdPartyId })
            .getCount();
        return count > 0;
    }
    async getIfExists(id) {
        return await this.repository
            .createQueryBuilder('user')
            .where('user.id = :id', { id })
            .getOne();
    }
    async getIfExistsThirdParty(thirdPartyId) {
        return await this.repository
            .createQueryBuilder('user')
            .where('user.thirdPartyId = :thirdPartyId', { thirdPartyId })
            .getOne();
    }
    async createOne(user) {
        return await this.repository.insert(user);
    }
    async changePassword(id, hash) {
        const user = await this.findOne(id);
        user.hash = hash;
        return await this.repository.save(user);
    }
    async updateProfile(id, partialEntity, ...options) {
        try {
            const user = await this.findOne(id);
            if (!user) {
                throw new common_1.NotFoundException(`The user was not found`);
            }
            if (partialEntity['hash']) {
                const hashPassword = await this.getPasswordHash(partialEntity['hash']);
                partialEntity['hash'] = hashPassword;
            }
            return await this.repository.save(partialEntity);
        }
        catch (err) {
            throw new common_1.NotFoundException(`The record was not found`, err);
        }
    }
};
UserService = tslib_1.__decorate([
    common_1.Injectable(),
    tslib_1.__param(0, typeorm_1.InjectRepository(user_entity_1.User)),
    tslib_1.__metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], UserService);
exports.UserService = UserService;


/***/ }),

/***/ "./src/environments/environment.ts":
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.gauzyToggleFeatures = exports.environment = void 0;
__webpack_require__(/*! dotenv */ "dotenv").config();
const path = __webpack_require__(/*! path */ "path");
const models_1 = __webpack_require__(/*! @gauzy/models */ "./libs/models/src/index.ts");
const dbType = process.env.DB_TYPE && process.env.DB_TYPE === 'postgres'
    ? 'postgres'
    : 'sqlite';
let databaseConfig;
if (process.env.IS_ELECTRON && process.env.GAUZY_USER_PATH) {
    __webpack_require__(/*! app-root-path */ "app-root-path").setPath(process.env.GAUZY_USER_PATH);
}
switch (dbType) {
    case 'postgres':
        databaseConfig = {
            type: dbType,
            host: process.env.DB_HOST || 'localhost',
            port: process.env.DB_PORT
                ? parseInt(process.env.DB_PORT, 10)
                : 5432,
            database: process.env.DB_NAME || 'postgres',
            username: process.env.DB_USER || 'postgres',
            password: process.env.DB_PASS || 'root',
            keepConnectionAlive: true,
            logging: true,
            logger: 'file',
            synchronize: true,
            uuidExtension: 'pgcrypto'
        };
        break;
    case 'sqlite':
        databaseConfig = {
            type: dbType,
            database: process.env.DB_PATH ||
                path.join(path.resolve('.', ...['apps', 'api', 'data']), 'gauzy.sqlite3'),
            keepConnectionAlive: true,
            logging: true,
            logger: 'file',
            synchronize: true
        };
        break;
}
console.log(`DB Config: ${JSON.stringify(databaseConfig)}`);
exports.environment = {
    port: process.env.port || 3000,
    host: process.env.host || 'http://localhost',
    baseUrl: process.env.BASE_URL || 'http://localhost:3000',
    production: false,
    envName: 'dev',
    env: {
        LOG_LEVEL: 'debug'
    },
    EXPRESS_SESSION_SECRET: 'gauzy',
    USER_PASSWORD_BCRYPT_SALT_ROUNDS: 12,
    JWT_SECRET: 'secretKey',
    fileSystem: {
        name: process.env.FILE_PROVIDER ||
            models_1.FileStorageProviderEnum.LOCAL
    },
    awsConfig: {
        accessKeyId: process.env.AWS_ACCESS_KEY_ID,
        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
        region: process.env.AWS_REGION,
        s3: {
            bucket: process.env.AWS_S3_BUCKET
        }
    },
    database: databaseConfig,
    facebookConfig: {
        loginDialogUri: 'https://www.facebook.com/v2.12/dialog/oauth',
        accessTokenUri: 'https://graph.facebook.com/v2.12/oauth/access_token',
        clientId: process.env.FacebookClientId,
        clientSecret: process.env.FacebookClientSecret,
        oauthRedirectUri: `${process.env.host}:${process.env.port}/api/auth/facebook/callback`,
        state: '{fbstate}'
    },
    googleConfig: {
        clientId: process.env.GoogleClientId,
        clientSecret: process.env.GoogleClientSecret
    },
    githubConfig: {
        clientId: process.env.GithubClientId,
        clientSecret: process.env.GithubClientSecret
    },
    microsoftConfig: {
        clientId: process.env.MicrosoftClientId,
        clientSecret: process.env.MicrosoftConfig,
        resource: process.env.MicrosoftResource,
        tenant: process.env.MicrosoftTenant
    },
    linkedinConfig: {
        clientId: process.env.LinkedinClientId,
        clientSecret: process.env.LinkedinClientSecret
    },
    twitterConfig: {
        clientId: process.env.TwitterClientId,
        clientSecret: process.env.TwitterClientSecret
    },
    fiverrConfig: {
        clientId: process.env.FiverrClientId,
        clientSecret: process.env.FiverrClientSecret
    },
    keycloakConfig: {
        realm: process.env.KeycloakRealm,
        clientId: process.env.KeycloakClientId,
        secret: process.env.KeycloakSecret,
        authServerUrl: process.env.KeycloakAuthServerURL,
        cookieKey: process.env.KeycloakCookieKey
    },
    auth0Config: {
        clientID: process.env.Auth0ClientId,
        clientSecret: process.env.Auth0ClientSecret,
        domain: process.env.Auth0Domanin
    },
    sentry: {
        dns: process.env.SENTRY_DSN
    },
    defaultHubstaffUserPass: process.env.INTEGRATED_HUBSTAFF_USER_PASS || 'hubstaff',
    upworkConfig: {
        callbackUrl: process.env.UPWORK_CALLBACK_URL ||
            'http://localhost:4200/#/pages/integrations/upwork'
    },
    isElectron: process.env.IS_ELECTRON === 'true' ? true : false,
    gauzyUserPath: process.env.GAUZY_USER_PATH,
    allowSuperAdminRole: process.env.AllowSuperAdminRole === 'false' ? false : true,
    gauzyAIGraphQLEndpoint: process.env.GAUZY_AI_GRAPHQL_ENDPOINT,
    smtpConfig: {
        host: process.env.MAIL_HOST,
        port: parseInt(process.env.MAIL_PORT, 10),
        secure: process.env.MAIL_PORT === '465' ? true : false,
        auth: {
            user: process.env.MAIL_USERNAME,
            pass: process.env.MAIL_PASSWORD
        },
        from: process.env.MAIL_FROM_ADDRESS
    },
    defaultCurrency: process.env.DEFAULT_CURRENCY || 'USD',
    unleashConfig: {
        url: process.env.UNLEASH_API_URL,
        appName: process.env.UNLEASH_APP_NAME,
        environment: 'development',
        instanceId: process.env.UNLEASH_INSTANCE_ID,
        refreshInterval: parseInt(process.env.UNLEASH_REFRESH_INTERVAL) || 1000,
        metricsInterval: parseInt(process.env.UNLEASH_METRICS_INTERVAL) || 1000
    }
};
exports.gauzyToggleFeatures = {
    FEATURE_DASHBOARD: process.env.FEATURE_DASHBOARD === 'false' ? false : true,
    FEATURE_TIME_TRACKING: process.env.FEATURE_TIME_TRACKING === 'false' ? false : true,
    FEATURE_ESTIMATE: process.env.FEATURE_ESTIMATE === 'false' ? false : true,
    FEATURE_ESTIMATE_RECEIVED: process.env.FEATURE_ESTIMATE_RECEIVED === 'false' ? false : true,
    FEATURE_INVOICE: process.env.FEATURE_INVOICE === 'false' ? false : true,
    FEATURE_INVOICE_RECURRING: process.env.FEATURE_INVOICE_RECURRING === 'false' ? false : true,
    FEATURE_INVOICE_RECEIVED: process.env.FEATURE_INVOICE_RECEIVED === 'false' ? false : true,
    FEATURE_INCOME: process.env.FEATURE_INCOME === 'false' ? false : true,
    FEATURE_EXPENSE: process.env.FEATURE_EXPENSE === 'false' ? false : true,
    FEATURE_PAYMENT: process.env.FEATURE_PAYMENT === 'false' ? false : true,
    FEATURE_PROPOSAL: process.env.FEATURE_PROPOSAL === 'false' ? false : true,
    FEATURE_PROPOSAL_TEMPLATE: process.env.FEATURE_PROPOSAL_TEMPLATE === 'false' ? false : true,
    FEATURE_PIPELINE: process.env.FEATURE_PIPELINE === 'false' ? false : true,
    FEATURE_PIPELINE_DEAL: process.env.FEATURE_PIPELINE_DEAL === 'false' ? false : true,
    FEATURE_DASHBOARD_TASK: process.env.FEATURE_DASHBOARD_TASK === 'false' ? false : true,
    FEATURE_TEAM_TASK: process.env.FEATURE_TEAM_TASK === 'false' ? false : true,
    FEATURE_MY_TASK: process.env.FEATURE_MY_TASK === 'false' ? false : true,
    FEATURE_JOB: process.env.FEATURE_JOB === 'false' ? false : true,
    FEATURE_EMPLOYEES: process.env.FEATURE_EMPLOYEES === 'false' ? false : true,
    FEATURE_EMPLOYEE_TIME_ACTIVITY: process.env.FEATURE_EMPLOYEE_TIME_ACTIVITY === 'false' ? false : true,
    FEATURE_EMPLOYEE_TIMESHEETS: process.env.FEATURE_EMPLOYEE_TIMESHEETS === 'false' ? false : true,
    FEATURE_EMPLOYEE_APPOINTMENT: process.env.FEATURE_EMPLOYEE_APPOINTMENT === 'false' ? false : true,
    FEATURE_EMPLOYEE_APPROVAL: process.env.FEATURE_EMPLOYEE_APPROVAL === 'false' ? false : true,
    FEATURE_EMPLOYEE_APPROVAL_POLICY: process.env.FEATURE_EMPLOYEE_APPROVAL_POLICY === 'false' ? false : true,
    FEATURE_EMPLOYEE_LEVEL: process.env.FEATURE_EMPLOYEE_LEVEL === 'false' ? false : true,
    FEATURE_EMPLOYEE_POSITION: process.env.FEATURE_EMPLOYEE_POSITION === 'false' ? false : true,
    FEATURE_EMPLOYEE_TIMEOFF: process.env.FEATURE_EMPLOYEE_TIMEOFF === 'false' ? false : true,
    FEATURE_EMPLOYEE_RECURRING_EXPENSE: process.env.FEATURE_EMPLOYEE_RECURRING_EXPENSE === 'false'
        ? false
        : true,
    FEATURE_EMPLOYEE_CANDIDATE: process.env.FEATURE_EMPLOYEE_CANDIDATE === 'false' ? false : true,
    FEATURE_MANAGE_INTERVIEW: process.env.FEATURE_MANAGE_INTERVIEW === 'false' ? false : true,
    FEATURE_MANAGE_INVITE: process.env.FEATURE_MANAGE_INVITE === 'false' ? false : true,
    FEATURE_ORGANIZATION: process.env.FEATURE_ORGANIZATION === 'false' ? false : true,
    FEATURE_ORGANIZATION_EQUIPMENT: process.env.FEATURE_ORGANIZATION_EQUIPMENT === 'false' ? false : true,
    FEATURE_ORGANIZATION_INVENTORY: process.env.FEATURE_ORGANIZATION_INVENTORY === 'false' ? false : true,
    FEATURE_ORGANIZATION_TAG: process.env.FEATURE_ORGANIZATION_TAG === 'false' ? false : true,
    FEATURE_ORGANIZATION_VENDOR: process.env.FEATURE_ORGANIZATION_VENDOR === 'false' ? false : true,
    FEATURE_ORGANIZATION_PROJECT: process.env.FEATURE_ORGANIZATION_PROJECT === 'false' ? false : true,
    FEATURE_ORGANIZATION_DEPARTMENT: process.env.FEATURE_ORGANIZATION_DEPARTMENT === 'false' ? false : true,
    FEATURE_ORGANIZATION_TEAM: process.env.FEATURE_ORGANIZATION_TEAM === 'false' ? false : true,
    FEATURE_ORGANIZATION_DOCUMENT: process.env.FEATURE_ORGANIZATION_DOCUMENT === 'false' ? false : true,
    FEATURE_ORGANIZATION_EMPLOYMENT_TYPE: process.env.FEATURE_ORGANIZATION_EMPLOYMENT_TYPE === 'false'
        ? false
        : true,
    FEATURE_ORGANIZATION_RECURRING_EXPENSE: process.env.FEATURE_ORGANIZATION_RECURRING_EXPENSE === 'false'
        ? false
        : true,
    FEATURE_ORGANIZATION_HELP_CENTER: process.env.FEATURE_ORGANIZATION_HELP_CENTER === 'false' ? false : true,
    FEATURE_CONTACT: process.env.FEATURE_CONTACT === 'false' ? false : true,
    FEATURE_GOAL: process.env.FEATURE_GOAL === 'false' ? false : true,
    FEATURE_GOAL_REPORT: process.env.FEATURE_GOAL_REPORT === 'false' ? false : true,
    FEATURE_GOAL_SETTING: process.env.FEATURE_GOAL_SETTING === 'false' ? false : true,
    FEATURE_REPORT: process.env.FEATURE_REPORT === 'false' ? false : true,
    FEATURE_USER: process.env.FEATURE_USER === 'false' ? false : true,
    FEATURE_ORGANIZATIONS: process.env.FEATURE_ORGANIZATIONS === 'false' ? false : true,
    FEATURE_APP_INTEGRATION: process.env.FEATURE_APP_INTEGRATION === 'false' ? false : true,
    FEATURE_SETTING: process.env.FEATURE_SETTING === 'false' ? false : true,
    FEATURE_EMAIL_HISTORY: process.env.FEATURE_EMAIL_HISTORY === 'false' ? false : true,
    FEATURE_EMAIL_TEMPLATE: process.env.FEATURE_EMAIL_TEMPLATE === 'false' ? false : true,
    FEATURE_IMPORT_EXPORT: process.env.FEATURE_IMPORT_EXPORT === 'false' ? false : true,
    FEATURE_FILE_STORAGE: process.env.FEATURE_FILE_STORAGE === 'false' ? false : true,
    FEATURE_PAYMENT_GATEWAY: process.env.FEATURE_PAYMENT_GATEWAY === 'false' ? false : true,
    FEATURE_SMS_GATEWAY: process.env.FEATURE_SMS_GATEWAY === 'false' ? false : true,
    FEATURE_SMTP: process.env.FEATURE_SMTP === 'false' ? false : true,
    FEATURE_ROLES_PERMISSION: process.env.FEATURE_ROLES_PERMISSION === 'false' ? false : true
};


/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const helmet = __webpack_require__(/*! helmet */ "helmet");
const core_1 = __webpack_require__(/*! @nestjs/core */ "@nestjs/core");
const app_module_1 = __webpack_require__(/*! ./app/app.module */ "./src/app/app.module.ts");
const swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");
const nestjs_sentry_1 = __webpack_require__(/*! @ntegral/nestjs-sentry */ "@ntegral/nestjs-sentry");
const expressSession = __webpack_require__(/*! express-session */ "express-session");
const environment_1 = __webpack_require__(/*! @env-api/environment */ "./src/environments/environment.ts");
const app_service_1 = __webpack_require__(/*! ./app/app.service */ "./src/app/app.service.ts");
async function bootstrap() {
    const app = await core_1.NestFactory.create(app_module_1.AppModule, {
        logger: ['error', 'warn']
    });
    app.useLogger(app.get(nestjs_sentry_1.SentryService));
    app.enableCors();
    app.use(expressSession({
        secret: environment_1.environment.EXPRESS_SESSION_SECRET,
        resave: true,
        saveUninitialized: true
    }));
    app.use(helmet());
    const globalPrefix = 'api';
    app.setGlobalPrefix(globalPrefix);
    const service = app.select(app_module_1.AppModule).get(app_service_1.AppService);
    await service.seedDBIfEmpty();
    const options = new swagger_1.DocumentBuilder()
        .setTitle('Gauzy API')
        .setVersion('1.0')
        .addBearerAuth()
        .build();
    const document = swagger_1.SwaggerModule.createDocument(app, options);
    swagger_1.SwaggerModule.setup('swg', app, document);
    const port = process.env.port || 3000;
    await app.listen(port, () => {
        console.log('Listening at http://localhost:' + port + '/' + globalPrefix);
    });
}
bootstrap();


/***/ }),

/***/ 0:
/*!***************************!*\
  !*** multi ./src/main.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! D:\University\Courses\Project2\Solance Project\Solance API\src\main.ts */"./src/main.ts");


/***/ }),

/***/ "@angular/common/http":
/*!***************************************!*\
  !*** external "@angular/common/http" ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@angular/common/http");

/***/ }),

/***/ "@angular/core":
/*!********************************!*\
  !*** external "@angular/core" ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@angular/core");

/***/ }),

/***/ "@apollo/client/core":
/*!**************************************!*\
  !*** external "@apollo/client/core" ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@apollo/client/core");

/***/ }),

/***/ "@nestjs/common":
/*!*********************************!*\
  !*** external "@nestjs/common" ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@nestjs/common");

/***/ }),

/***/ "@nestjs/common/utils/http-error-by-code.util":
/*!***************************************************************!*\
  !*** external "@nestjs/common/utils/http-error-by-code.util" ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@nestjs/common/utils/http-error-by-code.util");

/***/ }),

/***/ "@nestjs/core":
/*!*******************************!*\
  !*** external "@nestjs/core" ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@nestjs/core");

/***/ }),

/***/ "@nestjs/cqrs":
/*!*******************************!*\
  !*** external "@nestjs/cqrs" ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@nestjs/cqrs");

/***/ }),

/***/ "@nestjs/passport":
/*!***********************************!*\
  !*** external "@nestjs/passport" ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@nestjs/passport");

/***/ }),

/***/ "@nestjs/platform-express":
/*!*******************************************!*\
  !*** external "@nestjs/platform-express" ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@nestjs/platform-express");

/***/ }),

/***/ "@nestjs/serve-static":
/*!***************************************!*\
  !*** external "@nestjs/serve-static" ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@nestjs/serve-static");

/***/ }),

/***/ "@nestjs/swagger":
/*!**********************************!*\
  !*** external "@nestjs/swagger" ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@nestjs/swagger");

/***/ }),

/***/ "@nestjs/typeorm":
/*!**********************************!*\
  !*** external "@nestjs/typeorm" ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@nestjs/typeorm");

/***/ }),

/***/ "@ntegral/nestjs-sentry":
/*!*****************************************!*\
  !*** external "@ntegral/nestjs-sentry" ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@ntegral/nestjs-sentry");

/***/ }),

/***/ "@sentry/node":
/*!*******************************!*\
  !*** external "@sentry/node" ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@sentry/node");

/***/ }),

/***/ "@sentry/tracing":
/*!**********************************!*\
  !*** external "@sentry/tracing" ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@sentry/tracing");

/***/ }),

/***/ "@sentry/types":
/*!********************************!*\
  !*** external "@sentry/types" ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("@sentry/types");

/***/ }),

/***/ "app-root-path":
/*!********************************!*\
  !*** external "app-root-path" ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("app-root-path");

/***/ }),

/***/ "archiver":
/*!***************************!*\
  !*** external "archiver" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("archiver");

/***/ }),

/***/ "aws-sdk":
/*!**************************!*\
  !*** external "aws-sdk" ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("aws-sdk");

/***/ }),

/***/ "bcryptjs":
/*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("bcryptjs");

/***/ }),

/***/ "chalk":
/*!************************!*\
  !*** external "chalk" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("chalk");

/***/ }),

/***/ "class-transformer":
/*!************************************!*\
  !*** external "class-transformer" ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("class-transformer");

/***/ }),

/***/ "class-validator":
/*!**********************************!*\
  !*** external "class-validator" ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("class-validator");

/***/ }),

/***/ "cls-hooked":
/*!*****************************!*\
  !*** external "cls-hooked" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("cls-hooked");

/***/ }),

/***/ "cross-fetch":
/*!******************************!*\
  !*** external "cross-fetch" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("cross-fetch");

/***/ }),

/***/ "csv-parser":
/*!*****************************!*\
  !*** external "csv-parser" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("csv-parser");

/***/ }),

/***/ "csv-writer":
/*!*****************************!*\
  !*** external "csv-writer" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("csv-writer");

/***/ }),

/***/ "date-fns":
/*!***************************!*\
  !*** external "date-fns" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("date-fns");

/***/ }),

/***/ "dotenv":
/*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("dotenv");

/***/ }),

/***/ "email-templates":
/*!**********************************!*\
  !*** external "email-templates" ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("email-templates");

/***/ }),

/***/ "express":
/*!**************************!*\
  !*** external "express" ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("express");

/***/ }),

/***/ "express-session":
/*!**********************************!*\
  !*** external "express-session" ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("express-session");

/***/ }),

/***/ "faker":
/*!************************!*\
  !*** external "faker" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("faker");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),

/***/ "fs-extra":
/*!***************************!*\
  !*** external "fs-extra" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("fs-extra");

/***/ }),

/***/ "handlebars":
/*!*****************************!*\
  !*** external "handlebars" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("handlebars");

/***/ }),

/***/ "helmet":
/*!*************************!*\
  !*** external "helmet" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("helmet");

/***/ }),

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("jsonwebtoken");

/***/ }),

/***/ "lodash":
/*!*************************!*\
  !*** external "lodash" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),

/***/ "mjml":
/*!***********************!*\
  !*** external "mjml" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("mjml");

/***/ }),

/***/ "moment":
/*!*************************!*\
  !*** external "moment" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("moment");

/***/ }),

/***/ "moment-range":
/*!*******************************!*\
  !*** external "moment-range" ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("moment-range");

/***/ }),

/***/ "moment-timezone":
/*!**********************************!*\
  !*** external "moment-timezone" ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("moment-timezone");

/***/ }),

/***/ "multer":
/*!*************************!*\
  !*** external "multer" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("multer");

/***/ }),

/***/ "multer-s3":
/*!****************************!*\
  !*** external "multer-s3" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("multer-s3");

/***/ }),

/***/ "nest-router":
/*!******************************!*\
  !*** external "nest-router" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("nest-router");

/***/ }),

/***/ "nestjs-i18n":
/*!******************************!*\
  !*** external "nestjs-i18n" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("nestjs-i18n");

/***/ }),

/***/ "nodemailer":
/*!*****************************!*\
  !*** external "nodemailer" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("nodemailer");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("os");

/***/ }),

/***/ "passport":
/*!***************************!*\
  !*** external "passport" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("passport");

/***/ }),

/***/ "passport-auth0":
/*!*********************************!*\
  !*** external "passport-auth0" ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("passport-auth0");

/***/ }),

/***/ "passport-azure-ad-oauth2":
/*!*******************************************!*\
  !*** external "passport-azure-ad-oauth2" ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("passport-azure-ad-oauth2");

/***/ }),

/***/ "passport-facebook-token":
/*!******************************************!*\
  !*** external "passport-facebook-token" ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("passport-facebook-token");

/***/ }),

/***/ "passport-github2":
/*!***********************************!*\
  !*** external "passport-github2" ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("passport-github2");

/***/ }),

/***/ "passport-google-oauth20":
/*!******************************************!*\
  !*** external "passport-google-oauth20" ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("passport-google-oauth20");

/***/ }),

/***/ "passport-jwt":
/*!*******************************!*\
  !*** external "passport-jwt" ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("passport-jwt");

/***/ }),

/***/ "passport-linkedin-oauth2":
/*!*******************************************!*\
  !*** external "passport-linkedin-oauth2" ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("passport-linkedin-oauth2");

/***/ }),

/***/ "passport-twitter":
/*!***********************************!*\
  !*** external "passport-twitter" ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("passport-twitter");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),

/***/ "request":
/*!**************************!*\
  !*** external "request" ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("request");

/***/ }),

/***/ "rimraf":
/*!*************************!*\
  !*** external "rimraf" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("rimraf");

/***/ }),

/***/ "rxjs":
/*!***********************!*\
  !*** external "rxjs" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("rxjs");

/***/ }),

/***/ "rxjs/operators":
/*!*********************************!*\
  !*** external "rxjs/operators" ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("rxjs/operators");

/***/ }),

/***/ "sharp":
/*!************************!*\
  !*** external "sharp" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("sharp");

/***/ }),

/***/ "tslib":
/*!************************!*\
  !*** external "tslib" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("tslib");

/***/ }),

/***/ "typeorm":
/*!**************************!*\
  !*** external "typeorm" ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("typeorm");

/***/ }),

/***/ "typeorm/query-builder/QueryPartialEntity":
/*!***********************************************************!*\
  !*** external "typeorm/query-builder/QueryPartialEntity" ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("typeorm/query-builder/QueryPartialEntity");

/***/ }),

/***/ "underscore":
/*!*****************************!*\
  !*** external "underscore" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("underscore");

/***/ }),

/***/ "unleash-client":
/*!*********************************!*\
  !*** external "unleash-client" ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("unleash-client");

/***/ }),

/***/ "unzipper":
/*!***************************!*\
  !*** external "unzipper" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("unzipper");

/***/ }),

/***/ "upwork-api":
/*!*****************************!*\
  !*** external "upwork-api" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("upwork-api");

/***/ }),

/***/ "upwork-api/lib/routers/auth.js":
/*!*************************************************!*\
  !*** external "upwork-api/lib/routers/auth.js" ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("upwork-api/lib/routers/auth.js");

/***/ }),

/***/ "upwork-api/lib/routers/hr/engagements.js":
/*!***********************************************************!*\
  !*** external "upwork-api/lib/routers/hr/engagements.js" ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("upwork-api/lib/routers/hr/engagements.js");

/***/ }),

/***/ "upwork-api/lib/routers/hr/freelancers/applications.js":
/*!************************************************************************!*\
  !*** external "upwork-api/lib/routers/hr/freelancers/applications.js" ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("upwork-api/lib/routers/hr/freelancers/applications.js");

/***/ }),

/***/ "upwork-api/lib/routers/hr/freelancers/offers.js":
/*!******************************************************************!*\
  !*** external "upwork-api/lib/routers/hr/freelancers/offers.js" ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("upwork-api/lib/routers/hr/freelancers/offers.js");

/***/ }),

/***/ "upwork-api/lib/routers/jobs/profile.js":
/*!*********************************************************!*\
  !*** external "upwork-api/lib/routers/jobs/profile.js" ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("upwork-api/lib/routers/jobs/profile.js");

/***/ }),

/***/ "upwork-api/lib/routers/organization/users.js":
/*!***************************************************************!*\
  !*** external "upwork-api/lib/routers/organization/users.js" ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("upwork-api/lib/routers/organization/users.js");

/***/ }),

/***/ "upwork-api/lib/routers/reports/finance/billings.js":
/*!*********************************************************************!*\
  !*** external "upwork-api/lib/routers/reports/finance/billings.js" ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("upwork-api/lib/routers/reports/finance/billings.js");

/***/ }),

/***/ "upwork-api/lib/routers/reports/finance/earnings.js":
/*!*********************************************************************!*\
  !*** external "upwork-api/lib/routers/reports/finance/earnings.js" ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("upwork-api/lib/routers/reports/finance/earnings.js");

/***/ }),

/***/ "upwork-api/lib/routers/reports/time.js":
/*!*********************************************************!*\
  !*** external "upwork-api/lib/routers/reports/time.js" ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("upwork-api/lib/routers/reports/time.js");

/***/ }),

/***/ "upwork-api/lib/routers/snapshot.js":
/*!*****************************************************!*\
  !*** external "upwork-api/lib/routers/snapshot.js" ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("upwork-api/lib/routers/snapshot.js");

/***/ }),

/***/ "upwork-api/lib/routers/workdiary.js":
/*!******************************************************!*\
  !*** external "upwork-api/lib/routers/workdiary.js" ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("upwork-api/lib/routers/workdiary.js");

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("uuid");

/***/ })

/******/ })));
//# sourceMappingURL=main.js.map